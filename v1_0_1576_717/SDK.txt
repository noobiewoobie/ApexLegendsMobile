Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	Actor*[] LevelSequenceActors;//[Offset: 0x88, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x98, Size: 0x10]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0xa8, Size: 0x28]
	FString StreamingLevelsPrefix;//[Offset: 0xd0, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xe0, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xe8, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xf0, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xf8, Size: 0x8]
	WorldRegionManager RegionManager;//[Offset: 0x100, Size: 0x1b8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x2b8, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d6, Size: 0x1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x2d8, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x2e0, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x2e8, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x2f0, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x2f8, Size: 0x8]
	Level*[] Levels;//[Offset: 0x300, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x310, Size: 0x10]
	MaterialLodManager* MaterialLodManager;//[Offset: 0x328, Size: 0x8]
	GameInstance* OwningGameInstance;//[Offset: 0x338, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x340, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x350, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x358, Size: 0x8]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x3d0, Size: 0x10]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x3e0, Size: 0x10]
	WorldComposition* WorldComposition;//[Offset: 0x760, Size: 0x8]
	WorldPSCPool PSCPool;//[Offset: 0x828, Size: 0x58]
	WorldSettings* K2_GetWorldSettings();// 0x60b78cc
	void HandleTimelineScrubbed();// 0x60b7900

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x43841ec

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8]
	Model* Model;//[Offset: 0xc0, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8]
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x248, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x258, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x278, Size: 0x10]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x578, Size: 0x8]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	PrimitiveComponent* MergeAggreDestComponent;//[Offset: 0x260, Size: 0x8]
	bool EnableScreenSizeCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	float MinDrawDistance;//[Offset: 0x26c, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x270, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x274, Size: 0x4]
	float MinScreenSize;//[Offset: 0x278, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x27c, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x27d, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x27e, Size: 0x1]
	enum LightmapType;//[Offset: 0x27f, Size: 0x1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x280, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x280, Size: 0x1]
	Texture* DitherMaskTexture;//[Offset: 0x288, Size: 0x8]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x290, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x290, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x290, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x290, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x290, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x291, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x291, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x291, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x291, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x291, Size: 0x1]
	bool bDisableTranslucentOptimization;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x291, Size: 0x1]
	bool bNotRenderInTranslucentOptimizationPass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x291, Size: 0x1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x291, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x292, Size: 0x1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x292, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x292, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x292, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x292, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x292, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x292, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x292, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x293, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x293, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x293, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x293, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x293, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x293, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x293, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x293, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x294, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x294, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x294, Size: 0x1]
	bool bEnableCSMForLowEndDevice;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x294, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x294, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x294, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x294, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x295, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x295, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x295, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x295, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x295, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x295, Size: 0x1]
	bool bUseSkySH;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x295, Size: 0x1]
	bool bKeepOutLinePass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x295, Size: 0x1]
	bool bEnemyMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x296, Size: 0x1]
	bool bHideHotZone;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x296, Size: 0x1]
	bool bOutlineMask;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x296, Size: 0x1]
	bool bVisibleMask;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x296, Size: 0x1]
	bool bDisableIOSAsyncPSO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x296, Size: 0x1]
	bool bILCSampleWorldPosition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x296, Size: 0x1]
	enum RenderPass;//[Offset: 0x297, Size: 0x1]
	ExtraRenderPassConfig ExtraRenderPassConfig;//[Offset: 0x298, Size: 0x80]
	float ILCSampleScalar;//[Offset: 0x318, Size: 0x4]
	float ILCSampleLerpSkyLightWeight;//[Offset: 0x31c, Size: 0x4]
	byte bHasCustomNavigableGeometry;//[Offset: 0x321, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x323, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x324, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x325, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x328, Size: 0x4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x330, Size: 0x10]
	Vector4 GlobalSH;//[Offset: 0x340, Size: 0x10]
	int TranslucencySortPriority;//[Offset: 0x350, Size: 0x4]
	int VisibilityId;//[Offset: 0x354, Size: 0x4]
	int ReflectionCaptureIndex;//[Offset: 0x358, Size: 0x4]
	FString ReflectionCaptureName;//[Offset: 0x360, Size: 0x10]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x370, Size: 0x10]
	int VirtualTextureLodBias;//[Offset: 0x380, Size: 0x4]
	int VirtualTextureCullMips;//[Offset: 0x384, Size: 0x4]
	int VirtualTextureMinCoverage;//[Offset: 0x388, Size: 0x4]
	enum VirtualTextureRenderPassType;//[Offset: 0x38c, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x394, Size: 0x4]
	bool bSkipOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	float BoundsScale;//[Offset: 0x3a4, Size: 0x4]
	float OCBoundsScale;//[Offset: 0x3a8, Size: 0x4]
	int OCBoundsExtent;//[Offset: 0x3ac, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x3c0, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x3d0, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x3f0, Size: 0x110]
	delegate OnComponentHit;//[Offset: 0x500, Size: 0x1]
	delegate OnComponentBeginOverlap;//[Offset: 0x520, Size: 0x1]
	delegate OnComponentEndOverlap;//[Offset: 0x521, Size: 0x1]
	delegate OnComponentWake;//[Offset: 0x522, Size: 0x1]
	delegate OnComponentSleep;//[Offset: 0x523, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x525, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x526, Size: 0x1]
	delegate OnClicked;//[Offset: 0x527, Size: 0x1]
	delegate OnReleased;//[Offset: 0x528, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x529, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x52a, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x52b, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x52c, Size: 0x1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x548, Size: 0x8]
	SceneComponent* ClusterParentPrimitive;//[Offset: 0x550, Size: 0x8]
	byte PhysicalMode;//[Offset: 0x558, Size: 0x1]
	byte PhysicalSurface;//[Offset: 0x559, Size: 0x1]
	void WakeRigidBody(FName BoneName);// 0x604d59c
	void WakeAllRigidBodies();// 0x604b730
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x604f39c
	void SetVisibleMask(bool bInVisibleMask);// 0x604bd74
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x604af74
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x604d208
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x604d284
	void SetSimulatePhysics(bool bSimulate);// 0x604f310
	void SetRenderPass(enum NewRenderPass);// 0x604fdc8
	void SetRenderInMainPass(bool bValue);// 0x604bc74
	void SetRenderCustomDepth(bool bValue);// 0x604c084
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x604d184
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x604acd8
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x604d930
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x604da48
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x604db70
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x604e254
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x604ddd0
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x604dc98
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x604def0
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x604d410
	void SetOutlineMask(bool bInOutlineMask);// 0x604bdf8
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x604d38c
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x604d494
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x604f7d4
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x604f898
	void SetMassScale(FName BoneName, float InMassScale);// 0x604b41c
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x604b1f8
	void SetLinearDamping(float InDamping);// 0x604b5e0
	void SetKeepOutLinePass(bool bInKeepOutLinePass);// 0x604bf84
	void SetILCSampleScalar(float F);// 0x604d084
	void SetILCSampleLerpSkyLightWeight(float F);// 0x604d008
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x6050490
	void SetExtraRenderPassConfig(out const ExtraRenderPassConfig Config);// 0x604f97c
	void SetEnemyMask(bool bInEnemyMask);// 0x604bf00
	void SetEnableScreenSizeCull(const bool bEnableScreenCull);// 0x604ac54
	void SetEnableGravity(bool bGravityEnabled);// 0x604b6a4
	void SetDitherMaskTexture(Texture* NewDitherMaskTexture);// 0x6050414
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x604fe44
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x604ff08
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x604ffc4
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x605007c
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x604bcf8
	void SetCustomDepthStencilValue(int Value);// 0x604c008
	void SetCullDistance(float NewCullDistance);// 0x604abd8
	void SetConstraintMode(byte ConstraintMode);// 0x604f28c
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x604ade0
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x604ad5c
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x604cf00
	void SetCollisionObjectType(byte Channel);// 0x604ce48
	void SetCollisionEnabled(byte NewType);// 0x604cf84
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x604d620
	void SetCastShadow(bool NewCastShadow);// 0x604d308
	void SetCanUseSkylightSH(bool bNewUseSkylightSH);// 0x604d100
	void SetBoundsScale(float NewBoundsScale);// 0x604fac4
	void SetAngularDamping(float InDamping);// 0x604b520
	void SetAllUseCCD(bool InUseCCD);// 0x604aee8
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x604e028
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x604b74c
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x604b82c
	void SetAllMassScale(float InMassScale);// 0x604b30c
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x604b050
	void PutRigidBodyToSleep(FName BoneName);// 0x604d520
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x604c7a4
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x604c108
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x604cb18
	bool K2_IsQueryCollisionEnabled();// 0x604ba44
	bool K2_IsPhysicsCollisionEnabled();// 0x604b9fc
	bool K2_IsCollisionEnabled();// 0x604ba8c
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x604c43c
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x604fd40
	bool IsOverlappingActor(const Actor* Other);// 0x604fcb8
	bool IsGravityEnabled();// 0x604b664
	bool IsAnyRigidBodyAwake();// 0x604aea8
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x60501ec
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x605034c
	void HideHotZone(bool bInHideHotZone);// 0x604be7c
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x604f43c
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x604e0f8
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x604e1cc
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x604d768
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x604d7f0
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x604d890
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x604fb40
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x604fbd8
	int GetNumMaterials();// 0x604bc38
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x604f474
	MaterialInterface* GetMaterial(int ElementIndex);// 0x604fa38
	float GetMassScale(FName BoneName);// 0x604b390
	float GetMass();// 0x604b1bc
	float GetLinearDamping();// 0x604b5a4
	Vector GetInertiaTensor(FName BoneName);// 0x604b12c
	bool GetGenerateOverlapEvents();// 0x6050514
	byte GetCollisionResponseToChannel(byte Channel);// 0x604b970
	FName GetCollisionProfileName();// 0x604cecc
	byte GetCollisionObjectType();// 0x604b934
	byte GetCollisionEnabled();// 0x604bad0
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x604bb0c
	Vector GetCenterOfMass(FName BoneName);// 0x604d6e0
	float GetAngularDamping();// 0x604b4e4
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x604f558
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x604f670
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x604f748
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x6050168
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x60502c8
	void ClearMoveIgnoreComponents();// 0x605013c
	void ClearMoveIgnoreActors();// 0x60502b4
	void ClearExtraRenderPassConfig();// 0x604f960
	bool CanCharacterStepUp(Pawn* Pawn);// 0x604ab48
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x604e4a0
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x604e374
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x604e5b4
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x604eb84
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x604e6c8
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x604ed1c
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x604f178
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x604e860
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x604e968
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x604ea70
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x604ef50
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x604ee24
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x604f064

--------------------------------
Class: SceneComponent.ActorComponent.Object
	bool bApplyParentSeparateFov;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool bSeparateFov;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	float DitherFactor;//[Offset: 0xf4, Size: 0x4]
	bool UseParentDitherFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1]
	bool bUIFov;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	bool bSkipBasePitchRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 0x1]
	PhysicsVolume* PhysicsVolume;//[Offset: 0x108, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0x110, Size: 0x8]
	FName AttachSocketName;//[Offset: 0x118, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0x120, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0x130, Size: 0x10]
	bool bRebaseRelativeLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1]
	Vector RelativeLocation;//[Offset: 0x170, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x17c, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x188, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x194, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a0, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a0, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a0, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a0, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a0, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1a0, Size: 0x1]
	bool bHiddenEnterVoidInGame;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a0, Size: 0x1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a1, Size: 0x1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a1, Size: 0x1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a1, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a1, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a1, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a1, Size: 0x1]
	byte Mobility;//[Offset: 0x1a3, Size: 0x1]
	bool bMovableForStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a4, Size: 0x1]
	byte DetailMode;//[Offset: 0x1a5, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x1a6, Size: 0x1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x6064950
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x6065144
	void SetWorldScale3D(Vector NewScale);// 0x6066128
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x60649ec
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x6067360
	void SetRelativeScale3D(Vector NewScale3D);// 0x6066c8c
	void SetMobility(byte NewMobility);// 0x6064314
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x6064878
	void SetDitherFactor(float NewDitherFactor, bool bPropagateToChildren);// 0x6067404
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x6064558
	void ResetRelativeTransform();// 0x6066d10
	void OnRep_Visibility(bool OldValue);// 0x6067278
	void OnRep_Transform();// 0x606734c
	void OnRep_RelativeLocation();// 0x6067338
	void OnRep_AttachSocketName();// 0x60672fc
	void OnRep_AttachParent();// 0x6067324
	void OnRep_AttachChildren();// 0x6067310
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6065f40
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x60661a4
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6064398
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6066324
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6066d90
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6066f78
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6064684
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x60670f8
	Transform K2_GetComponentToWorld();// 0x6065944
	Vector K2_GetComponentScale();// 0x60659b0
	Rotator K2_GetComponentRotation();// 0x60659e8
	Vector K2_GetComponentLocation();// 0x6065a20
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x6064f18
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x6065214
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x6065400
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6065a58
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6065c40
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6065dc0
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x606698c
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6066b0c
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x60664a4
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x606668c
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x606680c
	bool IsVisible();// 0x6064ac4
	bool IsSimulatingPhysics(FName BoneName);// 0x606580c
	bool IsAnySimulatingPhysics();// 0x60657cc
	Vector GetUpVector();// 0x60658d4
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x6064d8c
	Rotator GetSocketRotation(FName InSocketName);// 0x6064c6c
	Quat GetSocketQuaternion(FName InSocketName);// 0x6064bd4
	Vector GetSocketLocation(FName InSocketName);// 0x6064cfc
	bool GetShouldUpdatePhysicsVolume();// 0x60673e4
	Vector GetRightVector();// 0x606589c
	Transform GetRelativeTransform();// 0x6066d24
	PhysicsVolume* GetPhysicsVolume();// 0x6064844
	void GetParentComponents(out SceneComponent*[] Parents);// 0x60656fc
	int GetNumChildrenComponents();// 0x60656c8
	Vector GetForwardVector();// 0x606590c
	Vector GetComponentVelocity();// 0x6064b04
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x6065560
	SceneComponent* GetChildComponent(int ChildIndex);// 0x6065644
	FName GetAttachSocketName();// 0x6065794
	SceneComponent* GetAttachParent();// 0x60657b0
	FName[] GetAllSocketNames();// 0x6064e94
	bool DoesSocketExist(FName InSocketName);// 0x6064b44
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x6065068

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x58]
	FName[] ComponentTags;//[Offset: 0x88, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0xa0, Size: 0x10]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 0x1]
	float NetUpdateFrequency;//[Offset: 0xb8, Size: 0x4]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc5, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc5, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc5, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc5, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc6, Size: 0x1]
	enum CreationMethod;//[Offset: 0xc8, Size: 0x1]
	delegate OnComponentActivated;//[Offset: 0xc9, Size: 0x1]
	delegate OnComponentDeactivated;//[Offset: 0xca, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0xd0, Size: 0x10]
	void ToggleActive();// 0x5e9af78
	void SetTickGroup(byte NewTickGroup);// 0x5e9a980
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x5e9ae28
	void SetIsReplicated(bool ShouldReplicate);// 0x5e9ada4
	void SetComponentTickIntervalAndCooldown(float TickInterval);// 0x5e9aaac
	void SetComponentTickInterval(float TickInterval);// 0x5e9ab28
	void SetComponentTickEnabled(bool bEnabled);// 0x5e9abe4
	void SetAutoActivate(bool bNewAutoActivate);// 0x5e9aeac
	void SetActive(bool bNewActive, bool bReset);// 0x5e9af94
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x5e9a770
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x5e9a7f4
	void ReceiveTick(float DeltaSeconds);// 0x43841ec
	void ReceiveEndPlay(byte EndPlayReason);// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void PauseNetUpdate(bool bPause);// 0x5e9ac70
	void OnRep_IsActive();// 0x5e9b1bc
	void K2_DestroyComponent(Object* Object);// 0x5e9a9fc
	bool IsComponentTickEnabled();// 0x5e9aba4
	bool IsBeingDestroyed();// 0x5e9b1d8
	bool IsActive();// 0x5e9af38
	Actor* GetOwner();// 0x5e9b1a0
	float GetComponentTickInterval();// 0x5e9aa78
	void ForceNetUpdateWithOwner(bool bForceOwner);// 0x5e9acfc
	void ForceNetUpdate();// 0x5e9ad88
	void Deactivate();// 0x5e9b070
	bool ComponentHasTag(FName Tag);// 0x5e9b118
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x5e9a878
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x5e9a8fc
	void Activate(bool bReset);// 0x5e9b08c

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	float TickInterval;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 0x58]
	FName BoneName;//[Offset: 0x80, Size: 0x8]
	byte PhysicsType;//[Offset: 0x88, Size: 0x1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 0x1]
	bool bPutBodiesInAggregation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x8b, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0x110, Size: 0x110]
	Vector BuildScale3D;//[Offset: 0x228, Size: 0xc]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	Box ElemBox;//[Offset: 0x40, Size: 0x1c]
	Transform Transform;//[Offset: 0x60, Size: 0x30]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc]
	Vector Max;//[Offset: 0xc, Size: 0xc]
	byte IsValid;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius0;//[Offset: 0x48, Size: 0x4]
	float Radius1;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float Restitution;//[Offset: 0x30, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float Density;//[Offset: 0x38, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 0x8]
	byte SurfaceType;//[Offset: 0x50, Size: 0x1]
	float TireFrictionScale;//[Offset: 0x54, Size: 0x4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x8]
	float FrictionScale;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	enum SleepFamily;//[Offset: 0xa, Size: 0x1]
	byte DOFMode;//[Offset: 0xb, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x1c, Size: 0x8]
	byte PositionSolverIterationCount;//[Offset: 0x24, Size: 0x1]
	byte VelocitySolverIterationCount;//[Offset: 0x25, Size: 0x1]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 0x4]
	float MassInKgOverride;//[Offset: 0x5c, Size: 0x4]
	float LinearDamping;//[Offset: 0x68, Size: 0x4]
	float AngularDamping;//[Offset: 0x6c, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 0xc]
	Vector COMNudge;//[Offset: 0x7c, Size: 0xc]
	float MassScale;//[Offset: 0x88, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 0x4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x288, Size: 0x4]
	int Priority;//[Offset: 0x28c, Size: 0x4]
	float FluidFriction;//[Offset: 0x290, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x294, Size: 0x1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x250, Size: 0x1]
	Color BrushColor;//[Offset: 0x254, Size: 0x4]
	int PolyFlags;//[Offset: 0x258, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25c, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25c, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25c, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25c, Size: 0x1]
	Model* Brush;//[Offset: 0x260, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x268, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x278, Size: 0x10]

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x30, Size: 0x58]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x88, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x88, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x88, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x88, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8a, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8a, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8a, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8a, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8b, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8b, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c, Size: 0x1]
	byte RemoteRole;//[Offset: 0x8d, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x90, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0xc4, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0xc8, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xd0, Size: 0x40]
	Actor* Owner;//[Offset: 0x110, Size: 0x8]
	FName NetDriverName;//[Offset: 0x118, Size: 0x8]
	byte Role;//[Offset: 0x120, Size: 0x1]
	byte NetDormancy;//[Offset: 0x121, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x122, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0x123, Size: 0x1]
	int InputPriority;//[Offset: 0x124, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x128, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x130, Size: 0x4]
	float ReplayNetCullDistanceSquared;//[Offset: 0x134, Size: 0x4]
	int NetTag;//[Offset: 0x138, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x13c, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x140, Size: 0x4]
	float NetPriority;//[Offset: 0x144, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x150, Size: 0x8]
	Actor*[] Children;//[Offset: 0x158, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x168, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x170, Size: 0x10]
	FName[] Layers;//[Offset: 0x188, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x198, Size: 0x8]
	FName[] Tags;//[Offset: 0x1a0, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x1b0, Size: 0x1]
	delegate OnTakePointDamage;//[Offset: 0x1b1, Size: 0x1]
	delegate OnTakeRadialDamage;//[Offset: 0x1b2, Size: 0x1]
	delegate OnActorBeginOverlap;//[Offset: 0x1b3, Size: 0x1]
	delegate OnActorEndOverlap;//[Offset: 0x1b4, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x1b5, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x1b6, Size: 0x1]
	delegate OnClicked;//[Offset: 0x1b7, Size: 0x1]
	delegate OnReleased;//[Offset: 0x1b8, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x1b9, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x1ba, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x1bb, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x1bc, Size: 0x1]
	delegate OnActorHit;//[Offset: 0x1bd, Size: 0x1]
	delegate OnDestroyed;//[Offset: 0x1be, Size: 0x1]
	delegate OnEndPlay;//[Offset: 0x1bf, Size: 0x1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x220, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x230, Size: 0x10]
	bool WasRecentlyRendered(float Tolerance);// 0x5e92870
	void UserConstructionScript();// 0x43841ec
	void TearOff();// 0x5e9678c
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x5e938a8
	bool ShouldCollectedByApex();// 0x5e965cc
	void SetTickGroup(byte NewTickGroup);// 0x5e928f8
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x5e93398
	void SetReplicates(bool bInReplicates);// 0x5e966ec
	void SetReplicateMovement(bool bInReplicateMovement);// 0x5e96660
	void SetOwner(Actor* NewOwner);// 0x5e92e00
	void SetNetDormancy(byte NewDormancy);// 0x5e92ce0
	void SetLifeSpan(float InLifespan);// 0x5e930c4
	void SetActorTickIntervalAndCooldown(float TickInterval);// 0x5e92ed4
	void SetActorTickInterval(float TickInterval);// 0x5e92f50
	void SetActorTickEnabled(bool bEnabled);// 0x5e93004
	void SetActorScale3D(Vector NewScale3D);// 0x5e957f4
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x5e9437c
	void SetActorHiddenInGame(bool bNewHidden);// 0x5e942b8
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x5e94234
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x5e93454
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x5e934d8
	void ReceiveTick(float DeltaSeconds);// 0x43841ec
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x43841ec
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x43841ec
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x43841ec
	void ReceiveEndPlay(byte EndPlayReason);// 0x43841ec
	void ReceiveDestroyed();// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x43841ec
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x43841ec
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x43841ec
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x43841ec
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x43841ec
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x43841ec
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x43841ec
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x43841ec
	void ReceiveActorEndCursorOver();// 0x43841ec
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x43841ec
	void ReceiveActorBeginCursorOver();// 0x43841ec
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x5e92734
	void OnRep_ReplicateMovement();// 0x5e967a8
	void OnRep_ReplicatedMovement();// 0x5e92e84
	void OnRep_Owner();// 0x5e96770
	void OnRep_Instigator();// 0x5e965b0
	void OnRep_AttachmentReplication();// 0x5e9660c
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x5e92274
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x5e93314
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x5e92a74
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5e94dc8
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x5e95a44
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5e943f8
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5e945e0
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5e94760
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5e95870
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5e95e84
	void K2_OnReset();// 0x43841ec
	void K2_OnEndViewTarget(PlayerController* PC);// 0x43841ec
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x43841ec
	SceneComponent* K2_GetRootComponent();// 0x5e95b60
	Rotator K2_GetActorRotation();// 0x5e95da4
	Vector K2_GetActorLocation();// 0x5e96018
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x5e93720
	void K2_DestroyComponent(ActorComponent* Component);// 0x5e93fa4
	void K2_DestroyActor();// 0x5e941f8
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x5e93c84
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x5e93964
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x5e93b38
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x5e93e58
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5e94fbc
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5e951a4
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5e95324
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5e948e0
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5e94ac8
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5e94c48
	bool IsOverlappingActor(const Actor* Other);// 0x5e92d5c
	bool IsChildActor();// 0x5e92c94
	bool IsActorTickEnabled();// 0x5e92fcc
	bool IsActorBeingDestroyed();// 0x5e932c0
	bool HasAuthority();// 0x5e941d4
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x5e955ac
	Vector GetVelocity();// 0x5e95b20
	Transform GetTransform();// 0x5e96070
	bool GetTickableWhenPaused();// 0x5e9341c
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x5e956b4
	byte GetRemoteRole();// 0x5e96628
	ChildActorComponent* GetParentComponent();// 0x5e92b78
	Actor* GetParentActor();// 0x5e92b44
	Actor* GetOwner();// 0x5e92de4
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x5e93148
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x5e931e0
	byte GetLocalRole();// 0x5e96644
	float GetLifeSpan();// 0x5e93088
	Controller* GetInstigatorController();// 0x5e960e8
	Pawn* GetInstigator();// 0x5e9611c
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x5e96150
	float GetInputAxisValue(const FName InputAxisName);// 0x5e96424
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x5e962bc
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x5e954a4
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x5e95630
	float GetGameTimeSinceCreation();// 0x5e932e0
	float GetDotProductTo(const Actor* OtherActor);// 0x5e95528
	float GetDistanceTo(const Actor* OtherActor);// 0x5e95738
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x5e923fc
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x5e92508
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x5e925cc
	FName GetAttachParentSocketName();// 0x5e92a0c
	Actor* GetAttachParentActor();// 0x5e92a40
	void GetAttachedActors(out Actor*[] OutActors);// 0x5e92974
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x5e92bac
	Vector GetActorUpVector();// 0x5e95cfc
	float GetActorTimeDilation();// 0x5e93664
	float GetActorTickInterval();// 0x5e92ea0
	Vector GetActorScale3D();// 0x5e957bc
	Vector GetActorRightVector();// 0x5e95ca8
	Vector GetActorRelativeScale3D();// 0x5e94344
	Vector GetActorForwardVector();// 0x5e95d50
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x5e92650
	bool GetActorEnableCollision();// 0x5e94214
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x5e95b7c
	void ForceNetUpdate();// 0x5e92854
	void FlushNetDormancy();// 0x5e92ccc
	void EnableInput(PlayerController* PlayerController);// 0x5e9652c
	void DisableInput(PlayerController* PlayerController);// 0x5e964a8
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x5e93824
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x5e9355c
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x5e935e0
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x5e94020
	bool ActorHasTag(FName Tag);// 0x5e93698

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x560, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x568, Size: 0x8]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x160, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0x5f55aa8
	bool WasControllerKeyJustPressed(Key Key);// 0x5f55c14
	bool IsControllerKeyDown(Key Key);// 0x5f55d80
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x5f55658
	Vector GetControllerVectorKeyState(Key Key);// 0x5f557d4
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x5f55414
	float GetControllerKeyTimeDown(Key Key);// 0x5f554f0
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x5f552e8
	float GetControllerAnalogKeyState(Key Key);// 0x5f55940

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10]
	void SetMouseSensitivity(const float Sensitivity);// 0x6041604
	void SetBind(FName BindName, FString Command);// 0x6041538
	void InvertAxisKey(const Key AxisKey);// 0x60413e0
	void InvertAxis(const FName AxisName);// 0x6041364
	void ClearSmoothing();// 0x6041350

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x258, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x25c, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x260, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x261, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x262, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x268, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x270, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x280, Size: 0x8]
	Controller* Controller;//[Offset: 0x288, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x294, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x2a0, Size: 0xc]
	void SpawnDefaultController();// 0x6024600
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x6024778
	void ReceiveUnpossessed(Controller* OldController);// 0x43841ec
	void ReceivePossessed(Controller* NewController);// 0x43841ec
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x6024994
	void OnRep_PlayerState();// 0x602484c
	void OnRep_Controller();// 0x6024868
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x6024150
	Vector K2_GetMovementInputVector();// 0x6024118
	bool IsPlayerControlled();// 0x60246b8
	bool IsMoveInputIgnored();// 0x6024270
	bool IsLocallyControlled();// 0x60246f8
	bool IsControlled();// 0x60248e0
	bool IsBotControlled();// 0x6024678
	Vector GetPendingMovementInputVector();// 0x60244b4
	Vector GetNavAgentLocation();// 0x6024738
	PawnMovementComponent* GetMovementComponent();// 0x6024aec
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x6024918
	Vector GetLastMovementInputVector();// 0x602447c
	Rotator GetControlRotation();// 0x6024884
	Controller* GetController();// 0x60248c4
	Rotator GetBaseAimRotation();// 0x6024638
	void DetachFromControllerPendingDestroy();// 0x602461c
	Vector ConsumeMovementInputVector();// 0x602443c
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x60244ec
	void AddControllerYawInput(float Val);// 0x6024334
	void AddControllerRollInput(float Val);// 0x60242b0
	void AddControllerPitchInput(float Val);// 0x60243b8

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x258, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x268, Size: 0x10]
	FName StateName;//[Offset: 0x278, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x280, Size: 0x8]
	Character* Character;//[Offset: 0x290, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x298, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x2b8, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1]
	void UnPossess();// 0x5f05ad0
	void StopMovement();// 0x5f05ab4
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x5f05ff0
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x5f05a28
	void SetIgnoreLookInput(bool bNewLookInput);// 0x5f05940
	void SetControlRotation(out const Rotator NewRotation);// 0x5f060d4
	void ResetIgnoreMoveInput();// 0x5f05a0c
	void ResetIgnoreLookInput();// 0x5f05924
	void ResetIgnoreInputFlags();// 0x5f058c8
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x43841ec
	void ReceivePossess(Pawn* PossessedPawn);// 0x43841ec
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x43841ec
	void Possess(Pawn* InPawn);// 0x5f05ae4
	void OnRep_PlayerState();// 0x5f05e94
	void OnRep_Pawn();// 0x5f05eb0
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x5f05ecc
	Pawn* K2_GetPawn();// 0x5f05c98
	bool IsPlayerController();// 0x5f05bfc
	bool IsMoveInputIgnored();// 0x5f059cc
	bool IsLookInputIgnored();// 0x5f058e4
	bool IsLocalPlayerController();// 0x5f05ba0
	bool IsLocalController();// 0x5f05b60
	Actor* GetViewTarget();// 0x5f05c5c
	Rotator GetDesiredRotation();// 0x5f05c1c
	Rotator GetControlRotation();// 0x5f06164
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x5f05ccc
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x5f05d9c
	PlayerController* CastToPlayerController();// 0x5f05e60

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x250, Size: 0x4]
	int PlayerID;//[Offset: 0x254, Size: 0x4]
	byte ping;//[Offset: 0x258, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25a, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25a, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25a, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25a, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25a, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x25a, Size: 0x1]
	int StartTime;//[Offset: 0x25c, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x260, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x270, Size: 0x10]
	UniqueNetIdRepl UniqueID;//[Offset: 0x280, Size: 0x28]
	Pawn* PawnPrivate;//[Offset: 0x2b0, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x328, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x43841ec
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x43841ec
	void OnRep_UniqueId();// 0x6042058
	void OnRep_Score();// 0x60420c8
	void OnRep_PlayerName();// 0x60420ac
	void OnRep_PlayerId();// 0x6042074
	void OnRep_bIsInactive();// 0x6042090
	FString GetPlayerName();// 0x6041fd4

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x2b0, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x2b8, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2c0, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x2d0, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x300, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x330, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x334, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x340, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x350, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x354, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x358, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x35c, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x360, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x360, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x360, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x360, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x360, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x360, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x360, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x361, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x361, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x361, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x364, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x368, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x36c, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x370, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x374, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x378, Size: 0x4]
	bool EnableTestNameID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	delegate OnReachedJumpApex;//[Offset: 0x388, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x3a8, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x3b8, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x3c8, Size: 0xf8]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x4c0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x500, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x510, Size: 0x158]
	void UnCrouch(bool bClientSimulation);// 0x5ef4a08
	void StopJumping();// 0x5ef5064
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x5ef4e10
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x5ef5f4c
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x5ef6c14
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x5ef648c
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x5ef6084
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x5ef680c
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x5ef6e6c
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x5ef48e4
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x5ef4e94
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x5ef4b20
	void OnRep_RootMotion();// 0x5ef48d0
	void OnRep_ReplicatedBasedMovement();// 0x5ef5148
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x5ef5134
	void OnRep_IsCrouched();// 0x5ef509c
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x43841ec
	void OnLanded(out const HitResult Hit);// 0x43841ec
	void OnJumped();// 0x5ef4c98
	void OnCallUpdateBaseMovement();// 0x5ef5228
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x5ef4cb4
	void K2_UpdateCustomMovement(float DeltaTime);// 0x43841ec
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x43841ec
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x43841ec
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x43841ec
	void Jump();// 0x5ef5080
	bool IsPlayingRootMotion();// 0x5ef4898
	bool IsPlayingNetworkedRootMotionMontage();// 0x5ef4828
	bool IsJumpProvidingForce();// 0x5ef4fac
	bool HasAnyRootMotion();// 0x5ef4860
	AnimMontage* GetCurrentMontage();// 0x5ef4ddc
	Vector GetBaseTranslationOffset();// 0x5ef510c
	Rotator GetBaseRotationOffsetRotator();// 0x5ef50b8
	float GetAnimRootMotionTranslationScale();// 0x5ef47f4
	void Crouch(bool bClientSimulation);// 0x5ef4a94
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x5ef5a38
	void ClientCheatWalk();// 0x5ef49ac
	void ClientCheatGhost();// 0x5ef4974
	void ClientCheatFly();// 0x5ef4990
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x5ef523c
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x5ef5744
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x5ef5c64
	void ClientAckGoodMove(float Timestamp);// 0x5ef5ed0
	bool CanJumpInternal();// 0x5ef4fec
	bool CanJump();// 0x5ef502c
	bool CanCrouch();// 0x5ef49c8
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x5ef5164

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30]
	float BlendInTime;//[Offset: 0xd8, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30]
	float BlendOutTime;//[Offset: 0x110, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 0x4]
	FName SyncGroup;//[Offset: 0x118, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 0x8]
	float GetDefaultBlendOutTime();// 0x5eafb8c

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]
	float GetPlayLength();// 0x5ebaaa0

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	enum BlendOption;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x5f07e14

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x5f0775c
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x5f07838

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: RealCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x68, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x69, Size: 0x1]
	float DefaultValue;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	int TrackIndex;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x43841ec
	FString GetNotifyName();// 0x5eb84f8

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x760, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x768, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x770, Size: 0x8]
	AnimInstance*[] SubInstances;//[Offset: 0x778, Size: 0x10]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x788, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x790, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0x7b8, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x7c4, Size: 0xc]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x7f0, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x800, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0x830, Size: 0x4]
	byte KinematicBonesUpdateType;//[Offset: 0x834, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x835, Size: 0x1]
	byte AnimationMode;//[Offset: 0x837, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x839, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x839, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x839, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x839, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x839, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83a, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83a, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x83a, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x83a, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x83a, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83b, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83b, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x83b, Size: 0x1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x83b, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x83b, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x83b, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x83b, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83c, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83c, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x83c, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x83c, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x83c, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x83c, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x83c, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x83c, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83d, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83d, Size: 0x1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x83d, Size: 0x1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x83d, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x83d, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x83d, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x83d, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x83d, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83e, Size: 0x1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83e, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x83e, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x840, Size: 0x2]
	float ClothBlendWeight;//[Offset: 0x844, Size: 0x4]
	float EdgeStiffness;//[Offset: 0x848, Size: 0x4]
	float BendingStiffness;//[Offset: 0x84c, Size: 0x4]
	float AreaStiffness;//[Offset: 0x850, Size: 0x4]
	float VolumeStiffness;//[Offset: 0x854, Size: 0x4]
	float StrainLimitingStiffness;//[Offset: 0x858, Size: 0x4]
	float ShapeTargetStiffness;//[Offset: 0x85c, Size: 0x4]
	FName[] DisallowedAnimCurves;//[Offset: 0x860, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x870, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x880, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x890, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0x990, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x994, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0x9a0, Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xa00, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0xad0, Size: 0x10]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x6073ac8
	void ToggleDisablePostProcessBlueprint();// 0x6074a0c
	void TermBodiesBelow(FName ParentBoneName);// 0x6072ad4
	void SuspendClothingSimulation();// 0x6073bc0
	void Stop();// 0x607428c
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x6073cac
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x6073a44
	void SetTeleportRotationThreshold(float Threshold);// 0x607367c
	void SetTeleportDistanceThreshold(float Threshold);// 0x60735cc
	void SetPosition(float InPos, bool bFireNotifies);// 0x607418c
	void SetPlayRate(float Rate);// 0x60740dc
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x60729d4
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x6073394
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x6073df4
	void SetLayerOverlay(class AnimInstance InClass);// 0x6074650
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x6072950
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x6073118
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x60732c0
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x6074950
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x60739c0
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x6071f48
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x6072010
	void SetClothMaxDistanceScale(float Scale);// 0x6073bfc
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x60734bc
	void SetAnimClass(class Object NewClass);// 0x60748cc
	void SetAnimationMode(byte InAnimationMode);// 0x607449c
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x6074324
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x6071c80
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x607372c
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x6073914
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x6072264
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x6072390
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x6072118
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x6072a50
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x6072748
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x6072824
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x60725d8
	void ResumeClothingSimulation();// 0x6073bac
	void ResetClothTeleportMode();// 0x6073b60
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x6074518
	void ResetAllowedAnimCurveEvaluation();// 0x6073814
	void ResetAllBodiesSimulatePhysics();// 0x6072810
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x60743a0
	void Play(bool bLooping);// 0x60742a0
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x6073f00
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x6072f34
	bool IsPlaying();// 0x6074254
	bool IsClothingSimulationSuspended();// 0x6073b74
	bool IsBodyGravityEnabled(FName BoneName);// 0x6073238
	bool HasValidAnimationInstance();// 0x6074594
	float GetTeleportRotationThreshold();// 0x60736f8
	float GetTeleportDistanceThreshold();// 0x6073648
	void GetSubInstancesByTag(FName InTag, out AnimInstance*[] OutSubInstances);// 0x60746cc
	AnimInstance* GetSubInstanceByTag(FName InTag);// 0x60747ac
	Vector GetSkeletalCenterOfMass();// 0x6072e28
	AnimInstance* GetPostProcessInstance();// 0x6074830
	float GetPosition();// 0x6074158
	float GetPlayRate();// 0x60740a8
	float GetMorphTarget(FName MorphTargetName);// 0x6073d5c
	AnimInstance* GetLayerSubInstanceByGroup(FName InGroup);// 0x60745cc
	bool GetDisablePostProcessBlueprint();// 0x60749d4
	bool GetDisableAnimCurves();// 0x6073998
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x6071b04
	float GetClothMaxDistanceScale();// 0x6073c78
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x6073598
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x6072e60
	AnimInstance* GetAnimInstance();// 0x6074864
	class Object GetAnimClass();// 0x6074898
	byte GetAnimationMode();// 0x6074468
	bool GetAllowedAnimCurveEvaluate();// 0x60738f0
	void ForceClothNextUpdateTeleportAndReset();// 0x6073bd4
	void ForceClothNextUpdateTeleport();// 0x6073be8
	FName FindConstraintBoneName(int ConstraintIndex);// 0x6071ec4
	void ClearMorphTargets();// 0x6073de0
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x6071dc4
	void BindClothToMasterPoseComponent();// 0x6073b4c
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x6073828
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x6072b50
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x6072cbc
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x60724bc

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x5a0, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x5a8, Size: 0x8]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x6a8, Size: 0x8]
	int ForcedLodModel;//[Offset: 0x6b0, Size: 0x4]
	int MinLodModel;//[Offset: 0x6b4, Size: 0x4]
	int ShadowLodBias;//[Offset: 0x6b8, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x6c4, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x6d0, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x704, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x706, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x706, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x706, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x706, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x706, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x706, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x707, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x707, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x707, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x707, Size: 0x1]
	bool bUseAnimScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x707, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x707, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x707, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x707, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x708, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x708, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x708, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x708, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x708, Size: 0x1]
	bool bTickPoseOnDS;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x708, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x708, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x709, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x709, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x70c, Size: 0x4]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x720, Size: 0x1c]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x6079cbc
	void UnHideBoneByName(FName BoneName);// 0x607947c
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x60798c0
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x6079720
	void ShowMaterialSection(int MaterialID, bool bShow, int LODIndex);// 0x60792dc
	void ShowAllMaterialSections(int LODIndex);// 0x6079260
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x6079fac
	bool SetSkinWeightProfile(FName InProfileName);// 0x6079d4c
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x6079e50
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReInitPose);// 0x607a344
	void SetRenderStatic(bool bNewValue);// 0x6079114
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x607a884
	void SetMinLOD(int InNewMinLOD);// 0x607a7d4
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x6079bb8
	void SetForcedLOD(int InNewForcedLOD);// 0x607a758
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x607a650
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x607a6d4
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x607a5d4
	bool IsUsingSkinWeightProfile();// 0x6079c80
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x6079198
	bool IsBoneHiddenByName(FName BoneName);// 0x60793f4
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x60794f8
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x607a08c
	FName GetSocketBoneName(FName InSocketName);// 0x607a414
	Vector GetRefPosePosition(int BoneIndex);// 0x6079a60
	FName GetParentBone(FName BoneName);// 0x607a2c0
	int GetNumLODs();// 0x607a850
	int GetNumBones();// 0x607a5a0
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x607a1c4
	FName GetCurrentSkinWeightProfileName();// 0x6079ca0
	FName GetBoneName(int BoneIndex);// 0x607a498
	int GetBoneIndex(FName BoneName);// 0x607a51c
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x60795b8
	void ClearVertexColorOverride(int LODIndex);// 0x6079f30
	void ClearSkinWeightProfile();// 0x6079d38
	void ClearSkinWeightOverride(int LODIndex);// 0x6079dd4
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x6079ae8

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x560, Size: 0x10]
	int TargetLodLevel;//[Offset: 0x570, Size: 0x4]
	bool bUseCustomDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x574, Size: 0x1]
	float[] DistanceArray;//[Offset: 0x578, Size: 0x10]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x5ff95a0
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x5ff965c
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x5ff971c
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x5ff983c
	FName[] GetMaterialSlotNames();// 0x5ff98cc
	MaterialInterface*[] GetMaterials();// 0x5ff99e4
	int GetMaterialIndex(FName MaterialSlotName);// 0x5ff9958

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x48, Size: 0x8]
	BoxSphereBounds ImportedBounds;//[Offset: 0x50, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x6c, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0x88, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x94, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0xa0, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xb0, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xc0, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0x120, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x124, Size: 0x1]
	byte SkelMirrorAxis;//[Offset: 0x125, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0x126, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x127, Size: 0x1]
	bool bUseVertexCompress;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x127, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x127, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x127, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x127, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x127, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x128, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x130, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x138, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x140, Size: 0x10]
	MorphTarget*[] MorphTargets;//[Offset: 0x150, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x2d8, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x2e0, Size: 0x10]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x2f0, Size: 0x30]
	AssetUserData*[] AssetUserData;//[Offset: 0x320, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x330, Size: 0x10]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x350, Size: 0x10]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x606e2a8
	int NumSockets();// 0x606dddc
	FString[] K2_GetAllMorphTargetNames();// 0x606e13c
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x606dc88
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x606dd58
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x606e224
	BoxSphereBounds GetImportedBounds();// 0x606e324
	BoxSphereBounds GetBounds();// 0x606e370
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x606de10
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x606dfd8
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x606e0b8
	int[] CheckSkinnedBoneSectionNum(int Threshold);// 0x606db3c
	int[] CheckExtraBoneReferences();// 0x606dc04

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]
	float StreamableFirstChunkSize;//[Offset: 0xc0, Size: 0x4]
	float StreamableFollowingChunkSize;//[Offset: 0xc4, Size: 0x4]
	bool bUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xf0, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xf8, Size: 0x8]
	byte AdditiveAnimType;//[Offset: 0x170, Size: 0x1]
	byte RefPoseType;//[Offset: 0x171, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0x178, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x180, Size: 0x4]
	FName RetargetSource;//[Offset: 0x184, Size: 0x8]
	bool bDisableRetargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 0x1]
	enum Interpolation;//[Offset: 0x18d, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18e, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x18f, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x192, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x198, Size: 0x10]
	AnimStreameableFrameGroup StreamableFrameGroups;//[Offset: 0x1bc, Size: 0x8]
	float ClosestScreenPercentage;//[Offset: 0x1c4, Size: 0x4]
	bool AlwaysHighestForAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	int GetRawTrackNum();// 0x5eba540
	void BPSwitchFidelity(enum inFidelity);// 0x5eba4c4

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: AnimStreameableFrameGroup
	FName FrameGroupName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x6077f28
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x6078024

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x268, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x278, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x350, Size: 0x10]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float BlendScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x14]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x68, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x78, Size: 0x10]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x5ff4b0c
	PhysicalMaterial* GetPhysicalMaterial();// 0x5ff4c7c
	Material* GetBaseMaterial();// 0x5ff4cb8

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x14, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x24, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x34, Size: 0x4]
	float NormalScale;//[Offset: 0x38, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x3c, Size: 0x4]
	float IOR;//[Offset: 0x40, Size: 0x4]
	float Roughness0;//[Offset: 0x44, Size: 0x4]
	float Roughness1;//[Offset: 0x48, Size: 0x4]
	float LobeMix;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bUseGlobalBakeTextureDiffuseValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bUseUnwrapMaterialExport;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float EmissiveBoost;//[Offset: 0x4, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x8, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0xc, Size: 0x4]
	bool bOverrideUseUnwrapMaterialExport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	ScalarMaterialInput Metallic;//[Offset: 0x90, Size: 0xc]
	ScalarMaterialInput Specular;//[Offset: 0xa4, Size: 0xc]
	VectorMaterialInput Normal;//[Offset: 0xb8, Size: 0xc]
	ColorMaterialInput EmissiveColor;//[Offset: 0xcc, Size: 0xc]
	byte MaterialDomain;//[Offset: 0xe0, Size: 0x1]
	byte BlendMode;//[Offset: 0xe1, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0xe2, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0xe3, Size: 0x1]
	byte ShadingModel;//[Offset: 0xe4, Size: 0x1]
	MaterialShadingModelField ShadingModels;//[Offset: 0xe6, Size: 0x2]
	float OpacityMaskClipValue;//[Offset: 0xe8, Size: 0x4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xec, Size: 0x1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0xf0, Size: 0xc]
	ScalarMaterialInput Refraction;//[Offset: 0x104, Size: 0xc]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x118, Size: 0x10]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x130, Size: 0xc]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x144, Size: 0xc]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x158, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x158, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x158, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x158, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x158, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x158, Size: 0x1]
	bool WireAA;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x158, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x158, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x159, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x159, Size: 0x1]
	float WireAARadius;//[Offset: 0x15c, Size: 0x4]
	int NumCustomizedUVs;//[Offset: 0x160, Size: 0x4]
	int ExtraMaterialFlags;//[Offset: 0x164, Size: 0x4]
	byte TranslucencyLightingMode;//[Offset: 0x168, Size: 0x1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x16c, Size: 0x4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1]
	float TranslucentShadowDensityScale;//[Offset: 0x174, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x178, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x17c, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x180, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x184, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x188, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x198, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19c, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19c, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19c, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19c, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19c, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19c, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19c, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19d, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19d, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19d, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19d, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19d, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19d, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19d, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19d, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19e, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19e, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19e, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19e, Size: 0x1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19e, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19e, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19e, Size: 0x1]
	bool bUsedWithMultiProbe;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19e, Size: 0x1]
	bool bUsedWithILC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19f, Size: 0x1]
	bool bUsedWithExtremeMeshProbes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19f, Size: 0x1]
	bool bUsedWithLocalVertexFactory;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19f, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19f, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19f, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19f, Size: 0x1]
	bool bUsingIn3DUIPass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19f, Size: 0x1]
	bool bDisableIBLSpecular;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19f, Size: 0x1]
	bool bUseInstanceSHVertexLit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a0, Size: 0x1]
	bool bCSMHardBlend;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a0, Size: 0x1]
	bool bForcePCFOneX;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a0, Size: 0x1]
	bool bDynamicLightScalar;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a0, Size: 0x1]
	bool bDynamicLightScalarPrimitiveData;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a0, Size: 0x1]
	bool bAdditiveFadeBlend;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a0, Size: 0x1]
	bool bISMMobilityStationary;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1a0, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a0, Size: 0x1]
	bool bSpecularAA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a1, Size: 0x1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a1, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a1, Size: 0x1]
	bool bUseLightmapDirectionalInTangent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a1, Size: 0x1]
	bool bUseFPPZoffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a1, Size: 0x1]
	bool bUseDither;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a1, Size: 0x1]
	bool bUseDitherMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1a1, Size: 0x1]
	bool bUsedWithMobileBentNormalGI;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a1, Size: 0x1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a2, Size: 0x1]
	bool bTranslucencyOptimization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a2, Size: 0x1]
	bool bUsesMobileDynamicPointLights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a2, Size: 0x1]
	bool bWS3DUIUseACESFit;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a2, Size: 0x1]
	bool bMixCSMWithStaticShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a2, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a2, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1a2, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a2, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x1a3, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a4, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a4, Size: 0x1]
	float MaxDisplacement;//[Offset: 0x1a8, Size: 0x4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ac, Size: 0x1]
	byte ShadingRate;//[Offset: 0x1ad, Size: 0x1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ae, Size: 0x1]
	MaterialExpression*[] Expressions;//[Offset: 0x1b0, Size: 0x10]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x1c0, Size: 0x10]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x1d0, Size: 0x10]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e0, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e0, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e0, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e0, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e0, Size: 0x1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1e0, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1e0, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1e0, Size: 0x1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e1, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e1, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e1, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x1e4, Size: 0x4]
	byte BlendableLocation;//[Offset: 0x1e8, Size: 0x1]
	int BlendablePriority;//[Offset: 0x1ec, Size: 0x4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1]
	byte StencilCompare;//[Offset: 0x1f2, Size: 0x1]
	byte StencilRefValue;//[Offset: 0x1f3, Size: 0x1]
	byte RefractionMode;//[Offset: 0x1f4, Size: 0x1]
	float RefractionDepthBias;//[Offset: 0x1f8, Size: 0x4]
	Guid StateID;//[Offset: 0x1fc, Size: 0x10]
	bool[] CachedQualityLevelsUsed;//[Offset: 0x218, Size: 0x10]
	Object*[] ExpressionTextureReferences;//[Offset: 0x2c8, Size: 0x10]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 0x8]
	MaterialFunction* Function;//[Offset: 0x30, Size: 0x8]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: MaterialFunction.MaterialFunctionInterface.Object
	FString Description;//[Offset: 0x40, Size: 0x10]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bPrefixParameterNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	bool bFunctionUseFloat;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x58, Size: 0x10]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateID;//[Offset: 0x28, Size: 0x10]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: MaterialFunctionInfo
	Guid StateID;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateID;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateID;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x18, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x58, Size: 0x10]
	BoneReference[] BonesToPrioritize;//[Offset: 0x68, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x78, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x80, Size: 0x8]
	AnimSequence* BakePoseOverride;//[Offset: 0x88, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0x90, Size: 0x10]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x108, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x248, Size: 0x10]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1b8]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 0x104]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x104]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]
	FName ProfileName;//[Offset: 0x104, Size: 0x8]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x5ea5a08
	Pawn* TryGetPawnOwner();// 0x5ea80d8
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x5ea7a38
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x5ea7f9c
	void SetSubInstanceClassByTag(FName InTag, class AnimInstance InClass);// 0x5ea6be4
	void SetRootMotionMode(byte Value);// 0x5ea6a68
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x5ea5ca8
	void SetLayerOverlay(class AnimInstance InClass);// 0x5ea6b68
	void SavePoseSnapshot(FName SnapshotName);// 0x5ea8054
	void ResetDynamics(enum InTeleportType);// 0x5ea5598
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x5ea7af8
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x5ea7d58
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x5ea7708
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x5ea7000
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x5ea72d8
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x5ea7398
	void Montage_Resume(const AnimMontage* Montage);// 0x5ea7610
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x5ea77c8
	void Montage_Pause(const AnimMontage* Montage);// 0x5ea768c
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x5ea7498
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x5ea7554
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x5ea71c8
	bool Montage_IsActive(const AnimMontage* Montage);// 0x5ea7250
	float Montage_GetPosition(const AnimMontage* Montage);// 0x5ea70c0
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x5ea6e70
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x5ea6f78
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x5ea7144
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x5ea6ef4
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x5ea5adc
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x5ea56b0
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x5ea7968
	bool IsAnyMontagePlaying();// 0x5ea6e38
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x5ea5810
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x5ea58e0
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x5ea5614
	void GetSubInstancesByTag(FName InTag, out AnimInstance*[] OutSubInstances);// 0x5ea6ca0
	AnimInstance* GetSubInstanceByTag(FName InTag);// 0x5ea6d80
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x5ea6234
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x5ea62f8
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x5ea5fe8
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x5ea60ac
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x5ea6170
	SkeletalMeshComponent* GetOwningComponent();// 0x5ea7f34
	Actor* GetOwningActor();// 0x5ea7f68
	AnimInstance* GetLayerSubInstanceByGroup(FName InGroup);// 0x5ea6ae4
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x5ea63bc
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x5ea6480
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x5ea6544
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x5ea668c
	float GetInstanceMachineWeight(int MachineIndex);// 0x5ea6750
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x5ea6608
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x5ea67d4
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x5ea6858
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x5ea68dc
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x5ea6960
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x5ea69e4
	float GetCurveValue(FName CurveName);// 0x5ea5f64
	FName GetCurrentStateName(int MachineIndex);// 0x5ea5d68
	AnimMontage* GetCurrentActiveMontage();// 0x5ea6e04
	void GetAllCurveNames(out FName[] OutNames);// 0x5ea5dec
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x5ea5e84
	void ClearMorphTargets();// 0x5ea5c94
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x5ea5bb0
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x43841ec
	void BlueprintPostEvaluateAnimation();// 0x43841ec
	void BlueprintInitializeAnimation();// 0x43841ec
	void BlueprintBeginPlay();// 0x43841ec

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x88, Size: 0x8]
	byte BlueprintType;//[Offset: 0x90, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x94, Size: 0x4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x50]
	FName AttachToName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x90, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x98, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa8, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb8, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xc8, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xd8, Size: 0x8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]
	FName VariableName;//[Offset: 0x90, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x98, Size: 0x8]
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 0x8]
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	Vector GetVectorValue(float InTime);// 0x5f09710

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	float AdjustHue;//[Offset: 0x230, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4]
	Quat GetRotationValue(float InTime);// 0x5f0824c
	LinearColor GetLinearColorValue(float InTime);// 0x5f08370
	LinearColor GetClampedLinearColorValue(float InTime);// 0x5f082e0

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractor.Object
	void PhysicsAssetUpdated();// 0x554a5bc
	void ClothConfigUpdated();// 0x554a5a0

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x43841ec
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x43841ec
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x43841ec
	FString GetNotifyName();// 0x5eb9394

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int Item;//[Offset: 0x5c, Size: 0x4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8]
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	FName MyBoneName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0xe9, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0xec, Size: 0xc]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x188, Size: 0x8]
	float GravityScale;//[Offset: 0x190, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x194, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x198, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x19c, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x1a0, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x1a4, Size: 0x4]
	bool EnableSimulationOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	bool EnableDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 0x1]
	bool EnableFastDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa, Size: 0x1]
	float UseDRAcceleration;//[Offset: 0x1ac, Size: 0x4]
	float UseDRRotationSpeed;//[Offset: 0x1b0, Size: 0x4]
	bool NetNeedDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 0x1]
	bool bLastHasBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b5, Size: 0x1]
	Vector LastNotZeroDRVelocity;//[Offset: 0x1b8, Size: 0xc]
	Vector DRVelocity;//[Offset: 0x1c4, Size: 0xc]
	Vector DRAcceleration;//[Offset: 0x1d0, Size: 0xc]
	Quat DRRotationSpeed;//[Offset: 0x1e0, Size: 0x10]
	float DRLerpTime;//[Offset: 0x218, Size: 0x4]
	float DRSimulateTime;//[Offset: 0x21c, Size: 0x4]
	float DRVelocityCompatibility;//[Offset: 0x220, Size: 0x4]
	bool bAllForDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1]
	bool bDRFindFllor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x225, Size: 0x1]
	float DRFindFloorInterval;//[Offset: 0x228, Size: 0x4]
	float DRStopSimulateTime;//[Offset: 0x22c, Size: 0x4]
	PrimitiveComponent* DRBase;//[Offset: 0x238, Size: 0x8]
	FName DRBoneName;//[Offset: 0x240, Size: 0x8]
	bool DRLocationReach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	int NeedMovementLodNum;//[Offset: 0x26c, Size: 0x4]
	byte MovementMode;//[Offset: 0x280, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x281, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x282, Size: 0x1]
	float GroundFriction;//[Offset: 0x284, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x2ac, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x2b0, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x2b4, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x2b8, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x2bc, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x2c0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x2c4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x2c8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x2cc, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x2d0, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x2d4, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x2d8, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x2dc, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x2e0, Size: 0x4]
	float AirControl;//[Offset: 0x2e4, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x2e8, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x2ec, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x2f0, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x2f4, Size: 0x4]
	float Buoyancy;//[Offset: 0x2f8, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x2fc, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x300, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x304, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x310, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x310, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x310, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x310, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x310, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x310, Size: 0x1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x311, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x311, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x311, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x311, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x311, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x311, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x311, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x312, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x312, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x312, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x312, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x312, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x312, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x312, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x313, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x318, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x320, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x324, Size: 0x4]
	float Mass;//[Offset: 0x328, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x32c, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x330, Size: 0x4]
	float PushForceFactor;//[Offset: 0x334, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x338, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x33c, Size: 0x4]
	float MinTouchForce;//[Offset: 0x340, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x344, Size: 0x4]
	float RepulsionForce;//[Offset: 0x348, Size: 0x4]
	Vector Acceleration;//[Offset: 0x34c, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x360, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x370, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x37c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x388, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x38c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x390, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x394, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x3a0, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x3ac, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x3bc, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x3c0, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x3c4, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x3c8, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x3cc, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x3d0, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x3d4, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x3d8, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x3dc, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x3e0, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x3e4, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x3e8, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x3ec, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x3f0, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x3f4, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x3f8, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x3fc, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x400, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x404, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x408, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x40c, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x410, Size: 0x94]
	byte DefaultLandMovementMode;//[Offset: 0x4a4, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x4a5, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x4a6, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a7, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a7, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4a7, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4a7, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4a7, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4a7, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4a7, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4a7, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a8, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a8, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4a8, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4a8, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4a8, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4a8, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4a8, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4a8, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a9, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a9, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4a9, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4a9, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4a9, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4a9, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4a9, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4aa, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4aa, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4aa, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4aa, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4aa, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4aa, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x4bc, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x4c0, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x4cc, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x4d0, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x4d4, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x4d8, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x4dc, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x4e0, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x590, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x594, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x598, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x59c, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x5a0, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x5a4, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x5a8, Size: 0x58]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x618, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x620, Size: 0xf8]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x7b0, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x7f0, Size: 0xc]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x5efad24
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x5efadd4
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x5efb528
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x5efb690
	void SetGroupsToIgnore(int GroupFlags);// 0x5efb718
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x5efb794
	void SetGroupsToAvoid(int GroupFlags);// 0x5efb81c
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x5efb898
	void SetAvoidanceGroup(int GroupFlags);// 0x5efb920
	void SetAvoidanceEnabled(bool bEnable);// 0x5efb60c
	float K2_GetWalkableFloorZ();// 0x5efada0
	float K2_GetWalkableFloorAngle();// 0x5efae50
	float K2_GetModifiedMaxAcceleration();// 0x5efb204
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x5efac24
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x5efaa5c
	bool IsWalking();// 0x5efb4e8
	bool IsWalkable(out const HitResult Hit);// 0x5efae84
	float GetValidPerchRadius();// 0x5efaf48
	float GetPerchRadiusThreshold();// 0x5efaf7c
	PrimitiveComponent* GetMovementBase();// 0x5efb498
	float GetMinAnalogSpeed();// 0x5efb240
	float GetMaxJumpHeightWithJumpTime();// 0x5efb27c
	float GetMaxJumpHeight();// 0x5efb2b8
	float GetMaxBrakingDeceleration();// 0x5efb18c
	float GetMaxAcceleration();// 0x5efb1c8
	Vector GetLastUpdateVelocity();// 0x5efb99c
	Rotator GetLastUpdateRotation();// 0x5efb9c4
	Vector GetLastUpdateLocation();// 0x5efba00
	Vector GetImpartedMovementBaseVelocity();// 0x5efb458
	Vector GetCurrentAcceleration();// 0x5efb154
	Character* GetCharacterOwner();// 0x5efb5f0
	float GetAnalogInputModifier();// 0x5efb120
	void DisableMovement();// 0x5efb4cc
	void ClearAccumulatedForces();// 0x5efb104
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x5efa854
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x5efb2f4
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x5efb034
	void AddForce(Vector Force);// 0x5efafb0

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x170, Size: 0x8]
	Vector K2_GetInputVector();// 0x6026760
	bool IsMoveInputIgnored();// 0x60267cc
	Vector GetPendingInputVector();// 0x6026884
	Pawn* GetPawnOwner();// 0x6026798
	Vector GetLastInputVector();// 0x602684c
	Vector ConsumeInputVector();// 0x602680c
	void AddInputVector(Vector WorldVector, bool bForce);// 0x60268bc

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0x130, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x160, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x164, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x164, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x164, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x165, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x168, Size: 0x8]
	void StopMovementKeepPathing();// 0x6003e5c
	void StopActiveMovement();// 0x6003eac
	bool IsSwimming();// 0x6003d5c
	bool IsMovingOnGround();// 0x6003d9c
	bool IsFlying();// 0x6003d1c
	bool IsFalling();// 0x6003ddc
	bool IsCrouching();// 0x6003e1c

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xf0, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xf8, Size: 0x8]
	Vector Velocity;//[Offset: 0x104, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0x110, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0x11c, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x128, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x128, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x128, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x128, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x128, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x128, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x128, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0x12b, Size: 0x1]
	void StopMovementImmediately();// 0x5ffd928
	void SnapUpdatedComponentToPlane();// 0x5ffd0b0
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x5ffd7e4
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x5ffd3a0
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x5ffd4e8
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x5ffd424
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x5ffd314
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x5ffd588
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x5ffd868
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x5ffd60c
	float K2_GetModifiedMaxSpeed();// 0x5ffd9d4
	float K2_GetMaxSpeedModifier();// 0x5ffda10
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x5ffd944
	Vector GetPlaneConstraintOrigin();// 0x5ffd294
	Vector GetPlaneConstraintNormal();// 0x5ffd2d4
	enum GetPlaneConstraintAxisSetting();// 0x5ffd56c
	PhysicsVolume* GetPhysicsVolume();// 0x5ffd8ec
	float GetMaxSpeed();// 0x5ffda4c
	float GetGravityZ();// 0x5ffda88
	Vector ConstrainNormalToPlane(Vector Normal);// 0x5ffd0cc
	Vector ConstrainLocationToPlane(Vector Location);// 0x5ffd164
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x5ffd1fc

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0xc, Size: 0x88]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x578, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x57c, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x5ef37bc
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x5ef36f0
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x5ef3624
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x5ef3158
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x5ef3240
	float GetUnscaledCapsuleRadius();// 0x5ef3360
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x5ef3320
	float GetUnscaledCapsuleHalfHeight();// 0x5ef3344
	float GetShapeScale();// 0x5ef3118
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x5ef337c
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x5ef3494
	float GetScaledCapsuleRadius();// 0x5ef35f4
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x5ef3590
	float GetScaledCapsuleHalfHeight();// 0x5ef35d0

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x560, Size: 0x8]
	Color ShapeColor;//[Offset: 0x568, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56c, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56c, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56c, Size: 0x1]
	class NavAreaBase* AreaClass;//[Offset: 0x570, Size: 0x8]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	float Timestamp;//[Offset: 0x8, Size: 0x4]
	FName BoneName;//[Offset: 0xc, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x158]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0xf8]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x140, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x14c, Size: 0xc]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x318, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x320, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x328, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x330, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x338, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x340, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	byte TargetViewRotationPitch;//[Offset: 0x349, Size: 0x1]
	uint16 TargetViewRotationYaw;//[Offset: 0x34a, Size: 0x2]
	byte TargetViewRotationRoll;//[Offset: 0x34c, Size: 0x1]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x368, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x378, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x388, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x39c, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x3a0, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x3ac, Size: 0xc]
	int ClientCap;//[Offset: 0x3b8, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x3c0, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x3c8, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x3d0, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x3d8, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x458, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x459, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x498, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x4a0, Size: 0x8]
	float InputYawScale;//[Offset: 0x4b4, Size: 0x4]
	float InputPitchScale;//[Offset: 0x4b8, Size: 0x4]
	float InputRollScale;//[Offset: 0x4bc, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c0, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c0, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c0, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c0, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c0, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4c0, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x4c4, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x4c8, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x4d8, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x4d9, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x4da, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x4db, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x4dc, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x4e0, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x4e2, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x558, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x560, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x578, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x5e8, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x5f8, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x60358a0
	bool WasInputKeyJustPressed(Key Key);// 0x6035a0c
	void ToggleSpeaking(bool bInSpeaking);// 0x6039fb0
	void SwitchLevel(FString URL);// 0x603ae7c
	void StopHapticEffect(enum Hand);// 0x603749c
	void StartFire(byte FireModeNum);// 0x603a0c8
	void SetVirtualJoystickVisibility(bool bVisible);// 0x6034d64
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x6034b28
	void SetName(FString S);// 0x603af0c
	void SetMouseLocation(const int X, const int Y);// 0x603a14c
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x6037f34
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x603739c
	void SetDisableHaptics(bool bNewDisabled);// 0x6037310
	void SetControllerLightColor(Color Color);// 0x6037298
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x603472c
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x6034a2c
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x603495c
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x6036028
	void ServerViewPrevPlayer();// 0x60360f4
	void ServerViewNextPlayer();// 0x6036150
	void ServerVerifyViewTarget();// 0x60361ac
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x6036208
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x60362b8
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x6036380
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x6039a94
	void ServerToggleAILogging();// 0x6035e70
	void ServerShortTimeout();// 0x6036484
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x603b384
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x6036598
	void ServerRestartPlayer();// 0x603669c
	void ServerPause();// 0x60366f8
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x6036754
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0x6039d14
	void ServerCheckClientPossessionReliable();// 0x60364e0
	void ServerCheckClientPossession();// 0x603653c
	void ServerChangeName(FString S);// 0x60367fc
	void ServerCamera(FName NewMode);// 0x60368bc
	void ServerAcknowledgePossession(Pawn* P);// 0x6036974
	void SendToConsole(FString Command);// 0x6039554
	void RestartLevel();// 0x603b23c
	void ResetControllerLightColor();// 0x6037284
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x603a208
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x6037518
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x6037668
	void Pause();// 0x603af9c
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x60346a0
	void OnRep_TargetViewRotationYaw();// 0x603b45c
	void OnRep_TargetViewRotationRoll();// 0x603b448
	void OnRep_TargetViewRotationPitch();// 0x603b470
	void LocalTravel(FString URL);// 0x603b1ac
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x6037ab4
	bool IsInputKeyDown(Key Key);// 0x6035b78
	void InitVirtualJoystickBySetting();// 0x6034d48
	void GetViewportSize(out int SizeX, out int SizeY);// 0x6038028
	SpectatorPawn* GetSpectatorPawn();// 0x6034684
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x60351e4
	Vector GetInputVectorKeyState(Key Key);// 0x60355cc
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x6035450
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x6034fa0
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x60352d4
	float GetInputKeyTimeDown(Key Key);// 0x603507c
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x6034e74
	float GetInputAnalogKeyState(Key Key);// 0x6035738
	HUD* GetHUD();// 0x6037ff4
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x603a5d4
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x603a780
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x603a908
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x603aa90
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x603abf4
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x603ad38
	Vector GetFocalLocation();// 0x6034644
	void FOV(float NewFOV);// 0x603b258
	void EnableCheats();// 0x603b2dc
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection, bool bRebasing);// 0x603a330
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x603a4ec
	void ConsoleKey(Key Key);// 0x60395e4
	void ClientWasKicked(const FText KickReason);// 0x6036c78
	void ClientVoiceHandshakeComplete();// 0x6039f94
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x6036d58
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x6036de8
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x6039744
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x6036fac
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x603711c
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x6035ecc
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x603791c
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x6037c64
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x6037d34
	void ClientStartOnlineSession();// 0x6036c5c
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x6037dd4
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x6037e58
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x603b2f8
	void ClientSetHUD(class HUD NewHUDClass);// 0x6038104
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x6038188
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x6038294
	void ClientSetCameraMode(FName NewCamMode);// 0x6038420
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x60384a4
	void ClientSetBlockOnAsyncLoading();// 0x6038644
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x603b03c
	void ClientReturnToMainMenu(FString ReturnReason);// 0x603b11c
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x6036bbc
	void ClientRestart(Pawn* NewPawn);// 0x6038660
	void ClientReset();// 0x60386e4
	void ClientRepObjRef(Object* Object);// 0x603afb8
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x6036a2c
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x6038700
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x6038860
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x6038984
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x6038acc
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x60379e0
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x6038bd4
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x6038d20
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0x60398ec
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x6038fd8
	void ClientIgnoreMoveInput(bool bIgnore);// 0x60390f0
	void ClientIgnoreLookInput(bool bIgnore);// 0x603917c
	void ClientGotoState(FName NewState);// 0x6039208
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x603928c
	void ClientForceGarbageCollection();// 0x603935c
	void ClientFlushLevelStreaming();// 0x6039378
	void ClientEndOnlineSession();// 0x6036c40
	void ClientEnableNetworkVoice(bool bEnable);// 0x603a03c
	void ClientCommitMapChange();// 0x603938c
	void ClientClearCameraLensEffects();// 0x6037db8
	void ClientCapBandwidth(int Cap);// 0x60393a8
	void ClientCancelPendingMapChange();// 0x603942c
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x6039448
	void ClearAudioListenerOverride();// 0x6034a18
	void ClearAudioListenerAttenuationOverride();// 0x6034948
	bool CanRestartPlayer();// 0x6034908
	void Camera(FName NewMode);// 0x6034cc4
	void AddYawInput(float Val);// 0x6035d68
	void AddRollInput(float Val);// 0x6035ce4
	void AddPitchInput(float Val);// 0x6035dec
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x6034df0

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x118, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x128, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x138, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x160, Size: 0x10]
	Margin Padding;//[Offset: 0x170, Size: 0x10]
	bool bIsOpenSoftResLoader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x188, Size: 0x10]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x198, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1a8, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x1b8, Size: 0x8]
	int Priority;//[Offset: 0x1c0, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 0x1]
	bool bUseRenderTransformOnDrag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 0x1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c5, Size: 0x1]
	enum TickFrequency;//[Offset: 0x1d0, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x1d8, Size: 0x8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x1e0, Size: 0x10]
	void UnregisterInputComponent();// 0x5404c1c
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x54060a0
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x5405e64
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x5406024
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x5405de8
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x43841ec
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x5404c58
	void StopListeningForAllInputActions();// 0x5404c44
	void StopAnimationsAndLatentActions();// 0x5406260
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x5405388
	void StopAllAnimations();// 0x5405374
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x5406584
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x540502c
	void SetPadding(Margin InPadding);// 0x5405910
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x54062bc
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x54050ec
	void SetInputActionPriority(int NewPriority);// 0x5404b18
	void SetInputActionBlocking(bool bShouldBlock);// 0x5404a94
	void SetForegroundColor(SlateColor InForegroundColor);// 0x5405990
	void SetDesiredSizeInViewport(Vector2D Size);// 0x540650c
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x5405afc
	void SetAnchorsInViewport(Anchors Anchors);// 0x540648c
	void SetAlignmentInViewport(Vector2D Alignment);// 0x5406414
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x5404fb0
	void RemoveFromViewport();// 0x5406648
	void RegisterInputComponent();// 0x5404c30
	void PreConstruct(bool IsDesignTime);// 0x43841ec
	void PlaySound(SoundBase* SoundToPlay);// 0x5404eac
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x540559c
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x5405404
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x54054d0
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x5405778
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x54052f0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x43841ec
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x43841ec
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x43841ec
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x43841ec
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x43841ec
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x43841ec
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x43841ec
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x43841ec
	void OnPaint(out PaintContext Context);// 0x43841ec
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x43841ec
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x43841ec
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x43841ec
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x43841ec
	void OnMouseCaptureLost();// 0x43841ec
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x43841ec
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x43841ec
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x43841ec
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x43841ec
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x43841ec
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x43841ec
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x43841ec
	void OnInitialized();// 0x43841ec
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x43841ec
	void OnFocusLost(FocusEvent InFocusEvent);// 0x43841ec
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x43841ec
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x43841ec
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x43841ec
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x43841ec
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x43841ec
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x43841ec
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x5405bfc
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x5405b78
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x43841ec
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x43841ec
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x5404d18
	bool IsPlayingAnimation();// 0x5404e88
	bool IsListeningForInputAction(FName ActionName);// 0x5404b94
	bool IsInViewport();// 0x5406338
	bool IsInteractable();// 0x43841ec
	bool IsAnyAnimationPlaying();// 0x54051ac
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x5404f28
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x54051e4
	Pawn* GetOwningPlayerPawn();// 0x5406288
	bool GetIsVisible();// 0x5406370
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x540526c
	Anchors GetAnchorsInViewport();// 0x54063dc
	Vector2D GetAlignmentInViewport();// 0x54063a8
	void Destruct();// 0x43841ec
	void Construct();// 0x43841ec
	void CancelLatentActions();// 0x5406274
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x5406180
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x5405f44
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x5405c80
	void AddToViewport(int ZOrder);// 0x54066e4
	bool AddToPlayerScreen(int ZOrder);// 0x540665c

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 0x8]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte UsedLayerPolicy;//[Offset: 0xc1, Size: 0x1]
	byte PreservedLayerNum;//[Offset: 0xc2, Size: 0x1]
	byte Cursor;//[Offset: 0xc3, Size: 0x1]
	enum Clipping;//[Offset: 0xc4, Size: 0x1]
	enum Visibility;//[Offset: 0xc5, Size: 0x1]
	float RenderOpacity;//[Offset: 0xc8, Size: 0x4]
	bool DisablePixelSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 0x1]
	WidgetNavigation* Navigation;//[Offset: 0xd0, Size: 0x8]
	enum FlowDirectionPreference;//[Offset: 0xd8, Size: 0x1]
	PropertyBinding*[] NativeBindings;//[Offset: 0x100, Size: 0x10]
	bool UseDefaultLayerPolicy();// 0x540ef44
	void SetVisibility(enum InVisibility);// 0x540f7a4
	void SetUserFocus(PlayerController* PlayerController);// 0x540f238
	void SetToolTipText(out const FText InToolTipText);// 0x540f9a0
	void SetToolTip(Widget* Widget);// 0x540f924
	void SetRenderTranslation(Vector2D Translation);// 0x540fbc4
	void SetRenderTransformPivot(Vector2D Pivot);// 0x540fb4c
	void SetRenderTransformAngle(float Angle);// 0x540fc70
	void SetRenderTransform(WidgetTransform InTransform);// 0x540fddc
	void SetRenderShear(Vector2D Shear);// 0x540fcec
	void SetRenderScale(Vector2D Scale);// 0x540fd64
	void SetRenderOpacity(float InOpacity);// 0x540f6f4
	void SetPreservedLayerNum(byte InPreservedLayerNum);// 0x540eeac
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x540f018
	void SetKeyboardFocus();// 0x540f434
	void SetIsEnabled(bool bInIsEnabled);// 0x540fa88
	void SetCursor(byte InCursor);// 0x540f8a8
	void SetClipping(enum InClipping);// 0x540f644
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x540f11c
	void ResetCursor();// 0x540f894
	void RemoveFromParent();// 0x540efc8
	EventReply OnReply__DelegateSignature();// 0x43841ec
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x43841ec
	bool IsVisible();// 0x540f85c
	bool IsHovered();// 0x540f580
	void InvalidateLayoutAndVolatility();// 0x540f210
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x540f2b4
	bool HasUserFocus(PlayerController* PlayerController);// 0x540f3ac
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x540f448
	bool HasMouseCapture();// 0x540f510
	bool HasKeyboardFocus();// 0x540f548
	bool HasFocusedDescendants();// 0x540f33c
	bool HasAnyUserFocus();// 0x540f374
	Widget* GetWidget__DelegateSignature();// 0x43841ec
	enum GetVisibility();// 0x540f828
	FText GetText__DelegateSignature();// 0x43841ec
	enum GetSlateVisibility__DelegateSignature();// 0x43841ec
	SlateColor GetSlateColor__DelegateSignature();// 0x43841ec
	SlateBrush GetSlateBrush__DelegateSignature();// 0x43841ec
	float GetRenderTransformAngle();// 0x540fc3c
	float GetRenderOpacity();// 0x540f770
	byte GetPreservedLayerNum();// 0x540ef28
	PanelWidget* GetParent();// 0x540efe4
	PlayerController* GetOwningPlayer();// 0x540ee3c
	LocalPlayer* GetOwningLocalPlayer();// 0x540ee00
	byte GetMouseCursor__DelegateSignature();// 0x43841ec
	LinearColor GetLinearColor__DelegateSignature();// 0x43841ec
	bool GetIsEnabled();// 0x540fb14
	int GetInt32__DelegateSignature();// 0x43841ec
	GameInstance* GetGameInstance();// 0x540ee78
	float GetFloat__DelegateSignature();// 0x43841ec
	Vector2D GetDesiredSize();// 0x540f1dc
	enum GetClipping();// 0x540f6c0
	enum GetCheckBoxState__DelegateSignature();// 0x43841ec
	Geometry GetCachedGeometry();// 0x540ef90
	bool GetBool__DelegateSignature();// 0x43841ec
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x43841ec
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x43841ec
	void ForceVolatile(bool bForce);// 0x540f5c0
	void ForceLayoutPrepass();// 0x540f224
	void EnableLayerPolicy();// 0x540ef7c
	void DisableLayerPolicy();// 0x540ef68

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* UsingMovieScene;//[Offset: 0x348, Size: 0x8]
	MovieScene* MovieScene;//[Offset: 0x350, Size: 0x8]
	MovieScene*[] LQMovieScenes;//[Offset: 0x358, Size: 0x10]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x368, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x380, Size: 0x10]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x541129c
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x5411060
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x5411220
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x5410fe4
	float GetStartTime();// 0x5411490
	float GetEndTime();// 0x541145c
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x541137c
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x5411140

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 0x2f0]
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 0x30]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 0xa0]
	Guid SequenceSignature;//[Offset: 0x170, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 0xa8]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 0x60]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 0x60]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 0x20]
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 0x8]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 0x60]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0xe8, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 0x10]
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SectionEvaluationDataTree

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x50]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0xc]
	FrameRate TickResolution;//[Offset: 0x24, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x2c, Size: 0x4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x30, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x40, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x50, Size: 0x10]
	int HierarchicalBias;//[Offset: 0x60, Size: 0x4]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x68, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0x88, Size: 0x10]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0x98, Size: 0xc]

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: MovieSceneTrackFieldData

--------------------------------
Class: MovieSceneSubSectionFieldData

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x80, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x90, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0x98, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xa8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0xb8, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0xc0, Size: 0x8]
	enum EvaluationType;//[Offset: 0xc8, Size: 0x1]
	enum ClockSource;//[Offset: 0xc9, Size: 0x1]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0xd0, Size: 0x10]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0x10]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Guid Guid;//[Offset: 0x44, Size: 0x10]
	FString Name;//[Offset: 0x58, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10]
	enum Ownership;//[Offset: 0x80, Size: 0x1]
	FName LevelName;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Geometry

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* Content;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x110, Size: 0x10]
	bool RemoveChildAt(int Index);// 0x53f24d8
	bool RemoveChild(Widget* Content);// 0x53f23cc
	bool HasChild(Widget* Content);// 0x53f2560
	bool HasAnyChildren();// 0x53f2394
	int GetChildrenCount();// 0x53f2774
	int GetChildIndex(const Widget* Content);// 0x53f25e8
	Widget* GetChildAt(int Index);// 0x53f26f0
	Widget*[] GetAllChildren();// 0x53f266c
	void ClearChildren();// 0x53f2378
	PanelSlot* AddChild(Widget* Content);// 0x53f2454

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x3b8, Size: 0x8]
	void SetUserTag(FName InUserTag);// 0x54025cc
	FName GetUserTag();// 0x5402644

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]
	FName UserTag;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	enum VirtualizationMode;//[Offset: 0x31, Size: 0x1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x38, Size: 0x50]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x88, Size: 0x1c]
	float Duration;//[Offset: 0xa4, Size: 0x4]
	float MaxDistance;//[Offset: 0xa8, Size: 0x4]
	float TotalSamples;//[Offset: 0xac, Size: 0x4]
	float Priority;//[Offset: 0xb0, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0xb8, Size: 0x8]
	SoundModulation Modulation;//[Offset: 0xc0, Size: 0x10]
	SoundSubmix* SoundSubmixObject;//[Offset: 0xd0, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0xd8, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0xe8, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0xf0, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x100, Size: 0x10]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x28]
	SoundClass*[] ChildClasses;//[Offset: 0x50, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x60, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float StereoBleed;//[Offset: 0x8, Size: 0x4]
	float LFEBleed;//[Offset: 0xc, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x14, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 0x4]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	byte OutputTarget;//[Offset: 0x25, Size: 0x1]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x38]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x68, Size: 0x10]
	float InitialDelay;//[Offset: 0x78, Size: 0x4]
	float FadeInTime;//[Offset: 0x7c, Size: 0x4]
	float Duration;//[Offset: 0x80, Size: 0x4]
	float FadeOutTime;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8, Size: 0x4]
	float Gain0;//[Offset: 0xc, Size: 0x4]
	float Bandwidth0;//[Offset: 0x10, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x14, Size: 0x4]
	float Gain1;//[Offset: 0x18, Size: 0x4]
	float Bandwidth1;//[Offset: 0x1c, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x20, Size: 0x4]
	float Gain2;//[Offset: 0x24, Size: 0x4]
	float Bandwidth2;//[Offset: 0x28, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x2c, Size: 0x4]
	float Gain3;//[Offset: 0x30, Size: 0x4]
	float Bandwidth3;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x1c]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float VolumeScale;//[Offset: 0x8, Size: 0x4]
	float VolumeScaleAttackTime;//[Offset: 0xc, Size: 0x4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float VolumeScaleReleaseTime;//[Offset: 0x14, Size: 0x4]
	float VoiceStealReleaseTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x2e8]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1]
	enum AbsorptionMethod;//[Offset: 0xb3, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xb4, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xb5, Size: 0x1]
	float OmniRadius;//[Offset: 0xb8, Size: 0x4]
	float StereoSpread;//[Offset: 0xbc, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xc0, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xc4, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xc8, Size: 0x88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x150, Size: 0x88]
	float LPFFrequencyAtMin;//[Offset: 0x1d8, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1dc, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x1e8, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x1ec, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x1f0, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x1f4, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x1f8, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x1fc, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x200, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x204, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x208, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x20c, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x210, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x214, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x218, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x21c, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x220, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x224, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x228, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x22c, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x230, Size: 0x88]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x2b8, Size: 0x30]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	Vector AttenuationShapeExtents;//[Offset: 0x10, Size: 0xc]
	float ConeOffset;//[Offset: 0x1c, Size: 0x4]
	float FalloffDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundModulation
	SoundModulationPluginSourceSettingsBase*[] Settings;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SoundModulationPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]
	SoundSubmix* ParentSubmix;//[Offset: 0x38, Size: 0x8]
	enum ChannelFormat;//[Offset: 0x40, Size: 0x1]
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10]
	AmbisonicsSubmixSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4]
	float OutputVolume;//[Offset: 0x68, Size: 0x4]
	delegate OnSubmixRecordedFileDone;//[Offset: 0x70, Size: 0x10]
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x60893a0
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x60892a8
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x60895a4
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x6089324
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x60890f4
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x60891b4

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: AmbisonicsSubmixSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x110, Size: 0x4]
	int StreamingPriority;//[Offset: 0x114, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0x118, Size: 0x1]
	byte SoundGroup;//[Offset: 0x11a, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11b, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11b, Size: 0x1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11b, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11c, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11c, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11c, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11c, Size: 0x1]
	float[] FrequenciesToAnalyze;//[Offset: 0x120, Size: 0x10]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x130, Size: 0x10]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x140, Size: 0x10]
	FString SpokenText;//[Offset: 0x160, Size: 0x10]
	float SubtitlePriority;//[Offset: 0x170, Size: 0x4]
	float Volume;//[Offset: 0x174, Size: 0x4]
	float Pitch;//[Offset: 0x178, Size: 0x4]
	int NumChannels;//[Offset: 0x17c, Size: 0x4]
	int SampleRate;//[Offset: 0x180, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0x188, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x198, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x1a0, Size: 0x8]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10]
	float TimeSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float TimeSec;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSubmix* SoundSubmix;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x2c0, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x2c4, Size: 0x4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1]

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x53e3120
	void Dragged(out const PointerEvent PointerEvent);// 0x53e2e90
	void DragCancelled(out const PointerEvent PointerEvent);// 0x53e2fd8

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1]
	FText AccessibleText;//[Offset: 0x30, Size: 0x18]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	Margin Margin;//[Offset: 0x10, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x20, Size: 0x28]
	Object* ResourceObject;//[Offset: 0x48, Size: 0x8]
	FName ResourceName;//[Offset: 0x50, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x58, Size: 0x14]
	byte DrawAs;//[Offset: 0x6c, Size: 0x1]
	byte Tiling;//[Offset: 0x6d, Size: 0x1]
	byte Mirroring;//[Offset: 0x6e, Size: 0x1]
	byte ImageType;//[Offset: 0x6f, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int ControllerId;//[Offset: 0xe0, Size: 0x4]

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x58, Size: 0x10]
	World* World;//[Offset: 0x80, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x88, Size: 0x8]
	void SSSwapControllers();// 0x5f4a16c
	void ShowTitleSafeArea();// 0x5f4a150
	void SetConsoleTarget(int PlayerIndex);// 0x5f4a0cc

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xdc, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0xe0, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe4, Size: 0x1]
	byte AddressX;//[Offset: 0xe5, Size: 0x1]
	byte AddressY;//[Offset: 0xe6, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0xe8, Size: 0x8]
	int Blueprint_GetSizeY();// 0x60a4750
	int Blueprint_GetSizeX();// 0x60a4784

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x50, Size: 0x10]
	int LODBias;//[Offset: 0x60, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x64, Size: 0x1]
	byte Filter;//[Offset: 0x65, Size: 0x1]
	enum MipLoadOptions;//[Offset: 0x66, Size: 0x1]
	byte LODGroup;//[Offset: 0x67, Size: 0x1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bNotUsedInUltraQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x28, Size: 0x8]
	int NumCinematicMipLevels;//[Offset: 0x30, Size: 0x4]
	int StreamingIndex;//[Offset: 0x34, Size: 0x4]
	int CachedCombinedLODBias;//[Offset: 0x38, Size: 0x4]
	byte CachedNumResidentLODs;//[Offset: 0x3c, Size: 0x1]
	bool bCachedReadyForStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	float LoadPriorityFactor;//[Offset: 0x40, Size: 0x4]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	void ReceiveShutdown();// 0x43841ec
	void ReceiveInit();// 0x43841ec
	void HandleTravelError(byte FailureType);// 0x43841ec
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x43841ec
	void DebugRemovePlayer(int ControllerId);// 0x5f354b8
	void DebugCreatePlayer(int ControllerId);// 0x5f3553c

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	FName Filename;//[Offset: 0x8, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x2ac, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x2b0, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x2b8, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x2c0, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x2c8, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1]
	void TurnAtRate(float Rate);// 0x5f0f508
	void MoveUp_World(float Val);// 0x5f0f58c
	void MoveRight(float Val);// 0x5f0f610
	void MoveForward(float Val);// 0x5f0f694
	void LookUpAtRate(float Rate);// 0x5f0f484

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x578, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x608d35c
	float GetUnscaledSphereRadius();// 0x608d2f8
	float GetShapeScale();// 0x608d2b8
	float GetScaledSphereRadius();// 0x608d314

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PreviousLODLevel;//[Offset: 0x59c, Size: 0x4]
	float LODBoundScale;//[Offset: 0x5a0, Size: 0x4]
	int MinLOD;//[Offset: 0x5a4, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x5a8, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x5c0, Size: 0x4]
	bool bReuseLightMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c4, Size: 0x1]
	MapBuildDataRegistry* MapBuildDataRegistry;//[Offset: 0x5c8, Size: 0x8]
	MapBuildDataRegistry* OwnerBuildDataRegistry;//[Offset: 0x5d0, Size: 0x8]
	OrientedBox OrientedBox;//[Offset: 0x5d8, Size: 0x3c]
	Guid MeshCompGuid;//[Offset: 0x614, Size: 0x10]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x624, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x624, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x624, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x624, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x624, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x624, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x624, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x624, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x625, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x625, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x625, Size: 0x1]
	bool bMeshProbesLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x625, Size: 0x1]
	float MeshProbesVisibilityFraction;//[Offset: 0x628, Size: 0x4]
	float MeshProbesIntensity;//[Offset: 0x62c, Size: 0x4]
	int OverriddenLightMapRes;//[Offset: 0x630, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x634, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x638, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x63c, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x640, Size: 0x10]
	Guid[] CachedMapBuildId;//[Offset: 0x650, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x660, Size: 0x10]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x670, Size: 0x18]
	IdeaBakingPrimitiveSettings IdeaBakingSettings;//[Offset: 0x688, Size: 0x18]
	float BakedProbeIntensityScalar;//[Offset: 0x6a0, Size: 0x4]
	void SharedSHToOtherStaticMeshComponent(StaticMeshComponent* Other);// 0x609c670
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x609c6ec
	void SetReverseCulling(bool ReverseCulling);// 0x609c358
	void SetLODBoundScale(float NewLODBoundScale);// 0x609c2dc
	void SetForcedLodModel(int NewForcedLodModel);// 0x609c534
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x609c4b8
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x609c77c
	bool IsSharedSHSample();// 0x609c5b0
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x609c3dc
	bool CompareSharedSH(StaticMeshComponent* Other);// 0x609c5e8

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	PerPlatformFloat ScreenSizeMid;//[Offset: 0x68, Size: 0x4]
	PerPlatformFloat ScreenSizeLow;//[Offset: 0x88, Size: 0x4]
	bool bUseOrientedBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1]
	PerPlatformInt MinLOD;//[Offset: 0xbc, Size: 0x4]
	byte ShadowLodBias;//[Offset: 0xc0, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0xc4, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0xc8, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0xd8, Size: 0x4]
	int LightMapResolution;//[Offset: 0xdc, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0xe0, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0xe4, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0xe8, Size: 0x8]
	int LODForCollision;//[Offset: 0xf0, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0xf4, Size: 0x4]
	float MinScreenSize;//[Offset: 0xf8, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfc, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfc, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfc, Size: 0x1]
	bool bUseVertexCompress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfc, Size: 0x1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xfc, Size: 0x1]
	StaticMesh*[] LODResourceOverride;//[Offset: 0x110, Size: 0x10]
	Guid MeshGuid;//[Offset: 0x130, Size: 0x10]
	StaticMeshSocket*[] Sockets;//[Offset: 0x140, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0x160, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x16c, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x178, Size: 0x1c]
	OrientedBox ExtendedOrientedBox;//[Offset: 0x194, Size: 0x3c]
	float OrientedBoxSphereRadius;//[Offset: 0x1d0, Size: 0x4]
	int ElementToIgnoreForTexFactor;//[Offset: 0x1d4, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x1d8, Size: 0x10]
	Object* EditableMesh;//[Offset: 0x1f0, Size: 0x8]
	Object*[] EditableMeshLODs;//[Offset: 0x1f8, Size: 0x10]
	StaticMesh* ComplexCollisionMesh;//[Offset: 0x208, Size: 0x8]
	NavCollisionBase* NavCollision;//[Offset: 0x210, Size: 0x8]
	void RemoveSocket(StaticMeshSocket* Socket);// 0x609977c
	int GetNumSections(int InLOD);// 0x6099a00
	int GetNumLODs();// 0x6099b1c
	int GetMaterialIndex(FName MaterialSlotName);// 0x60998f8
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x609997c
	BoxSphereBounds GetBounds();// 0x6099ad0
	Box GetBoundingBox();// 0x6099a84
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x60997f8
	void AddSocket(StaticMeshSocket* Socket);// 0x609987c

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: OrientedBox
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Vector AxisX;//[Offset: 0xc, Size: 0xc]
	Vector AxisY;//[Offset: 0x18, Size: 0xc]
	Vector AxisZ;//[Offset: 0x24, Size: 0xc]
	float ExtentX;//[Offset: 0x30, Size: 0x4]
	float ExtentY;//[Offset: 0x34, Size: 0x4]
	float ExtentZ;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bUseUnwrapMaterialExport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bStaticMeshUseIdeaAO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: IdeaBakingPrimitiveSettings
	float IdeaMaterialDiffuse;//[Offset: 0x0, Size: 0x4]
	float LightmapBoost;//[Offset: 0x4, Size: 0x4]
	float MaxLuminance;//[Offset: 0x8, Size: 0x4]
	float DiscardPixelFrontfaceFactor;//[Offset: 0xc, Size: 0x4]
	float SunIntensity;//[Offset: 0x10, Size: 0x4]
	float LocalLightsAffectMaxDistance;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x250, Size: 0x8]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258, Size: 0x1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258, Size: 0x1]
	int CurrentTargetIndex;//[Offset: 0x25c, Size: 0x4]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 0x1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x260, Size: 0x1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x260, Size: 0x1]
	Actor*[] PostRenderedActors;//[Offset: 0x268, Size: 0x10]
	FName[] DebugDisplay;//[Offset: 0x280, Size: 0x10]
	FName[] ToggledDebugCategories;//[Offset: 0x290, Size: 0x10]
	Canvas* Canvas;//[Offset: 0x2a0, Size: 0x8]
	Canvas* DebugCanvas;//[Offset: 0x2a8, Size: 0x8]
	DebugTextInfo[] DebugTextList;//[Offset: 0x2b0, Size: 0x10]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x2c0, Size: 0x8]
	Actor* ShowDebugTargetActor;//[Offset: 0x2c8, Size: 0x8]
	void ShowHUD();// 0x5f4e600
	void ShowDebugToggleSubCategory(FName Category);// 0x5f4e500
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x5f4e484
	void ShowDebug(FName DebugType);// 0x5f4e57c
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x5f4e004
	void RemoveAllDebugStrings();// 0x5f4e0cc
	void ReceiveHitBoxRelease(const FName BoxName);// 0x43841ec
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x43841ec
	void ReceiveHitBoxClick(const FName BoxName);// 0x43841ec
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x43841ec
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x43841ec
	Vector Project(Vector Location);// 0x5f4c9dc
	void PreviousDebugTarget();// 0x5f4c42c
	void NextDebugTarget();// 0x5f4c448
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x5f4de48
	PlayerController* GetOwningPlayerController();// 0x5f4c498
	Pawn* GetOwningPawn();// 0x5f4c464
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x5f4c660
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x5f4d304
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x5f4d494
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x5f4dc28
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x5f4d8d8
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x5f4ca6c
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x5f4cd3c
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x5f4cf50
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x5f4da5c
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x5f4c87c
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x5f4c4cc
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x5f4e0e0

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x5ef0a68
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x5ef0b80
	Vector K2_Project(Vector WorldLocation);// 0x5ef0d74
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x5ef10a0
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x5ef1cec
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x5ef1750
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x5ef0e04
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x5ef0f7c
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x5ef1af8
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x5ef1f70
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x5ef11c4
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x5ef130c
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x5ef0c58

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8]
	int NumCharacters;//[Offset: 0x118, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10]
	float ScalingFactor;//[Offset: 0x130, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x15, Size: 0x1]
	FString Chars;//[Offset: 0x18, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4]
	int XPadding;//[Offset: 0x78, Size: 0x4]
	int YPadding;//[Offset: 0x7c, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int Kerning;//[Offset: 0x94, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]
	SoftObjectPath FontSoftPath;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	Int32Range[] CharacterRangesCache;//[Offset: 0x28, Size: 0x10]
	FString Cultures;//[Offset: 0x38, Size: 0x10]
	FString JustCultures;//[Offset: 0x48, Size: 0x10]
	FString CommonFlag;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc]
	FString DebugText;//[Offset: 0x20, Size: 0x10]
	float TimeRemaining;//[Offset: 0x30, Size: 0x4]
	float Duration;//[Offset: 0x34, Size: 0x4]
	Color TextColor;//[Offset: 0x38, Size: 0x4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc]
	Font* Font;//[Offset: 0x50, Size: 0x8]
	float FontScale;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float OscillationDuration;//[Offset: 0x2c, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x8c, Size: 0x4]
	float AnimScale;//[Offset: 0x90, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x94, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0xa0, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 0x8]
	float ShakeScale;//[Offset: 0x148, Size: 0x4]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 0x8]
	void ReceiveStopShake(bool bImmediately);// 0x43841ec
	void ReceivePlayShake(float Scale);// 0x43841ec
	bool ReceiveIsFinished();// 0x5eed6fc
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x43841ec

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	bool bUseLODTransimitFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	float LODTransimitFOV;//[Offset: 0x20, Size: 0x4]
	float DesiredFOV;//[Offset: 0x24, Size: 0x4]
	float OrthoWidth;//[Offset: 0x28, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x2c, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x30, Size: 0x4]
	float AspectRatio;//[Offset: 0x34, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x39, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x3c, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x620]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x660, Size: 0x8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_ACESFitParam;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_WhitePoint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_ColorGradingParam2;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_ColorGradingParam3;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_Brightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_LDRBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLDRMaxHeight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLDRClampNumMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLDRClampNumMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLDRMinBrightness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLDRMaxBrightness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLDRBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_SRTIndirectLightingColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_SRTIndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_SRTMaxOcclusionDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_SRTOcclusionContrast;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_SRTOcclusionExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_SRTMinOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_SRTSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_SRTSpecularMinOcclusion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_SRTOcclusionTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_SRTFilterSmoothness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bOverride_FxaaConsoleEdgeSharpness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	bool bOverride_FxaaConsoleEdgeThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1]
	bool bOverride_FxaaConsoleEdgeThresholdMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1]
	bool bOverride_Fog_FogColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1]
	bool bOverride_Fog_DistanceNear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_DistanceFar;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_Density;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_MinFogHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_MaxFogHeight;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_DirectionalInscatteringColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_DirectionalInscatteringExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_DirectionalInscatteringStartDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17, Size: 0x1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 0x1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 0x1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 0x1]
	byte BloomMethod;//[Offset: 0x1b, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x1c, Size: 0x1]
	float WhiteTemp;//[Offset: 0x20, Size: 0x4]
	float WhiteTint;//[Offset: 0x24, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x40, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x50, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0x60, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0x70, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 0x4]
	float BlueCorrection;//[Offset: 0x178, Size: 0x4]
	float ExpandGamut;//[Offset: 0x17c, Size: 0x4]
	float FilmSlope;//[Offset: 0x180, Size: 0x4]
	float FilmToe;//[Offset: 0x184, Size: 0x4]
	float FilmShoulder;//[Offset: 0x188, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x18c, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x190, Size: 0x4]
	Vector4 ACESFitParam;//[Offset: 0x1a0, Size: 0x10]
	float WhitePoint;//[Offset: 0x1b0, Size: 0x4]
	Vector4 ColorGradingParam2;//[Offset: 0x1c0, Size: 0x10]
	Vector2D ColorGradingParam3;//[Offset: 0x1d0, Size: 0x8]
	LinearColor FilmWhitePoint;//[Offset: 0x1d8, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x1e8, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1f8, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1fc, Size: 0x4]
	float FilmSaturation;//[Offset: 0x200, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x204, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x214, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x224, Size: 0x10]
	float FilmContrast;//[Offset: 0x234, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x238, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x23c, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x240, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x244, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x254, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x258, Size: 0x4]
	float Brightness;//[Offset: 0x25c, Size: 0x4]
	float LDRBrightness;//[Offset: 0x260, Size: 0x4]
	float BloomIntensity;//[Offset: 0x268, Size: 0x4]
	float BloomThreshold;//[Offset: 0x26c, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x270, Size: 0x4]
	float Bloom1Size;//[Offset: 0x274, Size: 0x4]
	float Bloom2Size;//[Offset: 0x278, Size: 0x4]
	float Bloom3Size;//[Offset: 0x27c, Size: 0x4]
	float Bloom4Size;//[Offset: 0x280, Size: 0x4]
	float Bloom5Size;//[Offset: 0x284, Size: 0x4]
	float Bloom6Size;//[Offset: 0x288, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x28c, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x29c, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x2ac, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x2bc, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x2cc, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x2dc, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x2ec, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2f0, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2f8, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x300, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x304, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x308, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x30c, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x310, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x318, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x31c, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x32c, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x33c, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x340, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x348, Size: 0x4]
	float CameraISO;//[Offset: 0x34c, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x350, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x354, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x358, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x35c, Size: 0x4]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x360, Size: 0x8]
	float AutoExposureLowPercent;//[Offset: 0x368, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x36c, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x370, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x374, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x378, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x37c, Size: 0x4]
	float AutoExposureLDRMaxHeight;//[Offset: 0x380, Size: 0x4]
	int AutoExposureLDRClampNumMin;//[Offset: 0x384, Size: 0x4]
	int AutoExposureLDRClampNumMax;//[Offset: 0x388, Size: 0x4]
	float AutoExposureLDRMinBrightness;//[Offset: 0x38c, Size: 0x4]
	float AutoExposureLDRMaxBrightness;//[Offset: 0x390, Size: 0x4]
	float AutoExposureLDRBias;//[Offset: 0x394, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x398, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x39c, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x3a0, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x3a4, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x3a8, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x3b8, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x3bc, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x3c0, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x3c8, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x448, Size: 0x4]
	float GrainJitter;//[Offset: 0x44c, Size: 0x4]
	float GrainIntensity;//[Offset: 0x450, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x454, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x458, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x45c, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x464, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x468, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x46c, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x470, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x474, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x478, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x47c, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x480, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x484, Size: 0x4]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x488, Size: 0x1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x48c, Size: 0x4]
	LinearColor SRTIndirectLightingColor;//[Offset: 0x490, Size: 0x10]
	float SRTIndirectLightingIntensity;//[Offset: 0x4a0, Size: 0x4]
	float SRTMaxOcclusionDistance;//[Offset: 0x4a4, Size: 0x4]
	float SRTOcclusionContrast;//[Offset: 0x4a8, Size: 0x4]
	float SRTOcclusionExponent;//[Offset: 0x4ac, Size: 0x4]
	float SRTMinOcclusion;//[Offset: 0x4b0, Size: 0x4]
	float SRTSpecularOcclusionExponent;//[Offset: 0x4b4, Size: 0x4]
	float SRTSpecularMinOcclusion;//[Offset: 0x4b8, Size: 0x4]
	LinearColor SRTOcclusionTint;//[Offset: 0x4bc, Size: 0x10]
	float SRTFilterSmoothness;//[Offset: 0x4cc, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x4d0, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x4e0, Size: 0x4]
	bool RayTracingGI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e4, Size: 0x1]
	int RayTracingGIMaxBounces;//[Offset: 0x4e8, Size: 0x4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x4ec, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x4f0, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x4f8, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x500, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x504, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x508, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x50c, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x510, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x514, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x518, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x51c, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x520, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x524, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x528, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x52c, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x530, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x534, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x538, Size: 0x4]
	int MotionBlurTargetFPS;//[Offset: 0x53c, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x540, Size: 0x4]
	float LPVIntensity;//[Offset: 0x544, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x548, Size: 0x4]
	float LPVSize;//[Offset: 0x54c, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x550, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x554, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x558, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x55c, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x560, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x564, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x568, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x56c, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x570, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x574, Size: 0x4]
	enum ReflectionsType;//[Offset: 0x578, Size: 0x1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x57c, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x580, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x584, Size: 0x4]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x588, Size: 0x4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x58c, Size: 0x4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x590, Size: 0x4]
	enum RayTracingReflectionsShadows;//[Offset: 0x594, Size: 0x1]
	enum TranslucencyType;//[Offset: 0x595, Size: 0x1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x598, Size: 0x4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x59c, Size: 0x4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x5a0, Size: 0x4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x5a4, Size: 0x1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a5, Size: 0x1]
	int PathTracingMaxBounces;//[Offset: 0x5a8, Size: 0x4]
	int PathTracingSamplesPerPixel;//[Offset: 0x5ac, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x5b0, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x5b4, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x5b8, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x5c0, Size: 0x10]
	float FxaaConsoleEdgeSharpness;//[Offset: 0x5d0, Size: 0x4]
	float FxaaConsoleEdgeThreshold;//[Offset: 0x5d4, Size: 0x4]
	float FxaaConsoleEdgeThresholdMin;//[Offset: 0x5d8, Size: 0x4]
	LinearColor Fog_FogColor;//[Offset: 0x5dc, Size: 0x10]
	float Fog_DistanceNear;//[Offset: 0x5ec, Size: 0x4]
	float Fog_DistanceFar;//[Offset: 0x5f0, Size: 0x4]
	float Fog_Density;//[Offset: 0x5f4, Size: 0x4]
	float Fog_MinFogHeight;//[Offset: 0x5f8, Size: 0x4]
	float Fog_MaxFogHeight;//[Offset: 0x5fc, Size: 0x4]
	LinearColor Fog_DirectionalInscatteringColor;//[Offset: 0x600, Size: 0x10]
	float Fog_DirectionalInscatteringExponent;//[Offset: 0x610, Size: 0x4]
	float Fog_DirectionalInscatteringStartDistance;//[Offset: 0x614, Size: 0x4]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x620]
	float BasePostProcessBlendWeight;//[Offset: 0x680, Size: 0x4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x250, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x258, Size: 0x8]
	float DefaultFOV;//[Offset: 0x268, Size: 0x4]
	bool bUseLODTransimitFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 0x1]
	float LODTransimitFOV;//[Offset: 0x270, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x278, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x280, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x2d0, Size: 0x6c0]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x990, Size: 0x6c0]
	TViewTarget ViewTarget;//[Offset: 0x1050, Size: 0x6d0]
	TViewTarget PendingViewTarget;//[Offset: 0x1720, Size: 0x6d0]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1e10, Size: 0x6c0]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x24d0, Size: 0x6c0]
	CameraModifier*[] ModifierList;//[Offset: 0x2b90, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2ba0, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x2bb0, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x2bb4, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x2bc0, Size: 0xc]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x2be0, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x2bf0, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x2bf8, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2c38, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2c58, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2c68, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x2c78, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c80, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c80, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2c80, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2c80, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c81, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x2c84, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x2c88, Size: 0x4]
	float ViewYawMin;//[Offset: 0x2c8c, Size: 0x4]
	float ViewYawMax;//[Offset: 0x2c90, Size: 0x4]
	float ViewRollMin;//[Offset: 0x2c94, Size: 0x4]
	float ViewRollMax;//[Offset: 0x2c98, Size: 0x4]
	float ServerUpdateCameraTimeout;//[Offset: 0x2ca0, Size: 0x4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x6032ce4
	void StopCameraFade();// 0x6032980
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x60323c4
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x6032c14
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x6032494
	void StopAllCameraShakes(bool bImmediately);// 0x6032b88
	void StopAllCameraAnims(bool bImmediate);// 0x6032338
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x603299c
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x6032870
	void SetGameCameraCutThisFrame();// 0x6032314
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x60332d0
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x6033104
	void PlayShakeCamera(CameraShake* CameraShake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x6032f10
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x6032db4
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x6032564
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x6033524
	void OnPhotographySessionStart();// 0x6033508
	void OnPhotographySessionEnd();// 0x60334ec
	void OnPhotographyMultiPartCaptureStart();// 0x60334d0
	void OnPhotographyMultiPartCaptureEnd();// 0x60334b4
	PlayerController* GetOwningPlayerController();// 0x6033478
	float GetFOVAngle();// 0x6033294
	Rotator GetCameraRotation();// 0x6033254
	Vector GetCameraLocation();// 0x6033214
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x6033360
	CameraShake* CreateShakeCamera(class CameraShake ShakeClass);// 0x603305c
	void ClearCameraLensEffects();// 0x60330e8
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x43841ec
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x60333ec
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x6033188

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	byte PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x5eeae60
	void SetScale(float NewDuration);// 0x5eead68
	void SetDuration(float NewDuration);// 0x5eeade4

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x29, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	bool IsDisabled();// 0x5eec630
	Actor* GetViewTarget();// 0x5eec5f4
	void EnableModifier();// 0x5eec54c
	void DisableModifier(bool bImmediate);// 0x5eec568
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x43841ec
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x43841ec

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x2a0, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x2a8, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x2b0, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x2c0, Size: 0x30]
	float BaseFOV;//[Offset: 0x2f0, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f4, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2f8, Size: 0x10]
	float DistFromCamera;//[Offset: 0x308, Size: 0x4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x250, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x260, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x270, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x280, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x290, Size: 0x10]
	void ToggleActive();// 0x5f1ce4c
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x5f1cc14
	void SetTemplate(ParticleSystem* NewTemplate);// 0x5f1cd90
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x5f1c9e0
	void SetFloatParameter(FName ParameterName, float Param);// 0x5f1ccd0
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x5f1cb58
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x5f1ca9c
	void OnRep_bCurrentlyActive();// 0x5f1ce88
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x5f1cea4
	bool IsActive();// 0x5f1ce14
	void Deactivate();// 0x5f1ce60
	void Activate();// 0x5f1ce74

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	byte SystemUpdateMode;//[Offset: 0x28, Size: 0x1]
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x30, Size: 0x4]
	float WarmupTime;//[Offset: 0x34, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x38, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bEnableTranslucentOptimization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool bRenderingInFullResolution;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	bool bCalCoverage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	float CoverageBoundScale;//[Offset: 0x64, Size: 0x4]
	float OverDrawScale;//[Offset: 0x68, Size: 0x4]
	float LODDistanceCheckTime;//[Offset: 0x6c, Size: 0x4]
	byte LODMethod;//[Offset: 0x70, Size: 0x1]
	float[] LODDistances;//[Offset: 0x78, Size: 0x10]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x90, Size: 0x10]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	Box FixedRelativeBoundingBox;//[Offset: 0xa4, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xc0, Size: 0x4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc4, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc4, Size: 0x1]
	float Delay;//[Offset: 0xc8, Size: 0x4]
	float DelayLow;//[Offset: 0xcc, Size: 0x4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd0, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xd4, Size: 0x4]
	enum InsignificantReaction;//[Offset: 0xd8, Size: 0x1]
	float InsignificanceDelay;//[Offset: 0xdc, Size: 0x4]
	enum MaxSignificanceLevel;//[Offset: 0xe0, Size: 0x1]
	uint32 MaxPoolSize;//[Offset: 0xe4, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xe8, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xf4, Size: 0x4]
	byte OcclusionBoundsMethod;//[Offset: 0xf8, Size: 0x1]
	Box CustomOcclusionBounds;//[Offset: 0xfc, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0x118, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0x128, Size: 0x10]
	FName[] Tags;//[Offset: 0x140, Size: 0x10]
	bool ContainsEmitterType(class Object TypeData);// 0x601e4b8

--------------------------------
Class: FXSystemAsset.Object

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	bool bSupportMergedCrossEmitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	int SubUVDataOffset;//[Offset: 0x34, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x38, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x39, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3b, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3b, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3b, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3b, Size: 0x1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	Vector EmitterOrigin;//[Offset: 0x38, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x44, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x50, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0x54, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x58, Size: 0x4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 0x1]
	byte SortMode;//[Offset: 0x5d, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5e, Size: 0x1]
	float EmitterDuration;//[Offset: 0x60, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0x64, Size: 0x4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	int EmitterLoops;//[Offset: 0x6c, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x70, Size: 0x38]
	byte ParticleBurstMethod;//[Offset: 0xa8, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0xb0, Size: 0x10]
	float EmitterDelay;//[Offset: 0xc0, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xc4, Size: 0x4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xc9, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xcc, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xd0, Size: 0x4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	float RandomImageTime;//[Offset: 0xd8, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xdc, Size: 0x4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1]
	Vector MacroUVPosition;//[Offset: 0xe4, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xf0, Size: 0x4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1]
	int MaxDrawCount;//[Offset: 0xf8, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xfc, Size: 0x1]
	Texture2D* CutoutTexture;//[Offset: 0x100, Size: 0x8]
	byte BoundingMode;//[Offset: 0x108, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0x109, Size: 0x1]
	float AlphaThreshold;//[Offset: 0x10c, Size: 0x4]
	byte EmitterNormalsMode;//[Offset: 0x110, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0x114, Size: 0xc]
	Vector NormalsCylinderDirection;//[Offset: 0x120, Size: 0xc]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12c, Size: 0x1]
	FName[] NamedMaterialOverrides;//[Offset: 0x130, Size: 0x10]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 0x4]
	float MaxValue;//[Offset: 0x2c, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 0x1]
	byte EntryCount;//[Offset: 0x1, Size: 0x1]
	byte EntryStride;//[Offset: 0x2, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x3, Size: 0x1]
	float TimeScale;//[Offset: 0x4, Size: 0x4]
	float TimeBias;//[Offset: 0x8, Size: 0x4]
	float[] Values;//[Offset: 0x10, Size: 0x10]
	byte LockFlag;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x38]
	RawDistributionFloat RateScale;//[Offset: 0x68, Size: 0x38]
	byte ParticleBurstMethod;//[Offset: 0xa0, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0xa8, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xb8, Size: 0x38]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x50]
	OrbitOptions OffsetOptions;//[Offset: 0x80, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x88, Size: 0x50]
	OrbitOptions RotationOptions;//[Offset: 0xd8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xe0, Size: 0x50]
	OrbitOptions RotationRateOptions;//[Offset: 0x130, Size: 0x4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 0x4]
	float MaxValue;//[Offset: 0x2c, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x30, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x3c, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1]
	FName EventName;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x560, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x568, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x578, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x589, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x589, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x589, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x589, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58a, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58a, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58a, Size: 0x1]
	byte LODMethod;//[Offset: 0x595, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x596, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x598, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x5a8, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x5b8, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x5c8, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x5d8, Size: 0x10]
	Vector OldPosition;//[Offset: 0x5e8, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x5f4, Size: 0xc]
	float WarmupTime;//[Offset: 0x600, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x604, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x60c, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x614, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x638, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x650, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x6a8, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x6b0, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x6b8, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x6b9, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x6ba, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x6e8, Size: 0x10]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x6021828
	void SetTemplate(ParticleSystem* NewTemplate);// 0x6021af8
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x6021b74
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x6021c30
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x602260c
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x6022500
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x6022714
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x6022928
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x602281c
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x6022a30
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x6022b38
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x6022da4
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x6022bfc
	void ReleaseToPool();// 0x6021814
	int GetNumActiveParticles();// 0x6021ac4
	MaterialInterface* GetNamedMaterial(FName InName);// 0x60216b4
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x6021e34
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x6021d00
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x6021f60
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x60221c0
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x602208c
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x60222ec
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x6022418
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x6021530
	void EndTrails();// 0x602196c
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x6021740
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x6021980

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x60210a0
	void SetFloatParameter(FName ParameterName, float Param);// 0x6021164
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x6020fdc
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x6020f18

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x5ff3ec0
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x5ff4000
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x5ff4140
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x5ff3d38
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x5ff3e38
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x5ff3f7c
	float K2_GetScalarParameterValue(FName ParameterName);// 0x5ff40bc
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x5ff3c70
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x5ff3b78
	void CopyInterpParameters(MaterialInstance* Source);// 0x5ff3bf4

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0x90, Size: 0x8]
	MaterialParameterCollection* OverridedParameterCollection;//[Offset: 0x98, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa2, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa2, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xb0, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xc0, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0xd0, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0xe0, Size: 0x10]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0xf0, Size: 0x10]
	Object*[] PermutationTextureReferences;//[Offset: 0x110, Size: 0x10]
	StaticParameterSet StaticParameters;//[Offset: 0x120, Size: 0x40]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingRate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_UseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool UseAsEarlyZ;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_TranslucencyOptimization;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool TranslucencyOptimization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_MixCSMWithStaticShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bMixCSMWithStaticShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ExtraMaterialFlags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	byte BlendMode;//[Offset: 0x3, Size: 0x1]
	byte ShadingModel;//[Offset: 0x4, Size: 0x1]
	byte ShadingRate;//[Offset: 0x5, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 0x4]
	int ExtraMaterialFlags;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: StaticSwitchParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: StaticComponentMaskParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: StaticTerrainLayerWeightParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMaterialLayersParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	MaterialLayersFunctions Value;//[Offset: 0x10, Size: 0x40]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x54, Size: 0x10]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x6b0]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x6b0]
	PlayerState* PlayerState;//[Offset: 0x6c0, Size: 0x8]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake*[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x250, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x258, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x260, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1]
	float AspectRatio;//[Offset: 0x274, Size: 0x4]
	float FOVAngle;//[Offset: 0x278, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x27c, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x280, Size: 0x620]
	int GetAutoActivatePlayerIndex();// 0x5eea7a8

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x258, Size: 0x4]
	float OrthoWidth;//[Offset: 0x25c, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x260, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x264, Size: 0x4]
	float AspectRatio;//[Offset: 0x268, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 0x1]
	bool bUseLODTransimitFOV;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26c, Size: 0x1]
	float LODTransimitFOV;//[Offset: 0x270, Size: 0x4]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x275, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x2b0, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2e0, Size: 0x620]
	void SetUseLODTransimitFOV(bool bInUseLODTransimitFOV);// 0x5eeba7c
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x5eebb08
	void SetProjectionMode(byte InProjectionMode);// 0x5eeb98c
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x5eeb914
	void SetOrthoWidth(float InOrthoWidth);// 0x5eebd88
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x5eebd10
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x5eebc98
	void SetLODTransimitFOV(float InLODTransimitFOV);// 0x5eeba04
	void SetFieldOfView(float InFieldOfView);// 0x5eebe00
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x5eebb94
	void SetAspectRatio(float InAspectRatio);// 0x5eebc20
	void RemoveBlendable(interface classNone InBlendableObject);// 0x5eeb548
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x5eeb794
	void FrustumCullActors(out Actor*[] InActorList, byte AxisConstraint, bool bIntersectPoint);// 0x5eeb41c
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x5eeb650

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: TouchInputControl
	bool IsUseAtlas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D AtlasSize;//[Offset: 0x4, Size: 0x8]
	IntPoint Image1Pos;//[Offset: 0xc, Size: 0x8]
	IntPoint Image1Size;//[Offset: 0x14, Size: 0x8]
	IntPoint Image2Pos;//[Offset: 0x1c, Size: 0x8]
	IntPoint Image2Size;//[Offset: 0x24, Size: 0x8]
	Texture2D* Image1;//[Offset: 0x30, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x38, Size: 0x8]
	Vector2D Center;//[Offset: 0x40, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x48, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x50, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x58, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x60, Size: 0x8]
	Key MainInputKey;//[Offset: 0x68, Size: 0x18]
	Key AltInputKey;//[Offset: 0x80, Size: 0x18]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	void Walk();// 0x5efe614
	void ViewSelf();// 0x5efe2cc
	void ViewPlayer(FString S);// 0x5efe23c
	void ViewClass(class Actor DesiredClass);// 0x5efe134
	void ViewActor(FName ActorName);// 0x5efe1b8
	void UpdateSafeArea();// 0x5efd698
	void ToggleServerStatReplicatorUpdateStatNet();// 0x5efd6ac
	void ToggleServerStatReplicatorClientOverwrite();// 0x5efd6c0
	void ToggleDebugCamera();// 0x5efdf8c
	void ToggleAILogging();// 0x5efdf70
	void TestCollisionDistance();// 0x5efdcb4
	void Teleport();// 0x5efe6d0
	void Summon(FString ClassName);// 0x5efe304
	void StreamLevelOut(FName PackageName);// 0x5efdfa8
	void StreamLevelIn(FName PackageName);// 0x5efe0b0
	void SpawnServerStatReplicator();// 0x5efd6e8
	void Slomo(float NewTimeDilation);// 0x5efe558
	void SetWorldOrigin();// 0x5efd80c
	void SetMouseSensitivityToDefault();// 0x5efd7f0
	void ServerToggleAILogging();// 0x5efdf14
	void ReceiveInitCheatManager();// 0x43841ec
	void ReceiveEndPlay();// 0x43841ec
	void PlayersOnly();// 0x5efe2e8
	void OnlyLoadLevel(FName PackageName);// 0x5efe02c
	void LogLoc();// 0x5efd820
	void InvertMouse();// 0x5efd7d4
	void God();// 0x5efe5dc
	void Ghost();// 0x5efe5f8
	void FreezeFrame(float Delay);// 0x5efe6ec
	void Fly();// 0x5efe630
	void FlushLog();// 0x5efd83c
	void EnableDebugCamera();// 0x5efd5e0
	void DumpVoiceMutingState();// 0x5efdc44
	void DumpPartyState();// 0x5efdc7c
	void DumpOnlineSessionState();// 0x5efdc98
	void DumpChatState();// 0x5efdc60
	void DisableDebugCamera();// 0x5efd5c4
	void DestroyTarget();// 0x5efe4b8
	void DestroyServerStatReplicator();// 0x5efd6d4
	void DestroyPawns(class Pawn aClass);// 0x5efe394
	void DestroyAllPawnsExceptTarget();// 0x5efe418
	void DestroyAll(class Actor aClass);// 0x5efe434
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x5efde34
	void DebugCapsuleSweepPawn();// 0x5efdcec
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x5efdd24
	void DebugCapsuleSweepClear();// 0x5efdcd0
	void DebugCapsuleSweepChannel(byte Channel);// 0x5efddb0
	void DebugCapsuleSweepCapture();// 0x5efdd08
	void DebugCapsuleSweep();// 0x5efdef8
	void DamageTarget(float DamageAmount);// 0x5efe4d4
	void ClearUnloadLevelKeyword();// 0x5efd5fc
	void CheatScript(FString ScriptName);// 0x5efd6fc
	void ChangeSize(float F);// 0x5efe64c
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x5efd858
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x5efda74
	void BugIt(FString ScreenShotDescription);// 0x5efd9e4
	void AddUnloadLevelKeyword(FString Keyword);// 0x5efd610

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60d, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60d, Size: 0x1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60d, Size: 0x1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60d, Size: 0x1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60d, Size: 0x1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x60d, Size: 0x1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60d, Size: 0x1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60d, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x610, Size: 0x8]
	Actor* SelectedActor;//[Offset: 0x618, Size: 0x8]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x620, Size: 0x8]
	HitResult SelectedHitPoint;//[Offset: 0x628, Size: 0x88]
	PlayerController* OriginalControllerRef;//[Offset: 0x6b0, Size: 0x8]
	Player* OriginalPlayer;//[Offset: 0x6b8, Size: 0x8]
	float SpeedScale;//[Offset: 0x6c0, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x6c4, Size: 0x4]
	float InitialAccel;//[Offset: 0x6c8, Size: 0x4]
	float InitialDecel;//[Offset: 0x6cc, Size: 0x4]
	void ToggleDisplay();// 0x5f0d744
	void ShowDebugSelectedInfo();// 0x5f0d758
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x5f0d694
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x43841ec
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x43841ec
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x43841ec
	Actor* GetSelectedActor();// 0x5f0d710

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x55c, Size: 0x4]
	float FrustumAngle;//[Offset: 0x560, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x564, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x568, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x56c, Size: 0x4]
	Texture* Texture;//[Offset: 0x570, Size: 0x8]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	bool bObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	int MaxPacket;//[Offset: 0xa4, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	UniqueNetIdRepl PlayerID;//[Offset: 0x168, Size: 0x28]
	double LastReceiveTime;//[Offset: 0x1f8, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x14c0, Size: 0x10]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x19a8, Size: 0x8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4]
	int MaxClientRate;//[Offset: 0x64, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4]
	World* World;//[Offset: 0x140, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8]
	FName NetDriverName;//[Offset: 0x190, Size: 0x8]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x1d8, Size: 0x10]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1e8, Size: 0x50]
	FilteredActorSetting[] FilteredActorSettings;//[Offset: 0x238, Size: 0x10]
	FilteredActorSetting[] FilteredActorSettingsRuntime;//[Offset: 0x248, Size: 0x10]
	Channel*[] ActorChannelPool;//[Offset: 0x260, Size: 0x10]
	float Time;//[Offset: 0x278, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x748, Size: 0x8]

--------------------------------
Class: Package.Object

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8]
	FName ClassName;//[Offset: 0x8, Size: 0x8]
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8]
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: FilteredActorSetting
	FName ClassName;//[Offset: 0x0, Size: 0x8]
	class Object* FilteredClass;//[Offset: 0x8, Size: 0x8]
	FName BudgetType;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x250, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x258, Size: 0x8]
	float PlayRate;//[Offset: 0x260, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x268, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26c, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x26c, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x26c, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x26c, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x26c, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x26c, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x270, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x274, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x274, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x278, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x290, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x2a0, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b0, Size: 0x1]
	float InterpPosition;//[Offset: 0x2b4, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x2bc, Size: 0x1]
	delegate OnPlay;//[Offset: 0x2c0, Size: 0x10]
	delegate OnStop;//[Offset: 0x2d0, Size: 0x10]
	delegate OnPause;//[Offset: 0x2e0, Size: 0x10]
	void Stop();// 0x5ff81d8
	void SetPosition(float NewPosition, bool bJump);// 0x5ff80d8
	void SetLoopingState(bool bNewLooping);// 0x5ff8030
	void Reverse();// 0x5ff81bc
	void Play();// 0x5ff81f4
	void Pause();// 0x5ff81a0
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x5ff7f0c
	void ChangePlaybackDirection();// 0x5ff80bc

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x258, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x260, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x268, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x5effe64

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ExtraRenderPassConfig
	<enum,ExtraRenderPassConfigItem> PassList;//[Offset: 0x0, Size: 0x50]
	ExtraRenderPassConfigItem[] Passes;//[Offset: 0x50, Size: 0x10]
	ExtraRenderPassConfigItem[] EnemyPasses;//[Offset: 0x60, Size: 0x10]
	ExtraRenderPassConfigItem[] BetterOutlinePasses;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: ExtraRenderPassConfigItem
	int PassFlags;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* PassMaterial;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RuntimeVirtualTexture.Object
	enum MaterialType;//[Offset: 0x28, Size: 0x4]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	int Size;//[Offset: 0x30, Size: 0x4]
	int TileSize;//[Offset: 0x34, Size: 0x4]
	int TileBorderSize;//[Offset: 0x38, Size: 0x4]
	int RemoveLowMips;//[Offset: 0x3c, Size: 0x4]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x43841ec
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x5fcd0e4
	bool RemoteEvent(FName EventName);// 0x5fcd2c0
	void LevelReset();// 0x43841ec

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x258, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x260, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x268, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x560, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x568, Size: 0x1]
	float ScreenSize;//[Offset: 0x56c, Size: 0x4]
	float MaxScreenScaling;//[Offset: 0x570, Size: 0x4]
	float U;//[Offset: 0x574, Size: 0x4]
	float UL;//[Offset: 0x578, Size: 0x4]
	float V;//[Offset: 0x57c, Size: 0x4]
	float VL;//[Offset: 0x580, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x5ed17d4
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x5ed1648
	void SetSprite(Texture2D* NewSprite);// 0x5ed191c

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x258, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x25c, Size: 0x1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25d, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25d, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25d, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25d, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x25d, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25d, Size: 0x1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x25d, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x25d, Size: 0x1]
	float StreamingDistanceUnloadCompensation;//[Offset: 0x260, Size: 0x4]
	bool bIsOpenDynamicPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x264, Size: 0x1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x264, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x264, Size: 0x1]
	bool bForceNoStaticShadowDepthMap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x264, Size: 0x1]
	bool bClipLQTexture;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x264, Size: 0x1]
	bool bOptimizeLQLightmap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x264, Size: 0x1]
	bool bUseBrightestColorInSmallMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x265, Size: 0x1]
	bool bForceUseBC6H;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x265, Size: 0x1]
	bool bLimitToPackedLightAndShadowMapTextureSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x265, Size: 0x1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x265, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x265, Size: 0x1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x265, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x268, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x270, Size: 0x8]
	float WorldToMeters;//[Offset: 0x278, Size: 0x4]
	float KillZ;//[Offset: 0x27c, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x280, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x288, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x28c, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x290, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x298, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x2a0, Size: 0x8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x2a8, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x2b0, Size: 0x4]
	Vector DefaultColorScale;//[Offset: 0x2b4, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x2c0, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x2c4, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x2c8, Size: 0x4]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x2d0, Size: 0x20]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x2f0, Size: 0x24]
	float MonoCullingDistance;//[Offset: 0x314, Size: 0x4]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x318, Size: 0x8]
	float TimeDilation;//[Offset: 0x320, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x324, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x328, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x32c, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x330, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x334, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x338, Size: 0x4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x33c, Size: 0x40]
	PlayerState* Pauser;//[Offset: 0x380, Size: 0x8]
	NetViewer[] ReplicationViewers;//[Offset: 0x388, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x398, Size: 0x10]
	PlayerState* PauserPlayerState;//[Offset: 0x3a8, Size: 0x8]
	int MaxNumberOfBookmarks;//[Offset: 0x3b0, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x3b8, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x3c0, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x3d0, Size: 0x8]
	void OnRep_WorldGravityZ();// 0x60b8f60

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x250, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x260, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x268, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x270, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x278, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x280, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x288, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x290, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x298, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x2a0, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x2a8, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x2b0, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x2b8, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x2c0, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d8, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d8, Size: 0x1]
	void StartPlay();// 0x5f3724c
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x5f36828
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x5f36700
	bool ShouldReset(Actor* ActorToReset);// 0x5f3717c
	void ReturnToMainMenuHost();// 0x5f37144
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x5f368fc
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x5f36a1c
	void RestartPlayer(Controller* NewPlayer);// 0x5f36ae0
	void ResetLevel();// 0x5f37160
	bool PlayerCanRestart(PlayerController* Player);// 0x5f36b64
	bool MustSpectate(PlayerController* NewPlayerController);// 0x5f37030
	void K2_PostLogin(PlayerController* NewPlayer);// 0x43841ec
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x43841ec
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x43841ec
	void K2_OnLogout(Controller* ExitingController);// 0x43841ec
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x43841ec
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x5f36bf4
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x5f3663c
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x5f365b8
	bool HasMatchStarted();// 0x5f3720c
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x5f370c0
	int GetNumSpectators();// 0x5f37268
	int GetNumPlayers();// 0x5f372a4
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x5f372e0
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x5f36ccc
	Actor* ChoosePlayerStart(Controller* Player);// 0x5f36dac
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x5f36e38
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x5f36f58

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x250, Size: 0x4]
	int MaxPlayers;//[Offset: 0x254, Size: 0x4]
	int MaxPartySize;//[Offset: 0x258, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x25c, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1]
	FName SessionName;//[Offset: 0x260, Size: 0x8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x250, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x258, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x260, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x268, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x27c, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x280, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x284, Size: 0x4]
	void OnRep_SpectatorClass();// 0x5f46774
	void OnRep_ReplicatedWorldTimeSeconds();// 0x5f4673c
	void OnRep_ReplicatedHasBegunPlay();// 0x5f46758
	void OnRep_GameModeClass();// 0x5f46790
	bool HasMatchStarted();// 0x5f468c4
	bool HasBegunPlay();// 0x5f46904
	float GetServerWorldTimeSeconds();// 0x5f46944
	float GetPlayerStartTime(Controller* Controller);// 0x5f46838
	float GetPlayerRespawnDelay(Controller* Controller);// 0x5f467ac

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1]
	uint32 Channels;//[Offset: 0x254, Size: 0x4]
	uint32 InRate;//[Offset: 0x258, Size: 0x4]
	uint32 OutRate;//[Offset: 0x25c, Size: 0x4]
	uint32 OutSaturation;//[Offset: 0x260, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x264, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x268, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x26c, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x270, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x274, Size: 0x4]
	uint32 InPacketsClientMin;//[Offset: 0x278, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x27c, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x280, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x284, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x288, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x28c, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x290, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x294, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x298, Size: 0x4]
	uint32 InPackets;//[Offset: 0x29c, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x2a0, Size: 0x4]
	uint32 InBunches;//[Offset: 0x2a4, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x2a8, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x2ac, Size: 0x4]
	uint32 InLoss;//[Offset: 0x2b0, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x2b4, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x2b8, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x2bc, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x2c0, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x2c4, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x2c8, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x2cc, Size: 0x4]
	uint32 NumConsideredActors;//[Offset: 0x2d0, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x2d4, Size: 0x4]
	uint32 NumRelevantActors;//[Offset: 0x2d8, Size: 0x4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2dc, Size: 0x4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2e0, Size: 0x4]
	uint32 NumReplicatedActors;//[Offset: 0x2e4, Size: 0x4]
	uint32 NumActors;//[Offset: 0x2e8, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x2ec, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x2f0, Size: 0x4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x2f4, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2f8, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x2fc, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x300, Size: 0x4]
	uint32 ObjPathBytes;//[Offset: 0x304, Size: 0x4]
	uint32 NetGUIDOutRate;//[Offset: 0x308, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x30c, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x310, Size: 0x4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x250, Size: 0x4]
	float SeverePacketLossThreshold;//[Offset: 0x254, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x258, Size: 0x4]
	int SeverePingThreshold;//[Offset: 0x25c, Size: 0x4]
	int AdjustedNetSpeed;//[Offset: 0x260, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x264, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x268, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x26c, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x270, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x278, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x27c, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x280, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x284, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x288, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x28c, Size: 0x4]
	float MoveRepSize;//[Offset: 0x290, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x294, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x298, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x29c, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x2a0, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x2a4, Size: 0x4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x2a8, Size: 0x4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x2ac, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x2b0, Size: 0x4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x2b4, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x2b8, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x2bc, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x2c0, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x2c4, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x2c8, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2d0, Size: 0x4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2d4, Size: 0x4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2d8, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2e0, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2e4, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2e8, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2ec, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 0x4]
	float Diffusion;//[Offset: 0x2c, Size: 0x4]
	float Gain;//[Offset: 0x30, Size: 0x4]
	float GainHF;//[Offset: 0x34, Size: 0x4]
	float DecayTime;//[Offset: 0x38, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x3c, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x40, Size: 0x4]
	float ReflectionsDelay;//[Offset: 0x44, Size: 0x4]
	float LateGain;//[Offset: 0x48, Size: 0x4]
	float LateDelay;//[Offset: 0x4c, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	int LevelLODIndex;//[Offset: 0xb8, Size: 0x4]
	int StreamingPriority;//[Offset: 0xbc, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc2, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc2, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc2, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc2, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc2, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc3, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc3, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc3, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xc4, Size: 0x10]
	int DeviceGradeLevel;//[Offset: 0xd4, Size: 0x4]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd8, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe8, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xf0, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0x100, Size: 0x10]
	delegate OnLevelUnloadedWithParams;//[Offset: 0x110, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x120, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x130, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x140, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x148, Size: 0x8]
	bool ShouldBeLoaded();// 0x5fcdd34
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x5fcdf2c
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x5fcdea0
	void SetPriority(int NewPriority);// 0x5fcdda8
	void SetLevelLODIndex(int LODIndex);// 0x5fcde24
	void LevelStreamingUnLoaded__DelegateSignature(LevelStreaming* LevelStreaming);// 0x43841ec
	bool IsStreamingStatePending();// 0x5fcdc84
	bool IsLevelVisible();// 0x5fcdce0
	bool IsLevelLoaded();// 0x5fcdcbc
	FName GetWorldAssetPackageFName();// 0x5fcdd74
	Level* GetLoadedLevel();// 0x5fcdd18
	LevelScriptActor* GetLevelScriptActor();// 0x5fcdbb8
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x5fcdbec

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x288, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x298, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x299, Size: 0x1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreamingWrapper[] StreamingLevels;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelStreamingWrapper
	LevelStreaming* StreamingLevel;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x898, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xc9c, Size: 0x4]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xcd0, Size: 0x10]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce0, Size: 0x1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xce8, Size: 0x10]
	GameInstance* CacheGameInstance;//[Offset: 0x10e8, Size: 0x8]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Level* Level;//[Offset: 0x28, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: WorldRegionManager
	World* World;//[Offset: 0xa8, Size: 0x8]
	<RegionID,RegionObjectItemList> RegionIDToObjectList_Static;//[Offset: 0xb0, Size: 0x50]
	<RegionID,RegionObjectItemList> RegionIDToObjectList_NonStatic;//[Offset: 0x100, Size: 0x50]
	<Object*,RegionID> ObjectToRegionID_NonStatic;//[Offset: 0x150, Size: 0x50]

--------------------------------
Class: RegionID

--------------------------------
Class: RegionObjectItemList
	RegionObjectItem[] List;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RegionObjectItem
	Object* Target;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x5ed1008
	int GetObjectCount();// 0x5ed110c
	int GetNewAvoidanceUID();// 0x5ed10d8
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x5ed0f80

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: MaterialLodManager.Object
	SoftClassPath MaterialLodManagerClassName;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x58, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x68, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0x74, Size: 0x4]
	bool bStreamingLevelsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]
	ParticleSystemComponent*[] InUseComponents_Auto;//[Offset: 0x10, Size: 0x10]
	ParticleSystemComponent*[] InUseComponents_Manual;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ApexWorldSettings.WorldSettings.Info.Actor.Object
	ReplicationGraphSettings ReplicationGraphSettings;//[Offset: 0x3d8, Size: 0x2c]

--------------------------------
Class: ReplicationGraphSettings
	bool bEnableReplicationGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float DefaultGridCellSize;//[Offset: 0x4, Size: 0x4]
	Box DefaultGridBounds;//[Offset: 0x8, Size: 0x1c]
	float PickUpActorGridCellSizeOverride;//[Offset: 0x24, Size: 0x4]
	float CharacterGridCellSizeOverride;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InstancedFoliageActor.Actor.Object

--------------------------------
Class: BP_RockInfo_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x250, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x258, Size: 0x8]
	LinearColor[] Params;//[Offset: 0x260, Size: 0x10]
	Texture2DArray* Color_Array;//[Offset: 0x270, Size: 0x8]
	Texture2DArray* Normal_Array;//[Offset: 0x278, Size: 0x8]
	void SetTexture(Texture2DArray* Color_Array, Texture2DArray* Normal_Array);// 0x43841ec
	void UpdateParams(out LinearColor[] Array, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, LinearColor CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue);// 0x43841ec
	void SetParams(out LinearColor[] Params);// 0x43841ec
	void UserConstructionScript();// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void ExecuteUbergraph_BP_RockInfo(int EntryPoint);// 0x43841ec

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: Texture2DArray.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0xe8, Size: 0x1]
	byte AddressY;//[Offset: 0xe9, Size: 0x1]

--------------------------------
Class: BP_RockTextureToColor_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x250, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x258, Size: 0x8]
	LinearColor[] Color;//[Offset: 0x260, Size: 0x10]
	void Set(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, int CallFunc_Array_Length_ReturnValue, LinearColor CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x43841ec
	void UserConstructionScript();// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void ExecuteUbergraph_BP_RockTextureToColor(int EntryPoint);// 0x43841ec

--------------------------------
Class: BR_SurfaceGridActor_C.SurfaceGridActor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x258, Size: 0x8]

--------------------------------
Class: SurfaceGridActor.Actor.Object
	SurfaceGridManager* SurfaceGridManager;//[Offset: 0x250, Size: 0x8]

--------------------------------
Class: SurfaceGridManager.DataAsset.Object
	<GridDataManager*> GridDatas;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: GridDataManager.Object
	Vector Origin;//[Offset: 0x28, Size: 0xc]
	float GridSize;//[Offset: 0x34, Size: 0x4]
	int StreamingSize;//[Offset: 0x38, Size: 0x4]
	int Row;//[Offset: 0x3c, Size: 0x4]
	int Col;//[Offset: 0x40, Size: 0x4]
	GridDataTable* GridDataTablePtr;//[Offset: 0x48, Size: 0x8]
	GridDataTable* GridDataTable;//[Offset: 0x50, Size: 0x28]
	GridDataTable*[] GridDataTableStreaming;//[Offset: 0x78, Size: 0x10]
	GridDataTable*[] GridDataTableStreamingPtr;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: GridDataTable.DataAsset.Object
	bool bMinimal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int Row;//[Offset: 0x34, Size: 0x4]
	int Col;//[Offset: 0x38, Size: 0x4]
	int MinimalType;//[Offset: 0x3c, Size: 0x4]
	int[] DataTable;//[Offset: 0x40, Size: 0x10]
	int MaxTypeCount;//[Offset: 0x50, Size: 0x4]
	<byte,byte> ValueMap;//[Offset: 0x58, Size: 0x50]
	int RootTreeType;//[Offset: 0xa8, Size: 0x4]
	int RootTreeValue;//[Offset: 0xac, Size: 0x4]
	int Version;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: LODManage_SM_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x250, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x258, Size: 0x8]
	float HeightChange_SM;//[Offset: 0x260, Size: 0x4]
	FString MaterailPath;//[Offset: 0x268, Size: 0x10]
	bool IsWaiteDestory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	void LoadClientListFun();// 0x43841ec
	void ReceiveTick(float DeltaSeconds);// 0x43841ec
	void ExecuteUbergraph_LODManage_SM(int EntryPoint, float K2Node_Event_DeltaSeconds, bool CallFunc_HasAuthority_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_LessEqual_FloatFloat_ReturnValue, GameStatePlaneComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x43841ec

--------------------------------
Class: GameStatePlaneComponent.ActorComponent.Object
	Actor* PlanePawn;//[Offset: 0xf0, Size: 0x8]
	bool bIsPlaneInFlight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	Vector AirplaneStartLoc;//[Offset: 0xfc, Size: 0xc]
	Vector AirplaneStopLoc;//[Offset: 0x108, Size: 0xc]
	Vector AirplaneCanJumpLoc;//[Offset: 0x114, Size: 0xc]
	Vector AirplaneForceJumpLoc;//[Offset: 0x120, Size: 0xc]
	int PlayerNumOnPlane;//[Offset: 0x12c, Size: 0x4]
	int StartJumpCountingDown;//[Offset: 0x130, Size: 0x4]
	bool StartTimeOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1]
	void SyncAirplaneRoute(Vector StartLoc, Vector StopLoc, Vector CanJumpLoc, Vector ForceJumpLoc);// 0x3be343c
	void ReportAirLineData();// 0x3be3428
	void OnRep_StartJumpCountingDown();// 0x3be3588
	void OnRep_PlayerNumOnPlane();// 0x3be359c
	void OnRep_bIsPlaneInFlight();// 0x3be3600
	void OnRep_AirplaneStopLoc();// 0x3be35d8
	void OnRep_AirplaneStartLoc();// 0x3be35ec
	void OnRep_AirplaneForceJumpLoc();// 0x3be35b0
	void OnRep_AirplaneCanJumpLoc();// 0x3be35c4

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x290, Size: 0x620]
	float Priority;//[Offset: 0x8b0, Size: 0x4]
	float BlendRadius;//[Offset: 0x8b4, Size: 0x4]
	float BlendWeight;//[Offset: 0x8b8, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8bc, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8bc, Size: 0x1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x6045200

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x8a0, Size: 0x50]
	CineCameraComponent* GetCineCameraComponent();// 0x5423b28

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4]
	Actor* ActorToTrack;//[Offset: 0x18, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x40, Size: 0xc]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x900, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0x90c, Size: 0x18]
	CameraFocusSettings FocusSettings;//[Offset: 0x928, Size: 0x58]
	float CurrentFocalLength;//[Offset: 0x980, Size: 0x4]
	float CurrentAperture;//[Offset: 0x984, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0x988, Size: 0x4]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x998, Size: 0x10]
	NamedLensPreset[] LensPresets;//[Offset: 0x9a8, Size: 0x10]
	FString DefaultFilmbackPresetName;//[Offset: 0x9b8, Size: 0x10]
	FString DefaultLensPresetName;//[Offset: 0x9c8, Size: 0x10]
	float DefaultLensFocalLength;//[Offset: 0x9d8, Size: 0x4]
	float DefaultLensFStop;//[Offset: 0x9dc, Size: 0x4]
	void SetLensPresetByName(FString InPresetName);// 0x5424590
	void SetFilmbackPresetByName(FString InPresetName);// 0x542469c
	float GetVerticalFieldOfView();// 0x54247a8
	FString GetLensPresetName();// 0x5424618
	float GetHorizontalFieldOfView();// 0x54247dc
	FString GetFilmbackPresetName();// 0x5424724

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4]
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4]
	float MinFStop;//[Offset: 0x8, Size: 0x4]
	float MaxFStop;//[Offset: 0xc, Size: 0x4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4]
	float FocusOffset;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: BP_SetDyeColor_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x250, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x258, Size: 0x8]
	LinearColor[] Colors;//[Offset: 0x260, Size: 0x10]
	void SetCollection(bool Temp_bool_Variable, FString Temp_string_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString K2Node_Select_Default, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, LinearColor CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x43841ec
	void SetColors(out LinearColor[] Colors);// 0x43841ec
	void UserConstructionScript();// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void ExecuteUbergraph_BP_SetDyeColor(int EntryPoint);// 0x43841ec

--------------------------------
Class: Desertlands_Main_C.LevelScriptActor.Actor.Object

--------------------------------
Class: CustomCollisionChecker.Actor.Object
	CustomCollisionSubSystem* CollisionSubSystem;//[Offset: 0x250, Size: 0x8]

--------------------------------
Class: CustomCollisionSubSystem.ApexWorldSubsystem.WorldSubsystem.Subsystem.Object
	CustomCollisionChecker* CollisionChecker;//[Offset: 0x90, Size: 0x8]
	<PrimitiveComponent*,CheckTimer> CollisionList;//[Offset: 0x98, Size: 0x50]

--------------------------------
Class: ApexWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool bCreateInDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bCreateInClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	<FName> CreateFrontendStates;//[Offset: 0x38, Size: 0x50]

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: CheckTimer

--------------------------------
Class: ApexPlayerController_BP_C.APGameController_BP_C.ApexPlayerController.PlayerController.Controller.Actor.Object
	FString GetModuleName();// 0x43841ec

--------------------------------
Class: APGameController_BP_C.ApexPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xf30, Size: 0x8]
	ApexPostProcessComponent* ApexPostProcessComp;//[Offset: 0xf38, Size: 0x8]
	void InpActEvt_O_K2Node_InputKeyEvent(Key Key);// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void DisplayDamageCameraShake(byte DmgType, int DmgValue);// 0x43841ec
	void ExecuteUbergraph_APGameController_BP(int EntryPoint, Object* CallFunc_UIGetLoadObjectLibrary_ReturnValue, byte K2Node_Event_DmgType, int K2Node_Event_DmgValue, class CameraShake CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, ApexCharacter* CallFunc_GetOwnedApexCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_GetCurrentCameraMode_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, class CameraShake CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Key K2Node_InputKeyEvent_Key);// 0x43841ec

--------------------------------
Class: ApexPlayerController.PlayerController.Controller.Actor.Object
	MPBattleResult MPResult;//[Offset: 0x680, Size: 0x40]
	MsgAssistantCompoent* MsgAssitantComp;//[Offset: 0x6c0, Size: 0x8]
	bool isGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 0x1]
	bool isGameOverSend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]
	FName PlayerType;//[Offset: 0x6e4, Size: 0x8]
	FString PlayerName;//[Offset: 0x6f0, Size: 0x10]
	int PlayerKey;//[Offset: 0x700, Size: 0x4]
	int TeamID;//[Offset: 0x704, Size: 0x4]
	uint64 UID;//[Offset: 0x708, Size: 0x8]
	int CampID;//[Offset: 0x710, Size: 0x4]
	bool bIsPureSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x714, Size: 0x1]
	enum GameViewType;//[Offset: 0x715, Size: 0x1]
	enum ServerPCStateType;//[Offset: 0x716, Size: 0x1]
	int64 BanOBEndTime;//[Offset: 0x718, Size: 0x8]
	FString BanOBReasonText;//[Offset: 0x720, Size: 0x10]
	int64 BanChatEndTime;//[Offset: 0x730, Size: 0x8]
	int64 BanChatNoPerceptionEndTime;//[Offset: 0x738, Size: 0x8]
	bool bAllAutoActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 0x1]
	bool bIsMainController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x741, Size: 0x1]
	enum CurPCStateType;//[Offset: 0x742, Size: 0x1]
	enum TargetPCStateType;//[Offset: 0x743, Size: 0x1]
	StateMachineComponent* StateMachineComp;//[Offset: 0x748, Size: 0x8]
	ControllerMagmaComponent* ControllerMagmaComp;//[Offset: 0x758, Size: 0x8]
	ApexPostProcessComponent* ApexPostProcessComponent;//[Offset: 0x760, Size: 0x8]
	DrugRecommendComponent* DrugRecommendComponent;//[Offset: 0x768, Size: 0x8]
	QuickItemComponent* QuickItemComponent;//[Offset: 0x770, Size: 0x8]
	HUDManagerComponent* HUDManagerComponent;//[Offset: 0x778, Size: 0x8]
	DataReportComponent* DataReportComponent;//[Offset: 0x780, Size: 0x8]
	UIStateMgr* UIStateMgr;//[Offset: 0x788, Size: 0x8]
	ApLUTComponent* LUTComponent;//[Offset: 0x790, Size: 0x8]
	DirectionalLightComponent* DirectionalLightComponent;//[Offset: 0x798, Size: 0x8]
	ViewAssistComponent* ViewAssistComponent;//[Offset: 0x7a0, Size: 0x8]
	FiniteBattleBehStateMachine* FiniteBattleBehStateMachine;//[Offset: 0x7a8, Size: 0x8]
	PlayerNetStaticComponent* NetStaticComponent;//[Offset: 0x7b0, Size: 0x8]
	CharacterTeamItemUseTipComponent* CharacterTeamItemUseTipComponent;//[Offset: 0x7b8, Size: 0x8]
	TimeLineSyncComponent* TimeLineSyncComponent;//[Offset: 0x7c0, Size: 0x8]
	InGameRecoverItemGuidInfo[] InGameRecoverItemGuidInfoList;//[Offset: 0x7c8, Size: 0x10]
	InGameRecoverPropGuid* InGameRecoverPropGuid;//[Offset: 0x7d8, Size: 0x8]
	CrossHairDampingComponent* CrossHairDampingComponent;//[Offset: 0x7e0, Size: 0x8]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x7e8, Size: 0x8]
	float UpdateInputTimeInterval;//[Offset: 0x7f0, Size: 0x4]
	float InputDeActiveThreshold;//[Offset: 0x7f4, Size: 0x4]
	SimpleBattleResultData BattleResultData;//[Offset: 0x808, Size: 0x80]
	Actor*[] DeathBoxArray;//[Offset: 0x888, Size: 0x10]
	float DeathBoxFovCheckRate;//[Offset: 0x898, Size: 0x4]
	float DeathBoxFovCheckTime;//[Offset: 0x89c, Size: 0x4]
	int MaxRotationDataCacheNumber;//[Offset: 0x8c4, Size: 0x4]
	DamageTipComponent* WarningIndicatorComponent;//[Offset: 0x8d8, Size: 0x8]
	CharacterAvatar_WearInfo PlayerWearInfo;//[Offset: 0x8e0, Size: 0x20]
	bool bIsPCHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x900, Size: 0x1]
	float JoystickSprintDis;//[Offset: 0x910, Size: 0x4]
	float JoystickSprintAngle;//[Offset: 0x914, Size: 0x4]
	float JoystickSprintDisAuto;//[Offset: 0x918, Size: 0x4]
	float JoystickSprintAngleAuto;//[Offset: 0x91c, Size: 0x4]
	bool DisableJoystickMultiControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x920, Size: 0x1]
	byte LeftOperateMode;//[Offset: 0x922, Size: 0x1]
	byte RightOperateMode;//[Offset: 0x923, Size: 0x1]
	float DoubleClickInterval;//[Offset: 0x924, Size: 0x4]
	float DoubleClickGeometryDist;//[Offset: 0x928, Size: 0x4]
	float DoubleClickScreenDist;//[Offset: 0x92c, Size: 0x4]
	CurveFloat* DistCurve;//[Offset: 0x930, Size: 0x8]
	delegate OnScreenTouchBegin;//[Offset: 0x950, Size: 0x10]
	delegate OnScreenTouchEnd;//[Offset: 0x960, Size: 0x10]
	HitEffectComponent* HitEffectComponent;//[Offset: 0xa50, Size: 0x8]
	AkSoundBankMgr* SoundBankMgr;//[Offset: 0xa58, Size: 0x8]
	<byte,class CameraShake> FPPDamageCameraShakeMap;//[Offset: 0xa80, Size: 0x50]
	<byte,class CameraShake> TPPDamageCameraShakeMap;//[Offset: 0xad0, Size: 0x50]
	float RescuingDistanceMeter;//[Offset: 0xb20, Size: 0x4]
	uint32 CurRecoverBannerPlayerKey;//[Offset: 0xb24, Size: 0x4]
	float PickBannerHorizonMeter;//[Offset: 0xb28, Size: 0x4]
	float PickBannerVerticalMeter;//[Offset: 0xb2c, Size: 0x4]
	bool PickBannerInteractive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb30, Size: 0x1]
	bool CapturedRespawnDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb31, Size: 0x1]
	RespawnOperateComponent* RespawnOperateComponent;//[Offset: 0xb38, Size: 0x8]
	bool DebugSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb40, Size: 0x1]
	int DebugSpectatorIndex;//[Offset: 0xb44, Size: 0x4]
	BackpackComponent* BackpackComponent;//[Offset: 0xb48, Size: 0x8]
	PingManagerComponent* PingManagerComponent;//[Offset: 0xb50, Size: 0x8]
	EmojiGiveALikeMgr* EmojiGiveALikeMgr;//[Offset: 0xb58, Size: 0x8]
	PlayerEventFlowManager* PlayerEventFlowManager;//[Offset: 0xb60, Size: 0x8]
	bool EnableLifeLineRobotRescue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb68, Size: 0x1]
	ControllerCheatHelper* ControllerCheatHelper;//[Offset: 0xb88, Size: 0x8]
	bool bIsDSEnableGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb90, Size: 0x1]
	OBManagerNoReplay* OBNoReplayComponent;//[Offset: 0xb98, Size: 0x8]
	delegate PlayerControllerLostDelegate;//[Offset: 0xba0, Size: 0x10]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0xbb0, Size: 0x10]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0xbc0, Size: 0x10]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0xbd0, Size: 0x10]
	delegate PlayerControllerPostReconnectedDelegate;//[Offset: 0xbe0, Size: 0x10]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0xbf0, Size: 0x10]
	delegate PlayerControllerPreGameEndDelegate;//[Offset: 0xc00, Size: 0x10]
	delegate PlayerControllerGameEndDelegate;//[Offset: 0xc10, Size: 0x10]
	delegate PlayerControllerPawnChangedDelegate;//[Offset: 0xc50, Size: 0x10]
	bool bDoNotDestroyOnNetCleanup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 0x1]
	int PlayerReconnectedCount;//[Offset: 0xc68, Size: 0x4]
	float DefaultConnectionlessTimeout;//[Offset: 0xc78, Size: 0x4]
	LineTrace* LineTrace;//[Offset: 0xc90, Size: 0x8]
	ProxySyncComponent* ProxySyncComponent;//[Offset: 0xc98, Size: 0x8]
	FString TeamMateDownAudio;//[Offset: 0xce0, Size: 0x10]
	FString TeamMateDeathAudio;//[Offset: 0xcf0, Size: 0x10]
	InGameChatContainer* ChatContainer;//[Offset: 0xd00, Size: 0x8]
	DSPingComponent* PingComponent;//[Offset: 0xd08, Size: 0x8]
	PlayerStatisticsManager* PlayerStatisticsManager;//[Offset: 0xd20, Size: 0x8]
	TrackerManager* TrackerManager;//[Offset: 0xd28, Size: 0x8]
	ApexTreasureDoor* TreasureDoor;//[Offset: 0xd30, Size: 0x8]
	InputComponent* AIDebugInputComponent;//[Offset: 0xd40, Size: 0x8]
	ApexDebugAIComponent* ApexDebugAIComponent;//[Offset: 0xd50, Size: 0x8]
	InGameGuideComponent* InGameGuideComp;//[Offset: 0xd60, Size: 0x8]
	float FinisherHorizontalAngle;//[Offset: 0xd68, Size: 0x4]
	float FinisherVerticalAngle;//[Offset: 0xd6c, Size: 0x4]
	float FinisherValidZ;//[Offset: 0xd70, Size: 0x4]
	float ValidFinisherRange;//[Offset: 0xd74, Size: 0x4]
	float FinisherValidSpaceCheckDistance;//[Offset: 0xd78, Size: 0x4]
	AIHostComponent* AIHostComponent;//[Offset: 0xd80, Size: 0x8]
	ApgamePlayerStateRollbackComponent* RollbackComponent;//[Offset: 0xd88, Size: 0x8]
	ApgameDeathRecallComponent* DeathRecallComponent;//[Offset: 0xd90, Size: 0x8]
	float ReportIntervalOfViewingDeadRecord;//[Offset: 0xd98, Size: 0x4]
	SplineComponent* GuideSpineComp;//[Offset: 0xda8, Size: 0x8]
	<ApexCharacterBase*> SubCharacters;//[Offset: 0xdb0, Size: 0x50]
	float StartRespawnTimeSecond;//[Offset: 0xe00, Size: 0x4]
	float EndRespawnTimeSecond;//[Offset: 0xe04, Size: 0x4]
	byte StopForbiddenZoneTipSign;//[Offset: 0xe08, Size: 0x1]
	<enum,byte> Type2Priorities;//[Offset: 0xe18, Size: 0x50]
	uint32 ViewTargetMask;//[Offset: 0xe68, Size: 0x4]
	Actor* GamePlayViewTarget;//[Offset: 0xe70, Size: 0x8]
	Actor* ClientViewTarget;//[Offset: 0xe78, Size: 0x8]
	Actor* GMViewTarget;//[Offset: 0xe80, Size: 0x28]
	<byte,enum> Priority2Types;//[Offset: 0xea8, Size: 0x50]
	ApgameBattleUIUpdater* BattleUIUpdater;//[Offset: 0xef8, Size: 0x8]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf00, Size: 0x1]
	ApgamePickupFloatingManager* PickupFloatingMgr;//[Offset: 0xf10, Size: 0x8]
	ApexSentence* VoiceoverSentence;//[Offset: 0xf18, Size: 0x8]
	MirageTutorialComponent* TutorialComponent;//[Offset: 0xf28, Size: 0x8]
	void UseViewTargetByTypeAtServer(enum InType, bool NewUse);// 0x39f1988
	void UploadDebugMsg(enum MsgType, FString Msg);// 0x39f3da0
	void UpdateMicroStatus(bool IsOpen);// 0x39f9878
	void UnPossessSubCharacter(ApexCharacterBase* InPawn);// 0x39f234c
	void TouchPing(Vector Location);// 0x39f7ce4
	void SwitchDebugAI();// 0x39f3048
	void StopVoiceoverDispatchableSentence_NetMulticast();// 0x39f13b8
	void StopVoiceoverDispatchableSentence();// 0x39f149c
	void ShutdownServer(FString AreYouSure);// 0x39f523c
	void ShowReviveSelfOperation(bool bShow);// 0x39f65ec
	void ShowReviveOperation(bool bShow, uint32 InPlayerKey);// 0x39f6708
	void ShowPointsInternal(const Vector[] Points, const Color Color, bool bPersistentLines, float LifeTime);// 0x39f50b8
	void ShowPickRecoverBanner(bool bShow, uint32 InPlayerKey);// 0x39f6518
	void ShowOperateRecoverBanner(bool bShow);// 0x39f63ec
	void ShowMovePath(const Vector[] Path, const Color Color, bool bPersistentLines, float LifeTime);// 0x39f4f50
	void ShowFinisherCancelOperation(bool bShow);// 0x39f2e0c
	void ShowDamageValueToClient(Actor* HitTarget, float DamageAmount, const Vector HitImpact, bool bHeadShot);// 0x39f56a0
	void ShowArrow(const Vector LineStart, const Vector LineEnd, float ArrowSize, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x39f4cf0
	void SetStopForbiddenZoneTipSign();// 0x39f204c
	void SetSkillProfilerStatue(bool Enable, bool CastUltimate);// 0x39f2e90
	void SetServerPCStateType(enum NewServerPCStateType);// 0x39f9e34
	void SetScreenRightOperateMode(byte mode);// 0x39f7d60
	void SetScreenPosition(enum TaskOverType, const Vector2D ScreenPosition, const Vector2D Size);// 0x39f2cfc
	void SetScreenLeftOperateMode(byte mode);// 0x39f7ddc
	static void SetPrintContructStackTraceOpen();// 0x39f7c30
	void SetPlayerReconnectedCount(int NewPlayerReconnectedCount);// 0x39f3e88
	void SetPlayerNameVisible(int InPlayerKey, bool Visble);// 0x39f5354
	void SetPlayerName(FString NewName);// 0x39fa370
	void SetPlayerKey(int NewPlayerKey);// 0x39fa2f8
	void SetPlayerExitMidJoinState();// 0x39f3f1c
	void SetOpenningTreasureDoor(ApexTreasureDoor* Door);// 0x39f313c
	void SetNeedUploadRotation(bool NewEnable);// 0x39f9c20
	void SetMPResult(MPBattleResult theMPResult);// 0x39fa698
	void SetJoystickThumbVisible(bool Visible);// 0x39f800c
	void SetJoystickSprintDisAuto(float Dis);// 0x39f7ed4
	void SetJoystickSprintDis(float Dis);// 0x39f7e58
	void SetJoyStickScale(float JSScale);// 0x39f80c4
	void SetJoyStickOpacity(float JSOpacity);// 0x39f8140
	void SetJoystickCenterVisible(bool Visible);// 0x39f7f88
	void SetJoyStickCenter(Vector2D Center);// 0x39f828c
	void SetIsPureSpectator(bool NewIsPureSpectator);// 0x39fa238
	static void SetHiddenJoyStickBySource(const Object* WorldContext, enum HiddenSource, bool NewHidden);// 0x39f7b2c
	void SetGameViewType(enum NewGameViewType);// 0x39f9ec8
	void SetGameplayViewTarget(Actor* NewGameplayViewTarget);// 0x39f1ec4
	void SetClientAIHostSetting(byte bEnableAIHost);// 0x39f2830
	void SetBanOB(int64 EndUTCTime, FString BanReasonText);// 0x39fa054
	void SetBanNoPerceptionChat(int64 EndUTCTime);// 0x39f9f5c
	void SetBanChat(int64 EndUTCTime);// 0x39f9fd8
	void ServerUseViewTargetByType(enum InType, bool NewUse);// 0x39f1db8
	void ServerUploadControlRotationPitchYaw(uint32 Timestamp, uint32 NewView);// 0x39f9a54
	void ServerUploadControlRotation(uint32 Timestamp, uint32 NewView, byte NewRoll);// 0x39f9b18
	void ServerUploadControlRoll(uint32 Timestamp, byte NewRoll);// 0x39f998c
	void ServerUpdateRespawnTimer(float RespawnTime);// 0x39f975c
	void ServerSwitchTrainState();// 0x39f95dc
	void ServerStopHttpRecordingReplay();// 0x39f1570
	void ServerStopCompleteRecordingReplay();// 0x39f1628
	void ServerStartHttpRecordingReplay();// 0x39f15cc
	void ServerStartCompleteRecordingReplay();// 0x39f1684
	void ServerSpawnPawn(Transform T);// 0x39f4860
	void ServerSetMonitorState(MonitorActor* Monitor, bool bControl);// 0x39f94d8
	void ServerSetControlRotation(const Rotator NewRotation);// 0x39f2108
	void ServerRespawnSelfPlayer();// 0x39f97e0
	void ServerReportTimesOfViewingDeadRecord(byte InDeltaTimes);// 0x39f2478
	void ServerQuickChat();// 0x39f43d8
	void ServerPickRecoverBanner(uint32 InPlayerKey);// 0x39f6478
	void ServerOperateRecoverBanner(enum OperateCode, ApexRespawnBeacon* CapturedBeacon);// 0x39f62a0
	void ServerOperateKnockdownShield(enum OperateCode);// 0x39f6928
	void ServerOperateKnockdownRevive(enum OperateCode, uint32 InPlayerKey);// 0x39f67dc
	void ServerMirageCall(MiragePhoneActor* thePhone);// 0x39f8f6c
	void ServerHandleMsg(enum Msg, enum StateSource);// 0x39f90ec
	void ServerEnableReplayReplicationGraph(bool bIsEnable);// 0x39f16e0
	void ServerDisuseItem(ItemDefineID DefineID, enum Reason);// 0x39f75c0
	void ServerDeactiveAllTrainingField();// 0x39f1380
	void ServerCMD_RPC(FString Cmd);// 0x39f4718
	void ServerCMD(FString Cmd);// 0x39f47d8
	void ServerCloseFlagDynamicOutLine(int InPlayerKey);// 0x39f29bc
	void ServerCancelOpenTreasureDoor();// 0x39f3104
	void ServerActiveAllTrainingField();// 0x39f139c
	void SelectLegendStageEnd();// 0x39f44cc
	void SaveEquipData(out const ItemDefineID WeaponID, out const ItemDefineID AttachID, int WeaponIndex);// 0x39f70cc
	void RPCServerUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x39f76dc
	void RPCServerSwapAttachmentByTwoAttach(ItemDefineID AttachDefineIDA, ItemDefineID AttachDefineIDB);// 0x39f7274
	void RPCServerSwapAttachment(ItemDefineID WeaponDataDefineID, ItemDefineID AttachmentDataDefineID);// 0x39f73b0
	void RPCServerStopContinuousUseRecoverItem();// 0x39f7884
	void RPCServerOpenHandleActionActor(InGameHandleActionActor* ActionActor);// 0x39f6f50
	void RPCServerOpenCarePackage(CarePackage* CarePackage, Controller* Controller);// 0x39f6fd4
	void RPCServerDropItem(ItemDefineID DefineID, int count, enum Reason);// 0x39f78b4
	void RPCServerDeleteCommonSign(const int Index);// 0x39f3544
	void RPCServerCreateCommonSign(CommonSignData SignData);// 0x39f36cc
	void RPCNotifyEnterOBResult(bool CanEnter);// 0x39f4230
	void RPCClientResetMiniMap();// 0x39f2df0
	void RPCClientDeleteCommonSign(const int Index);// 0x39f34c0
	void RPCClientCreateCommonSign(CommonSignData SignData);// 0x39f35c8
	void RPC_TestSendBattleResult(FString EndReason, int GameModeType);// 0x39f8318
	void RPC_PossessPawn(Pawn* PosPawn);// 0x39f847c
	void RPC_OpenResultWindow(FString EndReason, int GameModeType);// 0x39f867c
	void RPC_NotifyPawnChange();// 0x39f8420
	void RPC_NotifyGameStart();// 0x39f8a90
	void RPC_NotifyGameEnd(FString EndReason, bool bSurvivorsAreAI);// 0x39f8974
	void RPC_NotifyBattleResultData(const SimpleBattleResultData SimpleResultData, FString EndReason, bool bSurvivorsAreAI);// 0x39f8784
	void RPC_ExitGame(FString EndReason);// 0x39f85bc
	void RPC_BroadcastDamageToClient(Actor* HitTarget, float DamageAmount, bool bIsHeadShot, bool bIsFatalHealthCost, uint32 ShootID, byte PelletID, float AimPercent, byte AimChargeLevel);// 0x39f5420
	void RespawnParachute(Transform SpawnTransform);// 0x39f1f50
	void RemoveFromAllAITarget(ApexCharacter* Self);// 0x39f49c8
	void RefreshItemUsable(ItemDefineID DefineID);// 0x39f74ec
	void ReChooseLegend(int LegendId);// 0x39f4680
	void ReceiveWhenClientGameReady();// 0x43841ec
	void ReceiveUnPossessSubCharacter(Pawn* PossessedPawn);// 0x43841ec
	void ReceivePossessSubCharacter(Pawn* PossessedPawn);// 0x43841ec
	void ProcessGMUIInput(FString Cmd);// 0x39f52cc
	void PostPlayerGameEndEvent();// 0x39f8304
	void PossessSubCharacter(ApexCharacterBase* InPawn);// 0x39f23c8
	void PlayVoiceoverDispatchableSentence_NetMulticast(int LegendId, ApexSentence* Sentence);// 0x39f13d4
	void PlayVoiceoverDispatchableSentence(int LegendId, ApexSentence* Sentence);// 0x39f14b0
	void PlayInstigatorSound(enum PlayerAudioType, int InWeaponSkinID);// 0x39f6db4
	void PlayerDropItem(ItemDefineID DefineID, int count, enum Reason);// 0x39f7a18
	void PingSomeThingOnServer(enum PingType);// 0x39f59e8
	void PingSomeThingOnClient(enum PingType);// 0x39f5a6c
	void PingFromFiger(Vector2D Location);// 0x39f7c44
	void PickRecoverBanner();// 0x39f64fc
	void OperateRecoverBanner(enum OperateCode);// 0x39f6368
	void OperateKnockdownShield(enum OperateCode);// 0x39f69ac
	void OperateKnockdownRevive(enum OperateCode);// 0x39f68a4
	void OnUserInputUseReplicator();// 0x39f6e90
	void OnUserInputOutUseReplicator();// 0x39f6e7c
	void OnUserInputOpenDoor(bool IsOpen);// 0x39f6ecc
	void OnUserInputOpenBin();// 0x39f6eb8
	void OnUserInputExtract();// 0x39f6ea4
	void OnUnPossessSubCharacterForClient(ApexCharacterBase* NewPawn);// 0x39f21bc
	void OnTouchStartCallback();// 0x39f7cd0
	void OnTouchEndCallback();// 0x39f7cbc
	void OnSwitchCameraSide();// 0x39f96dc
	void OnStateChanged();// 0x39f9d68
	void OnSettingChanged(FString[] PropertyNames);// 0x39f26a8
	void OnSelectLegendStageEnd();// 0x43841ec
	void OnRep_StopForbiddenZoneTipSign();// 0x39f2060
	void OnRep_ServerStateType();// 0x39f5ea0
	void OnRep_RespawnTime();// 0x39f2074
	void OnRep_GamePlayViewTarget(const Actor* LastViewTarget);// 0x39f18d8
	void OnRep_bIsDSEnableGM();// 0x39f4308
	void OnPossessSubCharacterForClient(ApexCharacterBase* NewPawn);// 0x39f2240
	void OnPlayerInputStateChange(bool NewIsActive);// 0x39f9ca4
	void OnOBTargetPlayerViewTargetChange(Controller* TargetController, Actor* LastVT, Actor* NewVT, enum NewVTType);// 0x39f40d0
	void OnMeleePressed(int InSkillID);// 0x39f9660
	void OnJumpReleased();// 0x39f9718
	void OnJumpPressed();// 0x39f972c
	void OnItemRemoved(ItemDefineID DefineID);// 0x39f5bec
	void OnItemOperCount(ItemDefineID DefineID, enum OperationType, int count);// 0x39f5c78
	void OnItemOperation(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x39f5d8c
	void OnHitKnockdownShield(float DamageAmount, ApexCharacter* AttackCharacter, ApexCharacter* VictimCharacter, int VictimPlayerKey);// 0x39f6a30
	void OnCrouchReleased();// 0x39f96f0
	void OnCrouchPressed();// 0x39f9704
	void OnConnectionlessTimeOut();// 0x39f3e74
	void OnClientFovUnNormal(float DesireFov, float CurrentFov);// 0x39fa174
	void OnCameraModePressed();// 0x39f964c
	void OnBoardingVehiclePressed();// 0x39f9638
	void OnBattleBehStateChanged(enum PrevState, enum CurState);// 0x39f6114
	void OnAPEvent_AutoUseItem(ItemDefineID ItemID);// 0x39f5b60
	void ObserveBot();// 0x39f5220
	void NotifyOBTargetSkillStop(int SkillIndex, enum StopReason);// 0x39f33c4
	void NotifyOBTargetSkillCoolDownStart(int SkillIndex);// 0x39f3340
	void NotifyClientPlayerIsValid();// 0x39f442c
	void NotifyCantDrop();// 0x39f78a0
	void LuaSwapAttachment(int WeaponIndex);// 0x39f71f8
	void LogTrainFlash(FString FlashLog);// 0x39f31dc
	void LogMovementRecord(uint32 InPlayerKey, FString InReason);// 0x39f326c
	void LocalUseViewTargetWithTime(Actor* NewViewTarget, float BlendTime);// 0x39f1c30
	void LocalUseViewTarget(Actor* NewViewTarget, ViewTargetTransitionParams TransitionParams);// 0x39f1ae0
	void LocalUnUseViewTargetWithTime(float BlendTime);// 0x39f1bb4
	void LocalUnUseViewTarget(ViewTargetTransitionParams TransitionParams);// 0x39f1a50
	void LeaveOBNoReplay();// 0x39f421c
	bool IsSubCharacter(ApexCharacterBase* CheckCharacter);// 0x39f22c4
	bool IsPureSpectator();// 0x39fa2b8
	bool IsPlayerReconnected();// 0x39f3f68
	bool IsPlayerMidJoin();// 0x39f3f30
	bool IsOffScreen(Actor* InActor, float DetectionDist, float InnerRadius);// 0x39f6004
	bool IsJoyStickCanAutoSprit();// 0x39f7f50
	bool IsInPlane();// 0x39f8c10
	bool IsInInitial();// 0x39f8ce0
	bool IsInFight();// 0x39f8bcc
	bool IsDemoRecSpectator();// 0x39f17d8
	bool IsDemoPlaySpectator();// 0x39f1810
	bool InPawnState(enum TargetState);// 0x39f8c50
	void HandleMsg(enum Msg, enum StateSource);// 0x39f91ec
	void GuideTipRespawnBeacon();// 0x39f2b48
	void GuideRescueTeamMate(Actor* TargetTeamMate);// 0x39f2be0
	void GuidePickTeamMateRespawnBanner(Actor* TargetMapFlag);// 0x39f2b64
	void GuideFindTombBox(Actor* TargetTombBox);// 0x39f2c5c
	void GuideFindRespawnBeacon(Actor* TargetRespawnBeacon);// 0x39f2ac4
	void GMSetViewTarget(Actor* NewViewTarget, bool NewUse);// 0x39f1cf0
	UIStateMgr* GetUIStateMgr();// 0x39f9e00
	enum GetTargetPCStateType();// 0x39f8b54
	enum GetServerPCStateType();// 0x39f9eac
	ApgamePlayerStateRollbackComponent* GetRollbackComponent();// 0x39f268c
	RespawnOperateComponent* GetRespawnOperateComponent();// 0x39f61dc
	ApexCharacter* GetReplayViewCharacter();// 0x39f17a4
	QuickItemComponent* GetQuickItemComponent();// 0x39f9d98
	int GetPlayerReconnectedCount();// 0x39f3f00
	FString GetPlayerName();// 0x39fa4a0
	PingManagerComponent* GetPingManagerComponent();// 0x39f5ae8
	ApexCharacter* GetOwnedApexCharacter();// 0x39f8aec
	MPBattleResult GetMPResult();// 0x39fa5ec
	Vector2D GetJoyStickVisualSize();// 0x39f8090
	Vector2D GetJoyStickVisualCenter();// 0x39f8224
	Vector2D GetJoyStickLocaltion();// 0x39f81bc
	Vector2D GetJoystickCorrectedCenter();// 0x39f81f0
	Vector2D GetJoyStickCenter();// 0x39f8258
	InGameGuideComponent* GetInGameGuideComp();// 0x39f2ce0
	enum GetGameViewType();// 0x39f9f40
	FiniteBattleBehStateMachine* GetFiniteBattleBehStateMachine();// 0x39f9d7c
	EmojiGiveALikeMgr* GetEmojiGiveALikeMgr();// 0x39f59ac
	DirectionalLightComponent* GetDirectionalLightComponent();// 0x39f9dcc
	ApgameDeathRecallComponent* GetDeathRecallComponent();// 0x39f2670
	enum GetCurrentUseGameplayType();// 0x39f1954
	enum GetCurrentStateType();// 0x39f8b90
	void GetCurrentScreenMiddenPosition(out Vector Pint, out Vector Dir);// 0x39f2f6c
	Pawn* GetCurPawn();// 0x39f8b20
	Rotator GetClientControlRotation(float Timestamp);// 0x39f9904
	InGameChatContainer* GetChatContainer();// 0x39f348c
	CharacterNaviGuideComponent* GetCharacterNaviGuideComp();// 0x39f2444
	BackpackComponent* GetBackPackComponent();// 0x39f5b24
	void ForceNetCleanup(FString ErrorMessage);// 0x39f3fa0
	void ExitGame(FString EndReason);// 0x39f8534
	void ExecutePerSecond();// 0x39fa8fc
	void EnterOBNoReplay();// 0x39f42f4
	void EnablePhoneOrientation(bool NewEnable);// 0x39f9440
	void EnableGreyScreenPostProcess(bool Enabled);// 0x39f6c08
	void EnableDebugAI(uint32 DebugPlayerKey);// 0x39f3080
	void EnableCloseEyePostProcess(bool Enabled, byte TimeSec, float StartAtTime);// 0x39f6c94
	void EnableArcPostProcess(bool Enabled);// 0x39f6b7c
	void DrawDebugStringWithActor(const Vector TextLocation, FString Text, Actor* TestBaseActor, const Color TextColor, float Duration);// 0x39f4b5c
	void DoParachuteExpression(int ID);// 0x39f2530
	void DisplayDamageCameraShake(byte DmgType, int DmgValue);// 0x43841ec
	void DispatchPlayerReconnectedEvent();// 0x39f408c
	void DispatchPlayerLostEvent();// 0x39f40a0
	void DispatchPlayerExitEvent();// 0x39f4078
	void DisableDeathBoxSignal(Actor* DeathBox);// 0x39f2a40
	void DebugOrientation();// 0x39f94c4
	void DebugCryptoDrone();// 0x39f3064
	void ConfirmLegend(bool IsRepick, bool ImmediatelyChange);// 0x39f4520
	void ClientUnEquipPropsWeapon(ApexCharacter* InCharacter, enum PropsWeaponType, int NetPropsWeaponIndex, enum Reason, bool ServerInitiative);// 0x39f3ab0
	void ClientTrackTrigger(const ChapterType_TrackLink[] Tracks, ChapterParams theChapterParams);// 0x39f8d24
	void ClientSwitchSpectatorUI(bool bShow);// 0x39f5eb4
	void ClientStartRespawnTimer(float RespawnTime);// 0x39f97fc
	void ClientSetWidgetVisibilityByIdEx(FName IdName, bool Visible);// 0x39f580c
	void ClientSetWidgetVisibilityById(FName IdName, bool Visible);// 0x39f58dc
	void ClientSetEncryptData(int KeyA, int KeyB, int KeyIndex, int KeyC, int KeyD);// 0x39f92b4
	void ClientSetCurrentLocation(Vector Location, Rotator Rotator);// 0x39f5f40
	void ClientSetControlRotation(const Rotator NewRotation);// 0x39f2088
	void ClientReceiveBroadcastMsg(ApexCharacter* InCharacter, BroadcastMsgData BroadcastMsgData, bool ServerInitiative);// 0x39f3854
	void ClientReceiveBroadcastAudio(enum PlayerAudioType);// 0x39f37d0
	void ClientNotifyReconnectedSuccessfully();// 0x39f40b4
	void ClientHideAllWidget();// 0x39f57f0
	void ClientHandleMsg(enum Msg, enum StateSource);// 0x39f9024
	void ClientFadeOutPropsWeapon(ApexCharacter* InCharacter, enum PropsWeaponType, PropsWeaponFadeOutParams FadeOutParams, bool ServerInitiative);// 0x39f3960
	void ClientEquipPropsWeapon(ApexCharacter* InCharacter, enum PropsWeaponType, int NetPropsWeaponIndex, bool ServerInitiative);// 0x39f3c4c
	void ClientEnterStageFight_Notify();// 0x43841ec
	void ClientEnterStageFight();// 0x39f9740
	void Client_ShowTips(const int[] NewIDs);// 0x39f1848
	void ClearHiddenActor();// 0x39fa55c
	void ChooseLegendSkin(int SkinId);// 0x39f4448
	void ChooseLegend(int LegendId);// 0x39f45fc
	bool CheckRespawnBeacon(ApexRespawnBeacon* RespawnBeacon);// 0x39f6210
	bool CheckRescuing(uint32 InPlayerKey);// 0x39f6678
	void CancelOpenTreasureDoor();// 0x39f3120
	void CancelConfirmLegend();// 0x39f4504
	void CallOnRep_PlayerStateFromLua();// 0x39f4704
	void BRViewSkill();// 0x39f4410
	void BRSlideSkin();// 0x39f43bc
	void BRSendChat();// 0x39f43f4
	void BRForeground();// 0x39f431c
	void BreakOpenTreasureDoor();// 0x39f31c0
	void BRBackground(byte CurrentState);// 0x39f4338
	void BRApplyLegend();// 0x39f44e8
	void BPHandleGameEnd(bool IsWin);// 0x43841ec
	void AirParachute();// 0x39f1f3c
	void AIHostFunc(int FuncIdx, int TeammatePlayerKey, int CurrentValue);// 0x39f28b4
	void AddTimesOfViewingDeadRecord(int InTimes, bool bInNow);// 0x39f25ac
	void AddOnScreenMsg(uint64 Key, FString Msg, float TimeToDis);// 0x39f4a44
	void AddHiddenActor(Actor* Actor);// 0x39fa570

--------------------------------
Class: MPBattleResult
	byte ExitReason;//[Offset: 0x0, Size: 0x1]
	FString Reason;//[Offset: 0x8, Size: 0x10]
	MPResultTeamData[] TeamList;//[Offset: 0x18, Size: 0x10]
	int TeamID;//[Offset: 0x28, Size: 0x4]
	WinModeInfo[] WinModeInfos;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: MPResultTeamData
	byte ExitReason;//[Offset: 0x0, Size: 0x1]
	int TeamScore;//[Offset: 0x4, Size: 0x4]
	int TeamID;//[Offset: 0x8, Size: 0x4]
	BattleResultTeammate[] members;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: BattleResultTeammate
	uint64 UID;//[Offset: 0x0, Size: 0x8]
	FString Name;//[Offset: 0x8, Size: 0x10]
	int KillNum;//[Offset: 0x18, Size: 0x4]
	int DeathNum;//[Offset: 0x1c, Size: 0x4]
	int AssistNum;//[Offset: 0x20, Size: 0x4]
	int RevivalNum;//[Offset: 0x24, Size: 0x4]
	int RescueNum;//[Offset: 0x28, Size: 0x4]
	int SurviveTime;//[Offset: 0x2c, Size: 0x4]
	float DamageAmount;//[Offset: 0x30, Size: 0x4]
	int Rank;//[Offset: 0x34, Size: 0x4]
	int LegendId;//[Offset: 0x38, Size: 0x4]
	int LegendSkin;//[Offset: 0x3c, Size: 0x4]
	int FrameID;//[Offset: 0x40, Size: 0x4]
	int PosID;//[Offset: 0x44, Size: 0x4]
	int bIsEscape;//[Offset: 0x48, Size: 0x4]
	bool bAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	BRAreanDetailData ArenaDetail;//[Offset: 0x50, Size: 0x70]
	int[] Emote;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: BRAreanDetailData
	BRAreanBrilliantData Brilliant;//[Offset: 0x0, Size: 0x3c]
	int64[] Achievements;//[Offset: 0x40, Size: 0x10]
	uint64 Score;//[Offset: 0x50, Size: 0x8]
	float RankRatio;//[Offset: 0x58, Size: 0x4]
	BRAreanRadarData Radar;//[Offset: 0x5c, Size: 0x14]

--------------------------------
Class: BRAreanBrilliantData
	int ComboKill;//[Offset: 0x0, Size: 0x4]
	int ComboKillAvg;//[Offset: 0x4, Size: 0x4]
	float HeadShotRate;//[Offset: 0x8, Size: 0x4]
	float HeadShotRateAvg;//[Offset: 0xc, Size: 0x4]
	float DamageTImeRecoveryHP;//[Offset: 0x10, Size: 0x4]
	float DamageTImeRecoveryHPAvg;//[Offset: 0x14, Size: 0x4]
	float VerticalDamage;//[Offset: 0x18, Size: 0x4]
	float VerticalDamageAvg;//[Offset: 0x1c, Size: 0x4]
	float BehiindDamage;//[Offset: 0x20, Size: 0x4]
	float BehiindDamageAvg;//[Offset: 0x24, Size: 0x4]
	int SegmentLevel;//[Offset: 0x28, Size: 0x4]
	float KillAvg;//[Offset: 0x2c, Size: 0x4]
	float AssistAvg;//[Offset: 0x30, Size: 0x4]
	float DamageAvg;//[Offset: 0x34, Size: 0x4]
	int GameNum;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: BRAreanRadarData
	float Kill;//[Offset: 0x0, Size: 0x4]
	float Rank;//[Offset: 0x4, Size: 0x4]
	float Damage;//[Offset: 0x8, Size: 0x4]
	float Revive;//[Offset: 0xc, Size: 0x4]
	float Survival;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WinModeInfo
	FString PlayerName;//[Offset: 0x0, Size: 0x10]
	int LegendId;//[Offset: 0x10, Size: 0x4]
	int LegendSkin;//[Offset: 0x14, Size: 0x4]
	int[] Emote;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: MsgAssistantCompoent.ActorComponent.Object
	ApexAnimNotifySound*[] SoundsPool;//[Offset: 0xf0, Size: 0x10]
	<ApexAnimNotifySound*> SoundsPlayingHolder;//[Offset: 0x100, Size: 0x50]
	class ApexAnimNotifySound* SoundClass;//[Offset: 0x288, Size: 0x8]
	<enum,MsgCenterConfig> Config;//[Offset: 0x290, Size: 0x50]
	LegendVoiceGuideConfigAsset* DALegendVoiceGuide;//[Offset: 0x2e0, Size: 0x8]
	LegnedVoiceGuideItem*[] GuideItemHolder;//[Offset: 0x2e8, Size: 0x10]
	void ServerPushEvent(int EventID, Actor* RelevantActors, bool bHasAutonomousPlayed);// 0x3cc26f8
	void PushEventAutonomous(int EventID, Actor* Player);// 0x3cc29d8
	void PushEvent(int EventID, Actor* RelevantActors);// 0x3cc2a98
	void PlayAudio(int EventID, Actor* Player, int Index);// 0x3cc280c
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x3cc2c44
	float GetLastTriggerTimeAtServer(out const int EventID, out const int PlayerKey);// 0x3cc2b58
	void ClientReceivedEvent(int EventID, Actor* Player);// 0x3cc2910

--------------------------------
Class: ApexAnimNotifySound.AnimNotify.Object
	FName SoundName;//[Offset: 0x58, Size: 0x8]
	PreviewAudioParam PreviewAudioParam;//[Offset: 0x60, Size: 0x4]
	bool bStopByAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	ApexAnimNotifySoundMap* SoundMapDataAsset;//[Offset: 0x68, Size: 0x28]
	int PlaySound(ApexAnimNotifySoundSetting* SoundSetting, Actor* Actor);// 0x395f83c
	void OnSoundPlayVO(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x395f77c
	void Notify(Actor* Actor, FName InSoundName);// 0x395f98c
	ApexAnimNotifySoundSetting* GetSoundSettingByActor(Actor* Actor);// 0x395f908

--------------------------------
Class: PreviewAudioParam
	enum SoundPlayType;//[Offset: 0x0, Size: 0x1]
	enum LegendType;//[Offset: 0x1, Size: 0x1]
	enum WeaponType;//[Offset: 0x2, Size: 0x1]
	enum PawnState;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: ApexAnimNotifySoundMap.DataAsset.Object
	<FName,ApexAnimNotifySoundGroup*> SoundMap;//[Offset: 0x30, Size: 0x50]
	<FName,int> LegendVOSoundNameMap;//[Offset: 0x80, Size: 0x50]
	ApexAnimNotifySoundDefaultSoundGroup_VO* DefaultVOSoundMap;//[Offset: 0xd0, Size: 0x8]
	<enum,ApexAnimNotifySoundLegendSoundGroup_VO*> LegendVOSoundMap;//[Offset: 0xd8, Size: 0x50]
	FName SearchSoundName;//[Offset: 0x128, Size: 0x8]
	enum DeleteLegendType;//[Offset: 0x130, Size: 0x1]
	void SearchSound();// 0x395f21c
	void ImportExcel();// 0x395f244
	void ExportExcel();// 0x395f230
	void DeleteSearchSound();// 0x395f208
	void DeleteLegendSound();// 0x395f1f4

--------------------------------
Class: ApexAnimNotifySoundGroup.Object

--------------------------------
Class: ApexAnimNotifySoundDefaultSoundGroup_VO.Object
	<FName,CharacterVOAudioData> SoundMap;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: CharacterVOAudioData
	<enum,VOAudioData> CharacterVO;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: VOAudioData
	FString AudioEvent;//[Offset: 0x0, Size: 0x10]
	VOData[] VOData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: VOData
	FString ExternalSrc;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ApexAnimNotifySoundLegendSoundGroup_VO.DataAsset.Object
	CharacterVOAudioData[] SoundMap;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ApexAnimNotifySoundSetting.Object
	ApexAnimNotifySoundAkFinder* AkFinder;//[Offset: 0x28, Size: 0x8]
	ApexAnimNotifySoundModule*[] Modules;//[Offset: 0x30, Size: 0x10]
	ApexAnimNotifyPicker*[] StopAnimNotices;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: ApexAnimNotifySoundAkFinder.Object

--------------------------------
Class: ApexAnimNotifySoundModule.Object

--------------------------------
Class: ApexAnimNotifyPicker.Object
	class ApexAnimNotifySound* NotifyClass;//[Offset: 0x28, Size: 0x8]
	ApexAnimNotifySound* Notify;//[Offset: 0x30, Size: 0x8]
	FName SoundName;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AkCallbackInfo.Object
	AkComponent* AkComponent;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x260, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x268, Size: 0x10]
	int EarlyReflectionOrder;//[Offset: 0x278, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x27c, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x280, Size: 0x4]
	byte OcclusionCollisionChannel;//[Offset: 0x284, Size: 0x1]
	bool EnableOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x285, Size: 0x1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28c, Size: 0x1]
	float roomReverbAuxBusGain;//[Offset: 0x290, Size: 0x4]
	int diffractionMaxEdges;//[Offset: 0x294, Size: 0x4]
	int diffractionMaxPaths;//[Offset: 0x298, Size: 0x4]
	float diffractionMaxPathLength;//[Offset: 0x29c, Size: 0x4]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a0, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a0, Size: 0x1]
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a0, Size: 0x1]
	bool AutoPost;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a0, Size: 0x1]
	bool EnableTickOptimize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a0, Size: 0x1]
	bool DistanceDelay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2a0, Size: 0x1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x2a4, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x2a8, Size: 0x4]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x2b0, Size: 0x8]
	FString EventName;//[Offset: 0x2b8, Size: 0x10]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x27554e8
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x27552fc
	void Stop();// 0x2755c44
	void SetUseSpatialAudio(const bool bNewValue);// 0x2756664
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x2755688
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x2755604
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x2755ae4
	void SetOutputBusVolume(float BusVolume);// 0x2755280
	void SetListeners(out const AkComponent*[] Listeners);// 0x275556c
	void SetAttenuationScalingFactor(float Value);// 0x2755204
	void PostTrigger(FString Trigger);// 0x27557f8
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x2756378
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x27564c8
	void PostAkEventForTimerCallbackWithName(FString in_EventName);// 0x2755c58
	void PostAkEventForTimerCallback(FString in_EventName, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x2755ce0
	int PostAkEventByName(FString in_EventName);// 0x2755ec4
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x2755f5c
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x2756144
	void PlayEvent();// 0x27551a8
	void GetRTPCValue(FString RTPC, int PlayingID, enum InputValueType, out float Value, out enum OutputValueType);// 0x27558d0
	float GetAttenuationRadius();// 0x27551d0
	void ForceRefreshOcclusion();// 0x27551bc

--------------------------------
Class: AkAuxBus.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AkAudioType.Object
	uint32 ShortID;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: AkAudioBank.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	void OnCompleteAkBankUnload(enum res);// 0x2753b7c
	void OnCompleteAkBankLoad(enum res);// 0x2753bf8

--------------------------------
Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 0x10]
	enum CodecID;//[Offset: 0x10, Size: 0x1]
	FString Filename;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: AkAudioEvent.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x30, Size: 0x8]
	float MaxAttenuationRadius;//[Offset: 0x38, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	float MinimumDuration;//[Offset: 0x40, Size: 0x4]
	float MaximumDuration;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: MsgCenterConfig
	bool bShowSubtitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bPlayAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: LegendVoiceGuideConfigAsset.DataAsset.Object
	float TotalCoolDown;//[Offset: 0x30, Size: 0x4]
	class LegnedVoiceGuideItem[] ItemsClasses;//[Offset: 0x38, Size: 0x10]
	float CheckGuideInterval;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: LegnedVoiceGuideItem.Object
	int EventID;//[Offset: 0x28, Size: 0x4]
	LegendVoiceGuideCondition* TriggerCondition;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LegendVoiceGuideCondition.Object
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	void Tick(float DeltaTime);// 0x3c650a0
	bool CheckCondition(ApexPlayerController* PC);// 0x3c65124

--------------------------------
Class: StateMachineComponent.ActorComponent.Object
	State*[] AllStateList;//[Offset: 0x110, Size: 0x10]
	enum StartStateType;//[Offset: 0x120, Size: 0x1]
	enum FinishStateType;//[Offset: 0x121, Size: 0x1]
	State* CurrentState;//[Offset: 0x128, Size: 0x8]
	enum LastMsg;//[Offset: 0x130, Size: 0x1]
	enum NextStateType;//[Offset: 0x131, Size: 0x1]
	enum CurrentStateType;//[Offset: 0x132, Size: 0x1]
	enum LastStateType;//[Offset: 0x133, Size: 0x1]
	enum GetCurrentStateType();// 0x3dc0748

--------------------------------
Class: State.Object
	Enum* pEnum;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: Enum.Field.Object

--------------------------------
Class: ControllerMagmaComponent.ActorComponent.Object
	float MagmaRiseStateChangedLockTime;//[Offset: 0xf0, Size: 0x4]
	float SwitchBackToCharacterBlendTime;//[Offset: 0xf4, Size: 0x4]
	byte ViewTargetBlendFunc;//[Offset: 0xf8, Size: 0x1]
	bool bClientCheckMagmaRiseStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	bool bServerCheckMagmaRiseStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 0x1]
	bool IsMagmaRising;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb, Size: 0x1]
	float UpdateTimerInterval;//[Offset: 0x10c, Size: 0x4]
	float MagmaRiseDelayTime;//[Offset: 0x118, Size: 0x4]

--------------------------------
Class: ApexCharacterBase.Character.Pawn.Actor.Object
	<enum,ActorComponent*> CharacterComponentMaps;//[Offset: 0x6b0, Size: 0x50]
	bool NativeRingDisPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x702, Size: 0x1]
	bool LeftSideTPPCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x703, Size: 0x1]
	Vector DefaultTPPArmInGameLocation;//[Offset: 0x728, Size: 0xc]
	SceneComponent* TPPContainer;//[Offset: 0x738, Size: 0x8]
	SceneComponent* FPPContainer;//[Offset: 0x740, Size: 0x8]
	delegate OnTPPMeshVisibilityChange;//[Offset: 0x760, Size: 0x10]
	delegate OnFPPMeshVisibilityChange;//[Offset: 0x770, Size: 0x10]
	NotifyAudioComponent* NotifyAudioComponent;//[Offset: 0x780, Size: 0x8]
	bool bIsInvisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 0x1]
	<MeshComponent*,bool> MeshInvisibleData;//[Offset: 0x7c0, Size: 0x50]
	ApexBuffSystemComponent* BuffSystemComponent;//[Offset: 0x810, Size: 0x8]
	bool EnableLogState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 0x1]
	bool IsNeedShowEnemyOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x819, Size: 0x1]
	bool IsNeedShowEnemyFillingColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81a, Size: 0x1]
	bool IsEnableCharacterOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81b, Size: 0x1]
	FString RimClothEffectMaterialName;//[Offset: 0x820, Size: 0x10]
	FString RimHairEffectMaterialName;//[Offset: 0x830, Size: 0x10]
	bool bEnableOutlineEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x840, Size: 0x1]
	byte OutlineIdOverride;//[Offset: 0x841, Size: 0x1]
	MaterialInstanceDynamic*[] CharacterEffectMaterials;//[Offset: 0x848, Size: 0x10]
	<int,PrimitiveComponent*> OutlineMap;//[Offset: 0x858, Size: 0x50]
	FName HeadParentBoneName;//[Offset: 0x8a8, Size: 0x8]
	FName BodyParentBoneName;//[Offset: 0x8b0, Size: 0x8]
	FName ThighLParentBoneName;//[Offset: 0x8b8, Size: 0x8]
	FName ThighRParentBoneName;//[Offset: 0x8c0, Size: 0x8]
	FName ArmLParentBoneName;//[Offset: 0x8c8, Size: 0x8]
	FName ArmRParentBoneName;//[Offset: 0x8d0, Size: 0x8]
	FName HeadHitBoneName;//[Offset: 0x8d8, Size: 0x8]
	FName BodyHitBoneName;//[Offset: 0x8e0, Size: 0x8]
	FName LeftArmHitBoneName;//[Offset: 0x8e8, Size: 0x8]
	FName RightArmHitBoneName;//[Offset: 0x8f0, Size: 0x8]
	FName LeftThighHitBoneName;//[Offset: 0x8f8, Size: 0x8]
	FName RightThighHitBoneName;//[Offset: 0x900, Size: 0x8]
	float StandHalfHeight;//[Offset: 0x908, Size: 0x4]
	float CrouchHalfHeight;//[Offset: 0x90c, Size: 0x4]
	float DyingHalfHeight;//[Offset: 0x910, Size: 0x4]
	float StandRadius;//[Offset: 0x914, Size: 0x4]
	float CrouchRadius;//[Offset: 0x918, Size: 0x4]
	float DyingRadius;//[Offset: 0x91c, Size: 0x4]
	float DyingFPPOffsetZ;//[Offset: 0x920, Size: 0x4]
	bool bCanJumpFromPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x924, Size: 0x1]
	Actor* AttachedPlane;//[Offset: 0x928, Size: 0x8]
	float PerkAimingSpeed;//[Offset: 0x930, Size: 0x4]
	GameplayTagContainer GameplayTagContainer;//[Offset: 0x938, Size: 0x20]
	bool BloodHoundHuntingOutlineEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x970, Size: 0x1]
	ParticleSystemComponent*[] SpawnedFootprints;//[Offset: 0x978, Size: 0x10]
	SubObjectsReplicationConfig SubObjectsReplicationConfig;//[Offset: 0x988, Size: 0x10]
	class ApexAIController* AIControllerSoftClass;//[Offset: 0x9a8, Size: 0x28]
	float SoundCheckInterval;//[Offset: 0x9dc, Size: 0x4]
	float SoundCheckDownDistance;//[Offset: 0x9e0, Size: 0x4]
	float SoundCheckUpDistance;//[Offset: 0x9e4, Size: 0x4]
	GrapplingHookMovement* GrappleHookMoveComp;//[Offset: 0x9e8, Size: 0x8]
	void UseMeshMode(enum MeshUseSource, bool NewUse, enum MeshMode, float LerpTime, bool ForceInit);// 0x399ae28
	void UpdateBloodHoundHuntingOutline(bool Enable);// 0x3998aa0
	bool SetTPPMeshHidden(enum HiddenSource, bool NewHidden, float DelayTime);// 0x399a694
	void SetSwitchForCharacter(enum SoundType, FName SwitchGroup, FName SwitchState);// 0x399a2d4
	void SetRTPCForCharacter(enum SoundType, FName RTPC, float Value, int InterpolationTimeMs);// 0x399a3dc
	void SetRegionForCharacter(enum SoundType);// 0x399a250
	bool SetMeshHidden(enum HiddenSource, bool SetFPP, bool SetTPP, bool FPPNewHidden, bool TPPNewHidden);// 0x399a8ec
	void SetInvisible(const bool Invisible);// 0x3999f38
	bool SetFPPMeshHidden(enum HiddenSource, bool NewHidden, float DelayTime);// 0x399a7c0
	void SetEnableOutlineEffect(bool Enable);// 0x3999084
	bool SetBuffExpiry(FName BuffName, float ExpirySecondsFromNow);// 0x399994c
	void SetActorOutlineEffectEnable(Actor* OutlineTarget, bool Enable);// 0x3998fb4
	void ServerLeavePlane();// 0x3998b4c
	void RemoveOutlineEffectWithMesh(MeshComponent* SkeMesh);// 0x3999578
	void RemoveOutlineEffectWithId(enum SourceType, int EffectID);// 0x39992f4
	void RemoveOutLineEffect(enum SourceType, enum OutlineType);// 0x39994b8
	void RemoveComponentDitherBlackList(PrimitiveComponent* Component);// 0x399a158
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Controller* pCauser, Actor* CauserActor);// 0x3999c6c
	void RefreshCurrentOutlineEffect(MeshComponent* SkeMesh);// 0x39997b8
	void ReceiveUnPossessedSubCharacterBy(ApexPlayerController* InController);// 0x43841ec
	void ReceivePossessedSubCharacterBy(ApexPlayerController* InController);// 0x43841ec
	void OnSwitchCrouch();// 0x43841ec
	void OnSprintOverSpeed(bool Enter);// 0x399ab88
	void OnRep_OutlineIdOverride();// 0x3998fa0
	void OnRep_EnableOutlineEffect();// 0x3999110
	void OnRep_CanJump();// 0x3998b24
	void OnRep_AttachedPlane();// 0x3998b38
	void OnJump();// 0x43841ec
	void LateUpdateAnimationInstanceData(AnimInstance* AnimInstance);// 0x3998920
	bool IsTPPHiddenFromSource(enum HiddenSource);// 0x399a574
	bool IsTPPHidden();// 0x399a52c
	bool IsTeammate(const Pawn* Other, bool bCheckHostile);// 0x3999fd8
	bool IsSameTeam(Actor* Other);// 0x3999afc
	bool IsObedInCurrentClient();// 0x399a118
	bool IsInvisible();// 0x3999fbc
	bool IsFPPHiddenFromSource(enum HiddenSource);// 0x399a604
	bool IsFPPHidden();// 0x399a550
	bool IsAiming();// 0x399b110
	bool HasBuff(FName BuffName, bool bPredicatePendingRemove);// 0x3999b8c
	int GetTeamIndex();// 0x399a0b0
	int GetTeamId();// 0x399a0e4
	SpringArmComponent* GetSpringArmComp(enum CameraMode);// 0x399ac98
	void GetSilencedByRevenant(float Duration);// 0x39989e0
	enum GetServerCameraMode();// 0x399afd8
	SceneComponent* GetNodeComponent(enum Tag);// 0x399aafc
	Vector GetNameDisplayLocation();// 0x3998848
	enum GetMeshMode();// 0x399adec
	Vector GetHeadLocation(bool bUseHeadBone);// 0x3998888
	SkeletalMeshComponent* GetCurrentMesh();// 0x399ad24
	enum GetCurrentCameraMode();// 0x399b014
	float GetControllerYawOffset();// 0x399aac8
	SceneComponent* GetContainer(enum CameraMode);// 0x399ac0c
	CharacterParachuteComponent* GetCharacterParachuteComponent();// 0x39989a4
	enum GetCharacterCameraPoseType();// 0x399b050
	SkeletalMeshComponent* GetCameraModeMesh(enum CameraMode);// 0x399ad60
	float GetBuffExpiry(FName BuffName);// 0x39998c0
	ApexBuff* GetBuffByName(FName BuffName);// 0x3999834
	Actor* GetAttachedPlane();// 0x3998b68
	SkeletalMeshComponent* GetActiveMesh();// 0x3998a64
	void ChangeCharacterRimEffect(bool IsShow);// 0x3999124
	void ChangeAiming(bool NewIsAiming);// 0x399b084
	void BroadcastClientsSimulateDamage(ApexCharacter* Victim, float Damage, int DamageType, Pawn* Attacker, enum AvatarDamagePosition, bool bIsHeadShot, bool bIsFatalHealthCost, bool bIsHitShield, bool bIsShieldBroken, uint32 ShootID, byte PelletID, float AimPercent, byte AimChargeLevel);// 0x3998b9c
	void BP_LateUpdateAnimationInstanceData(AnimInstance* AnimInstance);// 0x43841ec
	bool AddOutlineEffectWithTeam(MeshComponent* SkeMesh, int TeamID);// 0x39991a8
	void AddOutlineEffectWithNoMesh(enum SourceType, enum EffectType);// 0x39995f4
	void AddOutlineEffectWithId(MeshComponent* SkeMesh, enum SourceType, int EffectID);// 0x39993b4
	void AddOutLineEffect(MeshComponent* SkeMesh, enum SourceType, enum EffectType);// 0x39996b4
	void AddComponentDitherBlackList(PrimitiveComponent* Component);// 0x399a1d4
	void AddCharacterOutlineEffect(int TeamID);// 0x3999278
	bool AddBuffExpiry(FName BuffName, float ExpirySeconds);// 0x3999a24
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x3999dd8

--------------------------------
Class: NotifyAudioComponent.ApexSoundSpeakerComponent.ActorComponent.Object
	CharacterSoundMap* SoundMap;//[Offset: 0x100, Size: 0x8]
	float StateCheckTime;//[Offset: 0x108, Size: 0x4]
	<class ApexAnimNotifySound,ApexAnimNotifySound*> AnimNotifyMap;//[Offset: 0x110, Size: 0x50]
	ApexPlayerController* FirstPC;//[Offset: 0x178, Size: 0x8]
	ApexCharacterBase* ApexCharacter;//[Offset: 0x180, Size: 0x8]
	ApexCharacterMovementComponent* MovementComponent;//[Offset: 0x188, Size: 0x8]
	void OnStateLeave(enum LeavedState, enum Reason, enum InterruptedBy);// 0x3ccd0c8
	void OnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0x3ccd1cc
	void OnPoseStateChanged(enum NewState, enum PrevState);// 0x3ccd008
	void OnMovementModeChanged(byte PreviousMovementMode, byte PreviousCustomMode, byte MovementMode, byte CustomMovementMode);// 0x3cccec0

--------------------------------
Class: ApexSoundSpeakerComponent.ActorComponent.Object
	bool Muted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	AkComponent* AkComponentWeakPtr;//[Offset: 0xf4, Size: 0x8]
	void StopSoundByType();// 0x3a2d9c8
	void StopSoundById(int PlayingID, int Duration);// 0x3a2d90c
	void SetSwitchByType(FName SwitchGroup, FName SwitchState);// 0x3a2de70
	void SetState(FName StateGroup, FName State);// 0x3a2e040
	void SetRTPCValueByType(FName RTPC, float Value, int InterpolationTimeMs);// 0x3a2df34
	void SetRegionByType();// 0x3a2de54
	int PlaySoundByName(FString AkEventName, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, bool StopWhenOwnerDestroyed);// 0x3a2d9dc
	int PlaySound(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, bool StopWhenOwnerDestroyed);// 0x3a2dc1c

--------------------------------
Class: CharacterSoundMap.DataAsset.Object
	<enum,StateAudioMap> SoundSetting;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: StateAudioMap
	FName SoundName;//[Offset: 0x0, Size: 0x8]
	class ApexAnimNotifySound* AnimNotifyClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ApexCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool EnableSTDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83c, Size: 0x1]
	bool EnableSTDRPhysCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83d, Size: 0x1]
	float STDRPhysCorrectionStartTime;//[Offset: 0x840, Size: 0x4]
	PrimitiveComponent* LastBase;//[Offset: 0x848, Size: 0x8]
	int MovingInputRate;//[Offset: 0x850, Size: 0x4]
	bool bServerUseClientMoveRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 0x1]
	float AppendMoveDuration;//[Offset: 0x888, Size: 0x4]
	int AppendOneMoveThreshold;//[Offset: 0x88c, Size: 0x4]
	int AppendTwoMoveThreshold;//[Offset: 0x890, Size: 0x4]
	float SpeedValue;//[Offset: 0x8b0, Size: 0x4]
	float KnockDownSpeedValue;//[Offset: 0x8b4, Size: 0x4]
	float DeathSpeedZeroTime;//[Offset: 0x8b8, Size: 0x4]
	float SpeedScale;//[Offset: 0x8bc, Size: 0x4]
	float SpeedDynamicScale;//[Offset: 0x8c0, Size: 0x4]
	int SkillForbidSprint;//[Offset: 0x8c4, Size: 0x4]
	bool EnableLogMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 0x1]
	float ValidClientDistanceDiff;//[Offset: 0x8cc, Size: 0x4]
	float SmoothAdjustionWorldLocationSpeed;//[Offset: 0x8d0, Size: 0x4]
	float MaxSmoothAdjustionWorldLocationOffset;//[Offset: 0x8d4, Size: 0x4]
	bool EnableSmoothAdjustionWorldLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d8, Size: 0x1]
	bool bPreExternalAccel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ea, Size: 0x1]
	MovementTagAttributeDataAsset* TagAttributeTable;//[Offset: 0x8f0, Size: 0x8]
	bool bCloseMovingOnGroundSlideWallAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 0x1]
	float SlideWallHeightAdjust;//[Offset: 0x8fc, Size: 0x4]
	int PenetratingUpCheckNum;//[Offset: 0x900, Size: 0x4]
	float ZeroPenetrationDepthAdjustLength;//[Offset: 0x908, Size: 0x4]
	bool ForbidMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x934, Size: 0x1]
	float ApexPerchRadiusThreshold;//[Offset: 0x944, Size: 0x4]
	float ApexPerchHeight;//[Offset: 0x948, Size: 0x4]
	float CharacterMaxSpeed;//[Offset: 0x984, Size: 0x4]
	CurveFloat* MovingAccelerationCurve;//[Offset: 0x988, Size: 0x8]
	float WalkingFriction;//[Offset: 0x990, Size: 0x4]
	float WalkingBaseSpeed;//[Offset: 0x994, Size: 0x4]
	float WalkingStopSpeed;//[Offset: 0x998, Size: 0x4]
	float WalkingAccel;//[Offset: 0x99c, Size: 0x4]
	float[] StepHeightSection;//[Offset: 0x9a0, Size: 0x10]
	float WalkSlideWallRate;//[Offset: 0x9b0, Size: 0x4]
	float SlideAlongSurfaceNoMoveAngle;//[Offset: 0x9b4, Size: 0x4]
	float AfterSlideAlongSurfaceNoMoveAngle;//[Offset: 0x9b8, Size: 0x4]
	float SlideAlongSurfaceCheckDistance;//[Offset: 0x9bc, Size: 0x4]
	float SlideAlongSurfaceVelocityChangeAngle;//[Offset: 0x9c0, Size: 0x4]
	float WalkingSpeedModify;//[Offset: 0x9c4, Size: 0x4]
	float ForceFindFloorTime;//[Offset: 0x9c8, Size: 0x4]
	float ForceFindFloorDist;//[Offset: 0x9cc, Size: 0x4]
	MovementCameraState[] EnterSprintCameraState;//[Offset: 0x9d0, Size: 0x10]
	float WalkSlopeAngle;//[Offset: 0x9f0, Size: 0x4]
	float WalkSlopeNormalZ;//[Offset: 0x9f4, Size: 0x4]
	float WalkSlopeTime;//[Offset: 0x9f8, Size: 0x4]
	float WalkSlopeCD;//[Offset: 0x9fc, Size: 0x4]
	float WalkSlopeControlAngleLimit;//[Offset: 0xa00, Size: 0x4]
	float FallingLandSoundDistance;//[Offset: 0xa10, Size: 0x4]
	bool bUseLandingStiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa50, Size: 0x1]
	float FallingLandParticleDistance;//[Offset: 0xac0, Size: 0x4]
	MovementStiffCurveDataAsset* StiffCurveTable;//[Offset: 0xac8, Size: 0x8]
	MovementLandingHardDataAsset* LandingHardTable;//[Offset: 0xad0, Size: 0x8]
	float JumpHeight;//[Offset: 0xad8, Size: 0x4]
	Vector2D SecondJumpHeightScale;//[Offset: 0xadc, Size: 0x8]
	Vector2D SecondJumpTimeRange;//[Offset: 0xae4, Size: 0x8]
	float AirSpeedCap;//[Offset: 0xaec, Size: 0x4]
	float AirAcceleRate;//[Offset: 0xaf0, Size: 0x4]
	Vector4 CollisionMoveVelocity;//[Offset: 0xb00, Size: 0x10]
	float CollisionMoveForwardVelocity;//[Offset: 0xb10, Size: 0x4]
	float CollisionMoveTime;//[Offset: 0xb14, Size: 0x4]
	float FallingDownSoundSpeed;//[Offset: 0xb18, Size: 0x4]
	float FallingImpactMaxSpeed;//[Offset: 0xb1c, Size: 0x4]
	HitEffectDataAsset* LandingLightFX;//[Offset: 0xb20, Size: 0x28]
	HitEffectDataAsset* LandingHardFX;//[Offset: 0xb48, Size: 0x28]
	ParticleSystemComponent* LandingFXComponent;//[Offset: 0xb70, Size: 0x8]
	float MovingGravityScale;//[Offset: 0xb98, Size: 0x4]
	float JumpingGravityScale;//[Offset: 0xb9c, Size: 0x4]
	float SlidingGravityScale;//[Offset: 0xba0, Size: 0x4]
	float ClimbingGravityScale;//[Offset: 0xba4, Size: 0x4]
	float SlideGuideCountdownInit;//[Offset: 0xba8, Size: 0x4]
	int SlideJumpGuideCountdownInit;//[Offset: 0xbac, Size: 0x4]
	int BigJumpGuideCountdownInit;//[Offset: 0xbb0, Size: 0x4]
	int SprintGuideID;//[Offset: 0xbb4, Size: 0x4]
	int SlideGuideID;//[Offset: 0xbb8, Size: 0x4]
	int ClimbGuideID;//[Offset: 0xbbc, Size: 0x4]
	int SlideJumpGuideID;//[Offset: 0xbc0, Size: 0x4]
	int BigJumpGuideID;//[Offset: 0xbc4, Size: 0x4]
	float SlideGuideCDInit;//[Offset: 0xbc8, Size: 0x4]
	float SlideJumpGuideCDInit;//[Offset: 0xbcc, Size: 0x4]
	float ClimbGuideCDInit;//[Offset: 0xbd0, Size: 0x4]
	float SprintWithGunCDInit;//[Offset: 0xbd4, Size: 0x4]
	float ValidServerDistance;//[Offset: 0xbf4, Size: 0x4]
	float ClimbStartSpeed;//[Offset: 0xbf8, Size: 0x4]
	float ClimbEndSpeed;//[Offset: 0xbfc, Size: 0x4]
	float ClimbAcceleration;//[Offset: 0xc00, Size: 0x4]
	float ClimbDeceleration;//[Offset: 0xc04, Size: 0x4]
	float ClimbHorizontalAcceleration;//[Offset: 0xc08, Size: 0x4]
	float ClimbHorizontalAccelerationScale;//[Offset: 0xc0c, Size: 0x4]
	float ClimbFriction;//[Offset: 0xc10, Size: 0x4]
	float ClimbMinFrictionSpeed;//[Offset: 0xc14, Size: 0x4]
	float ClimbLimitHeight;//[Offset: 0xc18, Size: 0x4]
	float FinalJumpHeight;//[Offset: 0xc1c, Size: 0x4]
	float FinalJumpExtraSpeed;//[Offset: 0xc20, Size: 0x4]
	float FinalJumpDcc;//[Offset: 0xc24, Size: 0x4]
	float FaceRotationTime;//[Offset: 0xc28, Size: 0x4]
	float MaxClimbSpeed;//[Offset: 0xc2c, Size: 0x4]
	float MaxClimbStepHeight;//[Offset: 0xc30, Size: 0x4]
	float MaxClimbAngle;//[Offset: 0xc34, Size: 0x4]
	float MaxClimbZNormalValue;//[Offset: 0xc38, Size: 0x4]
	float MaxFacingWallAngle;//[Offset: 0xc3c, Size: 0x4]
	float MaxVelocityWallAngle;//[Offset: 0xc40, Size: 0x4]
	float FallingToClimbOverDistance;//[Offset: 0xc44, Size: 0x4]
	float ClimbControlAngleLimit;//[Offset: 0xc48, Size: 0x4]
	bool bFallingWhenZeroAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4c, Size: 0x1]
	bool bClimbUseTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4d, Size: 0x1]
	CurveFloat* ClimbAnimVelocityCurve;//[Offset: 0xc50, Size: 0x8]
	float ClimbBoxCheckHeight;//[Offset: 0xc58, Size: 0x4]
	float ClimbBoxCheckDistance;//[Offset: 0xc5c, Size: 0x4]
	bool bClimbCancelMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 0x1]
	float TimeForHold;//[Offset: 0xc64, Size: 0x4]
	float TimeOfHideMesh;//[Offset: 0xc68, Size: 0x4]
	float RotateBackThreshold;//[Offset: 0xc6c, Size: 0x4]
	float RotateBackAngle;//[Offset: 0xc70, Size: 0x4]
	float RotateBackSpeed;//[Offset: 0xc74, Size: 0x4]
	bool bRotateBackOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc78, Size: 0x1]
	int ClimbFailCount;//[Offset: 0xc7c, Size: 0x4]
	int ClimbSuccessCount;//[Offset: 0xc80, Size: 0x4]
	byte ClimbTipsType;//[Offset: 0xc84, Size: 0x1]
	float ClimbTipsCD;//[Offset: 0xc88, Size: 0x4]
	class Actor* ClimbTipsActorPath;//[Offset: 0xc90, Size: 0x28]
	float ClimbTipsLength;//[Offset: 0xcb8, Size: 0x4]
	float ClimbTipsCheckDistFPP;//[Offset: 0xcbc, Size: 0x4]
	float ClimbTipsCheckDistTPP;//[Offset: 0xcc0, Size: 0x4]
	float ClimbTipsDisappearDistFPP;//[Offset: 0xcc4, Size: 0x4]
	float ClimbTipsDisappearDistTPP;//[Offset: 0xcc8, Size: 0x4]
	float ClimbTipsToWallDist;//[Offset: 0xccc, Size: 0x4]
	float ClimbTipsHeightOffset;//[Offset: 0xcd0, Size: 0x4]
	float ClimbTipsNotShowHeight;//[Offset: 0xcd4, Size: 0x4]
	bool bOpenClimbTipsHeightCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd8, Size: 0x1]
	bool bOpenClimbTipsHeightCheckWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd9, Size: 0x1]
	SoftObjectPath ClimbTipsLineMaterialForTPP;//[Offset: 0xce0, Size: 0x18]
	SoftObjectPath ClimbTipsLineMaterialForFPP;//[Offset: 0xcf8, Size: 0x18]
	MaterialInterface* ClimbTipsLineMaterialInstanceForTPP;//[Offset: 0xd10, Size: 0x8]
	MaterialInterface* ClimbTipsLineMaterialInstanceForFPP;//[Offset: 0xd18, Size: 0x8]
	Actor* ClimbTipsActor;//[Offset: 0xd20, Size: 0x8]
	StaticMeshComponent* ClimbTipsActorMesh;//[Offset: 0xd28, Size: 0x8]
	bool IsLittleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xebc, Size: 0x1]
	Vector4 ClimbOverDuration;//[Offset: 0xf60, Size: 0x10]
	float ClimbOverHorizontalCheckDistance;//[Offset: 0xf70, Size: 0x4]
	float ClimbOverNextHorizontalCheckDistance;//[Offset: 0xf74, Size: 0x4]
	float ClimbOverVerticalCheckDistance;//[Offset: 0xf78, Size: 0x4]
	float ClimbOverOverDistance;//[Offset: 0xf7c, Size: 0x4]
	Vector ClimbOverAnimHeightRange;//[Offset: 0xf80, Size: 0xc]
	float HangingDuration;//[Offset: 0xfbc, Size: 0x4]
	float CheckHangingDuration;//[Offset: 0xfc0, Size: 0x4]
	float HangingVerticalDistance;//[Offset: 0xfc4, Size: 0x4]
	bool bShowClimbOverCheckDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe1, Size: 0x1]
	bool bShowWallNormalDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe2, Size: 0x1]
	bool bShowClimbNormalDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe3, Size: 0x1]
	bool bAutoClimb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe4, Size: 0x1]
	float AutoClimbMaxFacingWallAngle;//[Offset: 0xfe8, Size: 0x4]
	float AutoClimbMaxVelocityWallAngle;//[Offset: 0xfec, Size: 0x4]
	float OneKeyClimbWalkingHorizontalCheck;//[Offset: 0xff0, Size: 0x4]
	float OneKeyClimbFallingHorizontalCheck;//[Offset: 0xff4, Size: 0x4]
	float OneKeyClimbBackCheck;//[Offset: 0xff8, Size: 0x4]
	float ClimbBigJumpScreenDis;//[Offset: 0xffc, Size: 0x4]
	float ClimbBigJumpScreenAngle;//[Offset: 0x1000, Size: 0x4]
	float ClimbBigJumpAngle;//[Offset: 0x1004, Size: 0x4]
	CurveFloat* ClimbBigJumpNormalVelocityCurve;//[Offset: 0x1008, Size: 0x8]
	CurveFloat* ClimbBigJumpVerticalVelocityCurve;//[Offset: 0x1010, Size: 0x8]
	CurveFloat* SlideJumptoClimbBigJumpNormalVelocityCurve;//[Offset: 0x1018, Size: 0x8]
	CurveFloat* SlideJumptoClimbBigJumpVerticalVelocityCurve;//[Offset: 0x1020, Size: 0x8]
	float HangingClimbBigJumpNormalVelocity;//[Offset: 0x1028, Size: 0x4]
	float HangingClimbBigJumpVerticalVelocity;//[Offset: 0x102c, Size: 0x4]
	float ClimbInAirBigJumpCD;//[Offset: 0x1030, Size: 0x4]
	float ClimbBigJumpControlCD;//[Offset: 0x1034, Size: 0x4]
	float ClimbBigJumpControlAccel;//[Offset: 0x1038, Size: 0x4]
	float ClimbBigJumpEndZSpeed;//[Offset: 0x103c, Size: 0x4]
	float ClimbBigJumpPreJumpTime;//[Offset: 0x1040, Size: 0x4]
	bool bAutoJumpClimb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105f, Size: 0x1]
	bool bAutoJumpClimbEnterClimb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1060, Size: 0x1]
	float ClimbBigJumpToleranceJumpTime;//[Offset: 0x1064, Size: 0x4]
	float ClimbBigJumpHoldTime;//[Offset: 0x1068, Size: 0x4]
	float ClimbBigJumpCancelForwardLimitAngle;//[Offset: 0x106c, Size: 0x4]
	bool BCheckSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1077, Size: 0x1]
	float EnterSlideRequiredSpeed;//[Offset: 0x107c, Size: 0x4]
	float SlidingJumpScreenVeerAngle;//[Offset: 0x1080, Size: 0x4]
	float SlidingJumpScreenVeerLeftRightAngle;//[Offset: 0x1084, Size: 0x4]
	float EnterSlideRequiredSpeedAir;//[Offset: 0x1088, Size: 0x4]
	float EnterSlideRequiredTotalSpeed;//[Offset: 0x108c, Size: 0x4]
	float SlideBoostSpeed;//[Offset: 0x1090, Size: 0x4]
	float SlideBoostSpeedCap;//[Offset: 0x1094, Size: 0x4]
	float SlideBoostSpeedCD;//[Offset: 0x1098, Size: 0x4]
	float StandToSlideTime;//[Offset: 0x10a4, Size: 0x4]
	float SlideAccel;//[Offset: 0x10ac, Size: 0x4]
	float SlideAccelAngle;//[Offset: 0x10b0, Size: 0x4]
	float SlidingVelocityDecay;//[Offset: 0x10b4, Size: 0x4]
	CurveFloat* SlidingVelocityDecayCurve;//[Offset: 0x10b8, Size: 0x8]
	CurveFloat* SlidingVelocityDecayCurveNoSlideBoost;//[Offset: 0x10c0, Size: 0x8]
	float SlidingDeceleration;//[Offset: 0x10c8, Size: 0x4]
	float SlidingStopSpeed;//[Offset: 0x10cc, Size: 0x4]
	float SlidingMaxStopSpeed;//[Offset: 0x10d0, Size: 0x4]
	float SlidingWantToStopSpeed;//[Offset: 0x10d4, Size: 0x4]
	float PlayerControlAffectDirNeedSpeed;//[Offset: 0x10d8, Size: 0x4]
	float PlayerControlAffectDirSpeed;//[Offset: 0x10dc, Size: 0x4]
	enum[] FormulaSequence;//[Offset: 0x10e0, Size: 0x10]
	float MaxSlidingStepHeight;//[Offset: 0x10f0, Size: 0x4]
	float SlidingStepHeightDeceleration;//[Offset: 0x10f4, Size: 0x4]
	float SlidingJumpHeight;//[Offset: 0x10f8, Size: 0x4]
	CurveFloat* SlidingVelocityJumpAngleCurve;//[Offset: 0x1100, Size: 0x8]
	float MaxSlidingJumpSpeed;//[Offset: 0x1108, Size: 0x4]
	float SlideJumpHeightRatio;//[Offset: 0x110c, Size: 0x4]
	float SlideJumpTime;//[Offset: 0x1110, Size: 0x4]
	float SlidingJumpScreenDis;//[Offset: 0x1114, Size: 0x4]
	float SlidingJumpScreenAngle;//[Offset: 0x1118, Size: 0x4]
	bool bSlideJumpMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111c, Size: 0x1]
	HitEffectDataAsset* SlidingFX;//[Offset: 0x1130, Size: 0x28]
	ParticleSystem* LastSlidingFX;//[Offset: 0x1158, Size: 0x8]
	ParticleSystemComponent*[] SlidingFXComponents;//[Offset: 0x1160, Size: 0x10]
	Vector SlidingFXLocation;//[Offset: 0x1170, Size: 0xc]
	MovementCameraState[] EnterSlidingCameraState;//[Offset: 0x1180, Size: 0x10]
	int LittleJumpMotionAssetID;//[Offset: 0x1198, Size: 0x4]
	delegate DelegateOnMotionMovementEnd;//[Offset: 0x11a0, Size: 0x10]
	bool EnableMotionMovementLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b0, Size: 0x1]
	bool RuntimeWarpingPointWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b1, Size: 0x1]
	Vector WarpingEndLocation;//[Offset: 0x11b4, Size: 0xc]
	Vector[] RuntimeWarpingPointLocationArrayEditor;//[Offset: 0x11c0, Size: 0x10]
	Vector[] RuntimeWarpingSocketArray;//[Offset: 0x11d0, Size: 0x10]
	MotionWarpingDataAsset* CurrentMotionMovementData;//[Offset: 0x11e8, Size: 0x8]
	RepMotionData RepMotionData;//[Offset: 0x11f0, Size: 0x60]
	float RepMotionMovementTime;//[Offset: 0x1250, Size: 0x4]
	bool bOpenHitSlowly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1308, Size: 0x1]
	bool bUseSlowdownPlan2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1309, Size: 0x1]
	CurveFloat* HitRateCurve;//[Offset: 0x1310, Size: 0x8]
	float HitRateCD2;//[Offset: 0x1318, Size: 0x4]
	float ToHitRateCD2;//[Offset: 0x131c, Size: 0x4]
	SurfaceFloatDataAsset* SurfaceDecayDataAsset;//[Offset: 0x1320, Size: 0x8]
	float SyncLaunchTimeOut;//[Offset: 0x1328, Size: 0x4]
	bool bControllerLost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x157e, Size: 0x1]
	float DSAdjustOverDistance;//[Offset: 0x1588, Size: 0x4]
	float DSAdjustLargeVelocity;//[Offset: 0x158c, Size: 0x4]
	float SimulatedForceUpdateLocationTime;//[Offset: 0x1590, Size: 0x4]
	bool bOpenSimulatedPredicting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c8, Size: 0x1]
	float SimulateServerTimeStamp;//[Offset: 0x15d0, Size: 0x4]
	PrimitiveComponent* DRNetLastBase;//[Offset: 0x1618, Size: 0x8]
	float DRLinceTraceLength;//[Offset: 0x1624, Size: 0x4]
	bool bSimulatedTickOptimizationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1628, Size: 0x1]
	bool bShowSimulatedTickAngelLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1629, Size: 0x1]
	float SimulatedTickDistance;//[Offset: 0x162c, Size: 0x4]
	float SimulatedTickAngelLimit;//[Offset: 0x1630, Size: 0x4]
	float SimulatedTickAngelLimitBuffer;//[Offset: 0x1638, Size: 0x4]
	bool bServerPredictMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1641, Size: 0x1]
	float RTTToleranceRate;//[Offset: 0x16d0, Size: 0x4]
	float LagTolerance;//[Offset: 0x16d4, Size: 0x4]
	float PredictInterval;//[Offset: 0x16d8, Size: 0x4]
	int PerFrameUsePacket;//[Offset: 0x16dc, Size: 0x4]
	bool bOnlyLosePredict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e0, Size: 0x1]
	float LosePredictTime;//[Offset: 0x16e4, Size: 0x4]
	bool bServerTrustClientMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16ed, Size: 0x1]
	MovementAntiDataAsset* MovementAntiDataAsset;//[Offset: 0x16f0, Size: 0x8]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170c, Size: 0x1]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x1710, Size: 0x4]
	float ClientAdjustPassWallCheckDistance;//[Offset: 0x1720, Size: 0x4]
	ReconnectSyncData ReconnectSyncData;//[Offset: 0x1754, Size: 0x10]
	bool bOpenReconnectSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1764, Size: 0x1]
	float ReconnectCheckDistance;//[Offset: 0x1768, Size: 0x4]
	float ReconnectDistanceTolerance;//[Offset: 0x176c, Size: 0x4]
	float ReconnectCheckTime;//[Offset: 0x1770, Size: 0x4]
	int ReceivePacketFiveSecond;//[Offset: 0x1784, Size: 0x4]
	int ServerAdjustCount;//[Offset: 0x17a4, Size: 0x4]
	Vector2D ServerCapsuleSize;//[Offset: 0x1860, Size: 0x8]
	float AISlidingMinSpeed;//[Offset: 0x1880, Size: 0x4]
	float AISlidingMaxSpeed;//[Offset: 0x1884, Size: 0x4]
	float AISlidingTime;//[Offset: 0x1888, Size: 0x4]
	AIPhySimuPoint[] AIPhysPointsSeq;//[Offset: 0x1890, Size: 0x10]
	Vector2D AIClimbHelper;//[Offset: 0x18a0, Size: 0x8]
	int AIPhysPointIndex;//[Offset: 0x18a8, Size: 0x4]
	Vector NavLinkStartLocation;//[Offset: 0x18ac, Size: 0xc]
	Vector NavLinkEndLocation;//[Offset: 0x18b8, Size: 0xc]
	bool ClimbOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c4, Size: 0x1]
	float AIRemainDelta;//[Offset: 0x18c8, Size: 0x4]
	float MaxAIJumpZVelocity;//[Offset: 0x18cc, Size: 0x4]
	float AIClimbPawnRadiusScale;//[Offset: 0x18d0, Size: 0x4]
	float MaxAIJumpHeight;//[Offset: 0x18d4, Size: 0x4]
	float AIClimbVelocity;//[Offset: 0x18d8, Size: 0x4]
	float AIJumpVelocity;//[Offset: 0x18dc, Size: 0x4]
	void SyncLaunch(out const Vector InVelocity, bool bXYOverride, bool bZOverride, enum Action, Actor* Actor);// 0x39a4dac
	void StopSlide();// 0x39a3f58
	void StartMotionMovementByData(MotionWarpingDataAsset* InMotionMovementData);// 0x39a5b78
	void StartMotionMovement(int NewMotionMovementID);// 0x39a5bf4
	void SetOpenSlideJump(bool bOpen);// 0x39a5fa0
	void ServerUpdateSimulatedReport(int InSimulatedAdjustCount, int InSnapshotAvoidAdjustCount, int InSnapshotForceAdjustCount, int InSimulatedLongTimeCount, int InSimulatedLongTimeAdjustCount, int InSimulatedLongDistanceAdjustCount, int InSimulatedDynamicAdjustCount, int InSimulatedManyPacketCount, int InSimulatedLargeVelocityAdjustCount);// 0x39a4150
	void ServerSyncLaunchAck(int InClientLaunchAck);// 0x39a4bdc
	void ServerSyncLaunch(const Vector InVelocity, enum Action, Actor* Actor, double ClientTimeStamp);// 0x39a4c60
	void ServerStartMotionMovementNoBaseByData(const Vector StartLocation, const Rotator StartRotation, MotionWarpingDataAsset* InMotionMovementData, const Vector NewWarpingEndLocation, const Vector[] NewRuntimeWarpingPointLocationArrayEditor, const Vector[] NewRuntimeWarpingSocketArray);// 0x39a576c
	void ServerStartMotionMovementByData(PrimitiveComponent* Base, const Vector StartLocation, const Rotator StartRotation, MotionWarpingDataAsset* InMotionMovementData, const Vector NewWarpingEndLocation, const Vector[] NewRuntimeWarpingPointLocationArrayEditor, const Vector[] NewRuntimeWarpingSocketArray);// 0x39a5948
	void ServerSlidingToAir();// 0x39a5d10
	void ServerSlideFailProcess(float DeltaTime, int Iterations, enum EnterState);// 0x39a5e38
	void ServerSetAutoJumpClimb(bool bEnable);// 0x39a7818
	void ServerReportClimb(int ClimbMultiJumpTimes, int ClimbMultiJumpCount);// 0x39a443c
	void ServerReportAutoRun(float AutoSprintDistance, float AutoSprintDTime);// 0x39a4500
	void ServerPingClientSyncTimeStamp(float ServerTimeStamp, float ClientTimeStamp);// 0x39a4008
	void ServerMoveWithoutRotation(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x39a815c
	void ServerMoveTri(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, float TimeStamp1, Vector_NetQuantize10 InAccel1, byte PendingFlags1, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x39a7dac
	void ServerMoveDualWithoutRotation(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x39a8368
	void ServerMoveDualHybridRootMotionWithoutRotation(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x39a8644
	void ServerMove_ServerUseClientMove(float Timestamp, Vector_NetQuantize10 InVelocity, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x39a8920
	void ServerLittleJumpNoBase(Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 CurrentVelocity);// 0x39a72c0
	void ServerLittleJump(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 CurrentVelocity);// 0x39a7384
	void ServerEnterOneKeyClimb(bool bNeedJump);// 0x39a6ed0
	void ServerEnterHangingNoBase(Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 InClimbOverEndLocation, Vector_NetQuantize100 InHangingPosition);// 0x39a63ac
	void ServerEnterHanging(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 InClimbOverEndLocation, Vector_NetQuantize100 InHangingPosition);// 0x39a64b8
	void ServerEnterClimbOverNoBase(Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 InClimbOverEndLocation, byte ClimbOverFrom);// 0x39a6854
	void ServerEnterClimbOver(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 InClimbOverEndLocation, byte ClimbOverFrom);// 0x39a695c
	void ServerEnterClimbNoBase(Vector_NetQuantize100 RelativeLoc, uint16 ActorRotationYaw);// 0x39a6c74
	void ServerEnterClimb(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, uint16 ActorRotationYaw);// 0x39a6d3c
	void ServerEndMotionMovementNoBase(Vector NewLocation, Rotator NewRotation);// 0x39a51ac
	void ServerEndMotionMovement(PrimitiveComponent* Base, Vector NewLocation, Rotator NewRotation);// 0x39a5270
	void ServerEnableCheckSliding(bool NewEnable);// 0x39a6044
	void ServerClimbFailProcessNoBase(Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 CurrentVelocity);// 0x39a7650
	void ServerClimbFailProcess(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 CurrentVelocity);// 0x39a7714
	void ServerClimbBigJump(const Vector WallNormal, const float VelFrac);// 0x39a7034
	void ServerAddForce(const Vector Force, bool IsImpulse, bool StopMovementFirst, bool ImpulseRelToMass);// 0x39a45c4
	void OnStateLeave(enum LeavedState, enum Reason, enum InterruptedBy);// 0x39a7be8
	void OnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0x39a7cec
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x39a7a60
	void OnRep_ServerControllerLost();// 0x39a43ec
	void OnRep_RepMotionMovementTime();// 0x39a4fbc
	void OnRep_RepMotionData();// 0x39a4fd0
	void OnRep_NeedWaitLevelStreaming();// 0x39a3ff4
	void OnRecoverOnServer();// 0x39a4414
	void OnPreReconnectOnServer();// 0x39a4428
	void OnControllerLost();// 0x39a4400
	bool IsUseSlidingButtonVeer();// 0x39a6024
	bool IsSlideJumpMode();// 0x39a5f60
	bool IsOpenSlideJump();// 0x39a5f80
	void FlushHitCD();// 0x39a4f68
	void EnterOneKeyClimb();// 0x39a6f5c
	void EndMotionMovement();// 0x39a5b64
	void EnableCheckSliding(bool NewEnable);// 0x39a60d0
	void ClinetAddForce(const Vector Force, bool IsImpulse, bool StopMovementFirst, bool ImpulseRelToMass);// 0x39a4738
	void ClientSyncLaunch(int InClientLaunchAck, const Vector InVelocity, enum Action);// 0x39a4ad8
	void ClientPingClientSyncTimeStamp(float ServerTimeStamp);// 0x39a40cc
	void BrocastStartMotionMovementNoBaseByData(const Vector StartLocation, const Rotator StartRotation, MotionWarpingDataAsset* InMotionMovementData, const Vector NewWarpingEndLocation, const Vector[] NewRuntimeWarpingPointLocationArrayEditor, const Vector[] NewRuntimeWarpingSocketArray);// 0x39a5374
	void BrocastStartMotionMovementByData(PrimitiveComponent* Base, const Vector StartLocation, const Rotator StartRotation, MotionWarpingDataAsset* InMotionMovementData, const Vector NewWarpingEndLocation, const Vector[] NewRuntimeWarpingPointLocationArrayEditor, const Vector[] NewRuntimeWarpingSocketArray);// 0x39a5550
	void BrocastSlidingToAir();// 0x39a5cf4
	void BrocastSlideFailProcess(float DeltaTime, int Iterations, enum EnterState);// 0x39a5d2c
	void BrocastPadJump(Vector PushVelocity, bool XYOverride, bool ZOverride, float ContinueTime, bool bEnterRunaway);// 0x39a78a4
	void BrocastLittleJumpNoBase(Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 CurrentVelocity);// 0x39a70f8
	void BrocastLittleJump(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 CurrentVelocity);// 0x39a71bc
	void BrocastExitFlying();// 0x39a4f84
	void BrocastEnterSlide();// 0x39a5f44
	void BrocastEnterOneKeyClimb(bool bNeedJump);// 0x39a6e44
	void BrocastEnterHangingNoBase(Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 InClimbOverEndLocation, Vector_NetQuantize100 InHangingPosition);// 0x39a6154
	void BrocastEnterHanging(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 InClimbOverEndLocation, Vector_NetQuantize100 InHangingPosition);// 0x39a6260
	void BrocastEnterFlying();// 0x39a4fa0
	void BrocastEnterClimbOverNoBase(Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 InClimbOverEndLocation, byte ClimbOverFrom);// 0x39a6604
	void BrocastEnterClimbOver(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 InClimbOverEndLocation, byte ClimbOverFrom);// 0x39a670c
	void BrocastEnterClimbNoBase(Vector_NetQuantize100 RelativeLoc, uint16 ActorRotationYaw);// 0x39a6aa4
	void BrocastEnterClimb(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, uint16 ActorRotationYaw);// 0x39a6b6c
	void BrocastEndMotionMovementNoBase(Vector NewLocation, Rotator NewRotation);// 0x39a4fe4
	void BrocastEndMotionMovement(PrimitiveComponent* Base, Vector NewLocation, Rotator NewRotation);// 0x39a50a8
	void BrocastClimbFailProcessNoBase(Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 CurrentVelocity);// 0x39a7488
	void BrocastClimbFailProcess(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 CurrentVelocity);// 0x39a754c
	void BrocastClimbBigJump(const Vector WallNormal, const float VelFrac);// 0x39a6f70
	void ApplyConsumeTimeStamp(float NewConsumeTimeStamp);// 0x39a5c70
	void AIStartSliding(out const Vector InVelocity);// 0x39a3f6c
	void AddForceEx(out const Vector Force, bool IsImpulse, bool StopMovementFirst, bool ImpulseRelToMass, bool SentRPC, out const Vector Pos);// 0x39a48ac

--------------------------------
Class: MovementTagAttributeDataAsset.DataAsset.Object
	<FName,MovementTagAttribute> TagAttributeMap;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: MovementTagAttribute
	float ClimbNormalAngel;//[Offset: 0x0, Size: 0x4]
	float ClimbNormalZ;//[Offset: 0x4, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x8, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MovementCameraState
	float EnterVelocity;//[Offset: 0x0, Size: 0x4]
	float LeaveVelocity;//[Offset: 0x4, Size: 0x4]
	StateLerpArrayInfos EnterCameraState;//[Offset: 0x8, Size: 0x50]
	StateLerpArrayInfos LeaveCameraState;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: StateLerpArrayInfos
	<enum,StateLerpInfo> Infos;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: StateLerpInfo
	byte Priority;//[Offset: 0x0, Size: 0x1]
	enum ModifyType;//[Offset: 0x1, Size: 0x1]
	float DelayTime;//[Offset: 0x4, Size: 0x4]
	bool UseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	Vector FPPTargetValue;//[Offset: 0xc, Size: 0xc]
	Vector TPPTargetValue;//[Offset: 0x18, Size: 0xc]
	float LerpTime;//[Offset: 0x24, Size: 0x4]
	CurveVector* LerpCurve;//[Offset: 0x28, Size: 0x8]
	Vector CurveScale;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: MovementStiffCurveDataAsset.DataAsset.Object
	<enum,CurveFloat*> StiffCurveTable;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: MovementLandingHardDataAsset.DataAsset.Object
	<enum,float> LandingHardTable;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: HitEffectDataAsset.DataAsset.Object
	ParticleSystem* DefaultFX;//[Offset: 0x30, Size: 0x8]
	ParticleSystem* ConcreteFX;//[Offset: 0x38, Size: 0x8]
	ParticleSystem* DirtFX;//[Offset: 0x40, Size: 0x8]
	ParticleSystem* WaterFX;//[Offset: 0x48, Size: 0x8]
	ParticleSystem* MetalFX;//[Offset: 0x50, Size: 0x8]
	ParticleSystem* WoodFX;//[Offset: 0x58, Size: 0x8]
	ParticleSystem* GlassFX;//[Offset: 0x60, Size: 0x8]
	ParticleSystem* GrassFX;//[Offset: 0x68, Size: 0x8]
	ParticleSystem* FleshFX;//[Offset: 0x70, Size: 0x8]
	ParticleSystem* FleshFX1V3;//[Offset: 0x78, Size: 0x8]
	ParticleSystem* FleshFX3V1;//[Offset: 0x80, Size: 0x8]
	ParticleSystem* FleshFX3V3;//[Offset: 0x88, Size: 0x8]
	ParticleSystem* AutonomousFleshFX;//[Offset: 0x90, Size: 0x8]
	ParticleSystem* SteelFX;//[Offset: 0x98, Size: 0x8]
	ParticleSystem* SandbagFX;//[Offset: 0xa0, Size: 0x8]
	ParticleSystem* SandFX;//[Offset: 0xa8, Size: 0x8]
	ParticleSystem* ClothFX;//[Offset: 0xb0, Size: 0x8]
	ParticleSystem* PlasticFX;//[Offset: 0xb8, Size: 0x8]
	ParticleSystem* LeatherFX;//[Offset: 0xc0, Size: 0x8]
	ParticleSystem* CeramicsFX;//[Offset: 0xc8, Size: 0x8]
	ParticleSystem* PaperFX;//[Offset: 0xd0, Size: 0x8]
	ParticleSystem* StoneFX;//[Offset: 0xd8, Size: 0x8]
	ParticleSystem* SnowFX;//[Offset: 0xe0, Size: 0x8]
	ParticleSystem* PopCanFX;//[Offset: 0xe8, Size: 0x8]
	ParticleSystem* PyreflyFX;//[Offset: 0xf0, Size: 0x8]
	ParticleSystem* LeafFX;//[Offset: 0xf8, Size: 0x8]
	ParticleSystem* CarFX;//[Offset: 0x100, Size: 0x8]
	ParticleSystem* AsphaltFX;//[Offset: 0x108, Size: 0x8]
	ParticleSystem* IceFX;//[Offset: 0x110, Size: 0x8]
	ParticleSystem* ShieldFX;//[Offset: 0x118, Size: 0x8]
	ParticleSystem* HitShieldFX1V3;//[Offset: 0x120, Size: 0x8]
	ParticleSystem* HitShieldFX3V1;//[Offset: 0x128, Size: 0x8]
	ParticleSystem* HitShieldFX3V3;//[Offset: 0x130, Size: 0x8]
	ParticleSystem* EnemyEnergyShieldFX;//[Offset: 0x138, Size: 0x8]
	ParticleSystem* TeammateEnergyShieldFX;//[Offset: 0x140, Size: 0x8]
	FName ShieldColorName;//[Offset: 0x148, Size: 0x8]
	ParticleSystem* BreakShieldFX;//[Offset: 0x150, Size: 0x8]
	ParticleSystem* BreakShieldFX1V3;//[Offset: 0x158, Size: 0x8]
	ParticleSystem* BreakShieldFX3V1;//[Offset: 0x160, Size: 0x8]
	ParticleSystem* BreakShieldFX3V3;//[Offset: 0x168, Size: 0x8]
	ParticleSystem* FatalHealthFX;//[Offset: 0x170, Size: 0x8]
	ParticleSystem* FatalHealthFX1V3;//[Offset: 0x178, Size: 0x8]
	ParticleSystem* FatalHealthFX3V1;//[Offset: 0x180, Size: 0x8]
	ParticleSystem* FatalHealthFX3V3;//[Offset: 0x188, Size: 0x8]
	ParticleSystem* ArmorFX;//[Offset: 0x190, Size: 0x8]
	ParticleSystem* TargetFX;//[Offset: 0x198, Size: 0x8]
	ParticleSystem* MetalNoDecalFX;//[Offset: 0x1a0, Size: 0x8]
	ParticleSystem* DefaultTeammateFleshFX;//[Offset: 0x1a8, Size: 0x8]
	ParticleSystem* DefaultTeammateShieldFX;//[Offset: 0x1b0, Size: 0x8]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	<FString,ParticleSystem*> ExtendFleshFX;//[Offset: 0x1c0, Size: 0x50]
	AkAudioEvent* HitWorldSound;//[Offset: 0x210, Size: 0x8]
	AkAudioEvent* HitTeammateSound;//[Offset: 0x218, Size: 0x8]
	AkAudioEvent* HitBeepSound;//[Offset: 0x220, Size: 0x8]
	AkAudioEvent* DefaultSound3V1;//[Offset: 0x228, Size: 0x8]
	AkAudioEvent* HitShieldSound3V1;//[Offset: 0x230, Size: 0x8]
	AkAudioEvent* BreakShieldSound3V1;//[Offset: 0x238, Size: 0x8]
	AkAudioEvent* HeadShotSound3V1;//[Offset: 0x240, Size: 0x8]
	AkAudioEvent* HeadShotFatalSound3V1;//[Offset: 0x248, Size: 0x8]
	AkAudioEvent* KnockDownShieldSound3V1;//[Offset: 0x250, Size: 0x8]
	AkAudioEvent* FatalHealthSound3V1;//[Offset: 0x258, Size: 0x8]
	AkAudioEvent* DefaultSound1V3;//[Offset: 0x260, Size: 0x8]
	AkAudioEvent* HitShieldSound1V3;//[Offset: 0x268, Size: 0x8]
	AkAudioEvent* BreakShieldSound1V3;//[Offset: 0x270, Size: 0x8]
	AkAudioEvent* HeadShotSound1V3;//[Offset: 0x278, Size: 0x8]
	AkAudioEvent* HeadShotFatalSound1V3;//[Offset: 0x280, Size: 0x8]
	AkAudioEvent* FatalHealthSound1V3;//[Offset: 0x288, Size: 0x8]
	AkAudioEvent* KnockDownShieldSound1V3;//[Offset: 0x290, Size: 0x8]
	AkAudioEvent* DefaultSound3V3;//[Offset: 0x298, Size: 0x8]
	AkAudioEvent* HitShieldSound3V3;//[Offset: 0x2a0, Size: 0x8]
	AkAudioEvent* BreakShieldSound3V3;//[Offset: 0x2a8, Size: 0x8]
	AkAudioEvent* HeadShotSound3V3;//[Offset: 0x2b0, Size: 0x8]
	AkAudioEvent* HeadShotFatalSound3V3;//[Offset: 0x2b8, Size: 0x8]
	AkAudioEvent* FatalHealthSound3V3;//[Offset: 0x2c0, Size: 0x8]
	AkAudioEvent* KnockDownShieldSound3V3;//[Offset: 0x2c8, Size: 0x8]
	AkAudioEvent* BulletFlySound;//[Offset: 0x2d0, Size: 0x8]
	AkAudioEvent* ChargeRifleFinalHit;//[Offset: 0x2d8, Size: 0x8]
	DecalData DefaultDecal;//[Offset: 0x2e0, Size: 0x28]
	DecalData ConcreteDecal;//[Offset: 0x308, Size: 0x28]
	DecalData DirtDecal;//[Offset: 0x330, Size: 0x28]
	DecalData WaterDecal;//[Offset: 0x358, Size: 0x28]
	DecalData MetalDecal;//[Offset: 0x380, Size: 0x28]
	DecalData WoodDecal;//[Offset: 0x3a8, Size: 0x28]
	DecalData GrassDecal;//[Offset: 0x3d0, Size: 0x28]
	DecalData GlassDecal;//[Offset: 0x3f8, Size: 0x28]
	DecalData FleshDecal;//[Offset: 0x420, Size: 0x28]
	DecalData FleshDecalAutomonous;//[Offset: 0x448, Size: 0x28]
	DecalData TeammateDecal;//[Offset: 0x470, Size: 0x28]
	DecalData SteelDecal;//[Offset: 0x498, Size: 0x28]
	DecalData SandbagDecal;//[Offset: 0x4c0, Size: 0x28]
	DecalData SandDecal;//[Offset: 0x4e8, Size: 0x28]
	DecalData ClothDecal;//[Offset: 0x510, Size: 0x28]
	DecalData PlasticDecal;//[Offset: 0x538, Size: 0x28]
	DecalData LeatherDecal;//[Offset: 0x560, Size: 0x28]
	DecalData CeramicsDecal;//[Offset: 0x588, Size: 0x28]
	DecalData PaperDecal;//[Offset: 0x5b0, Size: 0x28]
	DecalData StoneDecal;//[Offset: 0x5d8, Size: 0x28]
	DecalData SnowDecal;//[Offset: 0x600, Size: 0x28]
	DecalData PopCanDecal;//[Offset: 0x628, Size: 0x28]
	DecalData PyreflyDecal;//[Offset: 0x650, Size: 0x28]
	DecalData LeafDecal;//[Offset: 0x678, Size: 0x28]
	DecalData CarDecal;//[Offset: 0x6a0, Size: 0x28]
	DecalData AsphaltDecal;//[Offset: 0x6c8, Size: 0x28]
	DecalData IceDecal;//[Offset: 0x6f0, Size: 0x28]
	DecalData ShieldDecal;//[Offset: 0x718, Size: 0x28]
	DecalData ArmorDecal;//[Offset: 0x740, Size: 0x28]

--------------------------------
Class: DecalData
	float DecalSize;//[Offset: 0x0, Size: 0x4]
	float LifeSpan;//[Offset: 0x4, Size: 0x4]
	Material* DecalMaterial;//[Offset: 0x8, Size: 0x8]
	float ImpactEffectStartScaleDistance;//[Offset: 0x10, Size: 0x4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x14, Size: 0x4]
	float ImpactEffectStartScaleValue;//[Offset: 0x18, Size: 0x4]
	float ImpactEffectEndScaleValue;//[Offset: 0x1c, Size: 0x4]
	float DecalFadeScreenSize;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: MotionWarpingDataAsset.MotionExtractorDataAsset.DataAsset.Object
	AnimMontage* FPPMotionMontage;//[Offset: 0x40, Size: 0x8]
	AnimMontage* TPPMotionMontage;//[Offset: 0x48, Size: 0x8]
	byte MotionMovementWarpingType;//[Offset: 0x50, Size: 0x1]
	byte MotionMovementLocationProcessingType;//[Offset: 0x51, Size: 0x1]
	byte MotionMovementMode;//[Offset: 0x52, Size: 0x1]
	enum MovementNetMode;//[Offset: 0x53, Size: 0x1]
	enum SimulateMode;//[Offset: 0x54, Size: 0x1]
	float MotionMovementStepUpHeight;//[Offset: 0x58, Size: 0x4]
	bool EnableWarpingEndLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	float[] MarkingWarpingPointTimeStampArrayEditor;//[Offset: 0x60, Size: 0x10]
	bool BForbiddenViewControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool EnableMotionMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	FString Desc;//[Offset: 0x78, Size: 0x10]
	bool bNoChangeMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: MotionExtractorDataAsset.DataAsset.Object
	CurveVector* MotionMovementCurve;//[Offset: 0x30, Size: 0x8]
	float EndRotationYaw;//[Offset: 0x38, Size: 0x4]
	void ImportCurve();// 0x22b6d0c
	void ExportCurve();// 0x22b6d20

--------------------------------
Class: RepMotionData
	bool bUseMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	PrimitiveComponent* Base;//[Offset: 0x8, Size: 0x8]
	Vector StartLocation;//[Offset: 0x10, Size: 0xc]
	Rotator StartRotation;//[Offset: 0x1c, Size: 0xc]
	Vector WarpingEndLocation;//[Offset: 0x28, Size: 0xc]
	Vector[] RuntimeWarpingPointLocationArrayEditor;//[Offset: 0x38, Size: 0x10]
	Vector[] RuntimeWarpingSocketArray;//[Offset: 0x48, Size: 0x10]
	MotionWarpingDataAsset* MotionMovementAsset;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: SurfaceFloatDataAsset.DataAsset.Object
	<byte,float> SurfaceTable;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: MovementAntiDataAsset.DataAsset.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bPassWallSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	int MaxTotalPassWallTimes;//[Offset: 0x34, Size: 0x4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0x38, Size: 0x4]
	bool SimpleMoveSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	float NormalWalkingSpeed;//[Offset: 0x40, Size: 0x4]
	float WholeWalkingSpeed;//[Offset: 0x44, Size: 0x4]
	float NormalSlidingSpeed;//[Offset: 0x48, Size: 0x4]
	float WholeSlidingSpeed;//[Offset: 0x4c, Size: 0x4]
	CurveFloat* MovePunishInterval;//[Offset: 0x50, Size: 0x8]
	CurveFloat* MoveCheckInterval;//[Offset: 0x58, Size: 0x8]
	CurveFloat* TolerateDistanceFactor;//[Offset: 0x60, Size: 0x8]
	CurveFloat* PunishTime;//[Offset: 0x68, Size: 0x8]
	float MinMoveCheckInterval;//[Offset: 0x70, Size: 0x4]
	bool ZMoveSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	CurveFloat* JumpTolerateFactor;//[Offset: 0x78, Size: 0x8]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool FallingCheckSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	bool bIsForceAdjustZWhenFallingCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]
	float FallingCheckInterval;//[Offset: 0x84, Size: 0x4]
	float FallingCheckDistance;//[Offset: 0x88, Size: 0x4]
	float FallingCheckTolerateFactor;//[Offset: 0x8c, Size: 0x4]
	bool TimeSpeedCheckSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	float TimeSpeedCheckInterval;//[Offset: 0x94, Size: 0x4]
	float MaxDecideClientTimeSpeedDeltaTime;//[Offset: 0x98, Size: 0x4]
	CurveFloat* DecideTimeSpeedGearToTimes;//[Offset: 0xa0, Size: 0x8]
	float DefaultMaxDeltaTime;//[Offset: 0xa8, Size: 0x4]
	float TimeSpeedMaxClientDeltaTime;//[Offset: 0xac, Size: 0x4]
	int TimeSpeedFilterTimes;//[Offset: 0xb0, Size: 0x4]
	bool LaunchCheckSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	float LaunchCheckInterval;//[Offset: 0xb8, Size: 0x4]
	int MaxLaunchCount;//[Offset: 0xbc, Size: 0x4]
	int MaxCheatLaunchCount;//[Offset: 0xc0, Size: 0x4]
	float MaxLaunchCheatSpeed;//[Offset: 0xc4, Size: 0x4]
	bool ClientPacketTimeOutCheckSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bLogClientPacketTimeOutCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	float ClientPacketTimeOut;//[Offset: 0xcc, Size: 0x4]
	bool PowerSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bPowerPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	float PowerPunishTime;//[Offset: 0xd4, Size: 0x4]
	float PowerPunishInterval;//[Offset: 0xd8, Size: 0x4]

--------------------------------
Class: ReconnectSyncData
	bool bNeedWaitLevelStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector_NetQuantize100 ServerLineTraceLocation;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: AIPhySimuPoint

--------------------------------
Class: ApexBuffSystemComponent.ActorComponent.Object
	BuffInstancedItem*[] AllBuffs;//[Offset: 0xf8, Size: 0x10]
	Actor* PawnOwner;//[Offset: 0x108, Size: 0x8]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	float RepDelayIgnoreTime;//[Offset: 0x14c, Size: 0x4]
	BuffStructure MainBuffStructure;//[Offset: 0x160, Size: 0x18]
	BuffStructure LocalBuffStructure;//[Offset: 0x178, Size: 0x18]
	bool SetBuffExpiry(FName BuffName, float ExpirySeconds);// 0x3975aa0
	void ResetBuff();// 0x3975e9c
	bool RemoveBuffByID(int BuffID, bool RemoveLayerOnly, Controller* pCauser, Actor* CauserActor, bool bForceRemoveAll);// 0x3976010
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Controller* pCauser, Actor* CauserActor, bool bForceRemoveAll);// 0x39763f8
	void OnRep_MainBuffStructure();// 0x397596c
	bool IsBufferMutexed(FName NewBuffName);// 0x3976908
	void InitModifier(Actor* TempPawn);// 0x3976d44
	bool HasMoreThanOneBuff(FName BuffName);// 0x3975eb0
	bool HasBuff(FName BuffName, bool bPredicatePendingRemove);// 0x3975f38
	FName GetBuffName(int BuffID);// 0x3976c3c
	int GetBuffID(FName BuffName);// 0x3976cc0
	float GetBuffExpiry(FName BuffName);// 0x3975a1c
	ApexBuff* GetBuffByName(FName BuffName);// 0x3975d10
	void ClientSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* CauserActor);// 0x39762dc
	void ClientSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x39767bc
	void ClientMulticastSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* CauserActor);// 0x39761c0
	void ClientMulticastSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x3976670
	void ClientMulticastSetBuffExpiry(FName BuffName, float LeftSecondsAfterNow);// 0x39765a8
	void ClearDeBuff(bool ForceCleanUp);// 0x3975d94
	void ClearBuff(bool ForceCleanUp);// 0x3975e18
	bool CheckBuffStatus(class ApexBuffStatusType Status);// 0x3975994
	void CameraModeSwitchCallback();// 0x3975980
	bool AddBuffLayer(FName BuffName, int layerNum);// 0x3975c40
	bool AddBuffExpiry(FName BuffName, float ExpirySeconds);// 0x3975b70
	int AddBuffByID(int BuffID, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x3976990
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x3976ae4

--------------------------------
Class: BuffInstancedItem.Object
	int BuffID;//[Offset: 0x28, Size: 0x4]
	ApexBuff* Buff;//[Offset: 0x2c, Size: 0x8]
	int LayerCount;//[Offset: 0x34, Size: 0x4]
	Controller* CauserPawnController;//[Offset: 0x38, Size: 0x8]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float Expiry;//[Offset: 0x44, Size: 0x4]
	Actor* Target;//[Offset: 0x48, Size: 0x8]
	int BuffIndex;//[Offset: 0x50, Size: 0x4]
	Actor* CauserPawnActor;//[Offset: 0x58, Size: 0x8]
	Actor*[] AttackerStack;//[Offset: 0x60, Size: 0x10]
	bool bPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool[] BuffActionHadDoList;//[Offset: 0x78, Size: 0x10]
	bool[] EventBuffActionHadDoList;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: ApexBuff.Object
	FName BuffName;//[Offset: 0x30, Size: 0x8]
	bool IsDeBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool Layerable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool NeedDetachAndAttachForReplaceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	bool NeedDetachAndAttachForAddLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1]
	bool ReplaceExsist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool bAddAttackerStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	int LayerMax;//[Offset: 0x40, Size: 0x4]
	int InitialLayerCount;//[Offset: 0x44, Size: 0x4]
	float ValidityTime;//[Offset: 0x48, Size: 0x4]
	ApexBuffCondition*[] BuffConditions;//[Offset: 0x50, Size: 0x10]
	StatusChange[] StatusChanges;//[Offset: 0x60, Size: 0x10]
	bool NeedSimulateToClientMulticast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool NeedSimulateToClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool bCheckConsistency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	byte SimulateAddBuffRole;//[Offset: 0x73, Size: 0x1]
	enum ViewTargetAddBuffRole;//[Offset: 0x74, Size: 0x1]
	FName[] MutexBuffers;//[Offset: 0x78, Size: 0x10]
	BuffActionItem[] BuffActions;//[Offset: 0x88, Size: 0x10]
	BuffEventActionItem[] EventBuffActions;//[Offset: 0x98, Size: 0x10]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0xb0, Size: 0x50]
	int InstancedNodesTotalSize;//[Offset: 0x100, Size: 0x4]

--------------------------------
Class: ApexBuffCondition.ApexBuffAction.ActorComponent.Object
	bool IsOK(ActorComponent* BuffManagerComponent);// 0x3971078

--------------------------------
Class: ApexBuffAction.ActorComponent.Object
	BuffInstancedItem* OwnerBuffInstancePtr;//[Offset: 0xf8, Size: 0x8]
	Actor* BuffTargetActor;//[Offset: 0x100, Size: 0x8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0x108, Size: 0x8]
	bool OnlyPlayOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	bool StopActionWhenBuffAllRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]
	bool OnlyActiveForPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 0x1]
	byte ActionActiveType;//[Offset: 0x113, Size: 0x1]
	enum[] LegendTypeList;//[Offset: 0x118, Size: 0x10]
	bool IsBlueprintAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	void UpdateActionBP(float DeltaSeconds);// 0x3967f08
	void UpdateAction_Internal(float DeltaSeconds);// 0x396810c
	void UndoActionBP();// 0x3967f8c
	void UndoAction_Internal();// 0x3968190
	bool RealDoActionBP();// 0x3967fa8
	bool RealDoAction_Internal();// 0x39681ac
	void OnLayerDeattached(int Layer);// 0x3968004
	void OnLayerAttached(int Layer);// 0x3968088
	ApexBuffSystemComponent* GetOwnerBuffSystem();// 0x39681ec
	BuffInstancedItem* GetOwnerBuffInstance();// 0x3968254
	ApexBuff* GetOwnerBuff();// 0x3968220
	void CameraModeChangedEventBP();// 0x3967eec
	void CameraModeChangedEvent_Internal();// 0x3967fe8

--------------------------------
Class: StatusChange
	class ApexBuffStatusType* StatusName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ApexBuffStatusType.Object

--------------------------------
Class: BuffActionItem
	ApexBuffAction* BuffAction;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: BuffEventActionItem
	ApexBuffEventType* EventType;//[Offset: 0x0, Size: 0x8]
	ApexBuffAction* BuffEventAction;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ApexBuffEventType.Object

--------------------------------
Class: BuffStructure
	double ModifyTime;//[Offset: 0x0, Size: 0x8]
	BuffLayer[] InfoList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BuffLayer
	FName BuffName;//[Offset: 0x0, Size: 0x8]
	BuffInnerInfo[] InfoList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BuffInnerInfo
	Controller* BuffCauser;//[Offset: 0x0, Size: 0x8]
	Actor* CauserActor;//[Offset: 0x8, Size: 0x8]
	int TeamID;//[Offset: 0x10, Size: 0x4]
	int CampID;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10]
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SubObjectsReplicationConfig
	float MinDistance;//[Offset: 0x0, Size: 0x4]
	float MaxDistance;//[Offset: 0x4, Size: 0x4]
	float MinProbability;//[Offset: 0x8, Size: 0x4]
	float MaxProbability;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ApexAIController.AIController.Controller.Actor.Object
	bool IsAIFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1]
	bool IsMirageTutorialAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 0x1]
	bool IsAICanCastSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x416, Size: 0x1]
	bool IsAICanMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x417, Size: 0x1]
	bool IsAICanAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	bool CanOpenBinTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	float TotalWeight;//[Offset: 0x438, Size: 0x4]
	BTTaskStartFireMemory Memory;//[Offset: 0x43c, Size: 0x10]
	Vector TargetLocation;//[Offset: 0x44c, Size: 0xc]
	AIBehaviorRules BehaviorRules;//[Offset: 0x470, Size: 0x18]
	BackpackComponent* BackpackCompoent;//[Offset: 0x488, Size: 0x8]
	PingManagerComponent* PingManagerComponent;//[Offset: 0x490, Size: 0x8]
	EmojiGiveALikeMgr* EmojiGiveALikeMgr;//[Offset: 0x498, Size: 0x8]
	FiniteBattleBehStateMachine* FiniteBattleBehStateMachine;//[Offset: 0x4a0, Size: 0x8]
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x4a8, Size: 0x8]
	BlackboardComponent* BlackboardComp;//[Offset: 0x4b0, Size: 0x8]
	ApexAIPerceptionComponent* AIPerceptionComp;//[Offset: 0x4b8, Size: 0x8]
	ApexAIComponent* AIComp;//[Offset: 0x4c0, Size: 0x8]
	PickupManagerComponent* PickupManagerComp;//[Offset: 0x4c8, Size: 0x8]
	StateMachineComponent* StateMachineComp;//[Offset: 0x4d0, Size: 0x8]
	DrugRecommendComponent* DrugRecommendComp;//[Offset: 0x4d8, Size: 0x8]
	enum MaxShieldMode;//[Offset: 0x4e0, Size: 0x1]
	float SetMaxShieldValue;//[Offset: 0x4e4, Size: 0x4]
	bool DestroyWhenPawnGoDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 0x1]
	CharacterTeamItemUseTipComponent* CharacterTeamItemUseTipComponent;//[Offset: 0x4f8, Size: 0x8]
	enum ServerStateType;//[Offset: 0x500, Size: 0x1]
	DataReportComponent* DataReportComponent;//[Offset: 0x508, Size: 0x8]
	MsgAssistantCompoent* MsgAssitantComp;//[Offset: 0x510, Size: 0x8]
	ModifyAttributeData* RealCustomSpeed;//[Offset: 0x538, Size: 0x8]
	float MemoryTargetSeekerTime;//[Offset: 0x54c, Size: 0x4]
	float LastDelayToClearDeadBodyTime;//[Offset: 0x550, Size: 0x4]
	Vector MemoryTargetTime;//[Offset: 0x554, Size: 0xc]
	Vector DiffTargetTime;//[Offset: 0x560, Size: 0xc]
	float DiffHearTargetTime;//[Offset: 0x56c, Size: 0x4]
	Vector2D CurFireRecoilTarget;//[Offset: 0x570, Size: 0x8]
	Vector2D ShootWeaponAddLocation;//[Offset: 0x578, Size: 0x8]
	bool DebugShootWeaponAddLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	bool DebugShootLeftOrRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 0x1]
	bool ShootLeftOrRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x582, Size: 0x1]
	Vector2D BodyEdgeAddLocation;//[Offset: 0x584, Size: 0x8]
	float BodyEdgeAddFoot;//[Offset: 0x58c, Size: 0x4]
	float BodyEdgeShootKeepTime;//[Offset: 0x590, Size: 0x4]
	float ParachuteJumpForwardInput;//[Offset: 0x594, Size: 0x4]
	bool ParachuteJumpInputStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	int FollowerIndex;//[Offset: 0x59c, Size: 0x4]
	int AIIndex;//[Offset: 0x5a0, Size: 0x4]
	int AIType;//[Offset: 0x5a4, Size: 0x4]
	bool AlreadyEquipmentGeneration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 0x1]
	Actor* CurTarget;//[Offset: 0x5b0, Size: 0x8]
	<Actor*,EnemyInfo> EnemyInfoList;//[Offset: 0x5b8, Size: 0x50]
	Actor*[] EnemySeenInfoList;//[Offset: 0x608, Size: 0x10]
	<Actor*> EnemyList;//[Offset: 0x618, Size: 0x50]
	<Actor*,float> MemoryList;//[Offset: 0x668, Size: 0x50]
	<Actor*> SeenList;//[Offset: 0x6b8, Size: 0x50]
	double WhoAttackMeTimestamp;//[Offset: 0x710, Size: 0x8]
	bool TargetInsight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x718, Size: 0x1]
	FString[] ListofSightBlock;//[Offset: 0x720, Size: 0x10]
	Vector AILandLocation;//[Offset: 0x730, Size: 0xc]
	int[] YouHaveBeentoPointVec;//[Offset: 0x740, Size: 0x10]
	int CurLootArea;//[Offset: 0x750, Size: 0x4]
	float EnterTargetPointSpendTime;//[Offset: 0x754, Size: 0x4]
	<PlayerTombBox*> TombBoxs;//[Offset: 0x758, Size: 0x50]
	ApexAITeamController* TeamManager;//[Offset: 0x7a8, Size: 0x8]
	float UpdateBeenSeenInterval;//[Offset: 0x810, Size: 0x4]
	<byte,float> TakeDamageReduceScale;//[Offset: 0x818, Size: 0x50]
	bool IsCheckTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x868, Size: 0x1]
	float YawChangeSpeed;//[Offset: 0x86c, Size: 0x4]
	bool EnableLerp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 0x1]
	bool EnableJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x871, Size: 0x1]
	float AILevelRatio;//[Offset: 0x874, Size: 0x4]
	int MaxAILevel;//[Offset: 0x878, Size: 0x4]
	int RelativeLevelLimit;//[Offset: 0x87c, Size: 0x4]
	int NotKillAILevel;//[Offset: 0x880, Size: 0x4]
	<int> NotKillWeaponIds;//[Offset: 0x888, Size: 0x50]
	int AILevel;//[Offset: 0x8dc, Size: 0x4]
	enum CurrentPhase;//[Offset: 0x8e8, Size: 0x1]
	bool IsShowMoveTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e9, Size: 0x1]
	float SuperJumpHight;//[Offset: 0x8ec, Size: 0x4]
	bool IsDebugLoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f0, Size: 0x1]
	DynamicDmgCurve DynamicDmgCurve;//[Offset: 0x920, Size: 0x448]
	HitPositionConfig[] HitPositionConfigVec;//[Offset: 0xd68, Size: 0x10]
	float OnlyUpperBodyDist;//[Offset: 0xd78, Size: 0x4]
	bool DrawAIDebugShootLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7c, Size: 0x1]
	float ExpIncreaseScale;//[Offset: 0xd80, Size: 0x4]
	SVONNavigationComponent* SVONComponent;//[Offset: 0x11d0, Size: 0x8]
	Vector DebugAILandLocation;//[Offset: 0x11e8, Size: 0xc]
	ApexTreasureDoor* TreasureDoor;//[Offset: 0x1208, Size: 0x8]
	double UnreachableValidTime;//[Offset: 0x1270, Size: 0x8]
	bool EnableMultiClimb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1278, Size: 0x1]
	bool EnableRepath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1279, Size: 0x1]
	bool EnableMove2DynamicTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127a, Size: 0x1]
	bool EnableShiftPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127b, Size: 0x1]
	int8 AICfgForbiddenZoneTime;//[Offset: 0x127c, Size: 0x1]
	float AIFocusCanSprintAngle;//[Offset: 0x1280, Size: 0x4]
	bool EnableAIHandleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1284, Size: 0x1]
	bool DisableRaycastPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1285, Size: 0x1]
	bool EnableJumpBlockOnFirstSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1286, Size: 0x1]
	FString AIHostFuncKeyStart;//[Offset: 0x12b8, Size: 0x10]
	int AIHostFuncNum;//[Offset: 0x12c8, Size: 0x4]
	bool PickBannerInteractive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12cc, Size: 0x1]
	uint32 CurRecoverBannerPlayerKey;//[Offset: 0x12d0, Size: 0x4]
	bool PingSelfBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e8, Size: 0x1]
	float TeammateEnemyExtent;//[Offset: 0x12ec, Size: 0x4]
	float SelfEnemyExtent;//[Offset: 0x12f0, Size: 0x4]
	float PingInterval;//[Offset: 0x12f4, Size: 0x4]
	float IntervalFloat;//[Offset: 0x12f8, Size: 0x4]
	void TriggerSkill(int SkillID);// 0x3954a74
	void TriggerAIHostFuncBy(ApexPlayerController* Target, int FuncIdx, int CurrentValue);// 0x395410c
	void StopAILogic(bool StopTick);// 0x3954088
	void SetWhoAttackMe(Controller* CharacterByDamageCauser, float Damage);// 0x3954c64
	void SetOpenningTreasureDoor(ApexTreasureDoor* Door);// 0x3954214
	void ServerHandleMsg(enum Msg, enum StateSource);// 0x39546c0
	void ResumeAILogic();// 0x3954074
	void OperateRespawnBeacon(enum OperateCode, ApexRespawnBeacon* RespawnBeacon);// 0x3953fac
	void OnSkillEvent(int SkillID, byte SkillStopReason);// 0x3954938
	void OnOpenCarePackage(CarePackage* Actor);// 0x3954af0
	void OnOpenBinTest(BinActor* Door);// 0x3954b6c
	void MovementInput(float DeltaTime);// 0x39549f8
	bool IsOnZipline();// 0x39542b4
	bool IsInTacticalMomentForbiddenVolume();// 0x3954324
	bool IsClimbing();// 0x39542ec
	void HandleMsg(enum Msg, enum StateSource);// 0x39547c0
	void HandleMessage(enum Phase);// 0x3954888
	ApexAITeamController* GetTeamManager();// 0x3954548
	PingManagerComponent* GetPingManagerComponent();// 0x3954d84
	enum GetPhase();// 0x3954904
	MetaAIController* GetMetaAIManager();// 0x3954514
	FiniteBattleBehStateMachine* GetFiniteBattleBehStateMachine();// 0x3954d2c
	EmojiGiveALikeMgr* GetEmojiGiveALikeMgr();// 0x3954d48
	BlackboardComponent* GetBlackboardComp();// 0x3954e10
	BackpackComponent* GetBackPackComponent();// 0x3954dc0
	void GetAllEnemy(bool OnlPlayer, out Actor*[] OutActors);// 0x395441c
	void DoDeathEvent();// 0x3954dfc
	void DelTombBox(PlayerTombBox* Box);// 0x3954be8
	void DelAIMoveState(enum Reason);// 0x395457c
	void ClientHandleMsg(enum Msg, enum StateSource);// 0x39545f8
	void ClientEnterStageFight_AICanJump();// 0x3954500
	bool CheckRespawnBeacon(ApexRespawnBeacon* RespawnBeacon);// 0x3953f24
	void ChangeDynamicDmgCurve(enum CurveType, CurveFloat* ExternalCurve);// 0x395435c
	void BreakOpenTreasureDoor();// 0x3954298
	void AIUseSkillByBlueprint(int SkillID);// 0x3953ea8

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x350, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x350, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x350, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x350, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x350, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x358, Size: 0x8]
	BrainComponent* BrainComponent;//[Offset: 0x360, Size: 0x8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x368, Size: 0x8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x370, Size: 0x8]
	BlackboardComponent* Blackboard;//[Offset: 0x378, Size: 0x8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x380, Size: 0x8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x388, Size: 0x8]
	delegate ReceiveMoveCompleted;//[Offset: 0x390, Size: 0x10]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x63cd1fc
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x63cd104
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x63ccd80
	void SetMoveBlockDetection(bool bEnable);// 0x63cd370
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x63cd2e0
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x43841ec
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x63cce34
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x63cd498
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x63cd750
	void K2_SetFocus(Actor* NewFocus);// 0x63ccf44
	void K2_SetFocalPoint(Vector FP);// 0x63ccfc0
	void K2_ClearFocus();// 0x63ccefc
	bool HasPartialPath();// 0x63cd42c
	PathFollowingComponent* GetPathFollowingComponent();// 0x63cce18
	byte GetMoveStatus();// 0x63cd464
	Vector GetImmediateMoveDestination();// 0x63cd3f4
	Actor* GetFocusActor();// 0x63ccf10
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x63cd03c
	Vector GetFocalPoint();// 0x63cd0cc
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x63ccdfc
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x63cd180

--------------------------------
Class: BTTaskStartFireMemory
	float SustainTime;//[Offset: 0x0, Size: 0x4]
	float TakeRestTime;//[Offset: 0x4, Size: 0x4]
	float StartFireTimer;//[Offset: 0x8, Size: 0x4]
	bool bFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AIBehaviorRules
	BehaviorTree* Default;//[Offset: 0x0, Size: 0x8]
	AIBehaviorLevel[] LevelRules;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x28, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x30, Size: 0x8]
	class AliasNameData* AliasNameAsset;//[Offset: 0x38, Size: 0x8]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0xa8, Size: 0x10]
	BTService*[] Services;//[Offset: 0xb8, Size: 0x10]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8]
	<FName,FName> ExportMap;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0xa8, Size: 0x10]
	bool bCanBatchRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1]
	bool bForceBatchRun;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 0x1]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb8, Size: 0x1]
	delegate OnSuccess;//[Offset: 0xc0, Size: 0x10]
	delegate OnFail;//[Offset: 0xd0, Size: 0x10]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0xac, Size: 0x4]
	float RandomDeviation;//[Offset: 0xb0, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xaa, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0xab, Size: 0x1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: AliasNameData.Object

--------------------------------
Class: AIBehaviorLevel
	FString LevelRange;//[Offset: 0x0, Size: 0x10]
	AIBehavior[] List;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AIBehavior
	float Weight;//[Offset: 0x0, Size: 0x4]
	BehaviorTree* Tree;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xf0, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0xf8, Size: 0x8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0x120, Size: 0x10]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x63dc630
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x63dc7d0
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x63dc560
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x63dcd10
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x63dc700
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x63dcaa0
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x63dc9d0
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x63dcb70
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x63dcc40
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x63dc8f8
	bool IsVectorValueSet(out const FName KeyName);// 0x63dc4c8
	Vector GetValueAsVector(out const FName KeyName);// 0x63dce78
	FString GetValueAsString(out const FName KeyName);// 0x63dcfa4
	Rotator GetValueAsRotator(out const FName KeyName);// 0x63dcde0
	Object* GetValueAsObject(out const FName KeyName);// 0x63dd360
	FName GetValueAsName(out const FName KeyName);// 0x63dcf10
	int GetValueAsInt(out const FName KeyName);// 0x63dd1a4
	float GetValueAsFloat(out const FName KeyName);// 0x63dd110
	byte GetValueAsEnum(out const FName KeyName);// 0x63dd238
	class Object GetValueAsClass(out const FName KeyName);// 0x63dd2cc
	bool GetValueAsBool(out const FName KeyName);// 0x63dd078
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x63dc2f0
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x63dc3dc
	void ClearValue(out const FName KeyName);// 0x63dc264

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xf8, Size: 0x8]
	AIController* AIOwner;//[Offset: 0x100, Size: 0x8]
	void StopLogic(FString Reason);// 0x63dfa70
	void RestartLogic();// 0x63dfb00
	bool IsRunning();// 0x63dfa30
	bool IsPaused();// 0x63df9f0

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: BackpackComponent.ControllerComponentBase.ActorComponent.Object
	delegate ItemBeforeRemovedDelegate;//[Offset: 0x150, Size: 0x10]
	delegate ItemListUpdatedDelegate;//[Offset: 0x160, Size: 0x10]
	delegate ItemListNetUpdatedDelegate;//[Offset: 0x170, Size: 0x10]
	delegate SingleItemUpdatedDelegate;//[Offset: 0x180, Size: 0x10]
	delegate AmmoItemUpdatedDelegate;//[Offset: 0x190, Size: 0x10]
	delegate SingleItemDeleteDelegate;//[Offset: 0x1a0, Size: 0x10]
	delegate ItemOperationFailedDelegate;//[Offset: 0x1b0, Size: 0x10]
	delegate CapacityUpdatedDelegate;//[Offset: 0x1c0, Size: 0x10]
	delegate ItemPickUpResultDelegate;//[Offset: 0x1d0, Size: 0x10]
	delegate ItemDropSuccessDelegate;//[Offset: 0x1e0, Size: 0x10]
	delegate ItemUpdatedDelegate;//[Offset: 0x220, Size: 0x10]
	BackpackAddRuleComp*[] AddtionalRuleComps;//[Offset: 0x230, Size: 0x10]
	<int,ItemRule> PerkItemRuleAddition;//[Offset: 0x240, Size: 0x50]
	ItemRule[] ItemRuleNet;//[Offset: 0x290, Size: 0x10]
	ItemRule DefaultItemRule;//[Offset: 0x2a0, Size: 0xc]
	int64 FlowID;//[Offset: 0x2c8, Size: 0x8]
	IncNetArray ItemListNet;//[Offset: 0x2e0, Size: 0x20]
	BattleItemData[] CachItemList;//[Offset: 0x300, Size: 0x10]
	IncNetArray ItemListChangeCache;//[Offset: 0x310, Size: 0x20]
	IncNetArray ItemListNetCache;//[Offset: 0x330, Size: 0x20]
	ItemHandleBase*[] ItemHandleList;//[Offset: 0x350, Size: 0x10]
	<ItemDefineID,ItemHandleBase*> ItemHandleMap;//[Offset: 0x360, Size: 0x50]
	int DefaultCapacity;//[Offset: 0x3b0, Size: 0x4]
	int CapacityThreshold;//[Offset: 0x3b4, Size: 0x4]
	delegate ItemOperCountDelegate;//[Offset: 0x3b8, Size: 0x10]
	delegate ItemOperationDelegate;//[Offset: 0x3c8, Size: 0x10]
	ItemDefineID[] CurrentWeaponIdArray;//[Offset: 0x3d8, Size: 0x10]
	int Capacity;//[Offset: 0x3e8, Size: 0x4]
	int OccupiedCapacity;//[Offset: 0x3ec, Size: 0x4]
	int OccupiedExtraCapacity;//[Offset: 0x3f0, Size: 0x4]
	FString BPClassPath;//[Offset: 0x408, Size: 0x10]
	int virtualitemid;//[Offset: 0x418, Size: 0x4]
	uint32 ItemUseStartTime;//[Offset: 0x41c, Size: 0x4]
	bool UseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x3aa1840
	int UpdateCapacity();// 0x3a9ee08
	void UnequipItem(ItemDefineID DefineID);// 0x3aa05b0
	void TryMergeItemHandles(ItemDefineID DefineID, bool bLimited);// 0x3a9ff84
	int TakeItem(ItemDefineID DefineID, int count, bool bCallHandleDrop);// 0x3aa03a0
	bool SwapItem(ItemDefineID DefineID1, ItemDefineID DefineID2);// 0x3aa15b4
	void ShowEquipScopeShortcut(const ItemDefineID AttachID, int WeaponIndex, const ItemDefineID WeaponData);// 0x3a9ee74
	void ServerPickupByItemID(int ItemID, int PickCount, bool bBackpackInclude, bool bTrack, enum PickupReason);// 0x3aa2698
	void ServerEnableItem(ItemDefineID DefineID, bool bUse);// 0x3aa1990
	bool ServerAlchemyWholeWeaponCustom(int DeriveID, out const WholeWeaponData WholeWeaponData, bool bBackpackInclude, bool bTrack, enum PickupReason);// 0x3aa2840
	bool ServerAlchemyWholeWeapon(int DeriveID, bool bBackpackInclude, bool bTrack, enum PickupReason);// 0x3aa2a40
	void RPC_ServerPickupByItemID(int ItemID, int PickCount, bool bBackpackInclude, bool bTrack, enum PickupReason);// 0x3aa24e8
	void ReplaceTracking(out const ItemDefineID DefineID);// 0x3aa0814
	bool ReplaceItem(ItemDefineID ItemInBack, int ItemID, int ItemCount, enum SpawnReason);// 0x3aa0f90
	void RemovePerkItemRuleAddition(out const int ItemID);// 0x3aa2cec
	bool RemoveItemHandle(ItemDefineID DefineID);// 0x3aa3400
	void ReceiveItemList();// 0x3a9f324
	void ReceiveCapacity();// 0x3a9ee44
	bool QuickReplaceWeaponAttach(ItemDefineID WeaponDefineID, BattleItemHandleBase* ItemHandleBase);// 0x3aa10f8
	void PickUpTracking(out const ItemDefineID DefineID);// 0x3aa0a74
	bool PickupItemRecursive(ItemDefineID DefineID, BattleItemPickupInfo PickUpInfo, enum Reason);// 0x3aa1d24
	bool PickupItem(ContainerData PickUpInfo, bool bBackpackInclude, bool bTrack);// 0x3aa1fe4
	bool PickupByItemID(out ItemDefineID ItemDefineID, int ItemID, int PickCount, bool bBackpackInclude, bool bTrack, enum PickupReason);// 0x3aa22d8
	bool OverrideWeaponAttachment(ItemDefineID WeaponDefineID, int AttachmentID);// 0x3aa14d0
	void OnUseSkillItemFailed(ItemDefineID DefineID, byte FailedReason);// 0x3a9f54c
	void OnUseItem(const int ItemID);// 0x3aa06c8
	void OnSwitchBackpackOpenState(bool bOpen);// 0x3aa2bbc
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x3aa35d0
	void OnRep_ItemRuleNet();// 0x3aa2c48
	void OnRep_ItemListNet();// 0x3a9f338
	void OnRep_Capacity();// 0x3a9ee60
	void OnDropItemSuccess(const int ItemID, enum DropReason);// 0x3aa074c
	void NotifyItemUpdated(ItemDefineID DefineID);// 0x3aa336c
	void NotifyItemRemoved(ItemDefineID DefineID);// 0x3aa32d8
	void NotifyItemListUpdated();// 0x3aa32bc
	void NotifyFull();// 0x3a9f0cc
	void NotifyCapacityUpdated();// 0x3aa32a0
	void ModifyItemHandleEquippingState(ItemHandleBase* ItemHandle, bool bEquipping);// 0x3a9febc
	void ModifyItemHandleCount(ItemHandleBase* ItemHandle, int count);// 0x3a9fdfc
	bool IsAmmoDisable(out const ItemDefineID AmmoItemDefineID);// 0x3a9f028
	bool HasItemByDefindIdRange(int LowValue, int HighValue);// 0x3a9f794
	enum GetReplaceTrackingType(out const ItemDefineID DefineID);// 0x3aa08a4
	enum GetPickUpTrackingType(out const ItemDefineID DefineID);// 0x3aa0b04
	ItemRule GetPerkItemRuleAddition(int ItemID);// 0x3aa2c5c
	Object* GetOwningObject();// 0x3aa3594
	int GetOccupiedCapacity();// 0x3a9f0e0
	BattleItemData[] GetItemListByDefineID(ItemDefineID DefineID, bool bIncludeBackpack);// 0x3a9f624
	<ItemDefineID,ItemHandleBase*> GetItemHandleMap();// 0x3a9f148
	ItemHandleBase*[] GetItemHandleList();// 0x3a9f208
	int GetItemCountByDefineID(ItemDefineID DefineID, bool bOnlyInstance);// 0x3a9faec
	BattleItemData GetItemByDefineID(ItemDefineID DefineID);// 0x3a9fbd8
	double GetEquipGoldShieldTime(uint32 PlayerKey);// 0x3a9ed00
	double GetEquipGoldHelmetTime(uint32 PlayerKey);// 0x3a9ed84
	enum GetDropTrackingType(out const ItemDefineID DefineID);// 0x3aa09d4
	int GetCapacity();// 0x3a9f114
	BattleItemData[] GetAllItemList();// 0x3a9fd3c
	int GetAllItemCountByDefineID(ItemDefineID DefineID);// 0x3a9fa50
	ItemHandleBase* FindItemHandleByDefineID(ItemDefineID DefineID);// 0x3a9ef8c
	ItemHandleBase* FindFirstItemHandleByItemId(int ItemID);// 0x3a9f8e4
	bool FindFirstItemBySubType(int SubType, out BattleItemData OutItemData);// 0x3a9f968
	void FillThrowPropsArray(out PickUpItemData[] Result, out const ThrowProps ThrowProps);// 0x3aa0ba4
	void ExtracteItemDataFromItemNet(out const NetArrayUnit NetItem, out BattleItemData ItemData);// 0x3aa0068
	void EquipItem(ItemDefineID DefineID);// 0x3aa063c
	void DropTracking(out const ItemDefineID DefineID);// 0x3aa0944
	bool DropItem(ItemDefineID DefineID, int count, enum Reason);// 0x3aa1bf4
	PickUpItemData[] DropAllAndReturnPickUpList(enum Reason);// 0x3aa0de0
	void DropAll();// 0x3aa1abc
	int DropActivityItem(out const ItemDefineID DefineID, int count, enum Reason);// 0x3aa1ad0
	bool DisuseItem(ItemDefineID DefineID, enum Reason);// 0x3aa1754
	bool DisuseAttachmentByType(ItemDefineID WeaponDefineID, enum AttachmentSocketType);// 0x3aa11dc
	int ConsumeItem(ItemDefineID DefineID, int count);// 0x3aa04d0
	void ClientUpdateItemData(const BattleItemData InItemData);// 0x3a9f4bc
	void ClientRemoveItemData(const BattleItemData InItemData);// 0x3a9f42c
	void ClientNotifyPickupResultTips(FString TipsStr);// 0x3a9f294
	void ClientNotifyPickupResult(const PickupNotifyData PickupNotifyData, int CapacityLimitedPickupCount);// 0x3a9f34c
	void ClientBroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x3aa3070
	int CheckCapacityForItem(ItemDefineID DefineID, int count);// 0x3aa02c0
	bool CanDisuseToBackpack(ItemDefineID DefineID);// 0x3aa16b4
	void BroadcastSingleItemUpdateDelegate(out const ItemDefineID DefineID);// 0x3aa2f54
	void BroadcastSingleItemDeleteDelegate(out const ItemDefineID DefineID);// 0x3aa2ec4
	void BroadCastItemUseEnd(ItemDefineID DefineID);// 0x3aa2fe4
	void BroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x3aa318c
	void BroadcastItemListUpdatedDelegate();// 0x3aa2eb0
	void BroadcastItemBeforeRemovedDelegate(out const ItemDefineID DefineID);// 0x3aa2e0c
	void BroadcastCapacityUpdatedDelegate();// 0x3aa2e9c
	bool BackpackItemIsExist(int ItemID);// 0x3a9f85c
	int AttachmentSocketType(int ItemID);// 0x3aa12c0
	int AllowPickupNum(ItemDefineID DefineID, int RequestPickupNum);// 0x3aa01e0
	void AlchemyWholeWeapon(ItemHandleBase* ItemHandleBase, bool bInForceInitial);// 0x3aa1344
	BattleItemHandleBase* AlchemyBattleItemHandle(int DeriveID, int ItemID);// 0x3aa140c
	void AddPerkItemRuleAddition(out const ItemRule ItemRule);// 0x3aa2d78
	bool AddItemHandle(ItemDefineID DefineID, ItemHandleBase* ItemHandle);// 0x3aa34a8

--------------------------------
Class: ControllerComponentBase.ActorComponent.Object

--------------------------------
Class: ItemDefineID
	int Type;//[Offset: 0x0, Size: 0x4]
	int TypeSpecificID;//[Offset: 0x4, Size: 0x4]
	int64 InstanceID;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BattleItemUseTarget
	ItemDefineID TargetDefineID;//[Offset: 0x0, Size: 0x10]
	FName TargetAssociationName;//[Offset: 0x10, Size: 0x8]
	enum TargetSlot;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: WholeWeaponData
	int ID;//[Offset: 0x0, Size: 0x4]
	int WeaponID;//[Offset: 0x4, Size: 0x4]
	int Color;//[Offset: 0x8, Size: 0x4]
	int[] AttachList;//[Offset: 0x10, Size: 0x10]
	int[] AttachCanEquip;//[Offset: 0x20, Size: 0x10]
	int[] AttachCanShow;//[Offset: 0x30, Size: 0x10]
	int SpecialBullet;//[Offset: 0x40, Size: 0x4]
	FName BulletIcon;//[Offset: 0x44, Size: 0x8]
	int QualityRule;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	BackpackComponent* BackpackComponent;//[Offset: 0x148, Size: 0x8]
	BattleItemData ItemData;//[Offset: 0x158, Size: 0xe0]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x240, Size: 0x10]
	int DeriveID;//[Offset: 0x250, Size: 0x4]
	bool Fixed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 0x1]
	float UnitWeight;//[Offset: 0x258, Size: 0x4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 0x1]
	void SpawnThrowPropsWrapper();// 0x3c58588
	void PostPickup(ContainerData PickUpInfo);// 0x3c589b8
	bool IsUsable();// 0x3c585a4
	bool HasEquippedFullAttachments();// 0x3c58550
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x3c5870c
	bool HandlePreDrop(int InCount, enum Reason);// 0x3c588e4
	bool HandlePickup(out const interface classNone ItemContainer, ContainerData PickUpInfo);// 0x3c58bf4
	bool HandleEnable(bool bEnable);// 0x3c585e4
	bool HandleDrop(int InCount, enum Reason);// 0x3c58810
	bool HandleDisuse(enum Reason);// 0x3c5867c
	World* GetWorldInternal();// 0x3c58e9c
	BattleItemData ExtractItemData();// 0x3c58ed8

--------------------------------
Class: ItemHandleBase.Object
	int MaxCount;//[Offset: 0x2c, Size: 0x4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	bool bBackpackInclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]
	<FName,ItemAssociation> AssociationMap;//[Offset: 0x38, Size: 0x50]
	ItemDefineID DefineID;//[Offset: 0x88, Size: 0x10]
	void SetCount(int NewCount);// 0x3c56d74
	void SetAssociation(FName Name, ItemAssociation Association);// 0x3c56948
	void RemoveAssociation(FName Name);// 0x3c568cc
	void Init(ItemDefineID InDefineID);// 0x3c56e0c
	ItemDefineID GetDefineID();// 0x3c567c8
	int GetCount();// 0x3c56df0
	<FName,ItemAssociation> GetAssociationMap();// 0x3c56814
	ItemAssociation[] GetAssociationListByTargetType(int Type);// 0x3c56b04
	ItemAssociation GetAssociationByTargetDefineID(ItemDefineID TargetDefineID);// 0x3c56a48
	ItemAssociation GetAssociation(FName Name);// 0x3c56bcc
	void AddAssociation(FName Name, ItemAssociation Association);// 0x3c56c74

--------------------------------
Class: ItemAssociation
	FName AssociationName;//[Offset: 0x0, Size: 0x8]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8, Size: 0x10]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: ContainerData
	ItemDefineID ID;//[Offset: 0x0, Size: 0x10]
	int count;//[Offset: 0x10, Size: 0x4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x18, Size: 0x10]
	int Index;//[Offset: 0x28, Size: 0x4]
	ItemDefineID TargetID;//[Offset: 0x30, Size: 0x10]
	enum Reason;//[Offset: 0x50, Size: 0x1]
	enum SpawnReason;//[Offset: 0x51, Size: 0x1]
	bool bLongPressReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	bool bBlackMarket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1]
	PickUpListWrapperActor* SourceActorWeakPtr;//[Offset: 0x54, Size: 0x8]

--------------------------------
Class: BattleItemAdditionalData
	enum DataType;//[Offset: 0x0, Size: 0x1]
	float FloatData;//[Offset: 0x4, Size: 0x4]
	int IntData;//[Offset: 0x8, Size: 0x4]
	int[] IntArray;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: PickUpListWrapperActor.PickUpWrapperActor.DynamicMovementActor.Actor.Object
	SceneComponent* DefaultRoot;//[Offset: 0x7f0, Size: 0x8]
	bool IsSeekerPickUpListActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 0x1]
	PickUpItemData[] PickUpDataList;//[Offset: 0x838, Size: 0x10]
	void RPCNetMulticastModifyData(int Index, int RetCount);// 0x3d08070
	void RPCNetMulticastAddPickUpData(PickUpItemData PickUpItemData);// 0x3d07e88
	void OnWrapperEmptyDelegate__DelegateSignature();// 0x43841ec
	void OnRep_PickUpDataList();// 0x3d07e74
	void OnPickUpItemDelegate__DelegateSignature(int ItemDataIndex, int LeftCount);// 0x43841ec
	void OnInsertItemDelegate__DelegateSignature(int ItemDataIndex);// 0x43841ec
	PickUpItemData[] GetPickUpDataList();// 0x3d08168

--------------------------------
Class: PickUpWrapperActor.DynamicMovementActor.Actor.Object
	bool bClientHasPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	ParticleSystemComponent* PickupEffectComp;//[Offset: 0x380, Size: 0x8]
	ParticleSystemComponent*[] PickupParitcleComps;//[Offset: 0x390, Size: 0x10]
	int PickUpOutlineID;//[Offset: 0x3a4, Size: 0x4]
	int PickUpOutlineIDPing;//[Offset: 0x3a8, Size: 0x4]
	int[] WholeWeaponOutline;//[Offset: 0x3b0, Size: 0x10]
	int[] WholeWeaponOutlinePing;//[Offset: 0x3c0, Size: 0x10]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x3d0, Size: 0x8]
	bool bIsAimPickUpWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1]
	bool bIsPingPickUpWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 0x1]
	ItemDefineID DefineID;//[Offset: 0x408, Size: 0x10]
	int PickCount;//[Offset: 0x418, Size: 0x4]
	int DeriveID;//[Offset: 0x41c, Size: 0x4]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	float TrainingModePickUpColdCD;//[Offset: 0x424, Size: 0x4]
	bool bUseCustomTrainingModePickUpColdCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	enum SpawnReason;//[Offset: 0x429, Size: 0x1]
	float SpawnTimeSecond;//[Offset: 0x42c, Size: 0x4]
	bool bApplyPickUpEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 0x1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 0x1]
	uint32 DropByPlayerId;//[Offset: 0x434, Size: 0x4]
	int DropTime;//[Offset: 0x438, Size: 0x4]
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x440, Size: 0x10]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1]
	bool bEnableTrainingModeImpactGroundLifeTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 0x1]
	float TrainingModeImpactGroundLifeTime;//[Offset: 0x4ac, Size: 0x4]
	bool bEnableTrainingModeDestroyEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 0x1]
	ParticleSystem* TrainingModeDestroyEffect;//[Offset: 0x4b8, Size: 0x28]
	DynamicMovementComponent_Projetile* Projectile;//[Offset: 0x4e0, Size: 0x8]
	ThrowProps ThrowProps;//[Offset: 0x4e8, Size: 0x40]
	bool bImpactGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	TimerHandle ScatterTimerHandle;//[Offset: 0x530, Size: 0x8]
	bool IsBlockCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]
	float ImpulseValue;//[Offset: 0x53c, Size: 0x4]
	Vector ImpulseOffset;//[Offset: 0x540, Size: 0xc]
	float MassOffset;//[Offset: 0x54c, Size: 0x4]
	Vector BoxRootSize;//[Offset: 0x550, Size: 0xc]
	Vector BoxLoundSize;//[Offset: 0x55c, Size: 0xc]
	float SimulatePhysicsTime;//[Offset: 0x568, Size: 0x4]
	float SimulatePhysicsStartTime;//[Offset: 0x56c, Size: 0x4]
	bool bForceSimulatePhysics_Debug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 0x1]
	bool bEnableSimulatePhysics_Debug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x571, Size: 0x1]
	BoxComponent* BoxRootComponent;//[Offset: 0x578, Size: 0x8]
	FName PickUpProfileName;//[Offset: 0x580, Size: 0x8]
	FName PingCheckProfileName;//[Offset: 0x588, Size: 0x8]
	FName EffectMeshProfileName;//[Offset: 0x590, Size: 0x8]
	StaticMesh* StaticMeshPtr;//[Offset: 0x598, Size: 0x28]
	MaterialInterface*[] MaterialInterfacesPtr;//[Offset: 0x5c0, Size: 0x10]
	Transform StaticMeshTransform;//[Offset: 0x5d0, Size: 0x30]
	StaticMeshComponent* DynamicStaticMeshComponent;//[Offset: 0x600, Size: 0x8]
	bool bUseMultiMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	<int,int> MeshLevelMap;//[Offset: 0x610, Size: 0x50]
	int[] CountMesh;//[Offset: 0x660, Size: 0x10]
	DataTable* PickupMeshTable;//[Offset: 0x670, Size: 0x28]
	DataTable* MeshTablePtr;//[Offset: 0x698, Size: 0x8]
	PickUpShowParticleConfig[] ShowParticleConfigs;//[Offset: 0x6a0, Size: 0x10]
	float PingCheckSphereRadius;//[Offset: 0x6b0, Size: 0x4]
	SphereComponent* PingCheck;//[Offset: 0x6b8, Size: 0x8]
	float LoadDelayTime;//[Offset: 0x6c0, Size: 0x4]
	StaticMeshComponent* EffectComponent;//[Offset: 0x730, Size: 0x8]
	StaticMesh* MeshEffect;//[Offset: 0x738, Size: 0x8]
	bool bInfinitePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 0x1]
	byte FloatingRotAxis;//[Offset: 0x759, Size: 0x1]
	PrimitiveComponent* FloatingTargetComp;//[Offset: 0x790, Size: 0x8]
	PickupLockData PickupLockData;//[Offset: 0x7d8, Size: 0xc]
	bool bTeamPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e4, Size: 0x1]
	enum RegionType;//[Offset: 0x7e5, Size: 0x1]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e6, Size: 0x1]
	bool IsCanPickupByBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e7, Size: 0x1]
	bool bInLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 0x1]
	float RemainingBatterySync;//[Offset: 0x7ec, Size: 0x4]
	void UseMeshTable();// 0x3d1689c
	void StopScatterTimer();// 0x3d16978
	void StartScatterTimer();// 0x3d1698c
	void ShowPickUpWrapperActor();// 0x3d1777c
	void SetPingPickUpWrapper(bool bIsPing);// 0x3d17228
	void SetPickUpWrapperLifeSpan(float LifeTime);// 0x3d17060
	void SetPickupDeriveID(int DID, bool IsInitData);// 0x3d17578
	void SetIsTeamPickItem(bool InValue);// 0x3d16220
	void SetInLand(bool InValue);// 0x3d160e0
	void SetHighLightEffect(bool Enable);// 0x3d17368
	void SetbInfinitePickup(bool IsInfinite);// 0x3d16534
	void SetApplyPickupTrace(bool InValue);// 0x3d1619c
	void SetAimPickUpWrapper(bool bIsAim);// 0x3d172e4
	void ServerLockPickupOwner(uint32 InOwnerKey, float LockTime, enum InReason);// 0x3d163a8
	void ScatterAttachment(out PickUpItemData[] PropsItemArray, out const Vector Center, out const Vector Direction);// 0x3d169a0
	void RPCNetMulticastShowPickUpActor();// 0x3d17790
	void RPCNetMulticastModifyPickCount(int Count_New);// 0x3d178a4
	void RPCNetMulticastHideActorForSomeTime(float Time);// 0x3d177ec
	void ResetPickUpActorState();// 0x3d176ec
	void ResetClientHasPickup();// 0x3d1741c
	void RegisterToPlayerPickUpList();// 0x3d17408
	void RegisterInGameRegion();// 0x3d164c0
	void ParseOutDeriveIDByData();// 0x3d174e8
	void OnWrapperPicked__DelegateSignature(PickUpItemData PickUpItemData, int LeftCount);// 0x43841ec
	void OnRep_TrainingModeDestroyEffect();// 0x3d170dc
	void OnRep_RemainingBatterySync();// 0x3d17430
	void OnRep_RegionType();// 0x3d164d4
	void OnRep_PickupLockData();// 0x3d164ac
	void OnRep_DropTime();// 0x3d17444
	void OnRep_DropByPlayerId();// 0x3d17458
	void OnRep_CanPickupByBinSync();// 0x3d164e8
	void OnProjectileStop_Weapon();// 0x3d168b0
	void OnProjectileStop(out const HitResult Hit, bool bServer, Actor* HitOwner);// 0x3d16dd8
	void OnProjectileLand(out const HitResult Hit);// 0x3d16d28
	void OnProjectileBounce(out const HitResult Hit, out const Vector Velocity, bool bServer, int BounceNum, Actor* HitOwner);// 0x3d16b48
	void OnPlayerBackpackPicked__DelegateSignature(ApexCharacter* PickPlayer, int PickCount);// 0x43841ec
	void OnLoadMeshEffectFinished(FName AttachPoint, SoftObjectPath EffectPath);// 0x3d165cc
	void NonImpactScatter();// 0x3d16964
	void MulticastTrainingModeDestroyEffect();// 0x3d17044
	void ModifyCount(int count);// 0x3d1795c
	void MeshTableReady();// 0x3d16888
	void MarkIsDropedByPlayerOnServer(uint32 PlayerID);// 0x3d1746c
	void LoadWholeWeaponData(int DID);// 0x3d174fc
	void LoadPickupLineEffectFinished();// 0x3d173f4
	void LoadMeshEffect(FName RowName);// 0x3d166f8
	void LaunchProjectile(out const Vector Direction, out const Vector BaseVelocity, float AdditionalSpeed);// 0x3d16f20
	bool IsPingPickUpWrapper();// 0x3d171f0
	bool IsLocked(uint32 PlayerKey);// 0x3d162bc
	bool IsAimPickUpWrapper();// 0x3d172ac
	void InitPickUpOutLine(PrimitiveComponent* Comp);// 0x3d170f0
	void InitPickupMesh();// 0x3d16774
	void HidePickUpWrapperActor(float Time);// 0x3d17700
	void HandleMultiMeshes(int Level);// 0x3d16788
	int GetPickupOutlineID(enum POT);// 0x3d1716c
	enum GetPickupLockedReason();// 0x3d16344
	PickUpItemData GetPickupData();// 0x3d1763c
	float GetLockTime();// 0x3d16360
	bool GetIsTeamPickItem();// 0x3d162a0
	bool GetInLand();// 0x3d16164
	bool GetbInfinitePickup();// 0x3d164fc
	void CreateEffectComponent();// 0x3d165b8
	void ClearPickupLocker();// 0x3d16394
	int8 CheckImpactGround(out const Vector ImpactPoint);// 0x3d168cc
	int CalcMeshLevel(int count);// 0x3d16804

--------------------------------
Class: DynamicMovementActor.Actor.Object
	SceneComponent* SmoothContainer;//[Offset: 0x250, Size: 0x8]
	ApexCharacter* OwnerApexCharacter;//[Offset: 0x258, Size: 0x8]
	DynamicMovementComponent* CurrentMovementComponent;//[Offset: 0x260, Size: 0x8]

--------------------------------
Class: PickUpItemData
	ItemDefineID ID;//[Offset: 0x0, Size: 0x10]
	int count;//[Offset: 0x10, Size: 0x4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x18, Size: 0x10]
	int Index;//[Offset: 0x28, Size: 0x4]
	int InsertTime;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: OutlineAndFillComponent.SignificanceManagedActorComponent.ActorComponent.Object
	bool bMaskable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	<PrimitiveComponent*> MarkerComps;//[Offset: 0x118, Size: 0x50]
	void SubtractEffectTallyWithType(enum SourceType, enum OutlineType, bool bIsOccluder);// 0x3cd806c
	void SubtractEffectTally(enum SourceType, int ConfigIdx, bool bIsOccluder);// 0x3cd7f64
	void SetMarkerCompEnemyMask(bool bInEnemyMask);// 0x3cd7e5c
	void RemoveMarkerComps(out const PrimitiveComponent*[] Comps, bool bIsOccluder);// 0x3cd87b4
	void RemoveMarkerComp(PrimitiveComponent* Comp, bool bIsOccluder);// 0x3cd889c
	void RemoveEffectWithType(enum SourceType, enum OutlineType, bool bIsOccluder);// 0x3cd8494
	void RemoveEffect(enum SourceType, int ConfigIdx, bool bIsOccluder);// 0x3cd838c
	void RemoveAllEffects(bool bIsOccluder);// 0x3cd7ee0
	void PlusEffectTallyWithType(enum SourceType, enum OutlineType, bool bIsOccluder);// 0x3cd8280
	void PlusEffectTally(enum SourceType, int ConfigIdx, bool bIsOccluder);// 0x3cd8178
	bool IsOutlineSeenThroughSmoke();// 0x3cd7c90
	bool HasEffect(enum SourceType, int ConfigIdx);// 0x3cd7cc8
	int GetCountTally(enum SourceType, int ConfigIdx);// 0x3cd7d94
	bool AddMarkerCompsNotRefresh(out const PrimitiveComponent*[] Comps);// 0x3cd8b14
	void AddMarkerComps(out const PrimitiveComponent*[] Comps, bool bIsOccluder);// 0x3cd8964
	bool AddMarkerCompNotRefresh(PrimitiveComponent* Comp);// 0x3cd8bc0
	void AddMarkerComp(PrimitiveComponent* Comp, bool bIsOccluder);// 0x3cd8a4c
	void AddEffectWithType(enum SourceType, enum OutlineType, bool bIsOccluder);// 0x3cd86a8
	void AddEffect(enum SourceType, int ConfigIdx, bool bIsOccluder);// 0x3cd85a0

--------------------------------
Class: SignificanceManagedActorComponent.ActorComponent.Object
	FName SignificanceTag;//[Offset: 0xf8, Size: 0x8]
	enum SignificanceByType;//[Offset: 0x100, Size: 0x1]
	enum PostSignificanceType;//[Offset: 0x101, Size: 0x1]
	void OnSignificanceChanged(float OldSignificance, float Significance);// 0x3d92c3c

--------------------------------
Class: DynamicMovementComponent_Projetile.DynamicMovementComponent.MovementComponent.ActorComponent.Object
	delegate OnDynamicBounce;//[Offset: 0x2c8, Size: 0x10]
	delegate OnDynamicStop;//[Offset: 0x2d8, Size: 0x10]
	delegate OnDynamicOnLand;//[Offset: 0x2e8, Size: 0x10]
	float InitialSpeed;//[Offset: 0x320, Size: 0x4]
	float MaxSpeed;//[Offset: 0x324, Size: 0x4]
	float ProjectileGravityScale;//[Offset: 0x328, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32c, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x32c, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x32c, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x32c, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x32c, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x32c, Size: 0x1]
	float PreviousHitTime;//[Offset: 0x330, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0x334, Size: 0xc]
	float Bounciness;//[Offset: 0x340, Size: 0x4]
	float Friction;//[Offset: 0x344, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x348, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x34c, Size: 0x4]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x350, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 0x1]
	float MaxSimulationTimeStep;//[Offset: 0x354, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x358, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x35c, Size: 0x4]
	ProjectilePendingData ProjectilePendingData;//[Offset: 0x360, Size: 0x38]
	bool bSyncServerBounceEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	bool bSyncServerStopEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 0x1]
	bool bSyncSimulationEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a, Size: 0x1]
	float ImpactSlideMinVelocity;//[Offset: 0x39c, Size: 0x4]
	bool bImpactStopCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	float ImpactCheckDist;//[Offset: 0x3a4, Size: 0x4]
	DynamicMovementComponent_Projetile* NetMovementComponent;//[Offset: 0x3c0, Size: 0x8]
	void StopSimulating(out const HitResult HitResult);// 0x3b76c04
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x3b76cb4
	void ServerStopSyncMovement(const Vector OwnerOffset, const Rotator Rotator);// 0x3b76f40
	void ServerSetStopResult(const ImpactResult ImpactResult);// 0x3b76ffc
	void ServerSetImpactResult(const ImpactResult ImpactResult);// 0x3b770b0
	void ServerProjectileSyncPosition(const ProjectilePositionData PositionData);// 0x3b771e4
	void OnRep_SimulationEnabled(bool OldSimulationEnabled);// 0x3b76b78
	void OnDynamicStopDelegate__DelegateSignature(out const HitResult ImpactResult, bool bServer, Actor* Owner);// 0x43841ec
	void OnDynamicOnLandDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x43841ec
	void OnDynamicBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity, bool bServer, int BounceNum, Actor* Owner);// 0x43841ec
	void NetBroadcastStopEvent(HitResult Hit);// 0x3b76d80
	void NetBroadcastBounceEvent(HitResult Hit);// 0x3b76e60
	bool IsVelocityUnderSimulationThreshold();// 0x3b76d38
	void BroadcastProjectileSyncPosition(const ProjectilePositionData PositionData);// 0x3b77164
	void BroadcastLaunch(const ProjectileLaunchData ProjectileLaunchData);// 0x3b77264

--------------------------------
Class: DynamicMovementComponent.MovementComponent.ActorComponent.Object
	SceneComponent* SimulationSmoothContainer;//[Offset: 0x130, Size: 0x8]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1]
	bool bExistAutonomous;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x138, Size: 0x1]
	bool bNeedSimulationPerformMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x138, Size: 0x1]
	bool bNeedAutonomousPerformMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x138, Size: 0x1]
	bool bSkipReceiveLocationAndRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x138, Size: 0x1]
	bool bAutonomousSkipReceiveLocationAndRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x138, Size: 0x1]
	bool bDeactivateWhenStop;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x138, Size: 0x1]
	bool bActiveUseOwnerBase;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x138, Size: 0x1]
	float ValidClientToOwnerDistanceDiff;//[Offset: 0x13c, Size: 0x4]
	float ValidClientDistanceDiff;//[Offset: 0x140, Size: 0x4]
	float DRBlendingSpeed;//[Offset: 0x144, Size: 0x4]
	float MaxSmoothNetUpdateDist;//[Offset: 0x148, Size: 0x4]
	float NoSmoothNetUpdateDist;//[Offset: 0x14c, Size: 0x4]
	bool bEnableDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	float DRLerpTime;//[Offset: 0x154, Size: 0x4]
	float DRVelocityCompatibility;//[Offset: 0x158, Size: 0x4]
	float DRStopSimulateTime;//[Offset: 0x15c, Size: 0x4]
	DynamicBasedMovementInfo BasedMovement;//[Offset: 0x170, Size: 0x30]
	DynamicBasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x1a0, Size: 0x30]
	float SimulateServerTimeStamp;//[Offset: 0x1d0, Size: 0x4]
	bool bApplyGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 0x1]
	PrimitiveComponent* DRBase;//[Offset: 0x270, Size: 0x8]
	void SaveBaseLocation();// 0x3b75218
	void OnRep_ReplicatedBasedMovement();// 0x3b7522c
	void OnCallUpdateBaseMovement();// 0x3b75204
	Vector LimitVelocity(Vector NewVelocity);// 0x3b75174
	PrimitiveComponent* GetBase();// 0x3b75240

--------------------------------
Class: ImpactResult
	Vector Velocity;//[Offset: 0x0, Size: 0xc]
	Vector OwnerOffset;//[Offset: 0xc, Size: 0xc]
	Rotator Rotator;//[Offset: 0x18, Size: 0xc]
	HitResult Hit;//[Offset: 0x24, Size: 0x88]
	PrimitiveComponent* MovementBase;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: ProjectilePositionData
	Rotator Rotator;//[Offset: 0x0, Size: 0xc]
	Vector OwnerOffset;//[Offset: 0xc, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x18, Size: 0x8]
	Vector BaseOffset;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: ProjectilePendingData
	bool bDiscardBounceWhenStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bOneStopSimulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	float PendingBounceDeltaTime;//[Offset: 0x2c, Size: 0x4]
	float PendingStopDeltaTime;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: DynamicBasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: ProjectileLaunchData
	float InitialSpeed;//[Offset: 0x0, Size: 0x4]
	Vector Velocity;//[Offset: 0x4, Size: 0xc]
	ProjectilePositionData PositionData;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: ThrowProps
	PickUpItemData MainItem;//[Offset: 0x0, Size: 0x30]
	PickUpItemData[] AttachItem;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x578, Size: 0xc]
	float LineThickness;//[Offset: 0x584, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x5ee71f4
	Vector GetUnscaledBoxExtent();// 0x5ee7198
	Vector GetScaledBoxExtent();// 0x5ee71bc

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: PickUpShowParticleConfig
	ParticleSystem* ParticleSystemPrt;//[Offset: 0x0, Size: 0x28]
	StaticMesh* EffectMeshPrt;//[Offset: 0x28, Size: 0x28]
	Transform Transform;//[Offset: 0x50, Size: 0x30]

--------------------------------
Class: ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	UnmannedBody* UnmanedBase;//[Offset: 0xbd8, Size: 0x8]
	CharacterConfigDataAsset* ConfigData;//[Offset: 0xbe8, Size: 0x8]
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0xc10, Size: 0x10]
	GameInitControllerComponent* GameInitController;//[Offset: 0xc20, Size: 0x8]
	SoftObjectPath InitDataAsset;//[Offset: 0xc28, Size: 0x18]
	CharacterComponentCreateData[] ComponentCreateDatas;//[Offset: 0xc48, Size: 0x10]
	delegate OnDamageByMissileFragGrenaedeDelegate;//[Offset: 0xc58, Size: 0x10]
	delegate EnterRescueDelegate;//[Offset: 0xc68, Size: 0x10]
	delegate LeaveRescueDelegate;//[Offset: 0xc78, Size: 0x10]
	FName EmojiAnimationID;//[Offset: 0xca0, Size: 0x8]
	bool bForbidEmojiAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca8, Size: 0x1]
	float RealtimeForbidEmojiAnimationTime;//[Offset: 0xcac, Size: 0x4]
	AnimMontage* CurrentAutonomousActiveMontage;//[Offset: 0xcd0, Size: 0x8]
	int CareerNumberTips;//[Offset: 0xcd8, Size: 0x4]
	bool bReSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcdc, Size: 0x1]
	int ReSpawnNumber;//[Offset: 0xce0, Size: 0x4]
	int SkillBpKey;//[Offset: 0xce4, Size: 0x4]
	GameModeReSpawn* ServerReSpawnCompoent;//[Offset: 0xce8, Size: 0x8]
	int PawnBackpackCapacity;//[Offset: 0xcf0, Size: 0x4]
	float HeadDamageReduce;//[Offset: 0xcf4, Size: 0x4]
	float ShieldValue;//[Offset: 0xcf8, Size: 0x4]
	float ShieldValueMax;//[Offset: 0xcfc, Size: 0x4]
	int ShieldLevel;//[Offset: 0xd00, Size: 0x4]
	int HelmetLevel;//[Offset: 0xd04, Size: 0x4]
	int KnockDownShieldLevel;//[Offset: 0xd08, Size: 0x4]
	int BackpackLevel;//[Offset: 0xd0c, Size: 0x4]
	float TreatmentMul;//[Offset: 0xd10, Size: 0x4]
	float DefaultCapsuleRadius;//[Offset: 0xd14, Size: 0x4]
	float DyingCapsuleRadius;//[Offset: 0xd18, Size: 0x4]
	float ProjectAntiCheatSpeedRatio;//[Offset: 0xd1c, Size: 0x4]
	<enum,StateLerpArrayInfos> StateInLerpInfo;//[Offset: 0xd20, Size: 0x50]
	<enum,StateLerpArrayInfos> StateOutLerpInfo;//[Offset: 0xd70, Size: 0x50]
	SceneComponent* TPPComponentContainer;//[Offset: 0xdf0, Size: 0x8]
	bool bFaceRotationLerp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe18, Size: 0x1]
	float FaceRotationLerpSpeed;//[Offset: 0xe1c, Size: 0x4]
	float DeathFadeOutTotalDeltaTime;//[Offset: 0xe2c, Size: 0x4]
	bool bOnDeathFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe30, Size: 0x1]
	MaterialInstanceDynamic* DeathMatInstDynamicWeak;//[Offset: 0xe34, Size: 0x8]
	float OffScreenDist;//[Offset: 0xe3c, Size: 0x4]
	float TickOptimizeDist;//[Offset: 0xe40, Size: 0x4]
	bool bOffScreenOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe44, Size: 0x1]
	bool bSniperAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe45, Size: 0x1]
	RepBloodHoundHunting BloodHoundHunting;//[Offset: 0xe48, Size: 0x10]
	float BloodHoundHuntingFOVFadeTime;//[Offset: 0xe58, Size: 0x4]
	float BloodHoundHuntingProlongTime;//[Offset: 0xe5c, Size: 0x4]
	bool BloodHoundDetectDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe60, Size: 0x1]
	int HuntLegendID;//[Offset: 0xeb8, Size: 0x4]
	ApexCharacterAnimationComponent* AnimationComponent;//[Offset: 0xec8, Size: 0x8]
	CameraComponent* MainCamera;//[Offset: 0xed0, Size: 0x8]
	UAECharacterAnimListComponent* AnimationListComponent;//[Offset: 0xed8, Size: 0x8]
	UAECharacterAnimListComponent* WeaponAnimationListComponent;//[Offset: 0xee0, Size: 0x8]
	byte RemoteViewYaw;//[Offset: 0x1100, Size: 0x1]
	SkeletalMeshComponent* FPPMeshComp;//[Offset: 0x1108, Size: 0x8]
	bool CharacterCameraModeIsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1168, Size: 0x1]
	enum CharacterMeshMode;//[Offset: 0x1169, Size: 0x1]
	bool ServerCharacterCameraModeIsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x116a, Size: 0x1]
	PickupTipActor* PickupTipActor;//[Offset: 0x1170, Size: 0x8]
	PickupTipInfo PickupTipInfo;//[Offset: 0x1178, Size: 0xc]
	EnmityEntity* EnmityEntity;//[Offset: 0x1188, Size: 0x8]
	RecoverPropComponent* RecoverPropComponent;//[Offset: 0x1190, Size: 0x8]
	ActionFilterComponent* ActionFilterComponent;//[Offset: 0x1198, Size: 0x8]
	int InsideHeatShield;//[Offset: 0x11bc, Size: 0x4]
	Actor* CurrentInsideHeatShieldWeak;//[Offset: 0x11c0, Size: 0x8]
	float CheckInsideHeatShieldTime;//[Offset: 0x11c8, Size: 0x4]
	delegate BattleStateChangedEvent;//[Offset: 0x11d0, Size: 0x10]
	Vector FindAITargetLoc;//[Offset: 0x1208, Size: 0xc]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1214, Size: 0x1]
	bool bIsMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1215, Size: 0x1]
	bool bIsDecoy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1216, Size: 0x1]
	FName HeadBoneName;//[Offset: 0x121c, Size: 0x8]
	float NameHightOffset;//[Offset: 0x1224, Size: 0x4]
	delegate OnCharacterByDamageCauser;//[Offset: 0x1230, Size: 0x10]
	delegate OnCharacterEnterLootZone;//[Offset: 0x1240, Size: 0x10]
	delegate OnCharacterLeaveLootZone;//[Offset: 0x1250, Size: 0x10]
	delegate OnOpenBinTest;//[Offset: 0x1260, Size: 0x10]
	delegate OnOpenCarePackage;//[Offset: 0x1270, Size: 0x10]
	delegate OnJumpTrain;//[Offset: 0x1280, Size: 0x10]
	delegate OnSkillEvent;//[Offset: 0x1290, Size: 0x10]
	delegate OnCharacterDying;//[Offset: 0x12d0, Size: 0x10]
	delegate OnCharacterRescue;//[Offset: 0x12e0, Size: 0x10]
	delegate OnCharacterBeRescue;//[Offset: 0x12f0, Size: 0x10]
	delegate OnCharacterRescueFinished;//[Offset: 0x1300, Size: 0x10]
	delegate OnBeaconRescueStart;//[Offset: 0x1310, Size: 0x10]
	delegate OnBeaconRescueEnd;//[Offset: 0x1320, Size: 0x10]
	byte CurrentAnimRescueType;//[Offset: 0x1330, Size: 0x1]
	delegate OnHealthShieldChangedWithoutMidRecommandDelegate;//[Offset: 0x1338, Size: 0x10]
	FSM* FSMConfig;//[Offset: 0x1370, Size: 0x8]
	float AtkOwnMemoryTime;//[Offset: 0x1378, Size: 0x4]
	UAECharacterAnimListComponent* _characterAnimationListComponent;//[Offset: 0x13d0, Size: 0x8]
	PawnStateManager* StateManagerComponent;//[Offset: 0x13d8, Size: 0x8]
	CharacterInputComponent* CharacterInputComponent;//[Offset: 0x13e0, Size: 0x8]
	FName CurrentSkinId;//[Offset: 0x13e8, Size: 0x8]
	enum FireMode;//[Offset: 0x13f0, Size: 0x1]
	AuraComponent* AuraComponent;//[Offset: 0x13f8, Size: 0x8]
	FString MyName;//[Offset: 0x1400, Size: 0x10]
	FString OtherName;//[Offset: 0x1410, Size: 0x10]
	LevelSequence* FatalitySequence;//[Offset: 0x1420, Size: 0x8]
	MovieSceneSequencePlaybackSettings FatalitySettings;//[Offset: 0x1428, Size: 0x24]
	LevelSequence* DeathSequence;//[Offset: 0x1450, Size: 0x8]
	MovieSceneSequencePlaybackSettings DeathSettings;//[Offset: 0x1458, Size: 0x24]
	UAESkillManagerComponent* SkillManagerComponent;//[Offset: 0x1480, Size: 0x8]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0x14b0, Size: 0x10]
	delegate OnDeathEvent;//[Offset: 0x14c0, Size: 0x10]
	delegate OnCharacterDeathEvent;//[Offset: 0x14d0, Size: 0x10]
	int DroneConnectNum;//[Offset: 0x14e0, Size: 0x4]
	CarePackage* NearPackagePtr;//[Offset: 0x14e8, Size: 0x8]
	bool bIsDefenseSlowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f0, Size: 0x1]
	float BangaloreBombTime;//[Offset: 0x14f4, Size: 0x4]
	bool bCryptoDroneActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f8, Size: 0x1]
	int SmokeEffectCount;//[Offset: 0x14fc, Size: 0x4]
	int SurveyTokenCount;//[Offset: 0x1500, Size: 0x4]
	AudioEventAsync* CurPlayingEventForWraithTrigger;//[Offset: 0x1508, Size: 0x8]
	GamblingMachine* ClientSelectGamblingMachine;//[Offset: 0x1510, Size: 0x8]
	FString ClientSelectGamblingMachineBoxName;//[Offset: 0x1518, Size: 0x10]
	int[] ClientSelectGamblingMachineSelectItem;//[Offset: 0x1528, Size: 0x10]
	int[] ClientSelectGamblingMachineSelectItemCount;//[Offset: 0x1538, Size: 0x10]
	GamblingMachine* GamblingMachineOwner;//[Offset: 0x1548, Size: 0x8]
	RepRevenantSilence RepRevenantSilence;//[Offset: 0x1554, Size: 0x8]
	RepDeathTotemProtection DeathTotemProtection;//[Offset: 0x1568, Size: 0x14]
	RepDeathTotemRangeTest DeathTotemRangeTest;//[Offset: 0x157c, Size: 0x8]
	DeathTotem* CachedDeathTotem;//[Offset: 0x1584, Size: 0x8]
	bool TotemRecallOngoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x158c, Size: 0x1]
	Vector ZiplineHandGrabLoc;//[Offset: 0x15b0, Size: 0xc]
	PickupManagerComponent* PickupManagerComponent;//[Offset: 0x15c0, Size: 0x8]
	float ConfigBaseEyeHeight;//[Offset: 0x1620, Size: 0x4]
	float DyingEyeHeight;//[Offset: 0x1624, Size: 0x4]
	bool PadJumpPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1629, Size: 0x1]
	bool PadDoubleJumpPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x162a, Size: 0x1]
	CharacterParachuteComponent* CharacterParachuteComponent;//[Offset: 0x1630, Size: 0x8]
	CharacterMagmaRiseComponent* CharacterMagmaRiseComponent;//[Offset: 0x1638, Size: 0x8]
	APAttributeSet* AttributeSet;//[Offset: 0x1640, Size: 0x8]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0x1648, Size: 0x8]
	CharacterDeathInfo CharacterDeathInfo;//[Offset: 0x1650, Size: 0x8]
	bool IsDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1658, Size: 0x1]
	float Health;//[Offset: 0x165c, Size: 0x4]
	float HealthMax;//[Offset: 0x1660, Size: 0x4]
	bool bBeakBackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1664, Size: 0x1]
	FName PlayerType;//[Offset: 0x1668, Size: 0x8]
	int LegendId;//[Offset: 0x1670, Size: 0x4]
	FString PlayerName;//[Offset: 0x1678, Size: 0x10]
	int PlayerKey;//[Offset: 0x1688, Size: 0x4]
	enum LegendType;//[Offset: 0x168c, Size: 0x1]
	int LegendGeniusMask;//[Offset: 0x1690, Size: 0x4]
	float SimulatedHealth;//[Offset: 0x1694, Size: 0x4]
	float SimulatedShield;//[Offset: 0x1698, Size: 0x4]
	float HealthHealing;//[Offset: 0x16b0, Size: 0x4]
	float ShieldHealing;//[Offset: 0x16b4, Size: 0x4]
	byte HealthStatus;//[Offset: 0x1758, Size: 0x1]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1759, Size: 0x1]
	float InvincibleStartTime;//[Offset: 0x175c, Size: 0x4]
	float InvincibleEndTime;//[Offset: 0x1760, Size: 0x4]
	bool bIgnoreBeTracked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1764, Size: 0x1]
	float ShieldValueBeforeCustomRadialDamage;//[Offset: 0x1768, Size: 0x4]
	bool IsNeedSpawnTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176c, Size: 0x1]
	DispatchingActionCollection ActionCollection;//[Offset: 0x1778, Size: 0x10]
	ApexSentence* SpeakingSentence;//[Offset: 0x17a0, Size: 0x8]
	Apex_NPC_Component* NPC_Component;//[Offset: 0x17b8, Size: 0x8]
	bool bIsKeepAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17c0, Size: 0x1]
	bool bReloadNotReduceAmmo;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17c0, Size: 0x1]
	ApexCharacter* LookAtTarget;//[Offset: 0x17c8, Size: 0x8]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17d0, Size: 0x1]
	Vector HintCenterOffset;//[Offset: 0x17d4, Size: 0xc]
	Vector MeshContainerOffset;//[Offset: 0x17e0, Size: 0xc]
	enum MoveIgnoreFlags;//[Offset: 0x17ec, Size: 0x1]
	ApgameWeaponCoreComponent* MainWeaponCoreComp1;//[Offset: 0x1800, Size: 0x8]
	ApgameWeaponCoreComponent* MainWeaponCoreComp2;//[Offset: 0x1808, Size: 0x8]
	ApgameWeaponCoreComponent* MainWeaponCoreComp3;//[Offset: 0x1810, Size: 0x8]
	bool bBackpackOpening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1818, Size: 0x1]
	uint64 PropsWeaponFakeIndex;//[Offset: 0x1820, Size: 0x8]
	int PropsWeaponIndex;//[Offset: 0x1828, Size: 0x4]
	Actor* CurrentPropsWeapon;//[Offset: 0x1830, Size: 0x8]
	bool bAimThrowableProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1838, Size: 0x1]
	bool bHoldThrowableProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1839, Size: 0x1]
	bool bHoldHeatShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x183a, Size: 0x1]
	BasePropsWeaponAttrModifier* PropsWeaponAttrModifier;//[Offset: 0x1840, Size: 0x8]
	delegate OnCharacterEquipAttachment;//[Offset: 0x1848, Size: 0x10]
	TimerHandle LaterPropsWeaponTh;//[Offset: 0x1858, Size: 0x8]
	bool bInCancelPropsWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1860, Size: 0x1]
	<uint64,Actor*> FakeMissilePropsWeaponMap;//[Offset: 0x1868, Size: 0x50]
	enum CurrentPropsWeaponType;//[Offset: 0x18d0, Size: 0x1]
	float LastSpawnMissileWeaponTime;//[Offset: 0x18d4, Size: 0x4]
	float MinMissileSpawnInterval;//[Offset: 0x18d8, Size: 0x4]
	byte PropsThrowMode;//[Offset: 0x18dc, Size: 0x1]
	bool bDeathInForbiddenZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18dd, Size: 0x1]
	int InForbiddenZoneNum;//[Offset: 0x18e0, Size: 0x4]
	int8 ForbiddenZoneLeftTime;//[Offset: 0x18e4, Size: 0x1]
	bool bGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18f0, Size: 0x1]
	float ShoulderAimingMeshRotStrength;//[Offset: 0x18f4, Size: 0x4]
	float CacheHealthMax;//[Offset: 0x18f8, Size: 0x4]
	KnockdownShieldReplicate CurrentKnockdownShield;//[Offset: 0x1900, Size: 0x10]
	byte BreakKnockdownShield;//[Offset: 0x1910, Size: 0x1]
	AkAudioEvent* BreakKnockdownShieldAudio;//[Offset: 0x1914, Size: 0x8]
	uint64 AICallKnockdownShieldTime;//[Offset: 0x1920, Size: 0x8]
	ApexKnockdownShield* ApexKnockdownShield;//[Offset: 0x1928, Size: 0x8]
	byte AircraftRespawnVisibility;//[Offset: 0x19d0, Size: 0x1]
	bool IsAllowInterruptedSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d1, Size: 0x1]
	bool bCauseKnockdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19f0, Size: 0x1]
	bool bCauseSelfKnockdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19f1, Size: 0x1]
	float CauseKnockdownTime;//[Offset: 0x19f4, Size: 0x4]
	float KnockdownTimePoint;//[Offset: 0x19f8, Size: 0x4]
	bool KnockdownWithKnockdownShieldLevel4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19fc, Size: 0x1]
	uint32 KillAudioCallCycles;//[Offset: 0x1a00, Size: 0x4]
	float BattleStateDuration;//[Offset: 0x1a04, Size: 0x4]
	float ExitEnterBattleStateTime;//[Offset: 0x1a08, Size: 0x4]
	bool bTickPoseOnDSCachedFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0c, Size: 0x1]
	bool bTickPoseOnDSCachedTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0d, Size: 0x1]
	int UpGradeableArmorCurrentExp;//[Offset: 0x1ae0, Size: 0x4]
	int UpGradeableArmorMaxExp;//[Offset: 0x1ae4, Size: 0x4]
	int UpGradeableArmorCurrentLevel;//[Offset: 0x1ae8, Size: 0x4]
	int UpGradeableArmorUpLevel;//[Offset: 0x1aec, Size: 0x4]
	int DisplayNormalArmorLevel;//[Offset: 0x1af0, Size: 0x4]
	bool bOnUpGradeableArmorIncreaseExp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1af4, Size: 0x1]
	bool bAlwaysUpGradeableArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1af5, Size: 0x1]
	bool bOnPickUpGradeableArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1af6, Size: 0x1]
	MainHandComponent* MainHandComponent;//[Offset: 0x1b00, Size: 0x8]
	CharacterBuffManager* CharacterBuffMgr;//[Offset: 0x1b08, Size: 0x8]
	EffectViewManager* EffectViewMgr;//[Offset: 0x1b10, Size: 0x8]
	ApexMirageManagerComponent* ApexMirageManagerComponent;//[Offset: 0x1b18, Size: 0x8]
	bool bFireLightFXOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b20, Size: 0x1]
	VehicleComponent* VehicleComponent;//[Offset: 0x1b28, Size: 0x8]
	CharacterFinisherComponent* CharacterFinisherComponent;//[Offset: 0x1b30, Size: 0x8]
	GameActionComponent* GameActionComponent;//[Offset: 0x1b38, Size: 0x8]
	SkeletalMeshComponent* LobbySkeletalMeshComponent;//[Offset: 0x1b40, Size: 0x8]
	ApexCharacter* CacheFinisherTarget;//[Offset: 0x1b48, Size: 0x8]
	float ShowFinisherMapFlagDistance;//[Offset: 0x1b50, Size: 0x4]
	ApexCharacterMapFlags* FinisherMapFlag;//[Offset: 0x1b58, Size: 0x8]
	bool bFinisherTimerIsTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b60, Size: 0x1]
	TimerHandle FinisherTimeOutTimerHandle;//[Offset: 0x1b68, Size: 0x8]
	bool bIsLongThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd0, Size: 0x1]
	CharacterAddBuffSelfComponent* CharacterAddBuffSelfComponent;//[Offset: 0x1bd8, Size: 0x8]
	APPerkManagerComponent* PerkManagerComponent;//[Offset: 0x1be0, Size: 0x8]
	bool IsSubCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1be8, Size: 0x1]
	WeaponManagerComponent* WeaponManagerComp;//[Offset: 0x1bf0, Size: 0x8]
	Rotator SimulateScopeControlRotation;//[Offset: 0x1c08, Size: 0xc]
	ApgameInspectWeaponLogic* InspectWeaponLogic;//[Offset: 0x1c38, Size: 0x8]
	AkAudioEvent* FPPAudioEvent;//[Offset: 0x1c40, Size: 0x28]
	AkAudioEvent* TPPAudioEvent;//[Offset: 0x1c68, Size: 0x28]
	bool CanOpenBlueBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb0, Size: 0x1]
	ParticleSystemComponent* ZiplineTempParticleBack_L_F;//[Offset: 0x1cb4, Size: 0x8]
	ParticleSystemComponent* ZiplineTempParticleBack_R_F;//[Offset: 0x1cbc, Size: 0x8]
	ParticleSystemComponent* ZiplineTempParticleBack_L_E;//[Offset: 0x1cc4, Size: 0x8]
	ParticleSystemComponent* ZiplineTempParticleBack_R_E;//[Offset: 0x1ccc, Size: 0x8]
	ZiplineComponent* ZiplineCurrentZiplinePtr;//[Offset: 0x1cf0, Size: 0x8]
	ZiplineComponent* ZiplineLastRideZiplineLine;//[Offset: 0x1cf8, Size: 0x8]
	ZiplineComponent* ZiplineRidedZiplinePtr;//[Offset: 0x1d00, Size: 0x8]
	ZiplineComponent* ZiplineSwitchLastZipline;//[Offset: 0x1d08, Size: 0x8]
	Transform ZiplineBodyMeshTransform_TPP;//[Offset: 0x1d10, Size: 0x30]
	ZiplinePlayerFlowData ZiplineFlowData;//[Offset: 0x1d88, Size: 0x58]
	SkillModifierInfo ZiplineSkillModifier;//[Offset: 0x1de0, Size: 0x28]
	SkillModifierInfo ZiplineOverrideStateSkillModifier;//[Offset: 0x1e08, Size: 0x28]
	HandStateData ZiplineHandData;//[Offset: 0x1e38, Size: 0x40]
	Vector ZiplineRidePos;//[Offset: 0x1e7c, Size: 0xc]
	bool bZiplineNeedShowUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e88, Size: 0x1]
	bool bZiplineIsRideButtonUseable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e89, Size: 0x1]
	bool bZiplineIsRiding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8a, Size: 0x1]
	bool bZiplineIsZiplineOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8b, Size: 0x1]
	bool bZiplineIsCurZiplineVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8c, Size: 0x1]
	bool bZiplineIsRidedZiplineVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8d, Size: 0x1]
	bool bZiplineIsVerticalZiplineUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8f, Size: 0x1]
	int ZiplineVerticalZiplineForceDir;//[Offset: 0x1e90, Size: 0x4]
	bool bZiplinePlayerHasJumpToZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e94, Size: 0x1]
	ZiplineMagnetic* ZiplineMagnetic;//[Offset: 0x1e98, Size: 0x8]
	int ZiplineFlow_ButtonState;//[Offset: 0x1ea4, Size: 0x4]
	bool RideZiplineIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ea8, Size: 0x1]
	Vector DirOrPoint;//[Offset: 0x1eac, Size: 0xc]
	enum PlayerAddForceType;//[Offset: 0x1eb8, Size: 0x1]
	float ForceValue;//[Offset: 0x1ebc, Size: 0x4]
	float MaxForceSpeed;//[Offset: 0x1ec8, Size: 0x4]
	float ForceAcceleration;//[Offset: 0x1ecc, Size: 0x4]
	enum UseReplicatorState;//[Offset: 0x1f08, Size: 0x1]
	Workbench* OperateWorkbench;//[Offset: 0x1f28, Size: 0x8]
	AnimMontage* CurrentUseFPPAnimMontage;//[Offset: 0x1f30, Size: 0x8]
	AnimMontage* CurrentUseTPPAnimMontage;//[Offset: 0x1f38, Size: 0x8]
	Actor*[] IgnoreActors;//[Offset: 0x1f40, Size: 0x10]
	void ZiplineSetShowUI(bool bIsShow);// 0x39795e8
	void ZiplineSetMagnetAndParticleVisible(bool bIsVisible);// 0x3979264
	void ZiplineServerRideZipline(ZiplineComponent* Zipline, float T, float t1, int ButtonState);// 0x397a1c0
	void ZiplineServerDownZipline(Vector Velocity, float BlockUpperZ, float ForceDownT, int MidwayJump, int LeaveType);// 0x3979cc0
	void ZiplineServerAltDir(ZiplineComponent* Zipline, float T, bool bIsToUP);// 0x3979f60
	void ZiplineRideZipline();// 0x39798dc
	void ZiplineRideVerticalZipline(bool bIsUp);// 0x39798f0
	void ZiplineResumeEnterOverrideStateRuntime(int SkillIndex, bool bEnterNewState, enum NewState, enum NewOverrideState);// 0x39792e8
	void ZiplineRefreshAutoRideZiplineSetting();// 0x39799e0
	void ZiplineOnStateLeave(enum LeavedState, enum Reason, enum InterruptedBy);// 0x39799f4
	void ZiplineOnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0x3979af8
	Transform ZiplineGetTppMeshWorldTransform();// 0x3979974
	float ZiplineGetRidingZiplineTime();// 0x3979548
	ZiplineComponent* ZiplineGetRidingZipline();// 0x39795b4
	bool ZiplineGetCurrentOnZipline();// 0x397957c
	void ZiplineDownZipline(bool bIsJump, bool bIsZeroStop, int MidwayJump, int LeaveType);// 0x3979778
	void ZiplineDoCameraShake(out const Vector Velocity);// 0x397966c
	void ZiplineChangeEnterOverrideStateRuntime(int SkillIndex, enum NewState, enum NewOverrideState);// 0x3979444
	void ZiplineBroadcastRideZipline(ZiplineComponent* Zipline, float T, float t1, float ServerTime);// 0x397a074
	void ZiplineBroadcastDownZipline(Vector Velocity, float BlockUpperZ, float ForceDownT);// 0x3979bb8
	void ZiplineBroadcastAltDir(ZiplineComponent* Zipline, float T, bool bIsToUP);// 0x3979e4c
	void ZiplineAltRideDirection(bool bIsToUP);// 0x39796f4
	void VictoryRevive();// 0x397c0a0
	bool UseRespawnBeaconComplete(int8 Index);// 0x397bf70
	void UseReplicator(Workbench* InWorkbench, int InSide);// 0x3978c40
	void UsePropsWeaponNoTarget(enum PropsWeaponType, ItemDefineID DefineID, enum Reason, bool bFastThrow);// 0x397dbe8
	void UsePropsWeapon(enum PropsWeaponType, ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason, bool bFastThrow);// 0x397dd5c
	void UnUseReplicator(enum Reason);// 0x3978bbc
	void UnRegisterHandleStackPropsWeapon();// 0x397e20c
	void UnEquipPropsWeapon(enum PropsWeaponType, enum Reason);// 0x397e630
	ApexAIController* TryGetAIController();// 0x39838f8
	void TickForbiddenZone();// 0x397cde4
	void TargetLeaveRobotRescuing(enum Reason);// 0x397c21c
	void TargetEnterRobotRescuing(SkeletalMeshComponent* RobotSkeletalMesh);// 0x397c2a0
	void TargetBreakRobotRescuing();// 0x397c200
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x397fbfc
	void SwitchTeamLeader(int TeamID, uint32 NewLeaderKey);// 0x397ef5c
	void SwitchSlidingJump(Vector2D ScreenLocation, Vector2D CenterLocation);// 0x39814fc
	void SwitchOnDeathTotemProtection(const DeathTotem* inDeathTotem);// 0x3981c38
	void SwitchOffDeathTotemProtection(const DeathTotem* inDeathTotem, bool OffByConsumption, out const ApexCharacterReviveInfo ReviveInfo);// 0x3981adc
	void SwitchCrouch();// 0x39815b0
	void SwitchClimbJump(Vector2D ScreenLocation, Vector2D CenterLocation);// 0x3981448
	void SwitchCameraMode(enum NewMainCameraMode, float LerpTime, bool FromButton);// 0x398415c
	void SwitchBloodHoundDetectable(bool EnableDetect);// 0x39844bc
	bool StuckInto(Actor* InActor);// 0x39849dc
	void StopInspectWeapon();// 0x397a360
	void StopForbiddenZoneTimer();// 0x397cdf8
	void StopDispatchableSentence_NetMulticast();// 0x397f464
	void StopDispatchableSentence();// 0x397f504
	void StopDispatchableMontage_NetMulticast();// 0x397f594
	void StartInspectWeapon();// 0x397a374
	void StartForbiddenZoneTimer();// 0x397ce0c
	void SpawnMissilePropsWeapon(uint64 FakeID, enum PropsWeaponType, Vector InLoc, Vector InVel, Rotator InRot, float LeftTime);// 0x397d130
	void SpawnFakeMissilePropsWeapon(enum PropsWeaponType, Vector InLoc, Vector InVel, Rotator InRot, float LeftTime);// 0x397d308
	void SpawnDynamicRespawnBeacon(Transform InTransform, int ItemID);// 0x397d494
	void ShowFinisherHeadFlag(Vector AuthLocation);// 0x397ae60
	void ShowFinisherCancelOperation(bool bShow, ApexCharacter* Target);// 0x397aedc
	void SeverLocationSample(const Vector ClientLocation, const Vector ClientRebaseLocationOffset);// 0x3984fb8
	void SetTickPoseOnDS(bool bActive);// 0x397b77c
	void SetRescueSelfSoundId(int SoundId);// 0x3981850
	void SetPlayerTransform(Vector NewLocation, Rotator NewControlRotation);// 0x3984e80
	void SetIsInvincible(bool NewState);// 0x397ff88
	void SetIsAI(bool IsAI);// 0x3983650
	void SetInvincibleStartTime(float InTime);// 0x397ff10
	void SetInvincibleEndTime(float InTime);// 0x397fe98
	void SetInHeatShield(bool bInside, enum InOutHeatShieldReason);// 0x3983e34
	void SetGameOver(bool bFlag);// 0x397cd44
	void SetEnableRootMotion(bool Enable);// 0x397f3cc
	void SetDyingAnimParam(bool bDying, bool ImmediatelyKnockdownPose);// 0x397c95c
	void SetDeadAnimType(enum DeadType);// 0x397c8d8
	void SetCharacterShieldMax(out const float NewValue);// 0x3980d48
	void SetCharacterShieldLevel(out const int NewValue);// 0x3980c30
	void SetCharacterShieldHealing(out const float NewValue);// 0x3980cbc
	void SetCharacterShield(out const float NewValue);// 0x3980dd4
	void SetCharacterInVoidState(bool bState);// 0x3981ed8
	void SetCharacterHelmetLevel(out const int NewValue);// 0x3980ba4
	void SetCharacterHealthMax(out const float NewValue);// 0x3980eec
	void SetCharacterHealthHealing(out const float NewValue);// 0x3980e60
	void SetCharacterHealth(out const float NewValue);// 0x3980f78
	void SetCharacterAttrModifierEnable(FString ModifierName, bool IsEnable);// 0x397fd68
	void SetBackpackUIIsOpen(bool bNewValue);// 0x397a388
	void SetBackpackOpening(bool Value);// 0x397f120
	void SetAnimRescueType(enum AnimRescueType);// 0x39835d4
	void SetAllCollisionEnabled(bool bEnabled);// 0x43841ec
	void ServerUseEmoji(enum EmojiType, FName EmojiId);// 0x3985c38
	void ServerUse3DEmojiWithLocation(FName EmojiId, bool NewUse, Vector Location, float DestroyDelay);// 0x3985798
	void ServerUnEquipPropsWeapon(enum PropsWeaponType, int NetPropsWeaponIndex, enum Reason, bool ServerInitiative);// 0x397e6f0
	void ServerTriggerJump();// 0x39815cc
	void ServerSetSkinId(FName NewSkinId);// 0x39833a0
	void ServerSetPropsThrowMode(byte ThrowGrenadeMode);// 0x397ce7c
	void ServerSetMaxHealth(float AddHealth);// 0x397f6a8
	void ServerSetFireMode(enum NewFireMode);// 0x39830e0
	void ServerSetCurrentCameraMode(enum NewCameraMode, bool FromButton);// 0x3983f88
	void ServerSetBackpackOpening(bool Value);// 0x397f054
	void ServerPreStartTransfer(VoidDoorActor* DoorActor, bool bReversal);// 0x3982420
	void ServerPickupGrenade(ItemDefineID DefineID);// 0x397d974
	void ServerOperateFinisher(bool bEnter, ApexCharacter* FinisherTarget);// 0x397acec
	void ServerHandleSkillCheckBoxOverlapEvent(const FName InAction, Actor* InEventActor);// 0x3982d20
	void ServerGmUpdateNearAILocation();// 0x3983adc
	void ServerFadeOutPropsWeapon(enum PropsWeaponType, PropsWeaponFadeOutParams FadeOutParams, bool ServerInitiative);// 0x397e368
	void ServerEquipPropsWeapon(enum PropsWeaponType, int NetPropsWeaponIndex, bool ServerInitiative);// 0x397eb78
	void ServerBroadcastMsg(BroadcastMsgData BroadcastMsgData, bool ServerInitiative);// 0x397d880
	void SendPlayerTo(Transform Trans);// 0x3983974
	void RPCServerEnableDeathTotemProtection(DeathTotem* inDeathTotem);// 0x3981d5c
	void RPCQueryServerInfo(ApexCharacter* Acotr);// 0x3983714
	void RPCMultiThrowPickUpWrapper();// 0x397a30c
	void RPC_ClientClearFakePropsWeapon(uint64 FakeID);// 0x397cf28
	void RPC_Client_OnNearDeathRecordingNotify(FString SpectatorName, bool bSpectatorIsAI);// 0x397a498
	void RPC_Client_OnDeathStopRecordingNotify(FString SpectatorName, bool bSpectatorIsAI, bool bForce);// 0x397a5b4
	void ResumeRescueSelf();// 0x39835c0
	void ResumeHandleStackPropsWeapon();// 0x397e0e8
	void RestoreTickPoseOnDS();// 0x397b768
	class Object RescueIndiviByRobot();// 0x397c138
	class Object RescueIndivi(ApexCharacter* Target);// 0x397c174
	bool RequireFootprintsDuringHunting();// 0x3984484
	void ReportThrowingFlow(enum PropsWeaponType, Actor* ThrowableActor);// 0x397d070
	void ReportDecoyFlowTLOG(int decoyType, int controlTime, int EndType);// 0x3983798
	void ReplaceAttrShieldValueMax(float CurrentShieldValue, float ReplaceShieldValueMax);// 0x39811a4
	void RemoveShieldHealing(FName SourceName);// 0x39807f8
	void RemovePropsWeaponEvent();// 0x397d5f4
	void RemoveHealthHealing(FName SourceName);// 0x3980950
	void ReleaseRecoverBanner();// 0x397c000
	bool RegisterSkillStateEvent2SkillManager();// 0x39824f0
	void RegisterPlayerPickUpList();// 0x39818f4
	void RegisterHandleStackPropsWeapon();// 0x397e220
	void RefreshBattleState();// 0x397b948
	void RefreshBackpackDisplay();// 0x397f238
	QueryPlayerInfo QueryCharacterInfo();// 0x397a728
	void PutonEquipmentTest();// 0x3983f60
	void PushDrugVoice(const int VoiceID);// 0x3984f3c
	void PropsWeaponEndPlay(enum Reason);// 0x397e234
	void PropsWeaponAimExplode(enum PropsWeaponType, Vector InLoc);// 0x397cfac
	void PlayVictimSound(enum PlayerAudioType, int InWeaponSkinID);// 0x397be30
	void PlayTotemRecallTrailSFX_NetMulticast(const Vector StartPosition, const Vector EndPosition);// 0x3981978
	void PlaySingleSequence(LevelSequence* TargetSequence, MovieSceneSequencePlaybackSettings Settings);// 0x3982f64
	void PlayRespawnOperateAudio(enum AudioType);// 0x397bc68
	void PlayInstigatorSound(enum PlayerAudioType, int InWeaponSkinID);// 0x397bd68
	void PlayFatalitySkill(ApexCharacter* TargetActor);// 0x3983064
	void PlayerRelicateItem(int SelectIndex);// 0x3978b38
	void PlayDoubleSequence(LevelSequence* TargetSequence, Actor* Other, MovieSceneSequencePlaybackSettings Settings);// 0x3982e20
	void PlayDispatchableSentence_NetMulticast(ApexSentence* Sentence);// 0x397f480
	void PlayDispatchableSentence(ApexSentence* Sentence);// 0x397f518
	void PlayDispatchableMontage_NetMulticast(AnimMontage* MontageToPlay);// 0x397f5f0
	void PlayBackpackSwitchGunAnim(float Alpha, float TimeSec);// 0x397bba4
	void OverlapMirage(MirageActor* Mirage);// 0x3985eb4
	void OperateFinisher(bool bEnter);// 0x397adc8
	void OnWeaponPutOnEnd();// 0x397b87c
	void OnWeaponPutOffEnd(int WeaponID);// 0x397b800
	void OnUpGradeableArmorDisplayLoad(Transform SpawnTransform, int Level);// 0x397b4e4
	void OnTakeDamage(float Damage, int DamageType, enum DamagePos, bool BreakShield, bool FatalHealth, Pawn* Attacker, Pawn* Victim, byte VictimOldHealthStatus);// 0x3978e18
	void OnStateLeave(enum LeavedState, enum Reason, enum InterruptedBy);// 0x3985434
	void OnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0x3985540
	void OnStateBlockCheck(enum TimeOutState, enum TimeOutOverrideState, enum BlockState, enum BlockOverrideState, out bool bNeedExitState);// 0x3985d14
	void OnStartSkillFailed(int SkillIndex, enum StopReason, int SkillHandleID);// 0x3982924
	void OnSkinChanged(Character* TargetCharacter, bool Success, FName SkinId);// 0x3984268
	void OnSkillStop(int SkillIndex, enum StopReason, int SkillHandleID);// 0x3982a30
	void OnSkillStartCD(int SkillIndex);// 0x39827d4
	void OnSkillStart(int SkillIndex, int SkillHandleID);// 0x3982c48
	void OnSkillReleased(int SkillIndex, bool bReleased);// 0x3982858
	void OnSkillJumpPhase(int SkillIndex, int PhaseIndex, bool Result);// 0x3982640
	void OnSkillCDModify(int SkillIndex);// 0x3982750
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x3983164
	void OnRepPropsThrowMode();// 0x397cf14
	void OnRep_UpGradeableArmorUpLevel();// 0x397b650
	void OnRep_UpGradeableArmorMaxExp();// 0x397b678
	void OnRep_UpGradeableArmorCurrentLevel();// 0x397b664
	void OnRep_UpGradeableArmorCurrentExp();// 0x397b68c
	void OnRep_SkinId(FName PreSkinId);// 0x3983324
	void OnRep_ShieldValueMax();// 0x397f2b0
	void OnRep_ShieldValue();// 0x397f2c4
	void OnRep_ShieldLevel();// 0x397f29c
	void OnRep_ShieldHealing();// 0x397f368
	void OnRep_ServerCharacterCameraMode();// 0x3983f74
	void OnRep_RevenantSilenceEffect();// 0x3981de0
	void OnRep_RepUseReplicatorState();// 0x3978b24
	void OnRep_ReloadNotReduceAmmo();// 0x397f450
	void OnRep_PickupTipItem();// 0x3983f38
	void OnRep_OnUpGradeableArmorIncreaseExp();// 0x397b628
	void OnRep_OnPickUpGradeableArmor();// 0x397b454
	void OnRep_MoveIgnoreFlags();// 0x397f3b8
	void OnRep_MaxHealth();// 0x397f390
	void OnRep_KnockDownShieldLevel();// 0x397f260
	void OnRep_KnockdownShield(KnockdownShieldReplicate Outdated);// 0x397c854
	void OnRep_IsInvincible();// 0x397f24c
	void OnRep_IsDefenseSlowed();// 0x398193c
	void OnRep_HelmetLevel();// 0x397f288
	void OnRep_HealthStatusChanged(byte prevStatus);// 0x397f2d8
	void OnRep_HealthHealing();// 0x397f37c
	void OnRep_Health();// 0x397f3a4
	void OnRep_ForbiddenZoneLeftTime();// 0x397cdd0
	void OnRep_DisplayNormalArmorLevel();// 0x397b63c
	void OnRep_DeathTotemRangeTest();// 0x3981950
	void OnRep_DeathTotemProtection();// 0x3981964
	void OnRep_CurrentInsideHeatShield();// 0x3983e20
	void OnRep_CharacterDeathInfo();// 0x397f354
	void OnRep_BreakKnockdownShield();// 0x397c840
	void OnRep_BloodHoundHunting();// 0x3984540
	void OnRep_BackpackLevel();// 0x397f274
	void OnRep_AircraftRespawnVisibility();// 0x397bf48
	void OnReconnectedPropsWeapon();// 0x397d5e0
	void OnPropsWeaponReleased(bool bRightBtn);// 0x397df5c
	void OnPropsWeaponPressed(bool bRightBtn);// 0x397dfe0
	void OnPlayTotemRecallTrailSFX(out const Vector StartPosition, out const Vector EndPosition);// 0x43841ec
	void OnPlayerNetLost();// 0x3978e04
	void OnPlayerMoving(float DeltaSeconds, Vector OldLocation, Vector OldVelocity);// 0x3978d08
	void OnOverrideStateChanged(enum State, enum NewOverrideState, enum PrevOverrideState);// 0x3985328
	void OnObPlayerListChangedAtServer(const Controller*[] PlayerList);// 0x397b344
	void OnObedStatusChangedAtServer(bool IsAnyOneObed);// 0x397b2c0
	void OnObedStatusChangeAtClient(bool NewIsOBed, PlayerController* PC);// 0x397b1ec
	void OnNormalArmorDisplayLoad(int Level);// 0x397b468
	void OnMirageDecoySwitchPlayControllerWithLeaveInAir(enum State, enum Reason, enum InterruptedBy);// 0x397a84c
	void OnLeavlOB(Actor* Target);// 0x397b034
	void OnHealthStatusChanged(byte PrevHealthStatus, byte CurrentHealthStatus);// 0x398000c
	void OnHandSyringeClassLoad();// 0x39818e0
	void OnFinisherTimerOut();// 0x397abf8
	void OnEnterVoid(bool bIsEnter, bool bNeedSetCollision);// 0x43841ec
	void OnEnterOB(Actor* Target);// 0x397b0b0
	void OnEmojiMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x39856d0
	void OnEmoji3DMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x3985608
	void OnDeathMatLoadComplete(SoftObjectPath MatSoftObject);// 0x3984afc
	void OnCharacterEnterCausticGas();// 0x397a9f0
	void OnBPIsInvincibleChange();// 0x43841ec
	void OnBeenSilencedByRevenant(bool IsSilenced);// 0x43841ec
	void OnBattleBehStateChanged(enum PrevState, enum CurState);// 0x397b6a0
	void NotifyRecycleToServer(Actor* ActorToRecycle);// 0x397aa88
	void NotifyPickupSkillItem(SkillActorBase* ActorToPickup);// 0x397aa04
	void NotifyHealthShieldChangeWithoutMidRecommand(bool IsHp, float ChangedValue, enum CausedType);// 0x397f8cc
	void NetMultiUseEmojiAnimation(FName EmojiId, bool NewUse);// 0x3985b68
	void NetMultiUseEmoji3D(FName EmojiId, bool NewUse);// 0x3985a98
	void NetMultiUseEmoji2D(FName EmojiId, bool NewUse);// 0x39859c8
	void NetMulticastEnterRescue(ApexCharacter* Target);// 0x397c684
	void MultiCastSwitchCameraMode(enum NewMainCameraMode, float LerpTime);// 0x3984094
	void MulticastLaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x3986000
	void LookAtTargetPoint(Vector TargetPoint);// 0x3984e04
	void LogTouch(bool Value);// 0x397f1ac
	void LoadPropsWeaponAttrModifier();// 0x397d960
	void LeavingForbiddenZone();// 0x397ce20
	void LeaveServerState_Inner(enum State);// 0x3983d2c
	void LeaveRobotRescuing(ApexCharacter* Source, enum Reason);// 0x397c42c
	void LeaveRescuing(ApexCharacter* Source, enum Reason);// 0x397c4f4
	void LeaveRescue(ApexCharacter* Target, enum Reason);// 0x397c5bc
	bool IsUnderDomeShield();// 0x3981df4
	bool IsTotemRecallFinished();// 0x3981a34
	bool IsTeamMateById(int InTeamId, int InCampId);// 0x397f804
	bool IsSilenced();// 0x3981e60
	bool IsReplayViewTarget();// 0x397a42c
	bool IsProtectedByDeathTotem();// 0x3981aa4
	bool IsInVoid();// 0x3981e98
	bool IsInspectingWeapon();// 0x397a328
	bool IsInGrappling();// 0x3981398
	bool IsInBattleState();// 0x397b95c
	bool IsInBattle();// 0x3983f00
	bool IsInAir();// 0x39813d8
	bool IsHeirloomOn();// 0x3981664
	bool IsGrapplingCDPending();// 0x3981360
	bool IsFrisking();// 0x397ef1c
	bool IsFPP();// 0x398169c
	bool IsDying();// 0x398017c
	bool IsDecoy();// 0x3983898
	bool IsDeathTotemProtectionFinishByConsumption();// 0x3981a6c
	bool IsCanClamb(out const HitResult Hit);// 0x397908c
	bool IsByAIHosting();// 0x3983934
	bool IsBloodHoundHunting(out float LeftSeconds);// 0x3984554
	bool IsAnyoneObedInDS();// 0x397b41c
	bool IsAlive();// 0x39801b4
	bool IsAIControllerd();// 0x39838b8
	bool IsAI();// 0x39836d4
	void InterruptedSkill();// 0x397bef8
	void InitPlayerProperty(ApexPlayerState* InPlayerState);// 0x39801ec
	void ImmediatelyDisposePropsWeapon();// 0x397d61c
	void HuntLegendByIDServer(int HuntLegendIDIn);// 0x3984400
	void HuntLegendByIDMulticast(int HuntLegendIDIn);// 0x398437c
	void HoldRecoverBanner(uint32 RecoverBannerPlayerKey);// 0x397c01c
	void HideFinisherHeadFlag();// 0x397ae4c
	void HealActor(Actor* TargetActor);// 0x397c0b4
	bool HasPawnState(enum State);// 0x398590c
	void HandleStackPropsWeapon(out const HandStateData HandStateData, bool bPush);// 0x397e0fc
	void HandleOnCharAnimLoadingFinished();// 0x3984bec
	void HandleConsumeItemSkillBreak();// 0x3982d0c
	void HandleBothLeaveRescue(ApexCharacter* Source, ApexCharacter* Target, enum Reason);// 0x397c324
	void GotoDying(out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x397cbb0
	WeaponManagerComponent* GetWeaponManagerComponent();// 0x3986168
	Actor* GetViewTargetActor();// 0x397b12c
	float GetViewScrollSpeedScale();// 0x39805f8
	Rotator GetViewRotationIgnoreSmallEye();// 0x3986128
	float GetUltimateSkillCDThresholdScale();// 0x39802e0
	float GetUltimateSkillCDScale();// 0x3980358
	float GetUltimateSkillCDCastScale();// 0x3980268
	int GetTeamIdx();// 0x397f7d0
	float GetTacticsSkillCDThresholdScale();// 0x398031c
	float GetTacticsSkillCDScale();// 0x3980394
	float GetTacticsSkillCDCastScale();// 0x39802a4
	float GetSpreadScale();// 0x39805bc
	float GetSpeedScale();// 0x39807a0
	float GetSkillDamageScale();// 0x39806ac
	int GetSimOBBulletNum(int AmmoID);// 0x397b168
	float GetShoulderAimingMeshAngle();// 0x397cd10
	enum GetShieldLevel();// 0x397fe44
	float GetShieldHealing();// 0x39807dc
	float GetRescueSelfMultiplier();// 0x3980544
	float GetRescueMultiplier();// 0x3980580
	float GetRealRescureSelfTimeSec();// 0x397b914
	float GetRealRescuingTimeSec(ApexCharacter* TargetCharacter);// 0x397b890
	byte GetPropsThrowMode();// 0x397ce48
	FString GetPlayerNameSafety();// 0x39851e8
	FString GetPlayerLogName();// 0x398515c
	int GetPlayerKey();// 0x397f760
	ApexPlayerController* GetPlayerControllerInReplay();// 0x397a464
	APPerkManagerComponent* GetPerkManagerComp();// 0x397a9d4
	PawnStateManager* GetPawnStateManager();// 0x3983de4
	Actor* GetMyEmoji3DActor();// 0x3985994
	Vector GetMovingVelocity();// 0x3985274
	float GetMoveShowDistanceScale();// 0x39804c8
	ShootWeapon* GetMeshOwnerShootWeapon(SkeletalMeshComponent* InMeshComponent);// 0x397a950
	float GetMeleeAttackDamageScale();// 0x3980634
	float GetMaxWalkSpeedLimit();// 0x3980764
	MainHandComponent* GetMainHandComp();// 0x397b018
	enum GetLegendType();// 0x3983510
	int GetLegendID();// 0x398354c
	float GetKnockdownSpeedScale();// 0x39806e8
	bool GetIsInvincible();// 0x397fe78
	bool GetIsIndiviRescue();// 0x3980504
	int GetInEnemyCausticGasNumFor(ApexCharacter* TargetCharacter);// 0x397ab40
	int GetInEnemyCausticGasNum();// 0x397abc4
	int GetInCausticGasNum();// 0x397ab0c
	int GetHeirloomID();// 0x3981628
	byte GetHealthStatus();// 0x3980148
	float GetHealthHealing();// 0x3980934
	Vector GetGroundActorLocation();// 0x39832ec
	float GetFireShowDistanceScale();// 0x398048c
	bool GetEnableOpenCloseBackpack();// 0x397a40c
	EffectViewManager* GetEffectViewManager();// 0x397afb0
	bool GetDisableSprint();// 0x3980724
	DataReportComponent* GetDataReportComponent();// 0x3981908
	int GetCurAimType();// 0x397ccdc
	float GetConsumeShowDistanceScale();// 0x3980450
	Actor* GetCircleActor();// 0x3981e2c
	UAECharacterAnimListComponent* GetCharacterWeaponAnimListComponent();// 0x3984c44
	float GetCharacterShieldMax();// 0x39810a0
	int GetCharacterShieldLevel();// 0x3981038
	float GetCharacterShieldHealing();// 0x398106c
	float GetCharacterShield();// 0x39810d4
	int GetCharacterHelmetLevel();// 0x3981004
	float GetCharacterHealthMax();// 0x398113c
	float GetCharacterHealthHealing();// 0x3981108
	float GetCharacterHealth();// 0x3981170
	CharacterBuffManager* GetCharacterBuffManager();// 0x397afe4
	UAECharacterAnimListComponent* GetCharacterAnimListComponent();// 0x3984c80
	ApexCharacterAnimationComponent* GetCharacterAnimationComponent();// 0x3984c08
	byte GetCfgRespawnTeammateTimeSec();// 0x397bf14
	int GetCampID();// 0x397f79c
	Rotator GetCachedRotation();// 0x3983588
	bool GetBackpackOpening();// 0x397f0e0
	AuraComponent* GetAuraComponent();// 0x39834dc
	void GetAPCharacterCameraViewPoint(out Vector Location, out Rotator Rotation, bool IsFPP, bool UseCameraLocationAtClient);// 0x39816d4
	float GetAIDamageScale();// 0x3980670
	int GenPropsWeaponIndex();// 0x397eeb4
	uint64 GenPropsWeaponFakeId();// 0x397eee8
	void GamblingMachine_ServerPlayGameEnd();// 0x3981ffc
	void GamblingMachine_ServerPlayGameCheck(GamblingMachine* GamblingMachine, FString BoxName);// 0x3982244
	void GamblingMachine_ServerPlayGame(const int[] ListID, const int[] ListNum);// 0x398209c
	void GamblingMachine_ClientPlayGameStart(GamblingMachine* GamblingMachine, enum MesssageType);// 0x398217c
	void GamblingMachine_ClientPlayGameEnd(enum MessageType);// 0x3982018
	void ForbidEmojiAnimationMoment();// 0x39858f8
	void FirePropsWeapon();// 0x397df48
	void FadeOutPropsWeapon(enum PropsWeaponType, PropsWeaponFadeOutParams FadeOutParams);// 0x397e2b0
	void EquipPropsWeapon(enum PropsWeaponType, out bool bResult);// 0x397eaa4
	void EnterSimulatedState(enum State);// 0x3983af8
	void EnterServerState_Inner(enum State);// 0x3983c74
	void EnteredForbiddenZone();// 0x397ce34
	bool EnableVisualSound();// 0x3980410
	void EnableKnockdownShield(bool bEnable);// 0x397c7b4
	bool EnableImmuneHitSlowly();// 0x39803d0
	void EnableFPPZOffset(bool NewEnable);// 0x3983458
	void EnableExplosionTimeTips(bool bEnable, float RealExplosionTime, float Percent);// 0x397ba8c
	void DyingToRevive();// 0x397c708
	void DyingTimeout(out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, bool bFollowTeamDead);// 0x397ca38
	void DisableAnimBudget();// 0x3985d00
	void DetectorBeFinisherTeammate(const float Duration, const ApexCharacter* BeFinisher);// 0x398474c
	void DeathFadeOut();// 0x3984bd8
	void ConsumePropsWeapon(int ItemID);// 0x397db6c
	bool ConsumeDeathTotemProtection(out float ResultHealth);// 0x3981cbc
	void ClientUnEquipPropsWeapon(enum PropsWeaponType, int NetPropsWeaponIndex, enum Reason, bool ServerInitiative);// 0x397e848
	void ClientSwitchThrowMode();// 0x397cf00
	void ClientStartTransferSucceed(VoidDoorActor* DoorActor);// 0x3982318
	void ClientStartTransferFailed(VoidDoorActor* DoorActor);// 0x398239c
	void ClientSetPlayerTransform(Vector NewLocation, Rotator NewControlRotation);// 0x3984d40
	void ClientSetPlayerRotation(Rotator NewControlRotation);// 0x3984cbc
	void ClientSentWraithTipToTeammate(const AkAudioEvent* AudioEvent);// 0x3981f5c
	void ClientReceiveBroadcastMsg(BroadcastMsgData BroadcastMsgData, bool ServerInitiative);// 0x397d7bc
	void ClientPostMessageItem(FName InItemKey, float InDuration, FName InMessageKey, const FString[] Args);// 0x3984814
	void ClientOnSkillStop(int SkillIndex, enum StopReason, int SkillHandleID);// 0x3982b3c
	void ClientOnSkillJumpPhase(int SkillIndex, int PhaseIndex, bool Result);// 0x3982530
	void ClientOnInflictDamage(float DamageAmount, const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, Actor* DamageTarget);// 0x397fa68
	void ClientFadeOutPropsWeapon(enum PropsWeaponType, PropsWeaponFadeOutParams FadeOutParams, bool ServerInitiative);// 0x397e474
	void ClientEquipPropsWeapon(enum PropsWeaponType, int NetPropsWeaponIndex, bool ServerInitiative);// 0x397ec88
	void ClientChangePoseState(enum InState);// 0x3981260
	void ClientAckGoodMoveWithPendingCount(float Timestamp, byte PendingCount);// 0x3985f38
	void ClearPropsWeapon();// 0x397d94c
	void ClearFinisherTimerOut();// 0x397ac0c
	void Clear(bool bClearSkillActor);// 0x397f9e4
	enum CheckResumePropsWeaponType(enum PropsWeaponType);// 0x397e064
	void CharacterRescueBackLocalLocation();// 0x39818cc
	void ChangePoseState(enum InState);// 0x39812e4
	void ChangeHealthStatus(byte NextHealthStatus);// 0x39800cc
	bool CanSwitchFppTpp();// 0x39849a4
	bool CanStuckInto(Actor* InActor);// 0x3984a6c
	bool CanEnterSlide();// 0x3981410
	void CancelPropsWeapon();// 0x397df34
	void CallServerLocationSample();// 0x39850ac
	void CalcVelocity(out Vector Velocity, out const Vector Acceleration, float DeltaTime);// 0x3979148
	void BroadcastTeamMateAudio(enum PlayerAudioType);// 0x397bcec
	void BroadcastKilledEffect(uint32 InKillerKey, int InWeaponSkinID);// 0x397b994
	void BPSyncPawnStateMask();// 0x3983f4c
	void BloodHoundHuntingCastInterrupted();// 0x3984670
	void BloodHoundEnterHunting(float HuntingDuration, bool bAlwaysUseNewDuration);// 0x3984684
	void BloodHoundBreakHunting(bool bImmediateBreak);// 0x39845ec
	bool BackpackHasPropsWeapon(enum PropsWeaponType, out int ResultItemId);// 0x397da8c
	void AutonomousUnEquipPropsWeapon(enum PropsWeaponType, enum Reason, bool ServerInitiative);// 0x397e998
	void AutonomousPickupGrenade(ItemDefineID DefineID);// 0x397da00
	void AutonomousFadeOutPropsWeapon(enum PropsWeaponType, PropsWeaponFadeOutParams FadeOutParams);// 0x397e578
	void AutonomousEquipPropsWeapon(enum PropsWeaponType, out bool bResult, bool ServerInitiative);// 0x397ed90
	void APReceiveAnyDamage(float Damage, byte DamageType, Actor* Attacker);// 0x43841ec
	void APOnTakeDamage(float Damage, int DamageType, Pawn* Attacker, enum AvatarDamagePosition, bool bIsHeadShot, bool bIsFatalHealthCost, bool bIsHitShield, bool bIsShieldBroken);// 0x43841ec
	void AircraftRespawnExitHatchDone();// 0x397bf5c
	void AIFirePropsWeapon(enum PropsWeaponType, Vector LaunchVelocity, Vector LaunchLocation);// 0x397d630
	void AIEquipPropsWeapon(enum PropsWeaponType);// 0x397d740
	bool AIEnableKnockdownShield(bool bEnable);// 0x397c724
	void AIAimPropsWeapon();// 0x397d72c
	void AddShieldHealing(FName SourceName, float Value);// 0x3980874
	void AddPropsWeaponEvent();// 0x397d608
	void AddPlayerTrainFlow(bool bOn);// 0x3983bb0
	void AddNoWarningState(enum State);// 0x39852ac
	void AddHealthHealing(FName SourceName, float Value);// 0x39809cc
	void AddFinisherTimerOut(bool bIsTarget, float Time);// 0x397ac20
	void AddCharacterShield(out const float AddValue);// 0x3980a8c
	void AddCharacterHealth(out const float AddValue);// 0x3980b18

--------------------------------
Class: UnmannedBody.Actor.Object
	float BodyLength;//[Offset: 0x294, Size: 0x4]
	FString ID;//[Offset: 0x298, Size: 0x10]
	StaticMeshComponent* MainMesh;//[Offset: 0x2a8, Size: 0x8]
	float SimulatedMoveDistance;//[Offset: 0x2b0, Size: 0x4]
	float SimulatedTickAngelLimit;//[Offset: 0x2b4, Size: 0x4]
	bool bEnableAggregate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	float OffsetToHead;//[Offset: 0x2c0, Size: 0x4]
	Actor*[] AttachActorList;//[Offset: 0x2c8, Size: 0x10]
	ApexCharacter*[] Passengers;//[Offset: 0x2d8, Size: 0x10]
	int BodyIndex;//[Offset: 0x2e8, Size: 0x4]
	void RemoveAttachActor(Actor* RemoveActor);// 0x3e4d090
	bool IsOn(Actor* theActor);// 0x3e4d008
	bool GetApplyMoveState();// 0x3e4d20c
	void EnableAggregate(bool bEnable);// 0x3e4d188
	void AddAttachActor(Actor* AddActor);// 0x3e4d10c

--------------------------------
Class: ZiplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ComponentReference AttachBegin;//[Offset: 0x568, Size: 0x28]
	FName AttachBeginSocketName;//[Offset: 0x590, Size: 0x8]
	Vector AttachBeginOffset;//[Offset: 0x598, Size: 0xc]
	ComponentReference AttachEnd;//[Offset: 0x5a8, Size: 0x28]
	FName AttachEndSocketName;//[Offset: 0x5d0, Size: 0x8]
	Vector AttachEndOffset;//[Offset: 0x5d8, Size: 0xc]
	int NumSegments;//[Offset: 0x5e4, Size: 0x4]
	float LengthScale;//[Offset: 0x5e8, Size: 0x4]
	int CurveSeparateNum;//[Offset: 0x5ec, Size: 0x4]
	float CurveAlpha;//[Offset: 0x5f0, Size: 0x4]
	bool bEnableCurveSeparate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 0x1]
	float AngleThreshold;//[Offset: 0x5f8, Size: 0x4]
	enum ZiplineType;//[Offset: 0x5fc, Size: 0x1]
	bool bIsFunctional;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fd, Size: 0x1]
	bool bNeedRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fe, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ff, Size: 0x1]
	float DebugDrawTime;//[Offset: 0x600, Size: 0x4]
	bool bStraightZiplineCutLower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604, Size: 0x1]
	bool bEnablePhysic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x605, Size: 0x1]
	float NoPlayerShakeTime;//[Offset: 0x608, Size: 0x4]
	float NoPlayerResetTime;//[Offset: 0x60c, Size: 0x4]
	float EachDeltaTime;//[Offset: 0x610, Size: 0x4]
	int IterateTime;//[Offset: 0x614, Size: 0x4]
	float GravityValue;//[Offset: 0x618, Size: 0x4]
	float PlayerEffect;//[Offset: 0x61c, Size: 0x4]
	float SlowRate;//[Offset: 0x620, Size: 0x4]
	float WindFrequency;//[Offset: 0x624, Size: 0x4]
	float WindForce;//[Offset: 0x628, Size: 0x4]
	float CableWidth;//[Offset: 0x630, Size: 0x4]
	int NumSides;//[Offset: 0x634, Size: 0x4]
	float PlayerRadius;//[Offset: 0x638, Size: 0x4]
	float PlayerRadiusTPP;//[Offset: 0x63c, Size: 0x4]
	float MaxPlayerDist;//[Offset: 0x640, Size: 0x4]
	float MaxPlayerDistTPP;//[Offset: 0x644, Size: 0x4]
	float MaxViewAngle;//[Offset: 0x648, Size: 0x4]
	float MaxViewAngleTPP;//[Offset: 0x64c, Size: 0x4]
	float AutoRide_ShowRadius;//[Offset: 0x650, Size: 0x4]
	float AutoRide_ExitRadius;//[Offset: 0x654, Size: 0x4]
	ZiplineDownInfo InitDownInfo;//[Offset: 0x658, Size: 0x1c]
	ZiplineTipInfo TipInfoStart;//[Offset: 0x674, Size: 0x24]
	ZiplineTipInfo TipInfoEnd;//[Offset: 0x698, Size: 0x24]
	byte LandBlockChannel;//[Offset: 0x6bc, Size: 0x1]
	float BetweenSpaceTime;//[Offset: 0x6c0, Size: 0x4]
	float BetweenSpaceDist;//[Offset: 0x6c4, Size: 0x4]
	float RideDelayTime;//[Offset: 0x6c8, Size: 0x4]
	float RideViewTimeH;//[Offset: 0x6cc, Size: 0x4]
	float MoveMaxSpeed;//[Offset: 0x6d0, Size: 0x4]
	float MoveAccelerate;//[Offset: 0x6d4, Size: 0x4]
	float RideVelLimit;//[Offset: 0x6d8, Size: 0x4]
	float RideFirstHeight;//[Offset: 0x6dc, Size: 0x4]
	Vector Launch_StartPos;//[Offset: 0x6e0, Size: 0xc]
	Vector Launch_EndPos;//[Offset: 0x6ec, Size: 0xc]
	float Launch_TotalTime;//[Offset: 0x6f8, Size: 0x4]
	float Launch_StartTime;//[Offset: 0x6fc, Size: 0x4]
	int Launch_NumSegment;//[Offset: 0x700, Size: 0x4]
	bool bIsLaunchMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x704, Size: 0x1]
	float Launch_DistortOffsetY;//[Offset: 0x708, Size: 0x4]
	float Launch_DistortOffsetZ;//[Offset: 0x70c, Size: 0x4]
	float Launch_DistortLength;//[Offset: 0x710, Size: 0x4]
	float Launch_DistortAmount;//[Offset: 0x714, Size: 0x4]
	float Launch_DistortSpeed;//[Offset: 0x718, Size: 0x4]
	StaticMesh* Launch_Mesh;//[Offset: 0x720, Size: 0x8]
	MaterialInterface* Launch_Mat;//[Offset: 0x728, Size: 0x8]
	StaticMeshComponent* Launch_MeshComp;//[Offset: 0x730, Size: 0x8]
	MaterialInstanceDynamic* Launch_MatDynamic;//[Offset: 0x738, Size: 0x8]
	ZiplineElevatorInfo[] ElevatorList;//[Offset: 0x740, Size: 0x10]
	bool bDryRunZiplineProbe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 0x1]
	float NavStartPos;//[Offset: 0x754, Size: 0x4]
	float NavEndPos;//[Offset: 0x758, Size: 0x4]
	bool bHasResetOri;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75c, Size: 0x1]
	float LastHasPlayerTime;//[Offset: 0x760, Size: 0x4]
	float OffsetRadiusFraction;//[Offset: 0x764, Size: 0x4]
	float TileMaterial;//[Offset: 0x768, Size: 0x4]
	bool bHasCalc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76c, Size: 0x1]
	Vector2D PreCalcMinMax;//[Offset: 0x770, Size: 0x8]
	ZiplinePoint[] PotList;//[Offset: 0x778, Size: 0x10]
	float[] LenList;//[Offset: 0x788, Size: 0x10]
	float[] LenRate;//[Offset: 0x798, Size: 0x10]
	Vector4[] CurvePreData;//[Offset: 0x7a8, Size: 0x10]
	Vector[] OriList;//[Offset: 0x7b8, Size: 0x10]
	float TotalLength;//[Offset: 0x7c8, Size: 0x4]
	float DevTotalLength;//[Offset: 0x7cc, Size: 0x4]
	ZiplinePlayerInfo[] PlayerList;//[Offset: 0x7d0, Size: 0x10]
	bool NeedSegmentInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e1, Size: 0x1]
	float LowerHeight;//[Offset: 0x7e4, Size: 0x4]
	float DevDeltaZ;//[Offset: 0x7e8, Size: 0x4]
	Vector LowerTip;//[Offset: 0x7ec, Size: 0xc]
	Vector HigherTip;//[Offset: 0x7f8, Size: 0xc]
	Vector SegDelta;//[Offset: 0x804, Size: 0xc]
	void SetLaunchMaterialParam();// 0x3eb42c8
	void SetHighlight(bool bHighlight);// 0x3eb42dc
	void SetAttachEndToComponent(SceneComponent* Component, FName SocketName);// 0x3eb4604
	void SetAttachBeginToComponent(SceneComponent* Component, FName SocketName);// 0x3eb4548
	void KickOutAllPlayer();// 0x3eb4400
	bool HasPlayerRiding();// 0x3eb43c8
	float GetTotalLength();// 0x3eb4394
	float GetTileMaterial();// 0x3eb4360
	float GetRidePoint(out const Vector ori, out const Vector Dir, out Vector res, out float T, float playerHeight, bool IsInAir, out float MinDist, bool bIsTPP);// 0x3eb46c0
	Vector GetLaunchMiddlePos(float Time);// 0x3eb4414
	void ConstructZipline();// 0x3eb44b0
	void ClearAllDownInfo();// 0x3eb449c
	void ChangeVisibility(bool bNewIsVisible);// 0x3eb44c4

--------------------------------
Class: ComponentReference
	Actor* OtherActor;//[Offset: 0x0, Size: 0x8]
	FName ComponentProperty;//[Offset: 0x8, Size: 0x8]
	FString PathToComponent;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ZiplineDownInfo
	enum DownPreset;//[Offset: 0x0, Size: 0x1]
	bool bMaintainSlideVel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bLimitSlideVel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float MaxSlideVel;//[Offset: 0x4, Size: 0x4]
	enum HorizonDirType;//[Offset: 0x8, Size: 0x1]
	float ConstYaw;//[Offset: 0xc, Size: 0x4]
	float HorizonVel;//[Offset: 0x10, Size: 0x4]
	bool bJumpOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float VelZ;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ZiplineTipInfo
	float AutoDownDist;//[Offset: 0x0, Size: 0x4]
	float AutoDirDist;//[Offset: 0x4, Size: 0x4]
	ZiplineDownInfo DownInfo;//[Offset: 0x8, Size: 0x1c]

--------------------------------
Class: ZiplineElevatorInfo
	float AutoDownT;//[Offset: 0x0, Size: 0x4]
	float DeltaRadius;//[Offset: 0x4, Size: 0x4]
	ZiplineDownInfo DownInfo;//[Offset: 0x8, Size: 0x1c]

--------------------------------
Class: ZiplinePoint
	Vector Position;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	Vector Accelerate;//[Offset: 0x18, Size: 0xc]
	Vector OldPosition;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: ZiplinePlayerInfo
	ApexCharacter* Player;//[Offset: 0x0, Size: 0x8]
	float LengthT;//[Offset: 0x8, Size: 0x4]
	float RideTime;//[Offset: 0xc, Size: 0x4]
	float VelValue;//[Offset: 0x10, Size: 0x4]
	Vector StartPos;//[Offset: 0x14, Size: 0xc]
	Rotator StartRot;//[Offset: 0x20, Size: 0xc]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Rotator EndRot;//[Offset: 0x38, Size: 0xc]
	bool bToEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bIsOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bNeedFirstJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	bool bNeedSetView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 0x1]
	Vector CurVelocity;//[Offset: 0x48, Size: 0xc]
	Vector LastPos;//[Offset: 0x54, Size: 0xc]
	bool bHasReachZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bNeedPlayRushAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	int Index;//[Offset: 0x64, Size: 0x4]
	bool bIsFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bBlockDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	bool bBlockMaintainSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 0x1]
	float BlockUpperZ;//[Offset: 0x6c, Size: 0x4]
	float ViewTurnValue;//[Offset: 0x70, Size: 0x4]
	float AIDownT;//[Offset: 0x74, Size: 0x4]
	float NowT;//[Offset: 0x78, Size: 0x4]
	float BetweenSpaceOffset;//[Offset: 0x7c, Size: 0x4]
	float RideTimeCopy;//[Offset: 0x80, Size: 0x4]
	float ServerTime;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: CharacterConfigDataAsset.DataAsset.Object
	byte CfgRespawnTimeoutSec;//[Offset: 0x30, Size: 0x1]
	byte CfgRespawnTeammateTimeSec;//[Offset: 0x31, Size: 0x1]
	float DeathFadeOutTime;//[Offset: 0x34, Size: 0x4]
	float ForbidEmojiAnimationTime;//[Offset: 0x38, Size: 0x4]
	float CfgDrugVoiceCDTime;//[Offset: 0x3c, Size: 0x4]
	float CheckInsideHeatShieldFrequency;//[Offset: 0x40, Size: 0x4]
	float CfgTotemRecallHealthMax;//[Offset: 0x44, Size: 0x4]
	float DeathDestroyTime;//[Offset: 0x48, Size: 0x4]
	float OffScreenDistance;//[Offset: 0x4c, Size: 0x4]
	float OffScreenInnerRadius;//[Offset: 0x50, Size: 0x4]
	float CfgDyingHealthMax;//[Offset: 0x54, Size: 0x4]
	float CfgDyingInvincible;//[Offset: 0x58, Size: 0x4]
	float CfgRescuingTimeSec;//[Offset: 0x5c, Size: 0x4]
	float CfgRescueSelfTimeSec;//[Offset: 0x60, Size: 0x4]
	float KillAudioCd;//[Offset: 0x64, Size: 0x4]
	float KnockdownShieldOnSpeedScale;//[Offset: 0x68, Size: 0x4]
	float InspectHandsAnim1Weight;//[Offset: 0x6c, Size: 0x4]
	float InspectHandsAnim2Weight;//[Offset: 0x70, Size: 0x4]
	CurveFloat* DeathFadeOutCurve;//[Offset: 0x78, Size: 0x8]
	class PlayerTombBox* TombBoxClass;//[Offset: 0x80, Size: 0x8]
	FString KnockdownInstigatorAudio;//[Offset: 0x88, Size: 0x10]
	FString KnockdownVictimAudio;//[Offset: 0x98, Size: 0x10]
	FString DeathInstigatorAudio;//[Offset: 0xa8, Size: 0x10]
	FString DeathVictimAudio;//[Offset: 0xb8, Size: 0x10]
	FString InstigatorKillAudio;//[Offset: 0xc8, Size: 0x10]
	FString BodyFallHumanAudio;//[Offset: 0xd8, Size: 0x10]
	FString BodyFallAndroidAudio;//[Offset: 0xe8, Size: 0x10]
	FString EnemyTeamKillAudio;//[Offset: 0xf8, Size: 0x10]
	FString TeamKillAudio;//[Offset: 0x108, Size: 0x10]
	uint16[] CfgDyingTimeoutSec;//[Offset: 0x118, Size: 0x10]
	FName[] MaterialParameterNames;//[Offset: 0x128, Size: 0x10]
	DeathRagDollParams DeathRagDollParams;//[Offset: 0x138, Size: 0x18]
	<enum,bool> AndroidDefine;//[Offset: 0x150, Size: 0x50]
	<enum,float> RescueAlongNormalOffset;//[Offset: 0x1a0, Size: 0x50]
	<enum,UseReplicatorAnimMontageData> UseRelicatorLegendConfig;//[Offset: 0x1f0, Size: 0x50]
	UseReplicatorAnimMontageData DefaultUseRelicatorLegendConfig;//[Offset: 0x240, Size: 0x50]
	FName IdleMontageSectionName;//[Offset: 0x290, Size: 0x8]
	float FPPBlendOutTime;//[Offset: 0x298, Size: 0x4]
	float TPPBlendOutTime;//[Offset: 0x29c, Size: 0x4]
	float StartOperateLength;//[Offset: 0x2a0, Size: 0x4]
	int FilterID;//[Offset: 0x2a4, Size: 0x4]
	float InterpToPostionTime;//[Offset: 0x2a8, Size: 0x4]
	int UpGradeExp;//[Offset: 0x2ac, Size: 0x4]
	AkAudioEvent* UseReplicatorSound1P;//[Offset: 0x2b0, Size: 0x8]
	AkAudioEvent* UseReplicatorSound3P;//[Offset: 0x2b8, Size: 0x8]

--------------------------------
Class: PlayerTombBox.DynamicMovementActor.Actor.Object
	BoxComponent* RootBox;//[Offset: 0x2d8, Size: 0x8]
	WidgetComponent* BannerWidget;//[Offset: 0x2e0, Size: 0x8]
	UIWidgetRes UIWidgetRes;//[Offset: 0x2f0, Size: 0x50]
	AkAudioEvent* TombBoxAkEvent;//[Offset: 0x340, Size: 0x8]
	TombBoxWidgetComponent* TombBoxWidgetComponent;//[Offset: 0x348, Size: 0x8]
	Vector HostVelocity;//[Offset: 0x350, Size: 0xc]
	HitResult UnrealHit;//[Offset: 0x35c, Size: 0x88]
	ApexPlayerState* WeakApexPlayerState;//[Offset: 0x3e4, Size: 0x8]
	uint32[] DisableSignalPkArray;//[Offset: 0x3f0, Size: 0x10]
	bool bNeedSignalCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	enum RegionType;//[Offset: 0x401, Size: 0x1]
	bool bHaveAuthRespawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 0x1]
	bool bRespawnBannerExpired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 0x1]
	bool bInitIsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x406, Size: 0x1]
	FName TombName;//[Offset: 0x408, Size: 0x8]
	uint32 TargetPlayerKey;//[Offset: 0x410, Size: 0x4]
	uint32 TeamIdx;//[Offset: 0x414, Size: 0x4]
	ApexCharacter* DamageCauser;//[Offset: 0x418, Size: 0x8]
	int DeadTime;//[Offset: 0x420, Size: 0x4]
	int Quality;//[Offset: 0x424, Size: 0x4]
	uint32 FlagId;//[Offset: 0x428, Size: 0x4]
	bool bNeedDestroyCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 0x1]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42d, Size: 0x1]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x430, Size: 0x8]
	int TombBoxInstanceID;//[Offset: 0x438, Size: 0x4]
	ParticleSystem* DestroyEffectTemplate;//[Offset: 0x440, Size: 0x8]
	float DestroyDelay;//[Offset: 0x448, Size: 0x4]
	float ForceMoveEndTime;//[Offset: 0x44c, Size: 0x4]
	Vector FindNearestNavMeshPointExtent;//[Offset: 0x450, Size: 0xc]
	TimerHandle ForceMoveEndTimerHandle;//[Offset: 0x460, Size: 0x8]
	MaterialInstanceDynamic*[] TombBoxQualityEffectMaterials;//[Offset: 0x468, Size: 0x10]
	FString QualityEffectMaterialName;//[Offset: 0x478, Size: 0x10]
	Color[] QualityEffectColor;//[Offset: 0x488, Size: 0x10]
	float OutlineFillDist;//[Offset: 0x498, Size: 0x4]
	bool bOutlineFill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 0x1]
	int[] OutlineIdArray;//[Offset: 0x4a0, Size: 0x10]
	int[] OutlineFillIdArray;//[Offset: 0x4b0, Size: 0x10]
	class TargetPoint* LeviathanTargetPointClass;//[Offset: 0x4c0, Size: 0x8]
	float LeviathanRadius;//[Offset: 0x4c8, Size: 0x4]
	float StopPhysicsLinearVelocitySquared;//[Offset: 0x4cc, Size: 0x4]
	float TotalDeltaTime;//[Offset: 0x4d0, Size: 0x4]
	float OverlapTime;//[Offset: 0x4d4, Size: 0x4]
	uint32[] OverlapIndexArray;//[Offset: 0x4d8, Size: 0x10]
	bool bPawnBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 0x1]
	DynamicMovementComponent_Projetile* Projetile;//[Offset: 0x4f0, Size: 0x8]
	float FallMaxSpeed;//[Offset: 0x4f8, Size: 0x4]
	float RandomMaxYaw;//[Offset: 0x4fc, Size: 0x4]
	float RandomMaxPitch;//[Offset: 0x500, Size: 0x4]
	float GroundFreezeDelay;//[Offset: 0x504, Size: 0x4]
	PickUpListWrapperActor* SeekerPickupListWrapper;//[Offset: 0x508, Size: 0x8]
	int SeekerLegendId;//[Offset: 0x510, Size: 0x4]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x518, Size: 0x8]
	float ImpulseForce;//[Offset: 0x528, Size: 0x4]
	void UpdateOutline();// 0x3d45880
	void UpdateBeaconLocation();// 0x3d46314
	void UnRegisterToAIController(ApexAIController* AIC);// 0x3d45fe0
	void ThrowOutTombBox(ApexCharacter* TargetCharacter);// 0x3d45dc8
	void ThrowOut(ApexCharacter* TargetCharacter);// 0x3d4633c
	void SetUIWidgetVisibility(bool IsShow);// 0x3d46290
	void ServerLaunchTombBox(Vector LaunchVelocity);// 0x3d455b4
	void RPCMulticastShowTombBoxDestroy();// 0x3d45864
	void OnTombBoxMoveEnd(out const HitResult Hit, bool bServer, Actor* HitOwner);// 0x3d45aa8
	void OnRepQuality();// 0x3d45894
	void OnRepPlayerState();// 0x3d46328
	void OnRep_RegionType();// 0x3d45fa4
	void OnRep_InitIsEmpty();// 0x3d4583c
	void OnPickupListWrapper(int ItemDataIndex, int LeftCount);// 0x3d45c64
	void OnInsertPickupData(int ItemDataIndex);// 0x3d45be8
	void OnHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x3d450c8
	void OnGotRecoverBannerEvent(uint32 InPlayerKey, uint32 RecoverBannerPlayerKey);// 0x3d458a8
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3d45270
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3d453b4
	void OnBattleBehStateChanged(enum PrevState, enum CurState);// 0x3d45964
	void InitUIWidget();// 0x3d4627c
	PickUpListWrapperActor* InitTombBoxPickUpList(out const PickUpItemData[] ItemDataList, bool bIsSeekerPickUpList);// 0x3d45e44
	void InitTombBox(ApexCharacter* TargetPlayer, out const PickUpItemData[] ItemDataList, enum Reason);// 0x3d4605c
	void ImpactGround(int8 SurfaceType);// 0x3d45a24
	void HandleMoveCompStop(out const HitResult HitInfo);// 0x3d45d20
	int GetTargetPlayerKey();// 0x3d45820
	Vector GetNearestMapEdgePoint(Vector BasePoint);// 0x3d45630
	Vector GetGroundPosition(Vector StartOrigin, Vector EndOrigin);// 0x3d45750
	Vector GetClosetAirdropPoint(Vector BaseOrigin);// 0x3d456c0
	void ForceMoveEnd();// 0x3d45850
	void DisableSignal();// 0x3d45fcc
	void CheckDisableSignal();// 0x3d45fb8
	bool CanShowUIWidget(int TargetTeamIdx);// 0x3d461f4

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x5b0, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x5b1, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x5b8, Size: 0x8]
	IntPoint DrawSize;//[Offset: 0x5c0, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9, Size: 0x1]
	float RedrawTime;//[Offset: 0x5cc, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x5d8, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x5ec, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f5, Size: 0x1]
	enum WindowVisibility;//[Offset: 0x5f6, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f7, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x5f8, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x600, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x610, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x620, Size: 0x4]
	enum BlendMode;//[Offset: 0x624, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x626, Size: 0x1]
	bool bWS3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x627, Size: 0x1]
	float WS3DUIBaseOffset;//[Offset: 0x628, Size: 0x4]
	bool bDraw3DUIAfterPostProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62d, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x630, Size: 0x8]
	BodySetup* BodySetup;//[Offset: 0x658, Size: 0x8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x660, Size: 0x8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x668, Size: 0x8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x670, Size: 0x8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x678, Size: 0x8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x680, Size: 0x8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x688, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x690, Size: 0x8]
	TextureRenderTarget2D* WS3DUIRenderTarget;//[Offset: 0x698, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x6a0, Size: 0x8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a9, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x6ac, Size: 0x8]
	int LayerZOrder;//[Offset: 0x6b4, Size: 0x4]
	enum GeometryMode;//[Offset: 0x6b8, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x6bc, Size: 0x4]
	void SetWindowVisibility(enum InVisibility);// 0x541977c
	void SetWindowFocusable(bool bInWindowFocusable);// 0x5419814
	void SetWidgetSpace(enum NewSpace);// 0x54199dc
	void SetWidget(UserWidget* Widget);// 0x541a0e8
	void SetTwoSided(const bool bWantTwoSided);// 0x5419de0
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x5419c4c
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x5419d44
	void SetRedrawTime(float InRedrawTime);// 0x5419a70
	void SetPivot(out const Vector2D InPivot);// 0x5419ba0
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x541a06c
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x5419fcc
	void SetGeometryMode(enum InGeometryMode);// 0x5419948
	void SetDrawSize(Vector2D Size);// 0x5419eb8
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x5419b04
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x54198b4
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x5419cc8
	void RequestRedraw();// 0x5419e9c
	enum GetWindowVisiblility();// 0x54197f8
	bool GetWindowFocusable();// 0x5419898
	enum GetWidgetSpace();// 0x5419a54
	UserWidget* GetUserWidgetObject();// 0x541a1d4
	bool GetTwoSided();// 0x5419e64
	bool GetTickWhenOffscreen();// 0x5419dc4
	TextureRenderTarget2D* GetRenderTarget();// 0x541a1a0
	float GetRedrawTime();// 0x5419ae8
	Vector2D GetPivot();// 0x5419c2c
	LocalPlayer* GetOwnerPlayer();// 0x5419f98
	MaterialInstanceDynamic* GetMaterialInstance();// 0x541a16c
	bool GetManuallyRedraw();// 0x541a050
	enum GetGeometryMode();// 0x54199c0
	Vector2D GetDrawSize();// 0x5419f64
	bool GetDrawAtDesiredSize();// 0x5419b84
	float GetCylinderArcAngle();// 0x541992c
	Vector2D GetCurrentDrawSize();// 0x5419f30

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xe4, Size: 0x4]
	int SizeY;//[Offset: 0xe8, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xec, Size: 0x10]
	byte AddressX;//[Offset: 0xfc, Size: 0x1]
	byte AddressY;//[Offset: 0xfd, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfe, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfe, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfe, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0xff, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	byte MipsSamplerFilter;//[Offset: 0x101, Size: 0x1]
	byte MipsAddressU;//[Offset: 0x102, Size: 0x1]
	byte MipsAddressV;//[Offset: 0x103, Size: 0x1]
	byte OverrideFormat;//[Offset: 0x104, Size: 0x1]

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0xdc, Size: 0x4]

--------------------------------
Class: UIWidgetRes
	class UserWidget* UserWidget;//[Offset: 0x0, Size: 0x8]
	FName AttachSocket;//[Offset: 0x8, Size: 0x8]
	Transform Trans;//[Offset: 0x10, Size: 0x30]
	Vector2D DrawSize;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: TombBoxWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ApexPlayerState.PlayerState.Info.Actor.Object
	uint32[] ForceAllowDamagePlayerKeys;//[Offset: 0x368, Size: 0x10]
	float Perc2Opacity;//[Offset: 0x378, Size: 0x4]
	enum CacheCameraMode;//[Offset: 0x37c, Size: 0x1]
	FName PlayerType;//[Offset: 0x380, Size: 0x8]
	int PlayerKey;//[Offset: 0x388, Size: 0x4]
	uint64 UID;//[Offset: 0x390, Size: 0x8]
	BackpackItemInfo[] PlayerItemInfos;//[Offset: 0x398, Size: 0x10]
	bool IsMicroOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	int TeamID;//[Offset: 0x3ac, Size: 0x4]
	int TeamIdx;//[Offset: 0x3b0, Size: 0x4]
	FString CorpsName;//[Offset: 0x3b8, Size: 0x10]
	FString CorpsNickName;//[Offset: 0x3c8, Size: 0x10]
	int LegendId;//[Offset: 0x3d8, Size: 0x4]
	FString ZoneID;//[Offset: 0x3e0, Size: 0x10]
	BannerData CurrentBannerData;//[Offset: 0x3f0, Size: 0x48]
	BannerData[] LegendBannerDataArray;//[Offset: 0x438, Size: 0x10]
	delegate OnLegendIdChange;//[Offset: 0x448, Size: 0x10]
	int LegendSkin;//[Offset: 0x458, Size: 0x4]
	<int,int> DefaultLegendSkinMap;//[Offset: 0x460, Size: 0x50]
	<int,LegendEmotePaintingInfo> EmotePaintData;//[Offset: 0x4b0, Size: 0x50]
	int[] CurrentEmotePaintingData;//[Offset: 0x500, Size: 0x10]
	bool bSelecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511, Size: 0x1]
	bool bIsUseSecIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x512, Size: 0x1]
	MpWeaponInfo MpWeaponInfo;//[Offset: 0x518, Size: 0x30]
	LegendSkinData[] ValidSkinArray;//[Offset: 0x550, Size: 0x10]
	int LegendLevel;//[Offset: 0x560, Size: 0x4]
	int CampID;//[Offset: 0x564, Size: 0x4]
	int CampIdx;//[Offset: 0x568, Size: 0x4]
	bool bIsRobot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 0x1]
	bool bIsSingleParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56d, Size: 0x1]
	int[] ValidLegendArray;//[Offset: 0x570, Size: 0x10]
	int[] LimitValidLegendArray;//[Offset: 0x580, Size: 0x10]
	PlayerEquipSkinInfo[] EquipSkinArray;//[Offset: 0x590, Size: 0x10]
	int ChooseLegendID;//[Offset: 0x5a0, Size: 0x4]
	int ConfirmLegendID;//[Offset: 0x5a4, Size: 0x4]
	Vector ServerLocation;//[Offset: 0x5a8, Size: 0xc]
	GameModePlayerBattleInfoGroup BattleInfoGroup;//[Offset: 0x5b4, Size: 0x14]
	int SegmentLevel;//[Offset: 0x5c8, Size: 0x4]
	int Rating;//[Offset: 0x5cc, Size: 0x4]
	int WarmScore;//[Offset: 0x5d0, Size: 0x4]
	int KDERAverage;//[Offset: 0x5d4, Size: 0x4]
	int KDERNum;//[Offset: 0x5d8, Size: 0x4]
	int AILevel;//[Offset: 0x5dc, Size: 0x4]
	BrilliantInfo BrilliantInfo;//[Offset: 0x5e0, Size: 0x24]
	bool bSubJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604, Size: 0x1]
	FString IPcountry;//[Offset: 0x608, Size: 0x10]
	FString VoiceID;//[Offset: 0x618, Size: 0x10]
	int ReplaceUID;//[Offset: 0x62c, Size: 0x4]
	int DailyWinTime;//[Offset: 0x630, Size: 0x4]
	int FinisherID;//[Offset: 0x634, Size: 0x4]
	<int,int> LegendToFinisherID;//[Offset: 0x638, Size: 0x50]
	int DefaultEquipIndex;//[Offset: 0x688, Size: 0x4]
	int LoadoutID;//[Offset: 0x68c, Size: 0x4]
	int GameNum;//[Offset: 0x690, Size: 0x4]
	int BRGameNum;//[Offset: 0x694, Size: 0x4]
	int sub_mode_group_game_num;//[Offset: 0x698, Size: 0x4]
	uint32 RoomPlayerCount;//[Offset: 0x69c, Size: 0x4]
	int64 BanOBEndTime;//[Offset: 0x6a0, Size: 0x8]
	FString BanOBReasonText;//[Offset: 0x6a8, Size: 0x10]
	int64 BanChatEndTime;//[Offset: 0x6b8, Size: 0x8]
	int64 BanChatNoPerceptionEndTime;//[Offset: 0x6c0, Size: 0x8]
	bool bIsCommander;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 0x1]
	BattleItemData[] AmmoItemList;//[Offset: 0x6e0, Size: 0x10]
	int ArmorUpGradeCount;//[Offset: 0x6f0, Size: 0x4]
	SimpleTrackerData[] TrackerDetailArray;//[Offset: 0x6f8, Size: 0x10]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 0x1]
	ApexPlayerState*[] TeamMatePlayerStates;//[Offset: 0x710, Size: 0x10]
	ApexTeamState* TeamState;//[Offset: 0x720, Size: 0x8]
	ApexPlayerState*[] CampMatePlayerStates;//[Offset: 0x728, Size: 0x10]
	JumpTailID JumpTailID;//[Offset: 0x790, Size: 0x20]
	JumpActionData JumpActionData;//[Offset: 0x7b0, Size: 0x20]
	enum CurrentBattleBehState;//[Offset: 0x7d0, Size: 0x1]
	enum PreviousBattleBehState;//[Offset: 0x7d1, Size: 0x1]
	delegate BattleBehStateChangedEvent;//[Offset: 0x7d8, Size: 0x10]
	delegate GotRecoverBannerEvent;//[Offset: 0x7e8, Size: 0x10]
	enum CurrentBannerState;//[Offset: 0x7f8, Size: 0x1]
	PlayerStatePartInfo PlayerStatePartInfo;//[Offset: 0x7fc, Size: 0x28]
	bool bOnRespawnTeammateEndSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 0x1]
	bool bOnRescuingEndSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x825, Size: 0x1]
	uint16 DyingCount;//[Offset: 0x826, Size: 0x2]
	uint16 DyingTimeoutSec;//[Offset: 0x828, Size: 0x2]
	uint16 DyingRealtimeSec;//[Offset: 0x82a, Size: 0x2]
	delegate OnTeammateEnterDying;//[Offset: 0x830, Size: 0x10]
	DamageEvent DyingDamageEvent;//[Offset: 0x840, Size: 0x10]
	Controller* DyingEventInstigator;//[Offset: 0x850, Size: 0x8]
	Actor* DyingDamageCauser;//[Offset: 0x858, Size: 0x8]
	TimerHandle DyingInvincibleTH;//[Offset: 0x860, Size: 0x8]
	ApexCharacterMapFlags* ApexCharacterMapFlags;//[Offset: 0x868, Size: 0x8]
	byte CloseFlagDynamicOutLineSignal;//[Offset: 0x870, Size: 0x1]
	uint16 RespawningTimeoutSec;//[Offset: 0x872, Size: 0x2]
	uint16 ShownRespawningTimeoutSec;//[Offset: 0x874, Size: 0x2]
	uint16 RespawningRealtimeSec;//[Offset: 0x876, Size: 0x2]
	uint16 ShownRespawningRealtimeSec;//[Offset: 0x878, Size: 0x2]
	bool bTeamHoldRecoverBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87a, Size: 0x1]
	bool bSwitchHoldBannerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87b, Size: 0x1]
	byte RespawnTeammateRealTimeSec;//[Offset: 0x87c, Size: 0x1]
	ApexRespawnBeacon* CapturedRespawnBeacon;//[Offset: 0x880, Size: 0x8]
	bool bRescueOtherSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x898, Size: 0x1]
	float BeingRescueTimeSec;//[Offset: 0x89c, Size: 0x4]
	float BeingRescueRealTimeSec;//[Offset: 0x8a0, Size: 0x4]
	int RescuingSourcePlayerKey;//[Offset: 0x8a4, Size: 0x4]
	int CachedRescuingTargetPlayerKey;//[Offset: 0x8a8, Size: 0x4]
	Actor* RescueJoinObject;//[Offset: 0x8ac, Size: 0x8]
	bool bAutonomousGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b5, Size: 0x1]
	int[] KillMePlayerKeySet;//[Offset: 0x8b8, Size: 0x10]
	ApexCharacter* CharacterOwner;//[Offset: 0x920, Size: 0x8]
	bool bCanShowTreasureDoorOnMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x978, Size: 0x1]
	int CachedFinisherTargetPlayerKey;//[Offset: 0x97c, Size: 0x4]
	bool bIsCharacterInCirclePoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x980, Size: 0x1]
	bool bIsNetLost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x990, Size: 0x1]
	float PingStatusRefreshInterval;//[Offset: 0x9a0, Size: 0x4]
	float BadPingThreshold;//[Offset: 0x9a4, Size: 0x4]
	float NetLostPingValue;//[Offset: 0x9a8, Size: 0x4]
	bool bIsNetBadPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ac, Size: 0x1]
	uint32 AIHostPlayerKey;//[Offset: 0x9b8, Size: 0x4]
	bool bAIHosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bc, Size: 0x1]
	int AIHostFunc1;//[Offset: 0x9c0, Size: 0x4]
	int AIHostFunc2;//[Offset: 0x9c4, Size: 0x4]
	int AIHostFunc3;//[Offset: 0x9c8, Size: 0x4]
	int AIHostFunc4;//[Offset: 0x9cc, Size: 0x4]
	int AIHostFunc5;//[Offset: 0x9d0, Size: 0x4]
	int LootAreaID;//[Offset: 0x9d8, Size: 0x4]
	Vector DeadLocation;//[Offset: 0x9f8, Size: 0xc]
	int[] UseHarvesterMapIndex;//[Offset: 0xa08, Size: 0x10]
	FString OpenId;//[Offset: 0xa18, Size: 0x10]
	int64 OriginalGameID;//[Offset: 0xa28, Size: 0x8]
	InGameActivityPlayerData[] InGameActivityPlayerDataArray;//[Offset: 0xa30, Size: 0x10]
	InGameActivityPickupData[] ActivityPickupDataArray;//[Offset: 0xa40, Size: 0x10]
	InGameActivityPickupData[] ClientActivityPickupDatas;//[Offset: 0xa50, Size: 0x10]
	int RespawnTag;//[Offset: 0xa60, Size: 0x4]
	int ReSpawnNumber;//[Offset: 0xa64, Size: 0x4]
	int SkillAssistShowType;//[Offset: 0xa68, Size: 0x4]
	bool bAllSkillAssistEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6c, Size: 0x1]
	SkillAssistData[] SkillAssistArray;//[Offset: 0xa70, Size: 0x10]
	LegendAssistData[] LegendAssistArray;//[Offset: 0xa80, Size: 0x10]
	bool bIsPerkOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa90, Size: 0x1]
	LegendCustomPerksInfo[] PerksPlan;//[Offset: 0xa98, Size: 0x10]
	int SelectPerksPlanIndex;//[Offset: 0xaa8, Size: 0x4]
	<int,LegendCustomPerksPlan> LegendCustomPerksMap;//[Offset: 0xab0, Size: 0x50]
	<int,int> PutOnPerksIndexMap;//[Offset: 0xb00, Size: 0x50]
	DSPlayerGunAmuletInfo[] GunAmuletArray;//[Offset: 0xb50, Size: 0x10]
	void WaitAutonomousPlayerState();// 0x3a099cc
	void UpdateSkillCastTimes(const ApexCharacter* ApexChar, int SkillConfigId, int NewTimes);// 0x3a07dac
	void TryRecoverDeathTipBar();// 0x3a09d08
	void TickRespawnTeammate();// 0x3a08ea8
	void TickRespawning();// 0x3a0904c
	void TickRescuing();// 0x3a086e0
	void TickDying();// 0x3a0950c
	void SyncTeamInfoFromLua();// 0x3a0afbc
	void SynchronizePlayerStatePartInfo();// 0x3a099f4
	Actor* SpawnRespawnAircraft();// 0x3a08d20
	void ShowRetrieveStatusHeadFlags(out const Vector CurLocation, uint16 CurTimeoutSec, uint16 CurShownTimeoutSec);// 0x3a09068
	void ShowAidStatusHeadFlags(uint16 CurDyingCount, uint16 CurTimeoutSec, out const Vector CurLocation, enum InFlag);// 0x3a09300
	void SetSubJoin(bool Value);// 0x3a09474
	void SetSkillAssistEnable(int SkillConfigId, bool bEnable);// 0x3a07614
	void SetSelectingState(bool bNewSelecting);// 0x3a0ace0
	void SetRespawnTag(const int InRespawnTag);// 0x3a077bc
	void SetLegendAssistEnable(int LegendConfigId, bool bEnable);// 0x3a07550
	void SetKillMePlayerKeySet(int KillerKey);// 0x3a08074
	void SetJumpTailID(JumpTailID NewJumpTailID);// 0x3a0a6e4
	void SetJumpActionData(JumpActionData NewJumpActionData);// 0x3a0a2f8
	void SetIsSingleParachute(bool NewIsSingleParachute);// 0x3a0aafc
	void SetFinisherID(int InFinisherID);// 0x3a0aa6c
	void SetDyingDamageInfo(out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x3a0980c
	void SetCloseFlagDynamicOutLine();// 0x3a094f8
	void SetCharacterShieldMax(out const float NewValue);// 0x3a0b668
	void SetCharacterShieldLevel(out const int NewValue);// 0x3a0b5dc
	void SetCharacterShieldHealing(out const float NewValue);// 0x3a0b4c4
	void SetCharacterShield(out const float NewValue);// 0x3a0b6f4
	void SetCharacterHelmetLevel(out const int NewValue);// 0x3a0b550
	void SetCharacterHealthMax(out const float NewValue);// 0x3a0b80c
	void SetCharacterHealthHealing(out const float NewValue);// 0x3a0b780
	void SetCharacterHealth(out const float NewValue);// 0x3a0b898
	void SetAutonomousGameOver(bool bFlag);// 0x3a080f0
	void ServerSwitchCurrentLobaMarketInfo(LobaBlackMarket* SwitchToLobaMarket);// 0x3a0710c
	void ServerSecRespawnFlow(RespawnFlowData RespawnFlowData);// 0x3a08b1c
	void SaveAllSkillCDData(const ApexCharacter* ApexChar, enum SaveReason);// 0x3a07eb4
	void RPC_PlayerExitReason(byte thePlayerExitReason);// 0x3a0ac24
	void RPC_ClientNotifyZoneID(FString InZoneID, int InTeamId, int InCampId, FString InVoiceID);// 0x3a09db4
	void RespawnTeammateSuccess();// 0x3a08d78
	bool RespawnTeammateImmediately(ApexRespawnBeacon* RespawnBeacon);// 0x3a08d94
	void RespawnTeammateFailure();// 0x3a08d5c
	void RespawnTeammateEnd(enum Reason);// 0x3a08e24
	void ResetRespawnTag();// 0x3a077a8
	void RescuingSelfEnd(enum Reason, bool bReviveFlow);// 0x3a08548
	void RescuingEnd(enum Reason, bool bReviveFlow);// 0x3a08610
	bool RescueOtherEnd(enum Reason, Actor* TargetActor, bool bUseRobotRescue);// 0x3a08428
	void RemoveRecoverBanner(int InPlayerKey);// 0x3a08258
	int RecoverBannerNum();// 0x3a08188
	void ReceiveTeamMateDyingLocation(uint32 MatePlayerKey, Vector MateLocation);// 0x3a095d0
	void ReceiveCompletelyDie();// 0x3a08924
	void ReceiveAuthRespawnTimeout();// 0x3a08a84
	void ReceiveAuthRespawnTeammateEnd();// 0x3a08ce8
	void ReceiveAuthRespawnTeammate();// 0x3a08ec4
	void ReceiveAuthRespawning();// 0x3a09184
	void ReceiveAuthRescuingInfo();// 0x3a086fc
	void ReceiveAuthRescuingEnd();// 0x3a08388
	void ReceiveAuthExit(ApexPlayerState* ExitPlayerState);// 0x3a0bb14
	void ReceiveAuthDyingInfo();// 0x3a096b0
	void ProcessBattleBehState();// 0x3a099e0
	bool PlayerSetSkillAssist(int SkillConfigId);// 0x3a074b4
	bool PlayerSetLegendAssist(int LegendConfigId);// 0x3a073a4
	void PingSelfBanner();// 0x3a08f64
	void PickBannerFlow(uint32 InPlayerKey);// 0x3a08aa0
	void PassiveBreakRescuing();// 0x3a0836c
	void OnRep_ValidSkinArray();// 0x43841ec
	void OnRep_ValidLegendArray();// 0x3a09fe0
	void OnRep_TeamMatePlayerStates();// 0x3a09d54
	void OnRep_TeamIdx();// 0x3a09d98
	void OnRep_TeamId();// 0x3a0a01c
	void OnRep_TeamHoldRecoverBanner();// 0x3a09030
	void OnRep_SubJoin();// 0x3a09f18
	void OnRep_SingleParachute();// 0x3a09ff4
	void OnRep_ServerLocation();// 0x3a0aae8
	void OnRep_SelectPerksPlanIndex();// 0x43841ec
	void OnRep_SegmentLevel();// 0x3a09f68
	void OnRep_RespwningRealtimeSec();// 0x3a07cf4
	void OnRep_ReSpawnNumber();// 0x3a07760
	void OnRep_RepUseHarvester(int[] PreArray);// 0x3a078e8
	void OnRep_RepLootAreaID();// 0x3a079c0
	void OnRep_Rating();// 0x43841ec
	void OnRep_PlayerStatePartInfo(PlayerStatePartInfo PrevPartInfo);// 0x3a09a08
	void OnRep_PlayerItemInfos();// 0x3a09f7c
	void OnRep_PlayerBannerState(enum Previous);// 0x3a09b6c
	void OnRep_PerksPlan();// 0x43841ec
	void OnRep_MpWeaponInfo();// 0x3a09f2c
	void OnRep_LoadoutID();// 0x3a09fcc
	void OnRep_LimitValidLegendArray();// 0x43841ec
	void OnRep_LegendSkin();// 0x3a0a044
	void OnRep_LegendLevel();// 0x3a09fa4
	void OnRep_LegendId();// 0x3a09fb8
	void OnRep_IsUseSecIcon();// 0x3a09f40
	void OnRep_IsPerkOpen();// 0x43841ec
	void OnRep_IsCommander();// 0x3a09f90
	void OnRep_HasSendBattleResult();// 0x3a0a9d4
	void OnRep_ForceAllowDamagePlayerKeys();// 0x3a0b398
	void OnRep_FinisherID();// 0x43841ec
	void OnRep_EquipSkinArray();// 0x43841ec
	void OnRep_DyingRealtimeSec();// 0x3a07d08
	void OnRep_DefaultEquipIndex();// 0x3a09f54
	void OnRep_DailyWinTime();// 0x43841ec
	void OnRep_CurrentEmotePaintingData();// 0x3a0ad64
	void OnRep_CurrentBannerData();// 0x43841ec
	void OnRep_ConfirmLegendID();// 0x3a09d1c
	void OnRep_CloseFlagDynamicOutLineSignal();// 0x3a09460
	void OnRep_ChooseLegendID();// 0x3a09d38
	void OnRep_CanShowTreasureDoorOnMiniMap();// 0x3a07c20
	void OnRep_CampMatePlayerStates();// 0x3a0a030
	void OnRep_CampId();// 0x3a0a008
	void OnRep_bIsNetLost();// 0x3a07a24
	void OnRep_bIsNetBadPing();// 0x3a07a10
	void OnRep_BattleInfoGroup();// 0x43841ec
	void OnRep_bAIHosting();// 0x3a079e8
	void OnRep_AIHostPlayerKey();// 0x3a079fc
	void OnRep_AIHostFunc();// 0x3a079d4
	void OnRep_ActivityItemList();// 0x3a07838
	void OnPopupDeathTipBar();// 0x3a09cf4
	void OnPlayerControllerRespawn();// 0x3a07f9c
	void OnPlayerControllerExit();// 0x3a07f88
	void OnAppEnterForeground();// 0x3a0753c
	void NotifyGuidePickBanner();// 0x3a09b58
	bool IsUsingRescueRobots();// 0x3a088ec
	bool IsTeammateHaveSameItem(int ItemID);// 0x3a07c34
	bool IsTeammate(PlayerState* PlayerState, bool bCheckHostile);// 0x3a0b1a0
	bool IsSoloing();// 0x3a08940
	bool IsSkillAssistEnableByConfigId(int idSkillConfig);// 0x3a076d8
	bool IsSkillAssistEnable(int SkillConfigId);// 0x3a0742c
	bool IsPlayerAliveOrDying();// 0x3a0b328
	bool IsPlayerAlive();// 0x3a0b360
	bool IsLegendAssistEnable(int LegendConfigId);// 0x3a0731c
	bool IsInFinisher();// 0x3a07a6c
	bool IsCommand(int InLegendId);// 0x3a0ab9c
	void InvisibleStatusHeadFlags(bool bInvisible);// 0x3a09258
	void HideStatusHeadFlags();// 0x3a092e4
	bool HasRecoverBanner(int InPlayerKey);// 0x3a081bc
	void HandleMsg(enum Msg);// 0x3a07d1c
	void HandleBattleBehState();// 0x3a09c64
	void GuidePickBanner(enum TeamMateBannerState, int TeammatePlayerKey);// 0x3a09a98
	void GetTeamMatePlayerStates(out ApexPlayerState*[] OutList, bool ExcludeMyself);// 0x3a0b0b8
	byte GetTeamMateNum();// 0x3a0a9b4
	bool GetSelectingState();// 0x3a0aca8
	int GetRespawnTag();// 0x3a07774
	JumpTailID GetRawJumpTailID();// 0x3a0a818
	int GetPlayerKey();// 0x3a0afa0
	LegendCustomPerksInfo[] GetPerksPlan();// 0x3a07214
	bool GetMicroOpenByUID(uint64 UserID);// 0x3a0af18
	FText GetLocalizedLegendName();// 0x3a0ae70
	FText GetLegendName(int LegendId);// 0x3a0ad78
	int GetJumpTailID();// 0x3a0a060
	JumpActionData GetJumpActionRawData();// 0x3a0a4dc
	int GetJumpActionDataIndex(int Index);// 0x3a0a0c8
	int[] GetJumpActionData();// 0x3a0a19c
	bool GetIsSingleParachute();// 0x3a0ab80
	enum GetCurBattleBehState();// 0x3a099b0
	float GetCharacterShieldMax();// 0x3a0b9c0
	int GetCharacterShieldLevel();// 0x3a0b98c
	float GetCharacterShieldHealing();// 0x3a0b924
	float GetCharacterShield();// 0x3a0b9f4
	int GetCharacterHelmetLevel();// 0x3a0b958
	float GetCharacterHealthMax();// 0x3a0ba5c
	float GetCharacterHealthHealing();// 0x3a0ba28
	float GetCharacterHealth(float DefaultValue);// 0x3a0ba90
	ApexCharacter* GetCharacter();// 0x3a0b2f4
	void GetCampMatePlayerStates(out ApexPlayerState*[] OutList, bool ExcludeMyself);// 0x3a0afd0
	float GetApexExactPing();// 0x3a07a38
	int GetAmmoNum(int AmmoID);// 0x3a0a9e8
	byte GetAliveTeamMateNum();// 0x3a0a980
	byte GetAliveOrDyingTeamMateNum();// 0x3a0a94c
	void GenAuthRespawnTeammate(ApexRespawnBeacon* CapturedBeacon);// 0x3a08ee0
	void GenAuthRespawningInfo();// 0x3a091a0
	void GenAuthRescuingInfoAsTarget(ApexPlayerState* RescueSource, bool UsingRobot);// 0x3a08718
	void GenAuthRescuingInfo(int OtherPlayerKey, bool UsingRobot);// 0x3a087e8
	void GenAuthGotTreasureKey();// 0x3a07cd8
	void GenAuthGotRecoverBanner(uint32 InPlayerKey);// 0x3a08fac
	void GenAuthFinisherInfo(int OtherPlayerKey);// 0x3a07ba4
	void GenAuthDyingInfo(out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x3a096cc
	void GenAuthDropTreasureKey();// 0x3a07cbc
	void GenAuthCancelRespawnTeammate();// 0x3a08d04
	void GenAuthCancelRescuing(int OtherPlayerKey);// 0x3a083a4
	void GenAuthCancelFinisher(int OtherPlayerKey);// 0x3a07aa4
	void FinisherEnd(enum Reason);// 0x3a07b20
	int FindGunAmuletID(int InGunItemID);// 0x3a07190
	void EnableCloseEyeEffect();// 0x3a0923c
	void DyingTimeout(bool bFollowTeamDead);// 0x3a09544
	void DyingNotifyLocation();// 0x3a09694
	void DyingInvincibleTimeout();// 0x3a09978
	void DyingInvincible();// 0x3a09994
	void DyingFatal();// 0x3a09528
	void DuplicateByAnotherPlayerState(const ApexPlayerState* PlayerState);// 0x3a0b278
	void DisplaySavedSkillCDEnergyDataDebug();// 0x3a07d98
	void CompletelyDie(bool HandleDying);// 0x3a08a00
	void ClientSecRespawnFlow(uint32 Rescuer, byte ReviveFrom);// 0x3a08c20
	void ClientRefreshLobaMarketInfo(LobaBlackMarket* SwitchToLobaMarket, const SearchedPickUpWrapperResult[] PickUpItemDatas);// 0x3a06fc0
	void ClientNotifyPickupActivityItem(const PickupNotifyData PickupNotifyData);// 0x3a0784c
	void ClientAddInteractionLobaMarketInfo(LobaBlackMarket* InLobaMarket, SearchedPickUpWrapperResult PickUpItemData);// 0x3a06cfc
	void ClearRecoverBanner();// 0x3a08244
	void ClearLastTimeCharData();// 0x3a07f74
	void ClearAllBehState();// 0x3a08350
	void CheckTeamRecoverBanner();// 0x3a08174
	bool CheckTeamAlive(ApexPlayerState* Except);// 0x3a08978
	void ChangePlayerBannerState(enum Next);// 0x3a09be8
	void ChangeBattleBehState(enum Next);// 0x3a09c78
	bool CanUseRescueRobot();// 0x3a088b4
	bool CanRescueSelf();// 0x3a091fc
	bool CanGotoRespawn();// 0x3a091bc
	bool CanGotoDying();// 0x3a09938
	void CallOnRep_TeamMatePlayerStates();// 0x3a09d70
	void CallOnRep_TeamIdxFromLua();// 0x3a09d84
	void BreakRescueOther();// 0x3a097f8
	Actor* AuthPingRespawnBeacon();// 0x3a08f78
	void AuthExit();// 0x3a0bb98
	void ApplyLegendRes_Notify(int TeamIndex, int ApplyLegendID);// 0x43841ec
	void ApplyLegendRes(int TeamIndex, int ApplyLegendID);// 0x3a07fb0
	void AddRecoverBanner(int InPlayerKey);// 0x3a082d4
	void AddCharacterShield(out const float AddValue);// 0x3a0b3ac
	void AddCharacterHealth(out const float AddValue);// 0x3a0b438

--------------------------------
Class: BackpackItemInfo
	int AmmoID;//[Offset: 0x0, Size: 0x4]
	int count;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BannerData
	int LegendId;//[Offset: 0x0, Size: 0x4]
	int SkinId;//[Offset: 0x4, Size: 0x4]
	int FrameID;//[Offset: 0x8, Size: 0x4]
	int PosID;//[Offset: 0xc, Size: 0x4]
	FString PlayerName;//[Offset: 0x10, Size: 0x10]
	int KillNum;//[Offset: 0x20, Size: 0x4]
	int PlayerKey;//[Offset: 0x24, Size: 0x4]
	ServerBadgeData[] BadgeDataArray;//[Offset: 0x28, Size: 0x10]
	ServerTrackerData[] TrackerDataArray;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ServerBadgeData
	int BadgeID;//[Offset: 0x0, Size: 0x4]
	int Process;//[Offset: 0x4, Size: 0x4]
	int Status;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ServerTrackerData
	int TrackerID;//[Offset: 0x0, Size: 0x4]
	int Process;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LegendEmotePaintingInfo
	int[] EmotePaintingID;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MpWeaponInfo
	MpWeaponUseTimeData[] WeaponUseTimeMap;//[Offset: 0x0, Size: 0x10]
	MpWeaponFittingData[] FittingDataArray;//[Offset: 0x10, Size: 0x10]
	int[] LastWeaponArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MpWeaponUseTimeData
	int ID;//[Offset: 0x0, Size: 0x4]
	int UseTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MpWeaponFittingData
	int ID;//[Offset: 0x0, Size: 0x4]
	int WeaponFittingItemID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LegendSkinData
	int LegendSkinID;//[Offset: 0x0, Size: 0x4]
	bool IsFavor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: PlayerEquipSkinInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int SkinId;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameModePlayerBattleInfoGroup
	GameModePlayerLastBattleInfo LastBattleInfo;//[Offset: 0x0, Size: 0x14]

--------------------------------
Class: GameModePlayerLastBattleInfo
	int Rank;//[Offset: 0x0, Size: 0x4]
	int TeamRank;//[Offset: 0x4, Size: 0x4]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DamageAmount;//[Offset: 0xc, Size: 0x4]
	int SurviveTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BrilliantInfo
	float ComboKillAvg;//[Offset: 0x0, Size: 0x4]
	float HeadShotRateAvg;//[Offset: 0x4, Size: 0x4]
	float DamageTImeRecoveryHPAvg;//[Offset: 0x8, Size: 0x4]
	float VerticalDamageAvg;//[Offset: 0xc, Size: 0x4]
	float BehiindDamageAvg;//[Offset: 0x10, Size: 0x4]
	float KillAvg;//[Offset: 0x14, Size: 0x4]
	float AssistAvg;//[Offset: 0x18, Size: 0x4]
	float DamageAvg;//[Offset: 0x1c, Size: 0x4]
	int GameNum;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BattleItemData.ItemData
	int count;//[Offset: 0x88, Size: 0x4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x90, Size: 0x10]
	bool BackpackSlotIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	BattleItemFeatureData FeatureData;//[Offset: 0xa4, Size: 0x20]
	bool bCanUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	ItemAssociation[] Associations;//[Offset: 0xc8, Size: 0x10]
	int DeriveID;//[Offset: 0xd8, Size: 0x4]
	bool Fixed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]

--------------------------------
Class: ItemData
	ItemDefineID DefineID;//[Offset: 0x8, Size: 0x10]
	FText Name;//[Offset: 0x18, Size: 0x18]
	FText Desc;//[Offset: 0x30, Size: 0x18]
	FString SmallIcon;//[Offset: 0x48, Size: 0x10]
	FString BigIcon;//[Offset: 0x58, Size: 0x10]
	int SubType;//[Offset: 0x68, Size: 0x4]
	int MaxCount;//[Offset: 0x6c, Size: 0x4]
	ItemHandleBase* ItemHandle;//[Offset: 0x70, Size: 0x8]
	int ProgressBarCount;//[Offset: 0x78, Size: 0x4]
	int StackCount;//[Offset: 0x7c, Size: 0x4]
	int ItemQuality;//[Offset: 0x80, Size: 0x4]
	bool bBackpackInclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]

--------------------------------
Class: BattleItemFeatureData
	float UnitWeight;//[Offset: 0x0, Size: 0x4]
	int MaxCount;//[Offset: 0x4, Size: 0x4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int SortingPriority;//[Offset: 0x10, Size: 0x4]
	int ItemType;//[Offset: 0x14, Size: 0x4]
	int ItemQuality;//[Offset: 0x18, Size: 0x4]
	int ToolbarWeight;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SimpleTrackerData
	float Value;//[Offset: 0x0, Size: 0x4]
	int TrackerID;//[Offset: 0x4, Size: 0x4]
	int LegendId;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ApexTeamState.Info.Actor.Object
	ApexPlayerState*[] TeamMembers;//[Offset: 0x250, Size: 0x10]
	int TeamID;//[Offset: 0x260, Size: 0x4]
	TeamEventFlowManager* TeamEventFlowManager;//[Offset: 0x268, Size: 0x8]
	TeamStateMapComponent* TeamStateMap;//[Offset: 0x270, Size: 0x8]
	bool IsInTeam(Controller* Controller);// 0x3a2f8fc

--------------------------------
Class: TeamEventFlowManager.EventFlowManager.ActorComponent.Object
	UserWidget* EventFlowDebugPanel;//[Offset: 0x1d8, Size: 0x8]

--------------------------------
Class: EventFlowManager.ActorComponent.Object
	<EventFlowBase*> PreUnderwayEventFlowList;//[Offset: 0xf0, Size: 0x50]
	EventFlowBase*[] UnderwayEventFlowList;//[Offset: 0x140, Size: 0x10]
	EventFlowBase*[] PreFinishedEventFlowList;//[Offset: 0x150, Size: 0x10]
	EventFlowBase*[] FinishedEventFlowList;//[Offset: 0x160, Size: 0x10]
	delegate OnEventFlowActived;//[Offset: 0x170, Size: 0x10]
	delegate OnEventFlowFinished;//[Offset: 0x180, Size: 0x10]
	delegate OnUnderwayEventFlowRemoved;//[Offset: 0x190, Size: 0x10]
	delegate OnFinishedEventFlowRemoved;//[Offset: 0x1a0, Size: 0x10]
	EventFlowElementBase*[] TickableElements;//[Offset: 0x1b0, Size: 0x10]
	class EventFlowBase* SupportEventFlowType;//[Offset: 0x1c0, Size: 0x8]
	void RemoveEventFlowInstance(EventFlowBase* EventFlowInstance);// 0x23066b4
	void RemoveEventFlow(class EventFlowBase EventFlow);// 0x2306638
	void OnUnderwayEventFlowRemoved__DelegateSignature(EventFlowBase* EventFlow);// 0x43841ec
	void OnRep_UnderwayEventFlowList();// 0x23067c0
	void OnRep_FinishedEventFlowList();// 0x23067ac
	void OnFinishedEventFlowRemoved__DelegateSignature(EventFlowBase* EventFlow);// 0x43841ec
	void OnEventFlowFinished__DelegateSignature(EventFlowBase* EventFlow);// 0x43841ec
	void OnEventFlowActived__DelegateSignature(EventFlowBase* EventFlow);// 0x43841ec
	bool IsEventFlowExistInUnderwayList(class EventFlowBase EventFlow);// 0x23065b0
	bool IsEventFlowExistInFinishList(class EventFlowBase EventFlow);// 0x2306528
	bool IsEventFlowExist(class EventFlowBase EventFlow);// 0x23064a0
	void ActiveEventFlowInstance(EventFlowBase* EventFlowInstance);// 0x2306730

--------------------------------
Class: EventFlowBase.Object
	EventFlowManager* Owner;//[Offset: 0x28, Size: 0x8]
	enum EventFlowState;//[Offset: 0x30, Size: 0x1]
	EventFlowSequenceBase*[] StartSequences;//[Offset: 0x38, Size: 0x10]
	<EventFlowSequenceBase*> PreActivedSequences;//[Offset: 0x48, Size: 0x50]
	EventFlowSequenceBase*[] ActivedSequences;//[Offset: 0x98, Size: 0x10]
	delegate OnSequenceActived;//[Offset: 0xa8, Size: 0x10]
	delegate OnSequenceDeactived;//[Offset: 0xd0, Size: 0x10]
	void OnSequenceDeactived__DelegateSignature(EventFlowSequenceBase* DeactivedSequence);// 0x43841ec
	void OnSequenceActived__DelegateSignature(EventFlowSequenceBase* ActivedSequence);// 0x43841ec
	void OnRep_StartSequences();// 0x2303448
	void OnRep_Owner();// 0x230345c
	void OnRep_ActivedSequences();// 0x2303434
	bool IsLocalController();// 0x23032ec
	bool InvokeInterruptFlowByNodeName(FName StopNodeName, bool MarkInterruptAlways);// 0x230335c
	bool HasAuthority();// 0x2303324
	void EventFlowStart();// 0x43841ec

--------------------------------
Class: EventFlowSequenceBase.EventFlowNode.Object
	EventFlowSequenceBase* PrevSequence;//[Offset: 0x50, Size: 0x8]
	EventFlowBase* OwningEventFlow;//[Offset: 0x58, Size: 0x8]
	FText Describe;//[Offset: 0x60, Size: 0x18]
	EvaluateEventFlowParameter EvaluateDescribe;//[Offset: 0x78, Size: 0x10]
	int NodeID;//[Offset: 0x88, Size: 0x4]
	enum[] ElementLogics;//[Offset: 0x90, Size: 0x10]
	byte InstancedCount;//[Offset: 0xa0, Size: 0x1]
	bool bIsInterruptAlways;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa1, Size: 0x1]
	bool IsSequenceFinished();// 0x2307bbc
	bool HasShownElement();// 0x2307bfc
	enum[] GetElementLogics();// 0x2307b34
	FText GetDescribe();// 0x2307c34
	void ConstructAndActiveSequence(EventFlowBase* InOwner);// 0x23079f4
	static bool CanReinstanceSequence(EventFlowSequenceBase* Sequence, byte MaxInstanceCount);// 0x2307a70

--------------------------------
Class: EventFlowNode.Object
	EventFlowNode*[] PrevNodes;//[Offset: 0x28, Size: 0x10]
	EventFlowNode*[] NextNodes;//[Offset: 0x38, Size: 0x10]
	EventFlowNode* GeneratedByTemplate;//[Offset: 0x48, Size: 0x8]
	bool IsEvaluateBound(out const EvaluateEventFlowParameter Evaluator);// 0x230715c
	bool ExecuteEvaluate(out const EvaluateEventFlowParameter Evaluator);// 0x230704c

--------------------------------
Class: EvaluateEventFlowParameter

--------------------------------
Class: EventFlowElementBase.EventFlowNode.Object
	EventFlowSequenceBase* OwningSequence;//[Offset: 0x50, Size: 0x8]
	bool bIsFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIsOptional;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool bTickable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]
	bool bLocalJudgment;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1]
	bool bIsShow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1]
	FText Describe;//[Offset: 0x60, Size: 0x18]
	EvaluateEventFlowParameter EvaluateDescribe;//[Offset: 0x78, Size: 0x10]
	void SetElementUnfinishedToServer();// 0x23047d4
	void SetElementUnfinish();// 0x2304874
	void SetElementFinishedToServer(const FName EventName);// 0x23047f0
	void SetElementFinished(out const EventFlowFinishEvent OnElementFinishedEvent, FName EventName);// 0x2304888
	void ReceiveWhenTick(float DeltaSeconds);// 0x43841ec
	void ReceiveWhenDeactive();// 0x43841ec
	void ReceiveWhenConstruct();// 0x43841ec
	void ReceiveWhenActive();// 0x43841ec
	FText ReceiveGetDescribe();// 0x43841ec
	void OnRep_IsFinished();// 0x2304d30
	Actor* GetManagerOwner();// 0x2304c94
	EventFlowManager* GetManager();// 0x2304cc8
	bool GetIsShow();// 0x2304b44
	bool GetIsOptional();// 0x2304b68
	EventFlowBase* GetEventFlow();// 0x2304cfc
	EventFlowElementBase* GetElementTemplate();// 0x2304b8c
	FText GetDescribeEx();// 0x2304a9c
	FText GetDescribe();// 0x2304974
	void ForceFinishElementToServer(const FName EventName);// 0x2304750

--------------------------------
Class: EventFlowFinishEvent
	delegate OnEventFlowNodeFinished;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TeamStateMapComponent.ActorComponent.Object
	MiniMapSkillItemInfo[] ApexMiniMapDynamicItemInfos;//[Offset: 0xf0, Size: 0x10]
	MiniMapSkillItemInfo[] ApexMiniMapDynamicItemAddInfos;//[Offset: 0x100, Size: 0x10]
	MiniMapSkillItemInfo[] ApexMiniMapDynamicItemChangeInfos;//[Offset: 0x110, Size: 0x10]
	MiniMapSkillItemInfo[] ApexMiniMapDynamicItemRemoveInfos;//[Offset: 0x120, Size: 0x10]
	MiniMapSkillItemInfo[] ClientSideApexMiniMapDynamicItemInfos;//[Offset: 0x130, Size: 0x10]
	RepMiniMapPlayerInfo[] ApexMiniMapPlayerInfos;//[Offset: 0x140, Size: 0x10]
	<int,MiniMapSkillItemInfo> ClientSideFMiniMapPlayerInfo;//[Offset: 0x150, Size: 0x50]
	ApexPlayerState*[] MiniMapPlayers;//[Offset: 0x1a0, Size: 0x10]
	ApexTeamState* OwnerTeamState;//[Offset: 0x1b0, Size: 0x8]
	void UpdateMapItemDynamicLocAndRotInfo(int Index, Vector Location, float Yaw);// 0x3dd7a38
	void RemoveMapPlayerInfo(ApexPlayerState* Character);// 0x3dd7504
	void RemoveMapItemDynamicInfo(int Index);// 0x3dd78fc
	void OnRep_ApexMiniMapPlayerInfos();// 0x3dd741c
	void OnRep_ApexMiniMapDynamicItemInfos();// 0x3dd7430
	RepMiniMapPlayerInfo[] GetApexMiniMapPlayerInfos();// 0x3dd7444
	MiniMapSkillItemInfo[] GetApexMiniMapDynamicItemRemoveInfos();// 0x3dd75fc
	MiniMapSkillItemInfo[] GetApexMiniMapDynamicItemInfos();// 0x3dd783c
	MiniMapSkillItemInfo[] GetApexMiniMapDynamicItemChangeInfos();// 0x3dd76bc
	MiniMapSkillItemInfo[] GetApexMiniMapDynamicItemAddInfos();// 0x3dd777c
	void ChangeMapItemDynamicStateInfo(int Index, byte State);// 0x3dd7978
	void AddMapPlayerInfo(ApexPlayerState* Character);// 0x3dd7580
	int AddMapItemDynamicInfo(enum Type, Vector Location, float Yaw, int ScaleType, float Length, bool Immediately, float Radius);// 0x3dd7b38

--------------------------------
Class: MiniMapSkillItemInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	byte Type;//[Offset: 0x4, Size: 0x1]
	byte State;//[Offset: 0x5, Size: 0x1]
	Vector Location;//[Offset: 0x8, Size: 0xc]
	float Yaw;//[Offset: 0x14, Size: 0x4]
	float Radius;//[Offset: 0x18, Size: 0x4]
	byte ScaleType;//[Offset: 0x1c, Size: 0x1]
	float Length;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: RepMiniMapPlayerInfo
	int PlayerKey;//[Offset: 0x0, Size: 0x4]
	enum Type;//[Offset: 0x4, Size: 0x1]
	enum State;//[Offset: 0x5, Size: 0x1]
	Vector Location;//[Offset: 0x8, Size: 0xc]
	float Yaw;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: JumpTailID
	int[] Key;//[Offset: 0x0, Size: 0x10]
	int[] List;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: JumpActionData
	int[] Key;//[Offset: 0x0, Size: 0x10]
	JumpActionDataList[] List;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: JumpActionDataList
	int[] List;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PlayerStatePartInfo
	uint16 DyingCount;//[Offset: 0x0, Size: 0x2]
	uint16 DyingTimeoutSec;//[Offset: 0x2, Size: 0x2]
	uint16 DyingRealtimeSec;//[Offset: 0x4, Size: 0x2]
	uint16 RespawningTimeoutSec;//[Offset: 0x6, Size: 0x2]
	uint16 RespawningRealtimeSec;//[Offset: 0x8, Size: 0x2]
	uint16 ShownRespawningTimeoutSec;//[Offset: 0xa, Size: 0x2]
	uint16 ShownRespawningRealtimeSec;//[Offset: 0xc, Size: 0x2]
	uint16 RespawnTeammateEndSign;//[Offset: 0xe, Size: 0x2]
	uint16 RescuingEndSign;//[Offset: 0x10, Size: 0x2]
	enum CurrentBattleBehState;//[Offset: 0x12, Size: 0x1]
	enum PreviousBattleBehState;//[Offset: 0x13, Size: 0x1]
	enum CurrentBannerState;//[Offset: 0x14, Size: 0x1]
	Vector ServerLocation;//[Offset: 0x18, Size: 0xc]
	float RescueTimeSec;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ApexCharacterMapFlags.Actor.Object
	uint32 FlagId;//[Offset: 0x2b8, Size: 0x4]
	StatusHeadFlagsWidgetComponent* StatusHeadFlagsComponent;//[Offset: 0x2c0, Size: 0x8]
	uint16 TimeoutSec;//[Offset: 0x2c8, Size: 0x2]
	uint16 LeftSec;//[Offset: 0x2ca, Size: 0x2]
	uint16 ShownLeftSec;//[Offset: 0x2cc, Size: 0x2]
	float TickDeltaSec;//[Offset: 0x2d0, Size: 0x4]
	int DistanceMeter;//[Offset: 0x2d4, Size: 0x4]
	enum CurrentFlagType;//[Offset: 0x2d8, Size: 0x1]
	Vector AuthLocation;//[Offset: 0x2dc, Size: 0xc]
	float InterpSpeed;//[Offset: 0x2e8, Size: 0x4]
	bool bNeedInterpSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	Vector2D CurScreenSize;//[Offset: 0x2f0, Size: 0x8]
	uint32 OwnerPlayerKey;//[Offset: 0x2f8, Size: 0x4]
	float RescuingDistanceMeter;//[Offset: 0x2fc, Size: 0x4]
	float PickBannerHorizonMeter;//[Offset: 0x300, Size: 0x4]
	float PickBannerVerticalMeter;//[Offset: 0x304, Size: 0x4]
	bool bInScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	int OwnerLegendId;//[Offset: 0x30c, Size: 0x4]
	float FinisherHorizontalAngle;//[Offset: 0x310, Size: 0x4]
	float FinisherVerticalAngle;//[Offset: 0x314, Size: 0x4]
	float FinisherValidZ;//[Offset: 0x318, Size: 0x4]
	float ValidFinisherRange;//[Offset: 0x31c, Size: 0x4]
	float FinisherValidSpaceCheckDistance;//[Offset: 0x320, Size: 0x4]
	float FinisherLogInterval;//[Offset: 0x324, Size: 0x4]
	float CurrentFinisherLogInterval;//[Offset: 0x328, Size: 0x4]
	void ShowStatusHeadFlags(enum FlagType, uint16 InitTimeoutSec, uint16 InitShownTimeoutSec, int InLegendId, int InPlayerKey);// 0x39a043c
	void ShowReviveUI(bool bShow);// 0x39a015c
	void ShowGetBeaconUI(bool bShow);// 0x39a00d0
	void ShowFinisherUI(bool bShow);// 0x399ffb8
	void SetRealTimeLocation(out const Vector Location);// 0x39a0284
	void SetInvisible(bool bInvisible);// 0x39a0044
	void SetFlagsLocation(float Alpha);// 0x39a039c
	void SetAuthLocation(out const Vector Location);// 0x39a030c
	void PlayInformationOut();// 0x399ff80
	void PlayInformationIn();// 0x399ff9c
	void PlayAnimationOK();// 0x399ff64
	bool PawnStateCheck();// 0x39a01e8
	bool LineVisableTraceCheck();// 0x39a0228
	void HideStatusHeadFlags();// 0x39a0420
	void HideMapFlagsInfo();// 0x399ff48
	uint32 GetFlagId();// 0x39a0608
	int DistanceToAutonomous();// 0x39a05cc
	void CloseFlagDynamicOutLine();// 0x399ff34
	void CheckOperate();// 0x39a0268

--------------------------------
Class: StatusHeadFlagsWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector2D CurrentScreenPos;//[Offset: 0x78c, Size: 0x8]
	int CurrentPlayerKey;//[Offset: 0x794, Size: 0x4]
	enum CurrentFlagType;//[Offset: 0x798, Size: 0x1]
	void UpdateTipInfo(enum FlagType, uint16 LeftSec, int Meter, float Progress);// 0x3dc4e38
	void UnRegisterScreenTouchEndEvent();// 0x3dc4dac
	void SetScreenPos(Vector2D ScreenPos);// 0x3dc4dc0
	void SetPlayerKey(int PlayerKey);// 0x3dc4c60
	void SetHeadTex(int LegendId);// 0x3dc500c
	void SetFlagsType(enum FlagType);// 0x3dc4f88
	void OnScreenTouchEnd(float LocationX, float LocationY);// 0x3dc4cf0
	void IsInCrossRange(const Vector2D ScreenPos);// 0x3dc4be8
	void CloseDynamicOutLine();// 0x3dc4cdc

--------------------------------
Class: ApexRespawnBeacon.Actor.Object
	byte RespawnCount;//[Offset: 0x2c0, Size: 0x1]
	bool bHasBeenUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1]
	int Index;//[Offset: 0x2d0, Size: 0x4]
	Transform AircraftOffset;//[Offset: 0x2e0, Size: 0x30]
	bool bIsActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	byte CanRespawnNum;//[Offset: 0x315, Size: 0x1]
	float Radius;//[Offset: 0x318, Size: 0x4]
	byte ClearEffectCount;//[Offset: 0x31c, Size: 0x1]
	ParticleSystemComponent* UseableEffect;//[Offset: 0x320, Size: 0x8]
	ParticleSystemComponent* EffectTrigger;//[Offset: 0x328, Size: 0x8]
	ParticleSystem* TriggerActivate;//[Offset: 0x330, Size: 0x8]
	ParticleSystem* TriggerDeactivate;//[Offset: 0x338, Size: 0x8]
	bool bAllowInteractive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x348, Size: 0x8]
	WidgetComponent* WidgetComponent;//[Offset: 0x350, Size: 0x8]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x358, Size: 0x8]
	int OutLineId;//[Offset: 0x360, Size: 0x4]
	bool UseComplete();// 0x3a18bd8
	bool Useable();// 0x3a18c10
	void SetOffset(Transform Offset);// 0x3a1897c
	void SetIndex(int InIndex);// 0x3a18abc
	void OnRep_RespawnCount();// 0x3a18bbc
	void OnRep_ClearEffectCount();// 0x3a18b78
	void OnRep_Activate();// 0x3a18b8c
	void OnDelayHasBeenUsed();// 0x3a18870
	void NotifyUseComplete();// 0x43841ec
	void NotifyDeactivate();// 0x3a18b40
	void NotifyActivate();// 0x3a18b5c
	Transform GetOffset();// 0x3a18908
	int GetIndex();// 0x3a18a80
	void EnableInteractive(bool bEnable);// 0x3a18884
	void CheckUseable();// 0x3a18ba0

--------------------------------
Class: InGameActivityPlayerData
	int[] ItemIDList;//[Offset: 0x0, Size: 0x10]
	int MaxCount;//[Offset: 0x10, Size: 0x4]
	int CurCount;//[Offset: 0x14, Size: 0x4]
	int64 LastPickTime;//[Offset: 0x18, Size: 0x8]
	enum PickupResult;//[Offset: 0x20, Size: 0x1]
	int64 NextPickupTime;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InGameActivityPickupData
	ItemDefineID ItemDefineID;//[Offset: 0x0, Size: 0x10]
	int count;//[Offset: 0x10, Size: 0x4]
	int64 PickTime;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SkillAssistData
	int SkillID;//[Offset: 0x0, Size: 0x4]
	bool EnableAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: LegendAssistData
	int LegendId;//[Offset: 0x0, Size: 0x4]
	bool EnableAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: LegendCustomPerksInfo
	FString Name;//[Offset: 0x0, Size: 0x10]
	int[] PerksID;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: LegendCustomPerksPlan
	LegendCustomPerksInfo[] Plan;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: DSPlayerGunAmuletInfo
	int GunItemID;//[Offset: 0x0, Size: 0x4]
	int AmuletID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LobaBlackMarket.SkillActorBase.DynamicMovementActor.Actor.Object
	FName[] BuffNames;//[Offset: 0x508, Size: 0x10]
	float MaxRecycleDist;//[Offset: 0x518, Size: 0x4]
	byte[] QueryObjectTypes;//[Offset: 0x520, Size: 0x10]
	float MinShowSquaredDist;//[Offset: 0x530, Size: 0x4]
	float CullDistance;//[Offset: 0x534, Size: 0x4]
	float AddCollectPointCharcterEnter_SphereRadius;//[Offset: 0x538, Size: 0x4]
	float AddCollectPointCharcterLeave_SphereRadius;//[Offset: 0x53c, Size: 0x4]
	float TimeCanSeeButton;//[Offset: 0x540, Size: 0x4]
	float LobaBlackMarketPingHeight;//[Offset: 0x544, Size: 0x4]
	float CheckBeStrikeVehicleStartZOffset;//[Offset: 0x548, Size: 0x4]
	float CheckBeStrikeVehicleHeight;//[Offset: 0x54c, Size: 0x4]
	float CheckBeStrikeVehicleTime;//[Offset: 0x550, Size: 0x4]
	float OverlapTime;//[Offset: 0x554, Size: 0x4]
	byte[] VehicleObjectTypes;//[Offset: 0x558, Size: 0x10]
	class Actor[] CheckBeStrikeVehicleExcludeActorType;//[Offset: 0x568, Size: 0x10]
	UAESkillManagerComponent* UAESkillManager;//[Offset: 0x578, Size: 0x8]
	SphereComponent* OverlapComp;//[Offset: 0x580, Size: 0x8]
	SkeletalMeshComponent* MeshComp;//[Offset: 0x588, Size: 0x8]
	SkillActorHealthComponent* HealthComp;//[Offset: 0x590, Size: 0x8]
	SphereComponent* OverlapComp_CollectPointCharcterEntered;//[Offset: 0x598, Size: 0x8]
	SphereComponent* OverlapComp_CollectPointCharcterLeaved;//[Offset: 0x5a0, Size: 0x8]
	int MaxPickItemNum;//[Offset: 0x5a8, Size: 0x4]
	BoxComponent* RootBox;//[Offset: 0x5b0, Size: 0x8]
	int CurPickItemNum;//[Offset: 0x5b8, Size: 0x4]
	float CollectionDeltaTime;//[Offset: 0x5bc, Size: 0x4]
	bool bIsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1]
	NetPickUpWrapperResult[] PickUpDataMap;//[Offset: 0x5c8, Size: 0x10]
	bool bCanShowCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 0x1]
	float DestroyWaitTime;//[Offset: 0x67c, Size: 0x4]
	NetRecoverBannerPlayerInfo[] RecoverBannerPlayerKeys;//[Offset: 0x688, Size: 0x10]
	bool bEnableCollectRecoverBannerPlayerKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 0x1]
	Vector BoxCollisionHalfSize;//[Offset: 0x73c, Size: 0xc]
	class Actor[] ExcludeActorType;//[Offset: 0x748, Size: 0x10]
	bool bNeedResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758, Size: 0x1]
	bool bIsShowRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x759, Size: 0x1]
	bool bIsShowOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75a, Size: 0x1]
	PickupManagerComponent* CachePickupManagerComponent;//[Offset: 0x75c, Size: 0x8]
	LobaBlackMarket* CurRecycleMarket;//[Offset: 0x764, Size: 0x8]
	ApexCharacter* CurWorkingCharacter;//[Offset: 0x76c, Size: 0x8]
	bool bShowAsGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x774, Size: 0x1]
	SearchedPickUpWrapperResult[] ClientSearchedPickUpWrapperResultList;//[Offset: 0x778, Size: 0x10]
	SearchedPickUpWrapperResult[] PickingItemList;//[Offset: 0x788, Size: 0x10]
	SearchedPickUpWrapperResult[] PickedItemList;//[Offset: 0x798, Size: 0x10]
	Actor*[] ShoppingActorList;//[Offset: 0x7c8, Size: 0x10]
	ApexCharacter*[] AddCollectPointCharcterList;//[Offset: 0x7e8, Size: 0x10]
	bool bPickWeaponFroBlackMarktDoNotConsume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 0x1]
	SoftObjectPath[] LobaMainUIs;//[Offset: 0x860, Size: 0x10]
	Object*[] CacheResArray;//[Offset: 0x878, Size: 0x10]
	bool bPawnBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a8, Size: 0x1]
	float TotalDeltaTime;//[Offset: 0x8ac, Size: 0x4]
	uint32[] OverlapIndexArray;//[Offset: 0x8b0, Size: 0x10]
	void TakeDamageMulti(float DamageAmount, const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x3c6a104
	void Show();// 0x3c6aab4
	void SetEnableRefreshPickUpList(bool InbEnableRefreshBlackMarketList);// 0x3c6874c
	void ServerRecycleNode();// 0x3c69ccc
	void ServerPickRecoverBanner(uint32 InPlayerKey, int LegendId);// 0x3c688f0
	void ResponseRecycleNode(bool isRecycleOK);// 0x3c69c40
	void ReplacePickUpWrapperActor(out const BlackMarketPickUpWrapperResult TargetPickUpWrapperResult, out const BattleItemData ReplaceBattleItemData);// 0x3c68e14
	void RemovePickedItem(out const PickUpItemData InItem);// 0x3c6a008
	void PreDestroy(bool bIsPickUp);// 0x3c69bbc
	bool OpenMarket();// 0x3c69e9c
	void OnSwitchCollisionToPawn(bool bEnable);// 0x43841ec
	void OnSkillTriggerStringEvent(FString EventTypeStr, Actor* OwnerChar);// 0x3c6ab88
	void OnSkillInit(int SkillIndex, UTSkill* Skill);// 0x3c6aac8
	void OnRep_IsShow();// 0x3c6aaa0
	void OnPickUpTargetSucced_Server(Vector OriginLocation, ApexCharacter* OutCharacter);// 0x43841ec
	void OnPickedMaxItemNumber();// 0x43841ec
	void OnPickedItem(int QualityLevel, SearchedPickUpWrapperResult InItem);// 0x43841ec
	void OnOpenMarket();// 0x43841ec
	void OnNotifyRecycle();// 0x43841ec
	void OnLocalPlayerAddPawnState(enum State, enum OverrideState);// 0x3c69d20
	void OnLeaveScopeForAddCPC(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3c697d8
	void OnLeaveScope(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3c6a560
	void OnEnterScopeForAddCPC(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3c6991c
	void OnEnterScope(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3c6a6a4
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3c68408
	void OnCloseMarket();// 0x43841ec
	void OnBlackMarketPickUpItem(SearchedPickUpWrapperResult PickUpWrapper, ApexCharacter* OutCharacter);// 0x43841ec
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3c6854c
	void OnAPEvent_BlackMarketPickUpItem(SearchedPickUpWrapperResult PickUpWrapper, bool bAddPickedItemNum);// 0x3c6a254
	void OnAddPlayerPickItemNumFromeBlackMarketOnServer(ApexCharacter* ApexCharacter, enum PickupGroup);// 0x43841ec
	void OnActorDeadEvent();// 0x3c6a0f0
	bool NotifyRecycle();// 0x3c69ce8
	bool IsTeammateBlackMarket();// 0x3c6aa40
	bool IsOwnerBlackMarket();// 0x3c6ac54
	void InnerOpenMarket(bool bOwner);// 0x3c69e10
	void InnerCloseMarket();// 0x3c69de0
	void InnerClearloadedLobaMainUIActionRes();// 0x3c68808
	bool HandlePickItem_Server(ApexCharacter* Character, SearchedPickUpWrapperResult PickUpWrapper);// 0x3c69084
	PickupManagerComponent* GetPickupManagerComponent();// 0x3c6a524
	NetPickUpWrapperResult[] GetPickUpDataMapNotDelete();// 0x3c693ec
	NetPickUpWrapperResult[] GetPickUpDataMap();// 0x3c69598
	SearchedPickUpWrapperResult GetPickedItem(int Index);// 0x3c6a8a4
	FString GetModuleName();// 0x3c6ac8c
	int GetMaxPickItemNum();// 0x3c693d0
	int GetItemQuality(PickUpItemData PickUpItemData);// 0x3c695e8
	bool GetIsShowingMarketUI();// 0x3c69068
	bool GetIsPickItemMax();// 0x3c69030
	bool GetEnableRefreshPickUpList();// 0x3c687d0
	int GetCurPickItemNum(ApexCharacter* InCharacter);// 0x3c6934c
	void GenerateNetPickUpWrapperToPickUpWrapperResult(ApexCharacter* Character, NetPickUpWrapperResult InNetPickUpWrapperResult, out SearchedPickUpWrapperResult OutSearchedPickUpWrapperResult);// 0x3c689b4
	void Finished();// 0x3c6aa78
	void DealPickUpDataList();// 0x3c6aa8c
	void CollectAndWrapPickUpActors();// 0x3c69b1c
	void CloseMarket();// 0x3c69dfc
	void ClientPickRecoverBannerResult(uint32 InPlayerKey, bool bResult);// 0x3c68824
	void ClientBeginDestroy(bool bIsPickUp);// 0x3c69b30
	void BP_OnShow();// 0x43841ec
	void BP_OnDestroyed();// 0x43841ec
	void BP_OnActorHit(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x43841ec
	void BP_BeginDestroy();// 0x43841ec
	void AddPickedItem(out const SearchedPickUpWrapperResult InItem);// 0x3c69ed4

--------------------------------
Class: SkillActorBase.DynamicMovementActor.Actor.Object
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x2f8, Size: 0x8]
	delegate OnClear;//[Offset: 0x300, Size: 0x1]
	int OwnerSkillUniqueTableID;//[Offset: 0x304, Size: 0x4]
	bool bDoCoolDownWhenDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	bool bHadDownCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	bool IsNotifyDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30a, Size: 0x1]
	bool bIsSpawnUseAttachPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30b, Size: 0x1]
	class CameraShake* ShakeClass;//[Offset: 0x310, Size: 0x8]
	float ShakeOuterRadius;//[Offset: 0x318, Size: 0x4]
	float ShakeInnerRadius;//[Offset: 0x31c, Size: 0x4]
	float ShakeFalloff;//[Offset: 0x320, Size: 0x4]
	ApexBuffSystemComponent* BuffSystemComponent;//[Offset: 0x328, Size: 0x8]
	bool bEnableDrugVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	int DrugVoiceID;//[Offset: 0x334, Size: 0x4]
	float DrugDelayTime;//[Offset: 0x338, Size: 0x4]
	enum SkillActorType;//[Offset: 0x34a, Size: 0x1]
	bool bAddViewAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34b, Size: 0x1]
	Controller* OwnerControllerBase;//[Offset: 0x34c, Size: 0x8]
	enum OwnerLegendType;//[Offset: 0x354, Size: 0x1]
	uint32 OwnerApexPlayerKey;//[Offset: 0x358, Size: 0x4]
	delegate OnTakeDamage;//[Offset: 0x35c, Size: 0x1]
	delegate OnTakeDamageCrypto;//[Offset: 0x35d, Size: 0x1]
	bool bListenToOBTargetSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35e, Size: 0x1]
	bool bListenToPlayerRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x370, Size: 0x8]
	bool bCanCryptoDroneFind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	bool bAutoAddRenderMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 0x1]
	float MiniMapUpdateInterval;//[Offset: 0x388, Size: 0x4]
	delegate OnApexSkillEvent;//[Offset: 0x398, Size: 0x10]
	<ShapeComponent*,byte> CollisionResponseToChannelWithCamera;//[Offset: 0x3c0, Size: 0x50]
	bool bSignificanceManagedOnBegin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	FName SignificanceTag;//[Offset: 0x414, Size: 0x8]
	enum SignificanceByType;//[Offset: 0x41c, Size: 0x1]
	enum PostSignificanceType;//[Offset: 0x41d, Size: 0x1]
	int OwnerSkillIndex;//[Offset: 0x428, Size: 0x4]
	SkillActorAttachData AttachData;//[Offset: 0x430, Size: 0x40]
	bool IsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	ApexPlayerController* OwnerApexController;//[Offset: 0x474, Size: 0x8]
	int OwnerCharacterTeamId;//[Offset: 0x47c, Size: 0x4]
	int OwnerCharacterCampId;//[Offset: 0x480, Size: 0x4]
	SkillActorDelayShowTime DelayShowTime;//[Offset: 0x484, Size: 0x8]
	float SpawnedTime;//[Offset: 0x48c, Size: 0x4]
	bool bUseReplicationPolicy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	FName ReplicationCullDistanceTag;//[Offset: 0x494, Size: 0x8]
	float RefreshReplicationCullDistanceInterval;//[Offset: 0x49c, Size: 0x4]
	BuffAffectedActorData[] AffectedActorArray;//[Offset: 0x4b0, Size: 0x10]
	bool bIsNeedLogInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 0x1]
	void UpdateForMiniMap(byte State);// 0x3d99ecc
	void UnregisterFromSignificance();// 0x3d99838
	void TryInitMiniMap();// 0x3d99eb0
	void TriggerSkillEvent(const enum SkillEvent, SkillEventParam* SkillEventParam);// 0x3d99b48
	bool ShouldBeDoCoolDownForStatus();// 0x3d9b060
	void SetVisible(bool Visible);// 0x3d9af14
	void SetSkillIndex(SkillActorBase* OwnerSkillActor);// 0x3d9b178
	void RemoveOutLineEffect();// 0x3d9a5e0
	void RemoveFromMiniMap();// 0x3d99f48
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Controller* pCauser, Actor* CauserActor);// 0x3d9aa7c
	void RegisterToSignificance(FName NewSignificanceTag, enum NewType, enum NewPostType);// 0x3d99854
	void RefreshReplicationCullDistancePolicy(FName InReplicationFrequencyTag);// 0x3d99308
	void RefreshOwnerSkillTableID();// 0x3d9b164
	void ReceiveClear();// 0x43841ec
	Vector RebaseZeroOriginOntoLocal(Vector WorldLocation);// 0x3d99d90
	Vector RebaseLocalOriginOntoZero(Vector WorldLocation);// 0x3d99e20
	void PostLuaUIEvent(enum UIEventType, FString Arg1, FString Arg2, FString Arg3, FString Arg4);// 0x3d9b5c4
	void PostLuaEvent(Actor* OwnerTarget, int LuaCppEventTypeIndex, FString Arg1, FString Arg2, FString Arg3, FString Arg4);// 0x3d9b28c
	void PhaseJumpError(enum JumpError);// 0x3d9afac
	void OnSkillItemPickUp_BP();// 0x43841ec
	void OnSkillAsyncLoadFinished();// 0x3d99b2c
	void OnSignificanceChanged(float OldSignificance, float Significance);// 0x3d9938c
	void OnRep_SkillActorAttachData();// 0x3d9af98
	void OnRep_SetComponentVisible();// 0x3d9af00
	void OnRep_PlayerState(PlayerState* LocalCharacterPlayerState);// 0x43841ec
	void OnRep_OwnerSkillIndex();// 0x3d9b8c0
	void OnRep_DelayShowTime();// 0x3d99d7c
	void OnPlayerRespawn(int RescuerKey, int VictimKey);// 0x3d9a848
	void OnOneSkillAsyncLoadFinished(int SkillIndex);// 0x3d99aa8
	void OnOBTargetSwitched_BP(bool bChangeToFriendly);// 0x43841ec
	void OnOBTargetSwitched(Actor* LastTarget, Actor* NewTarget);// 0x3d9a3c4
	void OnDynamicStop(out const HitResult Hit, bool bServer, Actor* MovementActor);// 0x3d99960
	void OnDetach();// 0x3d9a618
	void OnDelayShow();// 0x3d99d68
	void OnCharacterCameraModeSwitched_BP(enum NewMode);// 0x43841ec
	void OnCharacterCameraModeSwitched();// 0x3d9b8ac
	void OnAttach();// 0x3d9a634
	bool IsTypeValid();// 0x3d9a650
	bool IsTeammate(Actor* OtherActor, bool bCheckHostile, bool bNeedPrintLog);// 0x3d9a714
	bool IsSkillCasting();// 0x3d9b028
	bool IsSameTeam(Actor* Other);// 0x3d9a90c
	bool IsInViewport();// 0x3d99534
	bool IsAddViewAssist_Implementation();// 0x3d9a5a0
	void InitSkillManagerComponent();// 0x3d99c2c
	void InitBuffSystemComponent(ApexBuffSystemComponent* Comp);// 0x3d9b1f4
	bool HasBuff(FName BuffName, bool bPredicatePendingRemove);// 0x3d9a99c
	Vector GetSkillActorInfo_MoveVelocity();// 0x3d9924c
	Vector GetSkillActorInfo_Location();// 0x3d9928c
	float GetSkillActorInfo_HP();// 0x3d99210
	int GetPingType();// 0x3d99d2c
	int GetOwnerSkillUniqueTableID();// 0x3d9b128
	ApexPlayerState* GetOwnerPlayerState();// 0x3d9a130
	OutlineAndFillComponent* GetOutlineComponent();// 0x3d9a480
	float GetMeshBoundsSize();// 0x3d992cc
	int GetMaxNumLimit(int DefaultValue);// 0x3d9a688
	bool GetCustomActorLocation(out Vector NewPosition, int PingIndex);// 0x3d99c48
	float GetActorScreenSize(out const Transform ViewPoint);// 0x3d99574
	void GetActorMeshBounds(out Vector Origin, out Vector BoxExtent);// 0x3d99450
	float GetActorDistance2D(out const Transform ViewPoint);// 0x3d99660
	float GetActorDistance(out const Transform ViewPoint);// 0x3d9974c
	void EnableAddBuffToAffectedActors(bool bEnable, FName BuffName);// 0x3d9a1e0
	void DoSkillCoolDown();// 0x3d9b0f8
	void DoResetReleased();// 0x3d9b0a0
	void DoResetCoolDown();// 0x3d9b0e4
	void DoReleasedSkill();// 0x3d9b0b4
	void DoCameraShake();// 0x3d9ad48
	void DetachSkillManagerFromParent();// 0x3d99c10
	void DeattachFromOwner();// 0x3d9aeec
	void ClientOnDamaged(float Damage, int DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x43841ec
	void ClientDoSkillCoolDown();// 0x3d9b10c
	void ClientDoReleasedSkill();// 0x3d9b0c8
	void Clear();// 0x3d9b270
	bool CheckIfAttachToVehicle(Vector Start, float rayLength);// 0x3d9ad5c
	bool CanAdsorb_Implementation(ApexCharacter* OtherCharacter, out const ViewAssistParamInfo Info);// 0x3d9a4bc
	void BP_FellOutOfWorld();// 0x43841ec
	void AttachToCharacter(ApexCharacter* ParentPlayer, FName SocketName);// 0x3d9ae30
	void AddToMiniMap(enum ItemType, Vector Location, float Yaw, int ScaleType, float Length, bool bNeedUpdateYaw);// 0x3d99f5c
	void AddOutLineEffect();// 0x3d9a5fc
	void AddBuffToAffectedActor(Actor* InActor);// 0x3d9a164
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x3d9abe8
	void ActorLeave(Actor* InActor);// 0x3d9a2bc
	void ActorEnter(Actor* InActor);// 0x3d9a340

--------------------------------
Class: SkillEventParam.Object
	int TargetPhaseIndex;//[Offset: 0x28, Size: 0x4]
	Object* ContextObject;//[Offset: 0x50, Size: 0x8]
	Character* ContextCharacter;//[Offset: 0x58, Size: 0x8]
	void InitFromTriggerParam(SkillEventParam* TriggerParam);// 0x3a2662c

--------------------------------
Class: SkillActorAttachData
	bool bIsAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Actor* AttachedActor;//[Offset: 0x8, Size: 0x8]
	bool bAttachScreenNode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FName AttachSocketName;//[Offset: 0x14, Size: 0x8]
	enum AttachmentRule;//[Offset: 0x1c, Size: 0x1]
	enum ScaleAttachmentRule;//[Offset: 0x1d, Size: 0x1]
	Vector OffsetLocation;//[Offset: 0x20, Size: 0xc]
	Rotator OffsetRotation;//[Offset: 0x2c, Size: 0xc]
	bool bIgnoreParentRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: UAESkillManagerComponent.ApexSkillManagerComponent.UTSkillManagerComponent.ActorComponent.Object
	Actor* HitTarget;//[Offset: 0xa10, Size: 0x8]
	HitResult DoorHitInfo;//[Offset: 0xa18, Size: 0x88]
	Vector DoorPos;//[Offset: 0xaa0, Size: 0xc]
	Vector DoorDir;//[Offset: 0xaac, Size: 0xc]
	float DoorTime;//[Offset: 0xab8, Size: 0x4]
	byte MeleeAttackPose;//[Offset: 0xabc, Size: 0x1]
	bool CanServerStartMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xabd, Size: 0x1]
	bool ShouldTraceDoorPostCloseEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xabe, Size: 0x1]
	bool EnterDoorRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xabf, Size: 0x1]
	Vector AutonomousTargetPos;//[Offset: 0xac0, Size: 0xc]
	UTSkillPickedTarget[] RemoteClientPickedResultTargets;//[Offset: 0xad0, Size: 0x10]
	delegate AttackTargetEvent;//[Offset: 0xae8, Size: 0x10]
	bool bListenTeammatesEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf8, Size: 0x1]
	UAECharacterAnimListComponent* OwnedSkillAnimComp;//[Offset: 0xb00, Size: 0x8]
	delegate SkillTriggerStringEventDelegate;//[Offset: 0xb08, Size: 0x10]
	UAESkillAction_ReplaceCharAnim*[] SkillReplaceAnimLayer;//[Offset: 0xb18, Size: 0x10]
	delegate OnSkillAnimListAttached;//[Offset: 0xb28, Size: 0x10]
	delegate OnSkillAnimListDettached;//[Offset: 0xb38, Size: 0x10]
	Actor* LastRobotRescueTarget;//[Offset: 0xb48, Size: 0x8]
	float DetectInterval;//[Offset: 0xb50, Size: 0x4]
	float InnerPreloadSquaredRange;//[Offset: 0xb54, Size: 0x4]
	float OuterUnloadSquaredRange;//[Offset: 0xb58, Size: 0x4]
	SkillPreloadData[] LowPreloadDatas;//[Offset: 0xb68, Size: 0x10]
	SkillPreloadData[] MiddlePreloadDatas;//[Offset: 0xb78, Size: 0x10]
	SkillPreloadData[] HighPreloadDatas;//[Offset: 0xb88, Size: 0x10]
	Object*[] ObjectCacheList;//[Offset: 0xb98, Size: 0x10]
	delegate SkillPauseEvent;//[Offset: 0xbb0, Size: 0x10]
	delegate SkillResumeEvent;//[Offset: 0xbc0, Size: 0x10]
	delegate SkillJumpPhaseEvent;//[Offset: 0xbd0, Size: 0x10]
	delegate SkillItemClientLoadFinishEvent;//[Offset: 0xbe0, Size: 0x10]
	delegate SkillReloadWeaponEvent;//[Offset: 0xbf0, Size: 0x10]
	bool bNoSkillCDStateFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc00, Size: 0x1]
	byte CurrentThrowGrenadeMode;//[Offset: 0xc01, Size: 0x1]
	SkillConfigIDData[] SkillDataList;//[Offset: 0xc08, Size: 0x10]
	bool bIsInCryptoDroneMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc18, Size: 0x1]
	Actor* CryptoDroneActor;//[Offset: 0xc20, Size: 0x8]
	int LifelineRescueRobotNum;//[Offset: 0xd50, Size: 0x4]
	Actor*[] RescueRobotsList;//[Offset: 0xd58, Size: 0x10]
	<class Actor,Actor*> InfoLogActors;//[Offset: 0xd68, Size: 0x50]
	bool bShouldLogActorInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb8, Size: 0x1]
	float InfoLogInterval;//[Offset: 0xdbc, Size: 0x4]
	Color InfoLogColor;//[Offset: 0xdc0, Size: 0x4]
	<int,SkillLocPickInfo> SkillConfigIDToPreLocInfo;//[Offset: 0xdc8, Size: 0x50]
	bool TryPreAimLocationReleased(int SkillIndex);// 0x3e32064
	void TriggerStringEvent(int SkillID, FString EventTypeStr);// 0x3e34d08
	void TriggerCurSkillStringEvent(FString EventString, int SkillIndex, UAEBaseSkill* CurSkill);// 0x3e342b4
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x3e343cc
	void SwitchThrowMode();// 0x3e32610
	void SwitchSkillCDStateOnServer();// 0x3e32d28
	void SwitchSkillCDState();// 0x3e32d44
	void StopSkillAllByKillDamage(enum StopReason, bool bCheckEnableBackSwing);// 0x3e322a4
	void StartSkillCDByIndex(int SkillIndex);// 0x3e32bc8
	void StartLifeLineSkill(Actor* RescueSource, Actor* rescueTarget, bool UsingRobot);// 0x3e335fc
	void SetCurrentThrowMode(byte ThrowGrenadeMode);// 0x3e32624
	void SetAvailableTimes(int SkillConfigId, int Times, bool bRecoverCD);// 0x3e32758
	void ServerTriggerStringEvent(int SkillID, FString EventTypeStr);// 0x3e34c00
	void ServerTriggerCurSkillString(FString EventString, int SkillIndex);// 0x3e340ac
	void ServerTriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x3e341b4
	void ServerSwitchThrowMode();// 0x3e325e0
	void ServerSwitchSkillUIOperation(byte SkillType, byte OpMode, bool bNeedWrite);// 0x3e3455c
	void ServerSetPreLocInfo(int ConfigId, SkillLocPickInfo PickInfo);// 0x3e31eb8
	void ServerPopOperationBySkillIndex(int SkillID);// 0x3e35108
	void ServerCancelAllRescueRobots();// 0x3e3236c
	void RPC_ServerStartMove(bool startMove);// 0x3e33b30
	void RPC_ServerSetMeleeAttackPose(byte AttackPose);// 0x3e339a4
	void RPC_ServerCheckTarget(Vector TargetPos, const UTSkillPickedTarget[] PickedResultTargets);// 0x3e33bbc
	void RPC_NotifyBackpackUseItem(int SkillHandle);// 0x3e33e9c
	void RPC_ClientReloadWeaponDone(int WeaponID);// 0x3e33d94
	void RPC_ClientCheckHasSkillHandle(int SkillHandle);// 0x3e33e18
	void RPC_ChangeMeleeAttackConfigData(byte ConfigIndex, float ModifyData);// 0x3e323f8
	void ResetSkillReleasedByIndex(int SkillIndex);// 0x3e32b38
	void ResetSkillCDByIndex(int SkillIndex);// 0x3e32c44
	void ResetAllSkillReleased();// 0x3e32bb4
	void ResetAllSkillCDOnServer();// 0x3e32cd4
	void ResetAllSkillCD();// 0x3e32cc0
	void RemoveInfoLogActor(Actor* TmpActor);// 0x3e321ac
	void PopOperationBySkillIndex(int SkillID);// 0x3e3518c
	void OnStackChangedEvent(HandStateData Data, bool bPush, bool bPromote);// 0x3e3305c
	void OnSkillAnimListAttachLoadingFinished();// 0x3e33704
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x3e34684
	void OnPreloadedRes(out const SoftObjectPath[] Paths, out const Object*[] LoadAssets, FString FolderName);// 0x3e33260
	void OnPawnStateChanged(enum[] StatesMoreThanOld, enum[] StatesLessThanOld);// 0x3e32e5c
	void OnOverridePawnStateChanged(enum State, enum NewOverrideState, enum PrevOverrideState);// 0x3e32d58
	void OnOBTargetSwitched(Actor* LastTarget, Actor* NewTarget);// 0x3e33434
	void OnHUDSwitchCallback(int NewHUDType);// 0x3e34814
	void OnGameModeExitFighting();// 0x3e34670
	void OnEventPlayerAction(out const FName InAction, Actor* InEventActor);// 0x3e338d4
	void OnAsyncLoadFinishByInitSkillUI(out const SoftObjectPath[] Paths, out const Object*[] LoadAssets, bool bInitAll, int SkillIndex);// 0x3e34890
	void MainHandInterruptSkill(enum eAttachmentType);// 0x3e32fe0
	void JumpToPhase(int ToIndex, bool bIgnoreCheckPawnState, bool Greater);// 0x3e324c0
	bool IsZeroCD();// 0x3e32cf0
	bool IsUsingRescueRobot();// 0x3e32388
	bool IsSkillInCD(int SkillIndex);// 0x3e32a28
	bool IsSkillCDActive(int SkillIndex);// 0x3e32ab0
	bool IsCastingSkillOfType(enum SkillType);// 0x3e33528
	bool IsCastingSkillIndex(int SkillIndex);// 0x3e33d0c
	bool IsCastingOctaneSkill();// 0x3e335b0
	void InfoLogFunc();// 0x3e320ec
	void HandleSkillStringEventCached(FString EventString, UTSkillManagerComponent* EventOrigin);// 0x3e3372c
	FString GetUIDefineNameBySkillType(enum SkillType);// 0x3e34494
	int GetSkillConfigIDBySkillType(enum SkillType);// 0x3e33fa4
	int GetSkillConfigIDBySkillIndex(int SkillIndex);// 0x3e34028
	float GetSkillCDRemainTimePerCast(int SkillIndex);// 0x3e329a4
	UTSkill* GetSkillByConfigID(int ConfigId);// 0x3e33f20
	int GetRemainTimes(int SkillConfigId);// 0x3e326d4
	byte GetCurrentThrowMode();// 0x3e326a0
	enum GetCurOpModeBySkillType(enum SkillType);// 0x3e34b74
	enum GetCurOpModeBySkillIndex(int SkillID);// 0x3e34ae8
	float GetAbilityPercent(enum SkillType);// 0x3e32920
	void EndLifeLineSkill();// 0x3e335e8
	void DettachSkillAnimList();// 0x3e33718
	void ClientSwitchThrowMode();// 0x3e325fc
	void ClientInfoLog(FString Msg);// 0x3e3211c
	void ChangeIsInfoLog();// 0x3e32100
	bool CanUseRescueRobot();// 0x3e323c0
	bool CanInitSkillUI(int SkillIndex);// 0x3e34a60
	bool CanCastingSkillSilencedByRevenant();// 0x3e334f0
	void CameraModeSwitchCallback();// 0x3e32fcc
	void CallServerStopSkillWithID(int SkillID, enum StopReason, bool bCheckEnableBackSwing, bool IsAutonomousNotNeedCare);// 0x3e34f9c
	void CallServerStopSkillSafely(int SkillID, enum StopReason, bool bCheckEnableBackSwing, bool IsAutonomousNotNeedCare);// 0x3e34e30
	void CallClientLaunchCharacter(Vector Dir, float Speed, float Time);// 0x3e33a28
	void AddSkillStringEventCache(FString EventString, UTSkillManagerComponent* EventOrigin);// 0x3e33800
	void AddInfoLogActor(Actor* TmpActor);// 0x3e32228
	void AddAbilityPercent(float AddPercentage, enum SkillType);// 0x3e32860

--------------------------------
Class: ApexSkillManagerComponent.UTSkillManagerComponent.ActorComponent.Object
	TriggerEventBuffPoolItem[] TriggerEventBuffPool;//[Offset: 0x940, Size: 0x10]
	ApexSkillManagerComponent*[] ChildSkillManagerComponentList;//[Offset: 0x950, Size: 0x10]
	SkillActorBase*[] SkillActorBaseArray;//[Offset: 0x960, Size: 0x10]
	ApexSkillManagerComponent* ParentSkillManagerComponent;//[Offset: 0x970, Size: 0x8]
	ApexCharacter* OwnerApexCharacter;//[Offset: 0x978, Size: 0x8]
	SkillPickerModule* SkillPickerModule;//[Offset: 0x980, Size: 0x8]
	delegate OnApexSkillEvent;//[Offset: 0x988, Size: 0x10]
	ParticleSystemAsync*[] CreatedParticleArray;//[Offset: 0x998, Size: 0x10]
	float StopSkillOnDisconnectTimeOut;//[Offset: 0x9a8, Size: 0x4]
	class UTSkill[] SkillArchetypesUsed;//[Offset: 0x9b0, Size: 0x10]
	delegate SwitchSkillAssistEvent;//[Offset: 0x9c0, Size: 0x10]
	void UnBindEventForBangalorePassiveSkill();// 0x3a20db4
	void TriggerSkillEventWithPhaseId(int SkillID, enum SkillEvent, int TargetPhaseIndex);// 0x3a21a4c
	void TriggerSkillEventToServerChildren(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x3a21834
	void TriggerSkillEventToServer(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x3a21940
	void TriggerSkillEventToParent(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x3a21510
	void TriggerSkillEventToChildren(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x3a21404
	void TriggerSkillEventFromParent(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x3a21728
	void TriggerSkillEventFromChild(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x3a2161c
	void TriggerSkillEvent(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x3a21b58
	void ServerTriggerEventWithAntiData(int SkillID, byte EventType, int TriggerIndex, const SecurityAntiData AntiData, PredictionKey PredictionKey);// 0x3a21c8c
	void ServerSwitchSkillAssistState(int SkillIdx, bool bEnable);// 0x3a20ea8
	void ServerSwitchAllSkillAssistState();// 0x3a21000
	void OnRecoverConnect();// 0x3a21c64
	void OnDisconnected();// 0x3a21c78
	void OnCharacterWeaponShootBullet(ApexCharacter* ShootCharacter, out const Vector StartPos, out const Vector EndPos);// 0x3a20c94
	void Inner_CheckBangalorePassiveSkill(ApexCharacter* ShootCharacter, out const Vector StartPos, out const Vector EndPos);// 0x3a20b74
	int GetSkillConfigOnGameModeInt(enum Key, int DefaultValue);// 0x3a21174
	float GetSkillConfigOnGameModeFloat(enum Key, float DefaultValue);// 0x3a2123c
	bool GetSkillConfigOnGameModeBool(enum Key, bool DefaultValue);// 0x3a210a0
	UTSkill* GetSkillByType(enum SkillType);// 0x3a21380
	void ClientSwitchSkillAssistState(int SkillIdx, bool bEnable);// 0x3a20ddc
	void ClientSwitchSkillAssistShowType(int ShowTypeIn);// 0x3a2101c
	void ClientSwitchAllSkillAssistState(bool bEnable);// 0x3a20f74
	void ClearTriggerEventBuffPoolBySkillID(int SkillID);// 0x3a21304
	void BindEventForBangalorePassiveSkill();// 0x3a20dc8

--------------------------------
Class: UTSkillManagerComponent.ActorComponent.Object
	DataTable* SkillsTable;//[Offset: 0xf8, Size: 0x8]
	DataTable* CommonSkillsTable;//[Offset: 0x100, Size: 0x8]
	bool bHasInitSkillArchetypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	class UTSkill[] SkillArchetypesFromSkillsTable;//[Offset: 0x110, Size: 0x10]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	UTSkill*[] Skills;//[Offset: 0x128, Size: 0x10]
	UAEUserWidget*[] SkillAsyncLoaded;//[Offset: 0x138, Size: 0x10]
	UAEUserWidget* SkillUIRoot;//[Offset: 0x148, Size: 0x8]
	<UTSkill*,int> SkillToIndexMap;//[Offset: 0x150, Size: 0x50]
	<enum,int> SkillTypeToIndexMap;//[Offset: 0x1a0, Size: 0x50]
	<UTSkill*,int> SkillCurPhaseIndexes;//[Offset: 0x1f0, Size: 0x50]
	<int,int> SkillHandleToIndexMap;//[Offset: 0x248, Size: 0x50]
	<int,UTSkillCreateData> SkillHandleToBaseData;//[Offset: 0x298, Size: 0x50]
	<int> CastingSkillIndexes;//[Offset: 0x2e8, Size: 0x50]
	Actor* Target;//[Offset: 0x338, Size: 0x8]
	Actor*[] SkillActorList;//[Offset: 0x340, Size: 0x10]
	Actor*[] PausedSkillActorList;//[Offset: 0x350, Size: 0x10]
	UTSkillSynData[] SkillSynData;//[Offset: 0x360, Size: 0x10]
	UTSkillPhaseJumpResult SkillPhaseJumpResult;//[Offset: 0x370, Size: 0x8]
	delegate OnSkillHit;//[Offset: 0x378, Size: 0x10]
	delegate OnSkillCast;//[Offset: 0x388, Size: 0x10]
	bool bDisableTriggerSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 0x1]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x3f8, Size: 0x30]
	FString[] MutexMontageGroupBeenPlayed;//[Offset: 0x428, Size: 0x10]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x438, Size: 0x30]
	FString LastESkillTargetDesc;//[Offset: 0x470, Size: 0x10]
	int SkillSynRandomSeed;//[Offset: 0x480, Size: 0x4]
	RandomStream SkillSynRandStream;//[Offset: 0x484, Size: 0x8]
	int SkillSynRandomSeedExpireCount;//[Offset: 0x48c, Size: 0x4]
	<FString,TimerHandle> SkillTimerMap;//[Offset: 0x490, Size: 0x50]
	bool bDebugSkillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	<int,SkillTriggerBase*> SkillTriggerMap;//[Offset: 0x550, Size: 0x50]
	UTAddedSkillSturct[] LoadingSkillStructList;//[Offset: 0x5a0, Size: 0x10]
	int[] PendingRemoveSkillHandles;//[Offset: 0x5b0, Size: 0x10]
	UTAddedSkillSturct[] RepAddedSkillStructList;//[Offset: 0x5c0, Size: 0x10]
	FString RepSkillDebugInfo;//[Offset: 0x5d0, Size: 0x10]
	FString RepSkillSynInfo;//[Offset: 0x5e0, Size: 0x10]
	delegate SkillStopEvent;//[Offset: 0x5f0, Size: 0x10]
	delegate StartSkillFailedEvent;//[Offset: 0x600, Size: 0x10]
	delegate SkillStartEvent;//[Offset: 0x610, Size: 0x10]
	delegate SkillReleasedEvent;//[Offset: 0x620, Size: 0x10]
	delegate SkillInitEvent;//[Offset: 0x630, Size: 0x10]
	delegate SkillUnInitEvent;//[Offset: 0x640, Size: 0x10]
	delegate DisableTriggerSkillEvent;//[Offset: 0x650, Size: 0x10]
	delegate EnableTriggerSkillEvent;//[Offset: 0x660, Size: 0x10]
	<FName,int> TriggerConditionMap;//[Offset: 0x670, Size: 0x50]
	<FName,UTSkill*> TriggerSkillMap;//[Offset: 0x6c0, Size: 0x50]
	<FName,UTSkill*> TriggerCancelSkillMap;//[Offset: 0x710, Size: 0x50]
	UTSkill*[] PendingPassiveSkills;//[Offset: 0x760, Size: 0x10]
	delegate SkillTriggerEventDelegate;//[Offset: 0x770, Size: 0x10]
	<Object*,SkillModifierList> SkillModifierLookupTable;//[Offset: 0x780, Size: 0x50]
	<SkillModifierDesc,SkillModifierCalculator> SkillAttributeModifiers;//[Offset: 0x7d0, Size: 0x50]
	bool bHasInitInFightStage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 0x1]
	delegate OnKeyDownDelegate;//[Offset: 0x878, Size: 0x10]
	delegate SkillCDInitFinishedEvent;//[Offset: 0x888, Size: 0x10]
	delegate SkillStartCDEvent;//[Offset: 0x898, Size: 0x10]
	delegate SkillModifyCDEvent;//[Offset: 0x8a8, Size: 0x10]
	SkillCDSyncData[] SkillsCDSyncData;//[Offset: 0x8b8, Size: 0x10]
	<int,PredcitionData> SkillsPrecitionData;//[Offset: 0x8d0, Size: 0x50]
	void UpdateSkillCDState(bool bCanUpdate);// 0x221f474
	bool TriggerEventByType(enum SkillType, byte EventType, int TriggerIndex);// 0x2221c9c
	bool TriggerEvent(int SkillID, byte EventType, int TriggerIndex);// 0x2221ec8
	bool TraceTarget(Vector StartTrace, Vector EndTrace, enum TargetType, float Radius, out Actor* TargetActor);// 0x2220580
	void SwitchSkill(int SkillID, byte EventType);// 0x2221930
	bool StopSkillWithID(int SkillID, enum StopReason, bool bCheckEnableBackSwing, bool IsAutonomousNotNeedCare);// 0x22217b8
	void StopSkillSpecific(UTSkill* Skill, enum Reason, bool bCheckEnableBackSwing);// 0x2221488
	void StopSkillOnDisconnected();// 0x22215e0
	void StopSkillAll(enum StopReason, bool bCheckEnableBackSwing);// 0x22216e8
	bool ShouldTriggerEvent(int SkillID, byte EventType);// 0x22200ec
	void SetTarget(Actor* InTarget);// 0x2223d98
	void SetSkillCurPhase(UTSkill* Skill, int PhaseIndex, bool Simulated);// 0x2222004
	void SetHasInitSkillSystem(bool hasInit);// 0x222030c
	void SetCurSkill(int SkillIndex, bool bCasting);// 0x22203ac
	void ServerOnWillEnterBackground();// 0x22215b0
	void ServerNotifyRandomSeed(int Seed);// 0x2221adc
	void ServerMarkCDSyncStateDirty();// 0x221f458
	void ServerInitOneSkill(const class UTSkill SkillClass, int SkillIndex, int SkillHandle);// 0x2220d70
	void ServerDeleteSkill(int SkillID);// 0x2221238
	void RPCPostActionVectorNetDataToServer(Vector Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0x2222c04
	void RPCPostActionVectorNetDataToMultiClient(Vector Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0x2222424
	void RPCPostActionVectorNetDataToClient(Vector Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0x22233e4
	void RPCPostActionStringNetDataToServer(FString Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0x2222d90
	void RPCPostActionStringNetDataToMultiClient(FString Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0x22225b0
	void RPCPostActionStringNetDataToClient(FString Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0x2223570
	void RPCPostActionIntNetDataToServer(int Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0x22230cc
	void RPCPostActionIntNetDataToMultiClient(int Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0x22228ec
	void RPCPostActionIntNetDataToClient(int Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0x22238ac
	void RPCPostActionFloatNetDataToServer(float Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0x2223258
	void RPCPostActionFloatNetDataToMultiClient(float Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0x2222a78
	void RPCPostActionFloatNetDataToClient(float Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0x2223a38
	void RPCPostActionBoolNetDataToServer(bool Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0x2222f28
	void RPCPostActionBoolNetDataToMultiClient(bool Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0x2222748
	void RPCPostActionBoolNetDataToClient(bool Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0x2223708
	void RepSkillSynData(UTSkillSynData[] originList);// 0x22204a0
	void RepSkillPhaseJumpResult();// 0x2220484
	void RepSkillHitInfo();// 0x2220470
	void RefreshSkillCDSyncData();// 0x221f2a0
	int RandRangeSyn(int StartIndex, int EndIndex);// 0x22201c0
	void PlayHurtSkillEffect(UTSkillHitInfo TheSkillHitInfo);// 0x2220b44
	void OnWillEnterBackground();// 0x22215cc
	static bool OnSameTeam(Actor* A, Actor* B);// 0x2220a84
	void OnRep_SkillHitInfo();// 0x22202f0
	void OnRep_HasInitInFightStage();// 0x221f8a4
	void OnRep_CDSyncData(out SkillCDSyncData[] LastSkillsCDSyncData);// 0x221f180
	void OnRep_AddedSkillList(UTAddedSkillSturct[] originList);// 0x221fa80
	void OnAsyncLoadFinishedByItem(int SkillHandle);// 0x221ff50
	void OnAsyncLoadFinishByOnRepSkill(const UTSkillSynData CurSkillSynData, int LastSkillIdx, int LastCastCount, bool bLastSkillCasting, const int[] UndoPhaseIds, bool bFirstRep);// 0x221fc10
	void OnAsyncLoadFinishByInitSkill(int SkillIndex, bool isDedicateServer);// 0x221fe84
	bool IsReadyToCastSkill(int SkillID);// 0x22211a8
	bool IsHasInitSkillSystem();// 0x2220390
	bool IsDisableTriggerSkill();// 0x2221ac0
	bool IsCastingSkillOfSkillType(enum SkillType);// 0x22210d8
	bool IsCastingSkillID(int SkillID);// 0x2221050
	bool IsCastingSkillHandle(int SkillHandle);// 0x2220fc8
	bool IsCastingSkill();// 0x2221168
	void InternalCallClientPredictFailed(int SkillID);// 0x221f0fc
	void InitSkillUIs();// 0x2223c64
	void InitSkillUI(int SkillIndex);// 0x2223c80
	void InitSkillSystem(bool isDedicateServer, bool IsBroadcastFromParent, bool IsBroadcastToParent);// 0x2220e94
	void InitSkillComponent();// 0x2221fe8
	Actor* GetTarget();// 0x2223e10
	enum GetSkillTypeBySkillID(int SkillID);// 0x2221c18
	float GetSkillPhaseDuration(int SkillIndex, int PhaseIndex);// 0x2223e2c
	int GetSkillPhase(int SkillIndex);// 0x2220800
	int GetSkillNextPhase(UTSkill* Skill);// 0x222210c
	FString GetSkillName(int SkillIndex);// 0x2223ef0
	int GetSkillIDByHandle(int SkillHandle);// 0x2220068
	int GetSkillHandleBySkillIndex(int SkillIndex);// 0x2223fb8
	int GetSkillCurPhase(UTSkill* Skill);// 0x2222190
	UTSkill* GetSkillByName(FString SkillName);// 0x2220884
	UTSkill* GetSkillByHandle(int SkillHandle);// 0x222096c
	UTSkillCreateData GetSkillBaseDataBySkillIndex(int SkillIndex);// 0x222403c
	UTSkillCreateData GetSkillBaseDataByHandle(int SkillHandle);// 0x222423c
	void GetSkillActors(class Actor MatchClass, out Actor*[] OutActors);// 0x221f4f8
	Actor*[] GetSkillActorList_Mutable();// 0x222231c
	Actor*[] GetSkillActorList();// 0x22223a0
	Actor* GetSkillActorByTag(FName TagName);// 0x2221b94
	Actor* GetSkillActor(class Actor MatchClass);// 0x221f738
	UTSkill* GetSkill(int SkillID);// 0x22209f8
	Actor*[] GetPausedSkillActorList_Mutable();// 0x2222214
	Actor*[] GetPausedSkillActorList();// 0x2222298
	int GetCurSkillIndex(UTSkill* Skill);// 0x222434c
	int GetCurSkillHandle(UTSkill* Skill);// 0x22242c8
	float GetCharacterAbilityCDThresholdScale(enum SpeedUpType);// 0x221f340
	float GetCharacterAbilityCDSpeedScale(enum SpeedUpType);// 0x221f3cc
	float GetCharacterAbilityCDCastScale(enum SpeedUpType);// 0x221f2b4
	UTSkill* GetCastingSkillAndSkillIndex(out int SkillIndex);// 0x2220738
	UTSkill* GetCastingSkill();// 0x22207cc
	void ForceSyncCDState(const SkillCDSyncData[] CDSyncData);// 0x221f050
	void EnableTriggerSkillAll();// 0x22215fc
	void DisableTriggerSkillAll(enum StopReason, bool bCheckEnableBackSwing);// 0x2221618
	void DeleteSkillUIs();// 0x2223bc4
	void DeleteSkillUI(int SkillIndex);// 0x2223be0
	void DeleteSkill(int SkillID);// 0x2221340
	void ClientPlayHurtMontage(const SoftObjectPath MontagePath);// 0x2223d04
	void ClientMulticastDeleteSkill(int SkillID);// 0x22212bc
	void ClientInitOneSkill(const class UTSkill SkillClass, int SkillIndex, int SkillHandle);// 0x2220c4c
	bool ClientForceLoadSkillItem(int SkillIndex, int PhaseIndex, out const int[] UndoPhaseIds);// 0x221f948
	void ClientCallTriggerEvent(int SkillID, byte EventType, int TriggerIndex);// 0x2221dbc
	void ClearSkillActor();// 0x22213c4
	void ClearSkill();// 0x22213e0
	void Clear(bool bClearSkillActor);// 0x22213fc
	bool CheckSkillCDFinish(int SkillCD);// 0x221f218
	void CheckServerCDState();// 0x221f0e0
	void CameraModeChangedEvent();// 0x2221594
	void BeginAddSkillByItemAsync(out UTAddedSkillSturct temp);// 0x221ffcc
	bool BackpackLoadSkillItemForAutoUse(int SkillIndex);// 0x221f8c0
	void AddSkillEventCache(byte InSkillEventType, UTSkillManagerComponent* EventOrigin);// 0x22219f8

--------------------------------
Class: TriggerEventBuffPoolItem
	SkillEventParam* SkillEventParam;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: UAEBaseSkill.ApexSkill.UTSkill.Actor.Object
	delegate OnSkillCustomEvent;//[Offset: 0x408, Size: 0x10]
	delegate OnSkillStringEvent;//[Offset: 0x430, Size: 0x10]
	bool OnStringEvent(UTSkillManagerComponent* SkillManagerComponent, FString EventString, UTSkillManagerComponent* EventOrigin);// 0x3e01b88
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte SkillEvent);// 0x3e01cb4

--------------------------------
Class: ApexSkill.UTSkill.Actor.Object
	delegate OnApexSkillEvent;//[Offset: 0x3f8, Size: 0x10]
	bool TriggerSkillEvent(UTSkillManagerComponent* SkillManagerComponent, int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x3a1da60
	void ConsumeSkillEventPool(ApexSkillManagerComponent* SkillManagerComponent);// 0x3a1d9dc

--------------------------------
Class: UTSkill.Actor.Object
	FString SkillName;//[Offset: 0x258, Size: 0x10]
	FString SkillDescription;//[Offset: 0x268, Size: 0x10]
	enum SkillCastType;//[Offset: 0x278, Size: 0x1]
	FString TriggerEventParam;//[Offset: 0x280, Size: 0x10]
	int TriggerCondition;//[Offset: 0x290, Size: 0x4]
	enum SkillType;//[Offset: 0x294, Size: 0x1]
	bool bOnlyTriggerInAuthority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 0x1]
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x296, Size: 0x1]
	bool bNoEnergyStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x297, Size: 0x1]
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	bool bClearInputCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1]
	bool NotInterruptOtherTriggerSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 0x1]
	bool EnableFPPTPPSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29b, Size: 0x1]
	bool EnableBackSwingAfterInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	UTSkillCreateData BaseData;//[Offset: 0x2a0, Size: 0xd0]
	class SkillTriggerBase* SkillTriggerClass;//[Offset: 0x370, Size: 0x8]
	bool NegativeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	int SkillCategory;//[Offset: 0x37c, Size: 0x4]
	bool ShouldShowTargetPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	bool ChangePawnStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 0x1]
	bool SilencedByRevenant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x382, Size: 0x1]
	bool bDeserializeComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x383, Size: 0x1]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x3a0, Size: 0x50]
	int InstancedNodesTotalSize;//[Offset: 0x3f0, Size: 0x4]
	void SetAvailableTimes(UTSkillManagerComponent* SkillManagerComponent, int Times);// 0x2215db4
	bool PlusRemainTimes(UTSkillManagerComponent* SkillManagerComponent, bool bTimesForRound, int Times);// 0x2215bb0
	void OnPhaseFinished(UTSkillManagerComponent* SkillManagerComponent);// 0x2215aa0
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, UTSkillManagerComponent* EventOrigin);// 0x22161a4
	UTSkillPhase* GetSkillPhase(int PhaseIndex);// 0x22158f4
	int GetRemainTimes(UTSkillManagerComponent* SkillManagerComponent);// 0x2215b24
	Actor* GetFromActorStorage(UTSkillManagerComponent* SkillManagerComponent, int Index);// 0x2215828
	ActorComponent* GetComponentByTag(class ActorComponent ComponentClass, FName Tag);// 0x22162c0
	void DoSkillReleased(UTSkillManagerComponent* SkillManagerComponent);// 0x2215f00
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent);// 0x2216008
	void DoResetReleased(UTSkillManagerComponent* SkillManagerComponent);// 0x2215e7c
	void DoResetCD(UTSkillManagerComponent* SkillManagerComponent);// 0x2215f84
	bool DeductRemainTimes(UTSkillManagerComponent* SkillManagerComponent, int Times);// 0x2215cdc
	bool CheckPhaseCondition(UTSkillManagerComponent* SkillManagerComponent, int PhaseID, bool ResetConditions);// 0x2215980
	bool CanDisableTrigger();// 0x221608c
	bool CanBePlayed(UTSkillManagerComponent* SkillManagerComponent, bool bShowFailureMsg);// 0x22160c4

--------------------------------
Class: UTSkillCreateData
	int SkillGroupIndex;//[Offset: 0x0, Size: 0x4]
	float Range;//[Offset: 0x4, Size: 0x4]
	UTSkillCDBase* SkillCD;//[Offset: 0x8, Size: 0x8]
	<int,UTSkillWidget*> SkillUIs;//[Offset: 0x10, Size: 0x50]
	<FString,int> SkillUIPathToHandle;//[Offset: 0x60, Size: 0x50]
	UTSkillPhase*[] Phases;//[Offset: 0xb0, Size: 0x10]
	bool WidgetInitialVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	int SkillMainWidgetHandle;//[Offset: 0xc4, Size: 0x4]
	bool bIgnoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bStopOnDisconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	bool bStopOnWillEnterBackground;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 0x1]

--------------------------------
Class: UTSkillCDBase.Object
	float FinishCountdown;//[Offset: 0x28, Size: 0x4]
	UTSkillManagerComponent* CurOwnerManager;//[Offset: 0x30, Size: 0x8]
	GameStateBase* CurGameState;//[Offset: 0x38, Size: 0x8]
	void SetAvailableTimesRound(int Value);// 0x2217fc0
	void SetAvailableTimes(int Value);// 0x2218058
	bool PlusRemainTimes(bool bTimesForRound, int Times);// 0x2217e3c
	bool HasRemainTimes();// 0x2217dd0
	int GetRemainTimes();// 0x2217e08
	float GetMaxEnergy();// 0x221814c
	int GetMaxAccumulateCount();// 0x22180d4
	float GetCurrentPercent();// 0x2218188
	float GetCurrentEnergy();// 0x22181c4
	float GetCDDuration();// 0x2218110
	int GetAvailableTimesRound();// 0x2217fa4
	int GetAvailableTimes();// 0x221803c
	bool DeductRemainTimes(int Times);// 0x2217f1c

--------------------------------
Class: UTSkillWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	UTSkillManagerComponent* skillManager;//[Offset: 0x388, Size: 0x8]
	int SkillHandle;//[Offset: 0x390, Size: 0x4]
	int SkillUIID;//[Offset: 0x394, Size: 0x4]
	void TriggerEvent(byte SkillEvent);// 0x222b8e0
	void SetSkillUIID(int ID);// 0x222ba34
	void SetSkillManager(UTSkillManagerComponent* manager);// 0x222b868
	void SetSkillHandle(int Handle);// 0x222bbcc
	void RemoveFromUIManager();// 0x222add0
	int GetSkillUIID();// 0x222ba00
	FString GetSkillName();// 0x222b2b0
	UTSkillManagerComponent* GetSkillManger();// 0x222b84c
	int GetSkillIndex();// 0x222bab0
	int GetSkillHandle();// 0x222bbb0
	float[] GetSkillCDProgess();// 0x222b3e4
	float[] GetSkillCDByType(int Type);// 0x222b580
	UTSkillCDBase*[] GetSkillCDBases();// 0x222b770
	UTSkill* GetSkill();// 0x222bb68
	float GetMaxEnergy(int Index);// 0x222ae20
	float GetEnergyValue(int Index);// 0x222b1e8
	float GetEnergyThreshold(int Index);// 0x222b004

--------------------------------
Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x240, Size: 0x8]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x248, Size: 0x8]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x250, Size: 0x8]
	UAEUserWidget* ParentWidget;//[Offset: 0x258, Size: 0x8]
	Params(FieldPathProperty)[] Params;//[Offset: 0x2b0, Size: 0x10]
	delegate widgetSizeNofity;//[Offset: 0x2d0, Size: 0x10]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x2e0, Size: 0x28]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x308, Size: 0x28]
	float TickRate;//[Offset: 0x330, Size: 0x4]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 0x1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x336, Size: 0x1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x337, Size: 0x1]
	Vector2D ScreenPos;//[Offset: 0x338, Size: 0x8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x340, Size: 0x8]
	delegate OnMouseButtonDownHandler;//[Offset: 0x348, Size: 0x10]
	delegate OnMouseButtonUpHandler;//[Offset: 0x358, Size: 0x10]
	enum FadingStatus;//[Offset: 0x371, Size: 0x1]
	float CurrentOpacity;//[Offset: 0x374, Size: 0x4]
	float FadingInTime;//[Offset: 0x378, Size: 0x4]
	float FadingOutTime;//[Offset: 0x37c, Size: 0x4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 0x1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x382, Size: 0x1]
	bool Visible();// 0x3ed7550
	void UnRegistFromGameFrontendHUD();// 0x3ed7328
	void SynchronizeBlueprintProperties();// 0x43841ec
	void Show();// 0x3ed759c
	void SetParentWidgetRecursive(UAEUserWidget* InParentWidget);// 0x3ed775c
	void SetParentWidget(UAEUserWidget* InParentWidget);// 0x3ed77d8
	void SetAdapation(float Left, float Top, float Right, float Bottom);// 0x3ed73d4
	void RegistToGameFrontendHUD();// 0x3ed733c
	void Register(LogicManagerBase* LogicManager, bool bAddToViewport);// 0x3ed7854
	void ReceiveShow();// 0x43841ec
	void ReceiveHide();// 0x43841ec
	void ReceivedInitWidget();// 0x43841ec
	void OnRightClicked(Vector2D TempScreenPos);// 0x43841ec
	void OnFadeOutFinished();// 0x3ed7518
	void OnFadeInFinished();// 0x3ed7534
	void OnDoubleClicked(Vector2D TempScreenPos);// 0x43841ec
	void OnClicked(Vector2D TempScreenPos);// 0x43841ec
	void Hide();// 0x3ed7588
	void HandleUIMessageBattle(FString UIMessage);// 0x3ed75b0
	void HandleUIMessage(FString UIMessage);// 0x3ed7638
	UAEUserWidget* GetParentWidget();// 0x3ed76c0
	LogicManagerBase* GetOwningLogicManager();// 0x3ed76f4
	FrontendHUD* GetOwningFrontendHUD();// 0x3ed7728
	MaterialInstanceDynamic* GetImgDynamicMaterial(Image* ImageMat);// 0x3ed7350

--------------------------------
Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x40, Size: 0x8]
	FString FrontendUtilsClassName;//[Offset: 0x50, Size: 0x10]
	FrontendUtils* Utils;//[Offset: 0x60, Size: 0x8]
	FString LatestGameStatusURL;//[Offset: 0x68, Size: 0x10]
	<FName,class FrontendState> StateClassMap;//[Offset: 0x78, Size: 0x50]
	FrontendState* CurrentState;//[Offset: 0xc8, Size: 0x8]
	FName LastGameStatus;//[Offset: 0xd0, Size: 0x8]
	FString LastStatusOptions;//[Offset: 0xd8, Size: 0x10]
	AssetsPreloaderBase* AssetsPreloader;//[Offset: 0xe8, Size: 0x8]
	void SwitchGameStatus(FName GameStatus, FString Options);// 0x3ed2ee0
	void ShutdownUnrealNetwork();// 0x3ed2e94
	void ReturnToLastStatus();// 0x3ed2ea8
	void ResetGameStauts();// 0x3ed2ec4
	World* GetWorld();// 0x3ed30a4
	FrontendUtils* GetUtils();// 0x3ed3008
	PlayerController* GetPlayerController();// 0x3ed303c
	FName GetLastGameStatus();// 0x3ed2e24
	GameViewportClient* GetGameViewportClient();// 0x3ed3070
	FName GetGameStatus();// 0x3ed2e5c
	FrontendState* GetCurrentState();// 0x3ed2e08

--------------------------------
Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28, Size: 0x8]
	FName CurrentSceneCameraName;//[Offset: 0x48, Size: 0x8]
	CameraActor*[] SceneCameraList;//[Offset: 0x50, Size: 0x10]
	<FName,CameraActor*> SceneCameraMap;//[Offset: 0x60, Size: 0x50]
	<FString,LevelStreamingDynamic*> DynamicLevelMap;//[Offset: 0x108, Size: 0x50]
	void UnRegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x3ed3838
	void SwitchSceneCamera(FName SceneCameraName, float BlendTime, bool bForce);// 0x3ed39b0
	void RegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x3ed38f4
	void OnUnLoadedDynamicLevel();// 0x3ed374c
	void OnLoadedDynamicLevel();// 0x3ed3774
	void OnHandleSteamingLevelComplete(int LinkID);// 0x3ed3788
	void OnDynamicLevelVisible();// 0x3ed3760
	FrontendHUD* GetOwningFrontendHUD();// 0x3ed3abc
	CameraActor* GetCurrentSceneCamera();// 0x3ed3804

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x160, Size: 0x1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x160, Size: 0x1]
	static LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x5fce828
	static LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x5fcea70

--------------------------------
Class: FrontendState.Object
	FName StateName;//[Offset: 0x28, Size: 0x8]
	FString Options;//[Offset: 0x30, Size: 0x10]
	FString MapPath;//[Offset: 0x40, Size: 0x10]
	FString StateURL;//[Offset: 0x50, Size: 0x10]
	World* MapWorld;//[Offset: 0x60, Size: 0x8]
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x68, Size: 0x8]
	enum RunningStatus;//[Offset: 0x70, Size: 0x1]
	<enum,int> StateTimeoutConfig;//[Offset: 0x78, Size: 0x50]
	void OnWorldBeginPlayFinish(World* World);// 0x3ed41c8
	void OnStatusChanged();// 0x3ed424c
	World* GetStateWorld();// 0x3ed4410
	FString GetStateURL();// 0x3ed4308
	enum GetStateStatus();// 0x3ed442c
	FString GetStateOptions();// 0x3ed4268
	FName GetStateName();// 0x3ed42ec
	FString GetMapPath();// 0x3ed438c

--------------------------------
Class: AssetsPreloaderBase.Object

--------------------------------
Class: LogicManagerBase.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x38, Size: 0x8]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	int iUIControlState;//[Offset: 0x44, Size: 0x4]
	int DefaultSceneCameraIndex;//[Offset: 0x48, Size: 0x4]
	float DefaultCameraBlendTime;//[Offset: 0x4c, Size: 0x4]
	FName[] GameStatusList;//[Offset: 0x60, Size: 0x10]
	FString[] PushedWidgets;//[Offset: 0x70, Size: 0x10]
	FString[] DefaultChildList;//[Offset: 0x80, Size: 0x10]
	class Object[] WidgetUClassList;//[Offset: 0x90, Size: 0x10]
	UAEUserWidget*[] WidgetList;//[Offset: 0xa0, Size: 0x10]
	<FString,UAEUserWidget*> WidgetMap;//[Offset: 0xb0, Size: 0x50]
	FString[] DelayMessage;//[Offset: 0x108, Size: 0x10]
	Object*[] DelayMessage_Obj;//[Offset: 0x118, Size: 0x10]
	void SetEnableRemoveDynamicWidgets(bool bEnable);// 0x3ed49e0
	bool IsEnableRemoveDynamicWidgets();// 0x3ed4a64
	FrontendHUD* GetOwningFrontendHUD();// 0x3ed4c30
	int GetDefaultSceneCamera();// 0x3ed4bfc
	void DispatchUIMessage(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x3ed4a9c

--------------------------------
Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	UAEUserWidget*[] WidgetList;//[Offset: 0x388, Size: 0x10]
	UAEUserWidget*[] WidgetBufferList;//[Offset: 0x398, Size: 0x10]
	void RemoveWidgetInternal(UAEUserWidget* Widget);// 0x3ed8768
	void RemoveWidget(UAEUserWidget* Widget);// 0x3ed8870
	void AddWidgetInternal(UAEUserWidget* Widget);// 0x3ed87ec
	void AddWidget(UAEUserWidget* Widget);// 0x3ed88ec

--------------------------------
Class: UserWidgetState
	FString WidgetName;//[Offset: 0x0, Size: 0x10]
	FName ContainerName;//[Offset: 0x10, Size: 0x8]
	int ZOrder;//[Offset: 0x18, Size: 0x4]
	UAEUserWidget* Widget;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x110, Size: 0x88]
	delegate BrushDelegate;//[Offset: 0x198, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x1a8, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b8, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1cc, Size: 0x10]
	Object* SoftResourceObject;//[Offset: 0x228, Size: 0x28]
	Object* LODSoftResourceObject;//[Offset: 0x250, Size: 0x8]
	bool bIsOpenSoftResLoader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	void SetOpacity(float InOpacity);// 0x53e9308
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x53e9384
	void SetBrushTintColor(SlateColor TintColor);// 0x53e9124
	void SetBrushSize(Vector2D DesiredSize);// 0x53e9290
	void SetBrushResourceObject(Object* ResourceObject);// 0x53e90a8
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x53e8bd0
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x53e8d90
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x53e89cc
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x53e88a0
	void SetBrushFromPathAsync(FString ResourcePath);// 0x53e8818
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x53e8b4c
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x53e8ca0
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x53e8e60
	void SetBrush(out const SlateBrush InBrush);// 0x53e8ee4
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x53e87e4

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0xe4, Size: 0x1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: UTSkillPhase.ActorComponent.Object
	int PhaseIndex;//[Offset: 0xf8, Size: 0x4]
	FString PhaseName;//[Offset: 0x100, Size: 0x10]
	FString PhaseDescription;//[Offset: 0x110, Size: 0x10]
	FName PhaseTag;//[Offset: 0x120, Size: 0x8]
	bool bDeserializeComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	UTSkill* OwnerSkill;//[Offset: 0x12c, Size: 0x8]
	UTSkillPhaseCreateData BaseData;//[Offset: 0x138, Size: 0xc8]
	bool bSkillStopAutonomousNotNeedCare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0x208, Size: 0x8]
	bool StopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x2229ec0
	void StartPhase(UTSkillManagerComponent* SkillManagerComponent, bool bIgnoreCheckPawnState);// 0x2229fd4
	void RecoverPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x2229e3c
	bool PlaySkillHurtEffect(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x2229ce0
	bool PlaySkillHurtAppearances(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x2229c08
	void PickTargets(UTSkillManagerComponent* SkillManagerComponent);// 0x2229f50
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, UTSkillManagerComponent* EventOrigin);// 0x222a1c0
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, UTSkillManagerComponent* EventOrigin);// 0x222a0a4
	float GetPhaseSpeed(UTSkillManagerComponent* SkillManagerComponent);// 0x2229ac8
	float GetPhaseDuration(UTSkillManagerComponent* SkillManagerComponent);// 0x2229b4c
	void ForceExecutePhase(UTSkillManagerComponent* SkillManagerComponent);// 0x2229db8
	bool ClearAttachments();// 0x2229bd0

--------------------------------
Class: UTSkillPhaseCreateData
	float PhaseDuration;//[Offset: 0x0, Size: 0x4]
	float PhaseSpeed;//[Offset: 0x4, Size: 0x4]
	float AutonomousPhaseDelay;//[Offset: 0x8, Size: 0x4]
	bool bMustHasTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bCoolDownStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool bReleasedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	int NextPhaseID;//[Offset: 0x10, Size: 0x4]
	<int> NextPhaseIDs;//[Offset: 0x18, Size: 0x50]
	UTSkillCondition*[] PhaseConditions;//[Offset: 0x68, Size: 0x10]
	enum PhaseType;//[Offset: 0x78, Size: 0x1]
	FString EnterPhaseTipString;//[Offset: 0x80, Size: 0x10]
	UTSkillPicker* Picker;//[Offset: 0x90, Size: 0x8]
	UTSkillEffect*[] Actions;//[Offset: 0x98, Size: 0x10]
	UTSkillEffect*[] HurtAppearances;//[Offset: 0xa8, Size: 0x10]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0xb8, Size: 0x10]

--------------------------------
Class: UTSkillCondition.UTSkillBaseWidget.Object
	enum[] ErrorCode;//[Offset: 0x48, Size: 0x10]
	bool IsTargetOK(ActorComponent* SkillManagerComponent, Actor* Target);// 0x221b1a8
	bool IsOK_Internal(out int SearchDepth);// 0x221b108
	bool IsOK(ActorComponent* SkillManagerComponent, out int SearchDepth);// 0x221b280

--------------------------------
Class: UTSkillBaseWidget.Object
	bool bWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	UTSkill* OwnerSkill;//[Offset: 0x34, Size: 0x8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0x40, Size: 0x8]
	bool GetTargetActor(UTSkillManagerComponent* SkillManagerComponent, out Actor*[] OutTargets);// 0x221bad8
	Actor* GetOwnerPawn();// 0x221bbd0

--------------------------------
Class: UTSkillPicker.UTSkillBaseWidget.Object
	UTSkillPickerCreateData BaseData;//[Offset: 0x48, Size: 0xc]
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0x60, Size: 0x10]
	Actor*[] IgnoreTargets;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: UTSkillPickerCreateData
	enum PickerType;//[Offset: 0x0, Size: 0x1]
	enum PickerTargetType;//[Offset: 0x1, Size: 0x1]
	int PickerMaxCount;//[Offset: 0x4, Size: 0x4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool WallCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]

--------------------------------
Class: UTSkillPickedTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	Vector ImpactPoint;//[Offset: 0x8, Size: 0xc]
	PrimitiveComponent*[] TargetComponents;//[Offset: 0x18, Size: 0x10]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	byte HitPos;//[Offset: 0x29, Size: 0x1]
	FName BoneName;//[Offset: 0x2c, Size: 0x8]
	Vector HitEnvLocation;//[Offset: 0x34, Size: 0xc]
	byte hitPhysMatType;//[Offset: 0x40, Size: 0x1]
	bool IgnoreTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]

--------------------------------
Class: UTSkillEffect.UTSkillBaseWidget.Object
	float fADScale;//[Offset: 0x48, Size: 0x4]
	float fAPScale;//[Offset: 0x4c, Size: 0x4]
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x221c084
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x221c1d0
	void RecoverAction(UTSkillManagerComponent* SkillManagerComponent);// 0x221bef8
	void PhaseExit(UTSkillManagerComponent* SkillManagerComponent);// 0x221bf7c
	void MainHandInterruptSkill(UTSkillManagerComponent* SkillManagerComponent);// 0x221c14c
	void DoHurtAppearance(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x221c2e4
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x221c254
	void CameraModeChangedEvent(UTSkillManagerComponent* SkillManagerComponent);// 0x221c000

--------------------------------
Class: UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
	byte SkillEventType;//[Offset: 0x48, Size: 0x1]
	FName[] InterestedOwnerTags;//[Offset: 0x50, Size: 0x10]
	UTSkillEffect* SkillEffect;//[Offset: 0x60, Size: 0x8]
	bool bSkipFollowingActions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	SkillConditionWarpper[] Conditions;//[Offset: 0x70, Size: 0x10]
	SkillConditionWarpper[] TargetConditions;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: SkillConditionWarpper
	UTSkillCondition* SkillCondition;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkillTriggerBase.Object
	UTSkillManagerComponent* SkillManagerComponent;//[Offset: 0x28, Size: 0x8]
	int SkillID;//[Offset: 0x30, Size: 0x4]
	void OnUnInitSkill();// 0x43841ec
	void OnInitSkill();// 0x43841ec
	UTSkillManagerComponent* GetSkillManagerComponent();// 0x2214f38

--------------------------------
Class: SecurityAntiData
	FString UID;//[Offset: 0x0, Size: 0x10]
	FString AntiData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: PredictionKey
	PackageMap* PredictiveConnection;//[Offset: 0x0, Size: 0x8]
	int16 BaseKey;//[Offset: 0x8, Size: 0x2]
	int16 RelyKey;//[Offset: 0xa, Size: 0x2]
	bool bIsServerInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: SkillPickerModule.SkillObject.Object
	ApexSkillManagerComponent* ParentSkillManagerComponent;//[Offset: 0x28, Size: 0x8]
	SkillPickerConfigData*[] PickerTaskArray;//[Offset: 0x30, Size: 0x10]
	<int,ApexSkillTargetResult*> PickerResultPool;//[Offset: 0x40, Size: 0x50]
	<int,delegate> PickerSignalLisenters;//[Offset: 0x90, Size: 0x50]
	void UnRegisterSignalListener(const int SkillPickerKey);// 0x3db17ec
	int TriggerPicker(SkillPickerConfigData* PickerConfigData, delegate SkillPickerSignalLisenter, bool bNoDelay);// 0x3db1958
	void TickPicker(float DeltaTime);// 0x3db1a94
	void RegisterSignalListener(const int SkillPickerKey, delegate SkillPickerSignalLisenter);// 0x3db1870
	ApexSkillTargetResult* PopPickerResult(const int SkillPickerKey);// 0x3db1760

--------------------------------
Class: SkillObject.Object

--------------------------------
Class: SkillPickerConfigData.Object
	PickerDescription* PickerDescription;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: PickerDescription.Object
	enum DescriptionType;//[Offset: 0x28, Size: 0x1]
	class Object[] KeepActorClassArray;//[Offset: 0x30, Size: 0x10]
	enum[] KeepActorTypeArray;//[Offset: 0x40, Size: 0x10]
	Object* Context;//[Offset: 0x50, Size: 0x8]
	int SkillPickerKey;//[Offset: 0x58, Size: 0x4]
	Vector Location;//[Offset: 0x5c, Size: 0xc]
	Quat Rotation;//[Offset: 0x70, Size: 0x10]
	Vector[] PickerLocationOffsetArray;//[Offset: 0x80, Size: 0x10]
	void PerformPicker(out Actor*[] PickerActorArray);// 0x3a26b0c
	bool IsKeepActorClass(Actor* TargetActor);// 0x3a269cc
	ApexSkillTargetResult* GetSkillPickerResult(out const Actor*[] PickerActorArray);// 0x3a26a5c

--------------------------------
Class: ApexSkillTargetResult.SkillEventParam.Object
	ApexSkillTargetActorArray[] PickerTargetArray;//[Offset: 0x60, Size: 0x10]
	SkillPickerConfigData* SkillPickerConfigData;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: ApexSkillTargetActorArray
	enum PickerTargetType;//[Offset: 0x0, Size: 0x1]
	Actor*[] ActorList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ParticleSystemAsync.AsyncLoaderBase.Object
	ParticleSystem* ParticleSystemTemplate;//[Offset: 0x38, Size: 0x8]
	ParticleSystem* SOPParticleSystemTemplate;//[Offset: 0x40, Size: 0x28]
	ParticleSystemComponent* ParticleSystemComp;//[Offset: 0x68, Size: 0x8]
	SceneComponent* _AttachToComponent;//[Offset: 0x70, Size: 0x8]
	World* _Wolrd;//[Offset: 0x80, Size: 0x8]
	void SetTemplate(ParticleSystemComponent* Target, ParticleSystem* EmitterTemplate, out const delegate LoadFinishedCallback);// 0x3ce3338
	void SetHiddenInGame(bool NewHidden);// 0x3ce328c
	void ReleaseToPool();// 0x3ce3310
	void OnLoadPSFinished_Attached(out const SoftObjectPath[] Paths, out const Object*[] Assets, ParticleSystem* EmitterTemplate);// 0x3ce2cf8
	void OnLoadPSFinished_AtLocation(out const SoftObjectPath[] Paths, out const Object*[] Assets, ParticleSystem* EmitterTemplate);// 0x3ce2ad8
	void OnLoadPSFinished(out const SoftObjectPath[] Paths, out const Object*[] Assets, ParticleSystem* EmitterTemplate);// 0x3ce2f18
	ParticleSystem* GetSOPParticleTemplate();// 0x3ce31a0
	ParticleSystem* GetParticleTemplate();// 0x3ce3258
	ParticleSystemComponent* GetParticleComponent();// 0x3ce316c
	SceneComponent* GetAttachedComponent();// 0x3ce3138
	void DestroyComponent();// 0x3ce3324

--------------------------------
Class: AsyncLoaderBase.Object
	Object* Context;//[Offset: 0x28, Size: 0x8]
	void Reset();// 0x3a84170

--------------------------------
Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]
	CharacterAnimDataAsset* AnimationDataSet;//[Offset: 0x1c8, Size: 0x28]
	CharacterAnimDataAsset* CurrentAnimDataAsset;//[Offset: 0x208, Size: 0x8]
	AnimSoftObject[] NeedLoadAnimArray;//[Offset: 0x210, Size: 0x10]
	int CustomLoadIndex;//[Offset: 0x220, Size: 0x4]
	int CustomPerLoadCount;//[Offset: 0x224, Size: 0x4]
	uint32 CustomAnimLoadId;//[Offset: 0x228, Size: 0x4]
	PlayerAnimData[] GetCharacterJumpAnim(byte JumpType, bool IsFPP);// 0x3e02324
	AnimationAsset* GetCharacterAnim(byte AnimType, byte PoseType, bool IsFPP);// 0x3e02438

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterAsynLoadedTypeAnim[] CharacterAsynLoadedAnims;//[Offset: 0x1a8, Size: 0x10]

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0x140, Size: 0x50]

--------------------------------
Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimListData
	int LayerID;//[Offset: 0x0, Size: 0x4]
	AnimationAsset* Animation;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CharacterAsynLoadedTypeAnim
	byte AnimTypeAsynLoaded;//[Offset: 0x0, Size: 0x1]
	FString AnimsCatorgeryName;//[Offset: 0x8, Size: 0x10]
	CharacterAnimTypeAsynLoadedPhaseData Anim;//[Offset: 0x18, Size: 0x60]

--------------------------------
Class: CharacterAnimTypeAsynLoadedPhaseData
	FString PhaseName;//[Offset: 0x0, Size: 0x10]
	<byte,AnimationAsset*> PhaseAnimSoftPtr;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0, Size: 0x8]
	float Rate;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CharacterAnimDataAsset.DataAsset.Object
	<FinalKey,AnimationAsset*> AnimListMap;//[Offset: 0x30, Size: 0x50]
	AnimationAsset*[] AnimListMapValueArray;//[Offset: 0x80, Size: 0x10]
	RandomPlayerSequenceEntryContainer TppIdleRandomContainer;//[Offset: 0x90, Size: 0x10]
	<AnimationAsset*> RetainAnimAssets;//[Offset: 0xa0, Size: 0x50]
	<AnimationAsset*> ProbeLoadAnimAssets;//[Offset: 0xf0, Size: 0x50]
	<AnimationAsset*> RetainProbeAnimAssets;//[Offset: 0x140, Size: 0x50]
	uint32 RefCount;//[Offset: 0x190, Size: 0x4]
	float CurrentMinDistanceSquaredToCamera;//[Offset: 0x194, Size: 0x4]
	bool bProbeAnimLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	AnimSequence*[] GrabAllAnimSeqs(int inMinFrameNum);// 0x3b07058

--------------------------------
Class: FinalKey
	int Key;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: RandomPlayerSequenceEntryContainer
	RandomPlayerSequenceEntryX[] Entries;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RandomPlayerSequenceEntryX
	AnimSequence* Sequence;//[Offset: 0x0, Size: 0x8]
	float ChanceToPlay;//[Offset: 0x8, Size: 0x4]
	int MinLoopCount;//[Offset: 0xc, Size: 0x4]
	int MaxLoopCount;//[Offset: 0x10, Size: 0x4]
	float MinPlayRate;//[Offset: 0x14, Size: 0x4]
	float MaxPlayRate;//[Offset: 0x18, Size: 0x4]
	AlphaBlend BlendIn;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: AnimSoftObject
	AnimationAsset* AnimSoftObjectPtr;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: UAESkillAction_ReplaceCharAnim.UAESkillAction.ApexSkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.Object
	SkillReplaceCharAnimData[] AnimDataList;//[Offset: 0x80, Size: 0x10]
	SkillReplaceJumpAnimData[] JumpAnimDataList;//[Offset: 0x90, Size: 0x10]
	bool bResetWhenPhaseFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bResetWhenNewReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	bool DoReplaceEnableUseBaseBSTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 0x1]
	bool IsRecoverOnReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 0x1]

--------------------------------
Class: UAESkillAction.ApexSkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.Object
	void ResumeActionBP(UTSkillManagerComponent* SkillManagerComponent);// 0x3e064d0
	void ResumeAction_Internal();// 0x3e06498
	void PauseActionBP(UTSkillManagerComponent* SkillManagerComponent);// 0x3e06554
	void PauseAction_Internal();// 0x3e064b4

--------------------------------
Class: ApexSkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.Object
	bool bEnableObChangeDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1]
	bool bDisableObDelegateWhenReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 0x1]
	SkillEventParam* SkillEventParamRecieved;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: UTSkillAction.UTSkillEffect.UTSkillBaseWidget.Object
	UTSkillActionCreateData BaseData;//[Offset: 0x50, Size: 0xc]
	bool m_Inheritable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool m_OverrideActionColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	LinearColor m_ActionColor;//[Offset: 0x64, Size: 0x10]
	bool m_Disabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	void UpdateActionBP(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x2217024
	void UpdateAction_Internal(float DeltaSeconds);// 0x2216dfc
	void UndoActionBP(UTSkillManagerComponent* SkillManagerComponent);// 0x22170ec
	void UndoAction_Internal();// 0x2216e80
	void ResetBP(UTSkillManagerComponent* SkillManagerComponent);// 0x2216fa0
	void Reset_Internal();// 0x2216de0
	void Reset(ActorComponent* SkillManagerComponent);// 0x2217200
	bool RealDoActionBP(UTSkillManagerComponent* SkillManagerComponent);// 0x2217170
	bool RealDoAction_Internal();// 0x2216e9c
	bool RealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x221727c
	void PhaseExit_Internal();// 0x2216dc4
	bool JudgeNeedPhaseWait();// 0x2216edc
	void CameraModeChangedEventBP(UTSkillManagerComponent* SkillManagerComponent);// 0x2216f1c
	void CameraModeChangedEvent_Internal();// 0x2216da8

--------------------------------
Class: UTSkillActionCreateData
	float DelayTime;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	bool IsBlueprintImplement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bForceExecute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bImportant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: SkillReplaceCharAnimData
	byte CharacterAnimType;//[Offset: 0x0, Size: 0x1]
	AnimationAsset*[] PoseAnimList;//[Offset: 0x8, Size: 0x10]
	AnimationAsset*[] FPPPoseAnimList;//[Offset: 0x18, Size: 0x10]
	AnimationAsset*[] PoseUnarmedAnimList;//[Offset: 0x28, Size: 0x10]
	ConditionalReplaceAnimData ConditionalAnimData;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ConditionalReplaceAnimData
	ConditionalSkillReplaceCharAnimData[] ConditionalAnimDataList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ConditionalSkillReplaceCharAnimData
	CompositionCondition[] Conditions;//[Offset: 0x0, Size: 0x10]
	AnimationAsset*[] PoseAnimList;//[Offset: 0x10, Size: 0x10]
	AnimationAsset*[] FPPPoseAnimList;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CompositionCondition
	enum ConditionPose;//[Offset: 0x0, Size: 0x1]
	enum Op;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: SkillReplaceJumpAnimData
	byte CharacterJumpType;//[Offset: 0x0, Size: 0x1]
	ChararacterJumpAnimData[] TPPPoseData;//[Offset: 0x8, Size: 0x10]
	ChararacterJumpAnimData[] FPPPoseAnim;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ChararacterJumpAnimData
	byte JumpPhase;//[Offset: 0x0, Size: 0x1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: SkillPreloadData
	Object* ObjectPtr;//[Offset: 0x0, Size: 0x28]
	enum MatchPlatform;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: SkillLocPickInfo
	bool bIsLocOK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector[] PosList;//[Offset: 0x8, Size: 0x10]
	Rotator[] RotList;//[Offset: 0x18, Size: 0x10]
	FString[] StrList;//[Offset: 0x28, Size: 0x10]
	PrimitiveComponent*[] BaseList;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: HandStateData
	enum OperationType;//[Offset: 0x0, Size: 0x1]
	FString OperationGroup;//[Offset: 0x8, Size: 0x10]
	HandStateCustomData CustomData;//[Offset: 0x18, Size: 0xc]
	bool OverrideCustomData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	enum eOperationSrcType;//[Offset: 0x25, Size: 0x1]
	float Timestamp;//[Offset: 0x28, Size: 0x4]
	int UniqueID;//[Offset: 0x2c, Size: 0x4]
	FString DetailDesc;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: HandStateCustomData
	int CustomIntData1;//[Offset: 0x0, Size: 0x4]
	int CustomIntData2;//[Offset: 0x4, Size: 0x4]
	enum WeaponSlot;//[Offset: 0x8, Size: 0x1]
	bool bNeedWeaponProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: UTSkillSynData
	uint64 DoneSkillPhaseMask;//[Offset: 0x0, Size: 0x8]
	int CurSkillIndex;//[Offset: 0x8, Size: 0x4]
	int CurSkillPhase;//[Offset: 0xc, Size: 0x4]
	enum StopReason;//[Offset: 0x10, Size: 0x1]
	bool bCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	int PhaseFlag;//[Offset: 0x14, Size: 0x4]
	int ClientBaseKey;//[Offset: 0x18, Size: 0x4]
	int CastCount;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: UTSkillPhaseJumpResult
	int SkillIndex;//[Offset: 0x0, Size: 0x4]
	byte DirtyTrigger;//[Offset: 0x4, Size: 0x1]
	enum ResultCode;//[Offset: 0x5, Size: 0x1]

--------------------------------
Class: UTSkillHitEnvInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 0x10]
	Actor* FromPawn;//[Offset: 0x10, Size: 0x8]
	int SkillID;//[Offset: 0x18, Size: 0x4]
	int SkillPhaseID;//[Offset: 0x1c, Size: 0x4]
	byte HitSurfaceType;//[Offset: 0x20, Size: 0x1]
	Vector HitEnvLocation;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: UTSkillHitInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 0x10]
	Actor* FromPawn;//[Offset: 0x10, Size: 0x8]
	int SkillID;//[Offset: 0x18, Size: 0x4]
	int SkillPhaseID;//[Offset: 0x1c, Size: 0x4]
	bool Flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	byte HitSurfaceType;//[Offset: 0x22, Size: 0x1]
	Vector HitEnvLocation;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4]
	int Seed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: UTAddedSkillSturct
	FString SkillTemplatePath;//[Offset: 0x0, Size: 0x10]
	int SkillIndex;//[Offset: 0x10, Size: 0x4]
	int SkillHandle;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SkillCDSyncData
	int SkillIndex;//[Offset: 0x0, Size: 0x4]
	bool bEnableCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	int AvailableTimes;//[Offset: 0x8, Size: 0x4]
	int AvailableTimesRound;//[Offset: 0xc, Size: 0x4]
	float Energy;//[Offset: 0x10, Size: 0x4]
	float LastActiveTime;//[Offset: 0x14, Size: 0x4]
	bool bMarkModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: SkillConfigIDData
	int SkillConfigId;//[Offset: 0x0, Size: 0x4]
	SkillFlowData[] DataList;//[Offset: 0x8, Size: 0x10]
	bool bHasInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int UseCount;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SkillFlowData
	FString DataName;//[Offset: 0x0, Size: 0x10]
	bool bIsString;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString DataString;//[Offset: 0x18, Size: 0x10]
	float DataFloat;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: SkillModifierList
	SkillModifierInfo[] List;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SkillModifierInfo
	SkillModifierDesc Desc;//[Offset: 0x0, Size: 0x10]
	SkillModifierOperator Operator;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: SkillModifierDesc
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	FName Tag;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SkillModifierOperator
	FString Value;//[Offset: 0x0, Size: 0x10]
	bool bIsNumericAttribute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	enum OperationType;//[Offset: 0x11, Size: 0x1]
	enum CombineType;//[Offset: 0x12, Size: 0x1]

--------------------------------
Class: SkillModifierCalculator
	FString CalculatedValue;//[Offset: 0x8, Size: 0x10]
	enum CalculatorType;//[Offset: 0x18, Size: 0x1]
	enum CombineType;//[Offset: 0x19, Size: 0x1]

--------------------------------
Class: PredcitionData
	PredictionKey BasePredictionKey;//[Offset: 0x0, Size: 0x10]
	SkillPredictionInfo[] PredictionList;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkillPredictionInfo
	PredictionKey PredictionKey;//[Offset: 0x0, Size: 0x10]
	int BindPhaseId;//[Offset: 0x10, Size: 0x4]
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: SkillActorHealthComponent.ActorComponent.Object
	float Health;//[Offset: 0xf0, Size: 0x4]
	float MaxHealth;//[Offset: 0xf4, Size: 0x4]
	bool bOnlyHitByEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool bInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	delegate OnActorDeadEvent;//[Offset: 0x100, Size: 0x10]
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x3d9ed9c
	void OnActorDead();// 0x3d9ef00
	float GetHealth();// 0x3d9ef1c
	void BP_OnActorDead();// 0x43841ec

--------------------------------
Class: NetPickUpWrapperResult
	int NetGuidValue;//[Offset: 0x0, Size: 0x4]
	bool bDeleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool IsCanPickupByBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	enum SpawnReason;//[Offset: 0x6, Size: 0x1]
	PickUpItemData PickUpInfo;//[Offset: 0x8, Size: 0x30]
	Vector Location;//[Offset: 0x38, Size: 0xc]
	PickUpItemData[] PickUpDataList;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: NetRecoverBannerPlayerInfo
	uint32 RecoverBannerPlayerKey;//[Offset: 0x0, Size: 0x4]
	int LegendId;//[Offset: 0x4, Size: 0x4]
	FString PlayerName;//[Offset: 0x8, Size: 0x10]
	bool bDeleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: PickupManagerComponent.ActorComponent.Object
	float PickupAnimTime;//[Offset: 0xf0, Size: 0x4]
	float InPickupTime;//[Offset: 0xf4, Size: 0x4]
	bool bOpenPickupListAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	byte[] PickupListAnimQueue;//[Offset: 0x100, Size: 0x10]
	bool bCanUpdateAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	uint64[] PickupDropIDPool;//[Offset: 0x118, Size: 0x10]
	int[] AutoPickItemList;//[Offset: 0x130, Size: 0x10]
	Actor*[] PickupAvailableActorPool;//[Offset: 0x150, Size: 0x10]
	Actor*[] PickupAroundActorPool;//[Offset: 0x160, Size: 0x10]
	Actor*[] PickupAroundActorBoxPool;//[Offset: 0x170, Size: 0x10]
	Actor*[] PickupEffectsActorPool;//[Offset: 0x180, Size: 0x10]
	SearchedPickUpWrapperResult[] ConfirmedPickupWrapperPool;//[Offset: 0x190, Size: 0x10]
	SearchedPickUpTombBoxResult[] ConfirmedPickupTombBoxPool;//[Offset: 0x1a0, Size: 0x10]
	<enum,int> PickupWrapperGroupColumn;//[Offset: 0x1b0, Size: 0x50]
	int EachFrameMaxPickUpCount;//[Offset: 0x228, Size: 0x4]
	float LongClickPickUpTime;//[Offset: 0x22c, Size: 0x4]
	int PickUpItemSize;//[Offset: 0x230, Size: 0x4]
	int PickUpTypeSize;//[Offset: 0x234, Size: 0x4]
	delegate OnPlayerPickUp;//[Offset: 0x238, Size: 0x10]
	bool bIsOpenPickUpPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	float InfinitePickupInterval;//[Offset: 0x258, Size: 0x4]
	float PickUpRadius;//[Offset: 0x25c, Size: 0x4]
	float PickUpRadius_MainTown;//[Offset: 0x260, Size: 0x4]
	<enum,float> SpawnReasonToPickUpRadius;//[Offset: 0x268, Size: 0x50]
	float PickUpZOffset;//[Offset: 0x2b8, Size: 0x4]
	float CheckPickUpInterval;//[Offset: 0x2bc, Size: 0x4]
	float PickUpReLocationInterval;//[Offset: 0x2c0, Size: 0x4]
	float PickUpZLimit;//[Offset: 0x2c4, Size: 0x4]
	float PickUpZLimit_MainTown;//[Offset: 0x2c8, Size: 0x4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	bool bEnableMultiObjPickUpVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 0x1]
	float ForwardPickUpAngle;//[Offset: 0x2d0, Size: 0x4]
	float ForwardPickUpAngle_MainTown;//[Offset: 0x2d4, Size: 0x4]
	float CacheForwardPickUpAngleCos;//[Offset: 0x2d8, Size: 0x4]
	bool bAsyncLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]
	float PickEffectRadius;//[Offset: 0x330, Size: 0x4]
	int PickupCheckCount;//[Offset: 0x334, Size: 0x4]
	int PickEffectCount;//[Offset: 0x338, Size: 0x4]
	ParticleSystem* PickupWrapperEffectParticle;//[Offset: 0x340, Size: 0x28]
	Color[] PickupWrapperEffectColor;//[Offset: 0x368, Size: 0x10]
	Color PickupWrapperEffectPingColor;//[Offset: 0x378, Size: 0x4]
	Vector PickupWrapperEffectNormal;//[Offset: 0x37c, Size: 0xc]
	Vector PickupWrapperEffectAim;//[Offset: 0x388, Size: 0xc]
	Transform PickupWrapperEffectTrans;//[Offset: 0x3a0, Size: 0x30]
	PickUpWrapperActor*[] ReadyToLoadPickupEffectArray;//[Offset: 0x3d0, Size: 0x10]
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0x3e0, Size: 0x10]
	int FindPutDownPointCircleSplitNum;//[Offset: 0x3f0, Size: 0x4]
	float FindPutDownPointZTraceOffset;//[Offset: 0x3f4, Size: 0x4]
	float FindPutDownPointZThreshold;//[Offset: 0x3f8, Size: 0x4]
	Vector2D RegionXRange;//[Offset: 0x3fc, Size: 0x8]
	Vector2D RegionYRange;//[Offset: 0x404, Size: 0x8]
	class PlayerTombBox* TombBoxTemplate;//[Offset: 0x410, Size: 0x28]
	bool bShowDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 0x1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0x43c, Size: 0xc]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x448, Size: 0x4]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x44c, Size: 0x4]
	float DebugDrawTime;//[Offset: 0x450, Size: 0x4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 0x1]
	bool bEnableAutoPickNearOnHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x455, Size: 0x1]
	bool bAutoPickUpOptic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x456, Size: 0x1]
	bool bHidePickUpListOnShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x457, Size: 0x1]
	bool bAutoPickUpWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	bool bAutoPickUpSecondWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 0x1]
	bool bLongClickReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45a, Size: 0x1]
	bool bHidePickupListWithinEnmity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45b, Size: 0x1]
	float AutoPickUpInterval;//[Offset: 0x45c, Size: 0x4]
	float SearchedPickUpInterval;//[Offset: 0x460, Size: 0x4]
	float PlayerDropItemInterval;//[Offset: 0x464, Size: 0x4]
	int TickRecommendNearItemCount;//[Offset: 0x468, Size: 0x4]
	int AutoPickItemCacheNum;//[Offset: 0x46c, Size: 0x4]
	<int,PickupItemConfigData> CacheConfigDataMap;//[Offset: 0x4d0, Size: 0x50]
	DataTable* MeshTablePtr;//[Offset: 0x520, Size: 0x8]
	DataTable* PickupMeshTable;//[Offset: 0x528, Size: 0x28]
	float ReportTimeInterval;//[Offset: 0x560, Size: 0x4]
	float SpecificTimeInteval;//[Offset: 0x564, Size: 0x4]
	int SpecificTimesConfig;//[Offset: 0x568, Size: 0x4]
	int[] SpecificTypes;//[Offset: 0x598, Size: 0x10]
	double[] SpecificTriggerTimeArray;//[Offset: 0x5a8, Size: 0x10]
	int OpenTombBoxGuideID;//[Offset: 0x5c8, Size: 0x4]
	int SwitchTomBoxGuideID;//[Offset: 0x5cc, Size: 0x4]
	void UpdatePickupAvailableActors();// 0x3d0b120
	void UpdatePickupAroundActors();// 0x3d0b0bc
	void TriggerIllegalOperation(ItemDefineID ItemID, ApexCharacter* OwnerPlayer, uint32 PlayerKey, enum CreditType, enum CreditTactics, FString InText);// 0x3d09004
	void SubPickupEffectsActor(Actor* Target);// 0x3d0b764
	void SubPickupAvailableActor(Actor* Target);// 0x3d0b97c
	void SubPickupAroundActorBox(Actor* Target);// 0x3d0b658
	void SubPickupAroundActor(Actor* Target);// 0x3d0b870
	void StartTombSwitchGuide();// 0x3d089c8
	void StartGuide(int GuideID);// 0x3d08a58
	PickUpWrapperActor* SpawnWrapperOnGround(class Object WrapperClass, bool bUseRandomLoc, int ItemID, int DID);// 0x3d0ae0c
	void SpawnPickUpTomBoxOnGround(class Object BoxClass, bool bUseRandomLoc);// 0x3d0ac78
	void SpawnPickUpItemOnGroundByID(int ItemID, int DID);// 0x3d0ad48
	void ShowPickupPanel();// 0x3d0a348
	void SetTombBoxUIWidgetVisibility(int Index);// 0x3d0a700
	void SetNearListShowState(bool bIsShow);// 0x3d0a42c
	void SetCanUpdateAround(bool InValue);// 0x3d0bc88
	void SetBoxListShowState(bool bIsShow);// 0x3d0a4b0
	void SetBattleStatePinch(int State);// 0x3d0a550
	void SetAutoPickUp(bool bInAutoPick, bool bToClient);// 0x3d0c360
	void ServerPickUpWrapperActorFromMarketWithWeaponId(LobaBlackMarket* Market, const int NetGuid, PickUpItemData PickUpData, enum PickupGroup, ItemDefineID WeaponID);// 0x3d093a0
	void ServerPickUpWrapperActorFromMarketWithReplaceData(LobaBlackMarket* Market, const int NetGuid, PickUpItemData PickUpData, BattleItemData ReplaceBattleItemData, enum PickupGroup);// 0x3d096b4
	void ServerPickUpWrapperActorFromMarket(LobaBlackMarket* Market, const int NetGuid, PickUpItemData PickUpData, enum PickupGroup, bool bAddPickedItemNum);// 0x3d099d4
	void RPCServerSetAutoPickUp(bool bInAutoPick);// 0x3d0c2d4
	void RPCServerPickUpTarget(PickUpReqData PickUpReqData);// 0x3d0c68c
	void RPCClientSetAutoPickUp(bool bInAutoPick);// 0x3d0c248
	void RPCClientPickUpTarget();// 0x3d0c670
	void RPC_ServerUploadOpenTombBoxData(uint32 OtherPlayerKey, uint16 TotalTimes);// 0x3d08c64
	void RPC_MulticastPlayerPickUpActor(ItemDefineID ItemDefineID, float TargetZLoc);// 0x3d0c598
	void RPC_ClientNotifyPickFailResult(enum InResult, const ItemDefineID InItemID);// 0x3d08b94
	void ResetDates();// 0x3d092ec
	void ReportIllegalOperation(ItemDefineID ItemID, ApexCharacter* OwnerPlayer, uint32 PlayerKey, enum CreditType, enum CreditTactics, FString InText);// 0x3d08da8
	void ReplacePickUpWrapperActor(out const SearchedPickUpWrapperResult TargetPickUpWrapperResult, out const BattleItemData ReplaceBattleItemData);// 0x3d0cf2c
	void RecordDates(ItemDefineID ItemID);// 0x3d09260
	void PlayPickupSound(ItemDefineID ItemDefineID);// 0x3d0c970
	void PlayPickupListAnimQueue();// 0x3d0cd30
	void PickUpWrapperTarget(PickUpWrapperActor* Target, PickUpItemData PickUpData, bool isAutoPickUp);// 0x3d0cabc
	void PickUpWrapperActorLua(out const SearchedPickUpWrapperResult Result, bool bCheckClient);// 0x3d0d24c
	bool PickUpWrapperActor(PickUpWrapperActor* Target, PickUpItemData PickUpData, bool checkClient, bool isAutoPickUp, bool bLongPressReplaced);// 0x3d0d3c8
	bool PickUpWeaponAttach(out const SearchedPickUpWrapperResult Result, ItemDefineID WeaponID);// 0x3d0d0bc
	void OperatePickupAvailableActorPool();// 0x3d0b968
	void OnSettingChanged(FString[] ChangedDataArray);// 0x3d0a030
	void OnPlayerStopFire(Weapon* Weapon);// 0x3d0a1b8
	void OnPlayerStartFire(Weapon* Weapon);// 0x3d0a234
	void OnPlayerBattleStateChange(bool IsEnterBattle);// 0x3d0a2b0
	void OnPingItemUpdate(int64 ItemUUID, uint32 PlayerKey, bool bIsShow, bool IsReserve);// 0x3d0bb28
	void NotifyGamePadPickupListState();// 0x3d0a3e0
	void NotifyClientPickupSuccess(const PickUpReqData PickupItem);// 0x3d0c434
	bool NeedTeamupWhenPick(PickUpWrapperActor* InActor);// 0x3d08b0c
	void LoadMeshTableFinished();// 0x3d09cd8
	void LoadMeshTable();// 0x3d09cec
	void JudgeInPickOverTime(float DeltaTime);// 0x3d0cd44
	bool IsPlayerInMainTown();// 0x3d0baf0
	bool IsPickUpItemDataBelongNear(out const PickUpItemData ItemData);// 0x3d0b2b0
	bool IsInRoomTeam();// 0x3d08ad4
	void InitPickUpItemConfigData();// 0x3d09e9c
	void InitMultiActivityItemConfig(out PickupItemConfigData InCachedData, int ItemID);// 0x3d09d00
	void HidePickupPanel();// 0x3d0a334
	void HandlePlayPickupListAnim(out const PickUpReqData PickupItem);// 0x3d0cdc0
	void HandlePlayerPickUpActor(PickUpWrapperActor* WrapperActor, float TargetZLoc);// 0x3d0c9fc
	void HandlePickupPanelVisble(bool bInBattleState);// 0x3d0a35c
	WeaponManagerComponent* GetWeaponManagerComponent();// 0x3d0d6f4
	int GetRecommendNearItemCount();// 0x3d0a6b8
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x3d0affc
	float GetPickUpZLimit();// 0x3d0bd24
	PickUpWrapperActor* GetPickUpWrapperActorWithInstanceID(uint64 InstanceID);// 0x3d0b134
	float GetPickUpRadius(enum SpawnReason);// 0x3d0bd58
	bool GetPickUpListPanelShow();// 0x3d0b084
	int GetPickUpItemDataBelongTombBoxIndex(out const PickUpItemData ItemData);// 0x3d0b1b8
	PickupItemConfigData GetPickUpItemConfigData(int ItemID);// 0x3d09eb0
	bool GetNearListShowState();// 0x3d0a3f4
	bool GetLongClickReplaceSetting();// 0x3d0bd08
	float GetLongClickPickUpInterval();// 0x3d0a650
	SiglePingInfo GetItemPingInfo(out const SearchedPickUpWrapperResult PickUpWrapperResult);// 0x3d0a7f8
	SearchedPickUpWrapperResult[] GetConfirmedPickupWrapperPool();// 0x3d0b4dc
	int GetConfirmedPickupWrapperCount();// 0x3d0b3e0
	SearchedPickUpTombBoxResult[] GetConfirmedPickupTombBoxPool();// 0x3d0b414
	int GetConfirmedPickupTombBoxCount();// 0x3d0b3ac
	bool GetBoxListShowState();// 0x3d0a410
	int GetBattleStatePinch();// 0x3d0a534
	BackpackComponent* GetBackPackComponent();// 0x3d0d728
	float GetAutoPickUpInterval();// 0x3d0a684
	bool GetAutoPickUp();// 0x3d0c210
	int[] GetAutoPickItemList();// 0x3d0a5cc
	void EndGuide(int GuideID);// 0x3d089dc
	void DeletePickUpItemPing(out const SearchedPickUpWrapperResult PickUpWrapperResult);// 0x3d0aa10
	void ClientUploadOpenTombBoxData(int InIndex);// 0x3d08d2c
	void ClearPickupEffectsActorPool();// 0x3d0b750
	void ClearPickupAroundActorPool();// 0x3d0b85c
	void ClearPickupAroundActorBoxPool();// 0x3d0b644
	void ClampWorldLocation(out Vector OutVector);// 0x3d0af74
	void CheckPickupUIShow();// 0x3d0b0d0
	void CheckPickupActorEffect();// 0x3d0b0e4
	void CheckPickupActorBoxAvailable();// 0x3d0b0f8
	void CheckPickupActorAvailable();// 0x3d0b10c
	bool CanReport(ItemDefineID ItemID);// 0x3d09300
	bool CanLongClickPickUpItem(PickUpItemData PickUpInfo);// 0x3d0bddc
	bool CanClickPickUpItem(PickUpItemData PickUpInfo, bool IgnoreLongClick);// 0x3d0bfd0
	void BroadcastSelectTombBox(int TombBoxResultIndex);// 0x3d0a77c
	void AutoPickUpActor();// 0x3d0a6ec
	void AddToPickupActorPool(Actor* Target);// 0x3d0ba74
	void AddPickUpItemPing(out const SearchedPickUpWrapperResult PickUpWrapperResult);// 0x3d0ab44
	void AddPickupEffectsActor(Actor* Target);// 0x3d0b7e0
	void AddPickupAvailableActor(Actor* Target);// 0x3d0b9f8
	void AddPickupAroundActorBox(Actor* Target);// 0x3d0b6d4
	void AddPickupAroundActor(Actor* Target);// 0x3d0b8ec

--------------------------------
Class: SearchedPickUpWrapperResult
	int SearchedPickUpTime;//[Offset: 0x8, Size: 0x4]
	bool IsDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool IsSick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool IsLowQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	bool IsRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 0x1]
	int RecommendCount;//[Offset: 0x10, Size: 0x4]
	PickUpItemData PickUpInfo;//[Offset: 0x18, Size: 0x30]
	int ItemSubType;//[Offset: 0x48, Size: 0x4]
	ItemDefineID BulletDefineID;//[Offset: 0x50, Size: 0x10]
	enum PickupGroup;//[Offset: 0x60, Size: 0x1]
	bool IsGroupColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	int Size;//[Offset: 0x64, Size: 0x4]
	int NetGuid;//[Offset: 0x68, Size: 0x4]
	bool bDeleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	bool IsCanPickupByBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1]
	bool IsLobaOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 0x1]
	enum SpawnReason;//[Offset: 0x6f, Size: 0x1]
	Vector Location;//[Offset: 0x70, Size: 0xc]
	uint32 RecoverBannerPlayerKey;//[Offset: 0x7c, Size: 0x4]
	int RecoverBannerLegendId;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: SearchedPickUpTombBoxResult
	PlayerTombBox* TombBox;//[Offset: 0x0, Size: 0x8]
	int SearchedPickUpTime;//[Offset: 0x8, Size: 0x4]
	SearchedPickUpWrapperResult[] WrapperList;//[Offset: 0x10, Size: 0x10]
	SearchedPickUpWrapperResult[] SeekerWrapperList;//[Offset: 0x20, Size: 0x10]
	int Quality;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: PickupItemConfigData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	FText ItemName;//[Offset: 0x8, Size: 0x18]
	FText ShotItemDesc;//[Offset: 0x20, Size: 0x18]
	FName ItemSmallIcon;//[Offset: 0x38, Size: 0x8]
	FName ItemBigIcon;//[Offset: 0x40, Size: 0x8]
	int ItemQuality;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: PickUpReqData
	PickUpWrapperActor* PickupActor;//[Offset: 0x0, Size: 0x8]
	PickUpItemData PickUpData;//[Offset: 0x8, Size: 0x30]
	bool bIsAutoPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bIsReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	PickUpItemData ReplaceItemData;//[Offset: 0x40, Size: 0x30]
	ItemDefineID TargetID;//[Offset: 0x70, Size: 0x10]
	bool bLobaMarket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bLongPressReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]

--------------------------------
Class: Weapon.Actor.Object
	WeaponMeshComponent* WeaponMeshComponent;//[Offset: 0x2e8, Size: 0x8]
	ApgameWeaponCoreComponent* WeaponCoreCompPtr;//[Offset: 0x2f0, Size: 0x8]
	WeaponDataAsset* WeaponConfigDataBP;//[Offset: 0x2f8, Size: 0x8]
	ShootWeaponDataAsset* ShootWeaponConfigDataBP;//[Offset: 0x300, Size: 0x8]
	WeaponStateManagerLogicObject* StateManagerLogic;//[Offset: 0x308, Size: 0x8]
	WeaponEffectLogicObject* WeaponEffectLogic;//[Offset: 0x310, Size: 0x8]
	void SetWeaponAttrModifierEnable(FString AttrModifierID, bool bEnable);// 0x3e663f8
	bool IsOwnerAutonomous();// 0x3e66a18
	bool IsLikeAutonomous();// 0x3e66a50
	enum GetWeaponType();// 0x3e66968
	enum GetWeaponSlot();// 0x3e66934
	MeshComponent* GetWeaponMeshComponent();// 0x3e66824
	bool GetWeaponIsInit();// 0x3e668fc
	enum GetWeaponAttachSocket();// 0x3e6671c
	enum GetWeaponAnimType();// 0x3e66750
	float GetStockFactor();// 0x3e66534
	float GetStockBreathFactor();// 0x3e66500
	float GetRaiseWeaponTimeRuntime();// 0x3e665d0
	float GetPutOnWeaponTimeRuntime();// 0x3e66638
	float GetPutOffWeaponTimeRuntime();// 0x3e6666c
	byte GetOwnerPlayerRole();// 0x3e66abc
	FString GetOwnerPlayerName();// 0x3e66af0
	int GetOwnerPlayerKey();// 0x3e66a88
	PlayerController* GetOwnerPlayerController();// 0x3e66ba8
	Pawn* GetOwnerPawn();// 0x3e66c44
	Controller* GetOwnerController();// 0x3e66bdc
	ApexCharacter* GetOwnerCharacter();// 0x3e66c10
	ApexPlayerController* GetOwnerApexController();// 0x3e66b74
	Actor* GetOwnerActor();// 0x3e66c78
	float GetLowerWeaponTimeRuntime();// 0x3e6659c
	ItemDefineID GetItemDefineID();// 0x3e669d0
	bool GetIsCurUsingWeapon();// 0x3e66784
	float GetFirstPickupToIdleTimeRuntime();// 0x3e66604
	float GetEquipAttachmentTimeRuntime();// 0x3e66568
	int GetDeriveID();// 0x3e6699c
	enum GetCurFreshWeaponState();// 0x3e668c8
	float GetBreathRuntime();// 0x3e664cc
	ItemHandleBase* GetBackpackItemHandle();// 0x3e667bc
	BackpackComponent* GetBackPackComponent();// 0x3e667f0
	void ClearWeaponAttrModifier();// 0x3e663e4
	bool CheckWeaponOnBack();// 0x3e66858
	bool CheckWeaponEquiping();// 0x3e66890
	void ChangeSequenceState(enum StateType);// 0x3e666a0

--------------------------------
Class: WeaponMeshComponent.SceneComponent.ActorComponent.Object
	ApgameWeaponCoreComponent* CoreCompPtr;//[Offset: 0x268, Size: 0x8]
	int[] CanEquipSlotList;//[Offset: 0x270, Size: 0x10]
	StaticMeshComponent* TppThermalComponent;//[Offset: 0x288, Size: 0x8]
	bool bAttachChargeShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	bool bMagzineChargeShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1]
	ParticleSystem*[] ParticleArray;//[Offset: 0x300, Size: 0x10]
	HitEffectDataAsset*[] HitEffectDataAssetArray;//[Offset: 0x310, Size: 0x10]
	SoftObjectPath[] EffectPaths;//[Offset: 0x320, Size: 0x10]
	BattleItemHandleBase* NewSniperHandle;//[Offset: 0x330, Size: 0x8]
	bool bMeshChangeDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	bool bMeshMainFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 0x1]
	bool bMeshAttachFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33a, Size: 0x1]
	<enum,Weapon3DUIEntity*> Weapon3DUIEntityList;//[Offset: 0x3d0, Size: 0x50]
	<byte,Weapon3DUIChangeNum> Weapon3DUIColorNumMap;//[Offset: 0x420, Size: 0x50]
	bool bThermalUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	SkeletalMeshComponent* SniperADSComponent;//[Offset: 0x4e8, Size: 0x8]
	<FString,WeaponFrameEffectParticleComp> EffectParticleCompMap;//[Offset: 0x560, Size: 0x50]
	void UpdateSniperScopeShow(bool bAim);// 0x3e9306c
	void UpdateADSMeshShow(bool bAim);// 0x3e93174
	void UnBindDelegate();// 0x3e94a90
	void ThermalLineTrace();// 0x3e9376c
	void SetZoomDirty(enum w3t, bool bMaxScale);// 0x3e93370
	void SetWeaponVisiable(bool Value, bool toAttachments, bool ToSinper);// 0x3e94964
	void SetWeaponShootDirty();// 0x3e932a4
	void SetWeaponMeshCompFollow(MeshComponent* MeshComp, bool bFPP, bool bFollow);// 0x3e946bc
	void SetWeaponMainFollow(bool bFollow);// 0x3e9485c
	void SetWeaponAttachFollow(bool bFollow);// 0x3e947d8
	void SetStopFireDirty();// 0x3e932c0
	void SetSniperMaterialValue(bool bAim);// 0x3e930f0
	void SetSniperADSVisiable(bool Value);// 0x3e948e0
	void SetSightTypeDirty();// 0x3e93510
	void SetShootTypeDirty();// 0x3e9352c
	void SetReserveBulletNumDirty();// 0x3e93668
	void SetHeatValueDirty(float HeatPercent);// 0x3e93548
	void SetHeatDirty();// 0x3e935c8
	void SetDisruptorChargeValueDirty(float Value);// 0x3e932f0
	void SetBulletNumDirty();// 0x3e93684
	void SetAimShowDirty(bool IsAiming);// 0x3e935e4
	void SetAimChargeLevelDirty();// 0x3e932dc
	void ReloadAttachmentsFromOthers(WeaponMeshComponent* others);// 0x3e94390
	void PutOnAttchByItemID(ItemDefineID ID);// 0x3e94574
	void PutOffAttchByItemID(ItemDefineID ID);// 0x3e944e8
	void OnWeaponShootEvent();// 0x3e944d4
	void OnWeaponDisruptorChargeBeginOrEnd(bool bVisibleValue);// 0x3e93db8
	void OnUpdateZoom(enum w3t, bool bMaxScale);// 0x3e93a1c
	void OnUpdateStopFire();// 0x3e93888
	void OnUpdateSightType();// 0x3e93b60
	void OnUpdateShootTypeEvent();// 0x3e93b74
	void OnUpdateReserveBulletEvent();// 0x3e93c90
	void OnUpdateHeatValue(float HeatPercent);// 0x3e93ae4
	void OnUpdateHeat();// 0x3e93ca4
	void OnUpdateDisruptorChargeValue(float Value);// 0x3e939a0
	void OnUpdateBulletEvent();// 0x3e93cb8
	void OnUpdateAimShow(bool IsAiming);// 0x3e93c0c
	void OnUpdateAimEvent(bool IsAiming);// 0x3e93b88
	void OnUpdateAimChargeLevel();// 0x3e9389c
	void OnUnEquipImmediately();// 0x3e938b0
	void OnTPPMeshVisibility(bool bVisibility);// 0x3e92c88
	void OnStopFire();// 0x3e936a0
	void OnStaticEffectEventTriggered(enum EffectEvent, float Value, int InStackCount);// 0x3e92e64
	void OnStateLeave(enum State, enum Reason, enum InterruptedBy);// 0x3e92ac4
	void OnStateEnter(enum State, enum EnteredOverrideState);// 0x3e92bc8
	void OnReserveBulletNumEvent();// 0x3e93730
	void OnReloadStart();// 0x3e93fa8
	void OnReloadEnd();// 0x3e93f94
	void OnParticleEffectEventTriggered(enum EffectEvent, float Value);// 0x3e92da4
	void OnMainEffectEventTriggered(enum EffectEvent, float Value, int InStackCount);// 0x3e92f68
	void OnLensShootEvent();// 0x3e9398c
	void OnHeatValueChangeEvent(float HeatPercent);// 0x3e936b4
	void OnFPPMeshVisibility(bool bVisibility);// 0x3e92d0c
	void OnCameraChanged();// 0x3e92d90
	void OnAimFinished();// 0x3e931f8
	void OnAimEnd();// 0x3e9320c
	void OnAimChange(bool IsAiming);// 0x3e93220
	void LensDecrease();// 0x3e93758
	bool IsDefaultAttachID(int ItemID);// 0x3e94308
	void InitDelegate();// 0x3e94ab8
	void InitCanEquipSlotList();// 0x3e94acc
	void Init3DUIData();// 0x3e94aa4
	void HandleThermalTraceOpen(bool bAim);// 0x3e93780
	void HandleThermalEffect(bool bAim);// 0x3e93804
	void HandleLensDecrease();// 0x3e93744
	void HandleDisruptorTick(bool bTick);// 0x3e93d34
	void HandleDisruptorChargeAttachVisibility(bool bVisibleValue);// 0x3e93e3c
	void HandleCrossUI(enum Slot, bool bAim);// 0x3e938c4
	void HandleChargeRifleMagzineVisable(bool bShow, bool bReload);// 0x3e93ec0
	int GetWeaponSkinID();// 0x3e93d00
	int GetWeaponSkinDefault();// 0x3e93ccc
	MeshComponent* GetTppAttachMesh(enum SlotID);// 0x3e94200
	FName GetSocketName(enum SlotID, enum SubID);// 0x3e9440c
	MeshComponent* GetFppAttachMesh(enum SlotID);// 0x3e9417c
	int[] GetEquippedAttachmentIdList();// 0x3e94074
	LinearColor[] GetCurWeapon3DUIColorList();// 0x3e93fbc
	Weapon3DUIChangeNum GetCur3DUIChangeNum();// 0x3e94040
	int[] GetCanEquipSlotList();// 0x3e94600
	MeshComponent* GetAttachMeshComBySlotID(enum SlotID);// 0x3e94284
	BattleItemHandleBase* GetAttachItemHandleBySlot(enum SlotID);// 0x3e940f8

--------------------------------
Class: ApgameWeaponCoreComponent.SignificanceManagedActorComponent.ActorComponent.Object
	enum DataSlot;//[Offset: 0x112, Size: 0x1]
	ApgameWeaponInitializationData InitializationData;//[Offset: 0x118, Size: 0x38]
	ApgameWeaponInitializationData RepInitializationData;//[Offset: 0x150, Size: 0x38]
	ApgameWeaponOwnedAttributeSetInfo[] NetAttributeSetsCache;//[Offset: 0x188, Size: 0x10]
	<int,int> FastOwnedLogicInstanceMap;//[Offset: 0x198, Size: 0x50]
	ApgameWeaponLogicInstance[] OwnedLogicInstances;//[Offset: 0x1e8, Size: 0x10]
	ApgameWeaponAttributeSet*[] OwnedAttributeSets;//[Offset: 0x1f8, Size: 0x10]
	ApgameWeaponAttributeSet*[] ReplicatedAttributeSets;//[Offset: 0x208, Size: 0x10]
	WeaponDataAsset* WeaponConfig;//[Offset: 0x218, Size: 0x8]
	ShootWeapon* WeaponCosmetic;//[Offset: 0x220, Size: 0x8]
	ApgameWeaponEventProxy* EventProxyCache;//[Offset: 0x228, Size: 0x8]
	ApgameWeaponEventProxy* EventProxy;//[Offset: 0x230, Size: 0x8]
	<enum,float> TempWeaponDataMap;//[Offset: 0x248, Size: 0x50]
	void RPC_ServerClearTempWeaponData(uint16 InWeaponInstanceId);// 0x3a66ce4
	void RPC_ServerChangeWeaponData(uint16 InWeaponInstanceId, enum InDataKey, float InTempData);// 0x3a66d68
	void OnRep_RepInitializationRepData();// 0x3a66e74

--------------------------------
Class: ApgameWeaponInitializationData
	uint16 RepIndex;//[Offset: 0x0, Size: 0x2]
	ItemDefineID ItemDefineID;//[Offset: 0x8, Size: 0x10]
	SpawnWeaponAdditionalData AdditionalData;//[Offset: 0x18, Size: 0x20]

--------------------------------
Class: SpawnWeaponAdditionalData
	int SkinId;//[Offset: 0x0, Size: 0x4]
	int InitBulletNum;//[Offset: 0x4, Size: 0x4]
	int DeriveID;//[Offset: 0x8, Size: 0x4]
	int ExtraBulletNum;//[Offset: 0xc, Size: 0x4]
	int SpecialBulletNum;//[Offset: 0x10, Size: 0x4]
	bool bUseSpecialBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	int SkinOwnerKey;//[Offset: 0x18, Size: 0x4]
	int CumulativeKill;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ApgameWeaponOwnedAttributeSetInfo
	ApgameWeaponAttributeSet* AttributeSet;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ApgameWeaponAttributeSet.Object
	ApgameWeaponCoreComponent* CoreCompPtr;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: ApgameWeaponLogicInstance
	FName InstanceName;//[Offset: 0x0, Size: 0x8]
	ApgameWeaponLogicObject* Object;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ApgameWeaponLogicObject.Object
	ApgameWeaponCoreComponent* CoreCompPtr;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: WeaponDataAsset.DataAsset.Object
	bool bBulletIndexAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bAutoAimPostFireConfig;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bDebugCrossHair;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bUseTraceBullet;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bDebugTraceBullet;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	bool bDebugWeaponMeshTick;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 0x1]
	bool bDebugAttachMeshTick;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 0x1]
	bool bAttachToCameraAtFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bAntiCheatOn;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bUseSmallScopeMode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31, Size: 0x1]
	bool bUseEffectOptimize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31, Size: 0x1]
	bool bUseCompleteShoulderCrossHair;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1]
	bool bZeroAimChargeEnergyWhenExitAiming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1]
	bool bUseAimChargeToggleOption;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1]
	bool EnableTraceBulletInEmulator;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x31, Size: 0x1]
	bool bCheckChangeCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32, Size: 0x1]
	bool bOpenStateMonitor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x32, Size: 0x1]
	enum WeaponAnimType;//[Offset: 0x33, Size: 0x1]
	enum RecoilType;//[Offset: 0x34, Size: 0x1]
	enum MuzzleFxRenderPass;//[Offset: 0x35, Size: 0x1]
	enum SpringType;//[Offset: 0x36, Size: 0x1]
	ApgameWeaponLogicInstanceDefinition[] LogicInstanceList;//[Offset: 0x38, Size: 0x10]
	enum[] LogicStates;//[Offset: 0x48, Size: 0x10]
	<GameplayTag,WeaponComponentOptimizationSettings> LogicOptimizations;//[Offset: 0x58, Size: 0x50]
	<enum,WeaponComponentOptimizationSettings> LogicStateOptimizations;//[Offset: 0xa8, Size: 0x50]
	<FString,WeaponAttrModifyConfig> WeaponAttrModifyConfigList;//[Offset: 0xf8, Size: 0x50]
	<enum,LegendWeaponAttrModifyConfigList> LegendTypeWeaponAttrModifyConfigList;//[Offset: 0x148, Size: 0x50]
	int BeEquipAnimationID;//[Offset: 0x198, Size: 0x4]
	float BackpackSwitchGunAlpha;//[Offset: 0x19c, Size: 0x4]
	float BackpackSwitchGunTime;//[Offset: 0x1a0, Size: 0x4]
	int MaxHeat;//[Offset: 0x1a4, Size: 0x4]
	int DecreaseHeat;//[Offset: 0x1a8, Size: 0x4]
	float DecreaseRate;//[Offset: 0x1ac, Size: 0x4]
	int IncreaseHeat;//[Offset: 0x1b0, Size: 0x4]
	float MaxDisruptorEnergy;//[Offset: 0x1b4, Size: 0x4]
	float EnergyDecreasePerShot;//[Offset: 0x1b8, Size: 0x4]
	float EnergyIncreaseDelta;//[Offset: 0x1bc, Size: 0x4]
	float EnergyDecreaseDelta;//[Offset: 0x1c0, Size: 0x4]
	float EnergyDecreaseFrequency;//[Offset: 0x1c4, Size: 0x4]
	float ChargeTime;//[Offset: 0x1c8, Size: 0x4]
	ApgameChargeConsumeItem[] ChargeConsumeList;//[Offset: 0x1d0, Size: 0x10]
	int NumConsumed;//[Offset: 0x1e0, Size: 0x4]
	float EnergyThreshold;//[Offset: 0x1e4, Size: 0x4]
	float EnergyAddSpeed;//[Offset: 0x1e8, Size: 0x4]
	float EnergySubSpeed;//[Offset: 0x1ec, Size: 0x4]
	float LinearDamping;//[Offset: 0x1f0, Size: 0x4]
	float DisposeTime;//[Offset: 0x1f4, Size: 0x4]
	float BallisiticPrecision;//[Offset: 0x1f8, Size: 0x4]
	float HorizontalCancelSpring;//[Offset: 0x1fc, Size: 0x4]
	float RecoilSpeed;//[Offset: 0x200, Size: 0x4]
	float BulletDecayDelay;//[Offset: 0x204, Size: 0x4]
	float BulletDecaySpeed;//[Offset: 0x208, Size: 0x4]
	float BulletClearDelay;//[Offset: 0x20c, Size: 0x4]
	bool bUseHitRecoilFactorInEmulator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	RecoilFactor4D HitRecoilFactor;//[Offset: 0x214, Size: 0x10]
	float HitRecoilCDTime;//[Offset: 0x224, Size: 0x4]
	RecoilPoseFactor[] RecoilPoseFactorList;//[Offset: 0x228, Size: 0x10]
	float SpringHeatFactor;//[Offset: 0x238, Size: 0x4]
	Vector2D SpringHeatLimit;//[Offset: 0x23c, Size: 0x8]
	float SpringCoolTime;//[Offset: 0x244, Size: 0x4]
	enum[] WeaponBackSocketPosition;//[Offset: 0x248, Size: 0x10]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x258, Size: 0x4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x25c, Size: 0x4]
	float FirstPickupToIdleTime;//[Offset: 0x260, Size: 0x4]
	float MaxRaiseWeaponTime;//[Offset: 0x264, Size: 0x4]
	float MaxLowerWeaponTime;//[Offset: 0x268, Size: 0x4]
	float RaiseWeaponAfterClimbTime;//[Offset: 0x26c, Size: 0x4]
	float PreSwitchFromBackpackToIdleTime;//[Offset: 0x270, Size: 0x4]
	float EquipAttachmentTime;//[Offset: 0x274, Size: 0x4]
	float Breath;//[Offset: 0x278, Size: 0x4]
	SkeletalMesh* LowLevelBarrel;//[Offset: 0x280, Size: 0x28]
	SkeletalMesh* Level4Barrel;//[Offset: 0x2a8, Size: 0x28]
	SkeletalMesh* LowLevelBarrelLod;//[Offset: 0x2d0, Size: 0x28]
	SkeletalMesh* Level4BarrelLod;//[Offset: 0x2f8, Size: 0x28]
	float DelayCloseAimTime;//[Offset: 0x320, Size: 0x4]
	float AimChargeUpSpeed;//[Offset: 0x324, Size: 0x4]
	float AimChargeUpDelay;//[Offset: 0x328, Size: 0x4]
	float AimChargeDownSpeed;//[Offset: 0x32c, Size: 0x4]
	float AimChargeDownDelay;//[Offset: 0x330, Size: 0x4]
	float[] AimChargeArray;//[Offset: 0x338, Size: 0x10]
	float AimChargeAdditionalDamage;//[Offset: 0x348, Size: 0x4]
	FName AimChargePercentRtpcName;//[Offset: 0x34c, Size: 0x8]
	SDeviation DeviationInfo;//[Offset: 0x354, Size: 0x30]
	CrossHairConfig* CrossHairConfig;//[Offset: 0x388, Size: 0x8]
	HitCrossHairConfig* HitCrossHairConfig;//[Offset: 0x390, Size: 0x8]
	AutoCrossHairConfig* AutoCrossHairConfig;//[Offset: 0x398, Size: 0x8]
	float CrosshairLerpSpeed;//[Offset: 0x3a0, Size: 0x4]
	float TppCrosshairScale;//[Offset: 0x3a4, Size: 0x4]
	class CameraShake* CameraShakeTemplate_TPPCameraMode;//[Offset: 0x3a8, Size: 0x8]
	class CameraShake* CameraShakeTemplate_FPPCameraMode;//[Offset: 0x3b0, Size: 0x8]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x3b8, Size: 0x8]
	CameraShakeConfig* CameraShakeTestConfig;//[Offset: 0x3c0, Size: 0x8]
	float CameraShakeInnerRadius;//[Offset: 0x3c8, Size: 0x4]
	float CameraShakeOuterRadius;//[Offset: 0x3cc, Size: 0x4]
	float CameraShakFalloff;//[Offset: 0x3d0, Size: 0x4]
	ParticleSystem* ShellDropFX;//[Offset: 0x3d8, Size: 0x8]
	MuzzleFxStruct MuzzleFxData;//[Offset: 0x3e0, Size: 0x38]
	Vector ShellDropFXScale;//[Offset: 0x418, Size: 0xc]
	float RandomRadius;//[Offset: 0x424, Size: 0x4]
	float RandomRadiusFactor;//[Offset: 0x428, Size: 0x4]
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0x430, Size: 0x50]
	<byte,AkAudioEvent*> SoundDataMap_3P;//[Offset: 0x480, Size: 0x50]
	SpecificWeaponSoundConfig[] SpecificSoundConfig;//[Offset: 0x4d0, Size: 0x10]
	ApexAnimNotifySoundMap* SoundMapDataAsset;//[Offset: 0x4e0, Size: 0x28]
	float ShootSoundProtectTime;//[Offset: 0x508, Size: 0x4]
	float ShootCallbackProtectTime;//[Offset: 0x50c, Size: 0x4]
	int CheckShootNum;//[Offset: 0x510, Size: 0x4]
	float CheckShootEnemyRatio;//[Offset: 0x514, Size: 0x4]
	int TraceBulletNum;//[Offset: 0x518, Size: 0x4]
	float TraceBulletEffectTime;//[Offset: 0x51c, Size: 0x4]
	float CharacterTraceRadius;//[Offset: 0x520, Size: 0x4]
	float BulletTraceDistance;//[Offset: 0x524, Size: 0x4]
	float CoolDownTime;//[Offset: 0x528, Size: 0x4]
	WeaponReloadStageConfig[] TacticalReloadStageConfig;//[Offset: 0x530, Size: 0x10]
	WeaponReloadStageConfig[] AllReloadStageConfig;//[Offset: 0x540, Size: 0x10]
	<enum,FName> WeaponAttchSocketMap;//[Offset: 0x550, Size: 0x50]
	<enum,FName> OpticalAttchSocketMap;//[Offset: 0x5a0, Size: 0x50]
	<enum,ItemDefineID> DefaultAttachList;//[Offset: 0x5f0, Size: 0x50]
	class AnimInstance* AnimBPClassFPP;//[Offset: 0x640, Size: 0x28]
	class AnimInstance* AnimBPClassTPP;//[Offset: 0x668, Size: 0x28]
	Rotator SniperADSRelativeRotation;//[Offset: 0x690, Size: 0xc]
	Vector SniperADSRelativeLocation;//[Offset: 0x69c, Size: 0xc]
	WeaponAntiCheatConfig AntiCheatConfig;//[Offset: 0x6a8, Size: 0x68]
	<int,WeaponAntiCheatConfig> AntiCheatConfigs;//[Offset: 0x710, Size: 0x50]
	float SafetyScoreCD;//[Offset: 0x760, Size: 0x4]
	float HitDataTimeout;//[Offset: 0x764, Size: 0x4]
	float HitDataRecordTime;//[Offset: 0x768, Size: 0x4]
	int HitDataRecordCount;//[Offset: 0x76c, Size: 0x4]
	<enum,float> WeaponStateLeaveCondition;//[Offset: 0x770, Size: 0x50]
	ApgameWeaponAttachPosToSocketOverride[] AttachPosToSocketOverrides;//[Offset: 0x7c0, Size: 0x10]

--------------------------------
Class: ApgameWeaponLogicInstanceDefinition
	FName InstanceName;//[Offset: 0x0, Size: 0x8]
	GameplayTag RegisterTag;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WeaponComponentOptimizationSettings
	WeaponComConfig Hold;//[Offset: 0x0, Size: 0x5]
	WeaponComConfig Back;//[Offset: 0x5, Size: 0x5]

--------------------------------
Class: WeaponComConfig
	bool Tick_Authority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool Tick_AI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool Tick_Autonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool Tick_Simulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool Tick_OBSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: WeaponAttrModifyConfig
	WeaponAttrModifyData[] WeaponAttrModifiers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeaponAttrModifyData
	enum AttrType;//[Offset: 0x0, Size: 0x1]
	FString ModifyAttr;//[Offset: 0x8, Size: 0x10]
	enum Op;//[Offset: 0x18, Size: 0x1]
	float ModifyValue;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: LegendWeaponAttrModifyConfigList
	<FString,WeaponAttrModifyConfig> WeaponAttrModifyConfigList;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ApgameChargeConsumeItem
	ItemDefineID Item;//[Offset: 0x0, Size: 0x10]
	int Num;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: RecoilFactor4D
	Vector2D RecoilFactor;//[Offset: 0x0, Size: 0x8]
	Vector2D RandomFactor;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: RecoilPoseFactor
	enum PoseType;//[Offset: 0x0, Size: 0x1]
	RecoilFactor4D FactorADS;//[Offset: 0x4, Size: 0x10]
	RecoilFactor4D FactorNoADS;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: SDeviation
	float DeviationBase;//[Offset: 0x0, Size: 0x4]
	float DeviationShoulderShoot;//[Offset: 0x4, Size: 0x4]
	float ShoulderShootFixFactor;//[Offset: 0x8, Size: 0x4]
	float DeviationShootGain;//[Offset: 0xc, Size: 0x4]
	float DeviationShootFall;//[Offset: 0x10, Size: 0x4]
	float DeviationShootFactor;//[Offset: 0x14, Size: 0x4]
	float DeviationShootMax;//[Offset: 0x18, Size: 0x4]
	float DeviationMaxMove;//[Offset: 0x1c, Size: 0x4]
	float DeviationMoveMultiplier;//[Offset: 0x20, Size: 0x4]
	float DeviationStanceStand;//[Offset: 0x24, Size: 0x4]
	float DeviationStanceCrouch;//[Offset: 0x28, Size: 0x4]
	float DeviationStanceJump;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CrossHairConfig.DataAsset.Object
	WeaponCrossHairPerformData[] CrossHairDatas;//[Offset: 0x30, Size: 0x10]
	float SprintAlpha;//[Offset: 0x40, Size: 0x4]
	float SprintAlphaFadeSpeed;//[Offset: 0x44, Size: 0x4]
	WeaponCrossHairAimChargeConfig[] AimChargeArray;//[Offset: 0x48, Size: 0x10]
	bool bUseChangeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	LinearColor AimTeamMateColor;//[Offset: 0x5c, Size: 0x10]
	LinearColor AimEnemyColor;//[Offset: 0x6c, Size: 0x10]
	LinearColor NormalColor;//[Offset: 0x7c, Size: 0x10]
	float MaxDetectDistance;//[Offset: 0x8c, Size: 0x4]
	float TeamMateDetectInerval;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: WeaponCrossHairPerformData
	WeaponCrossHairIconData[] CrossHair;//[Offset: 0x0, Size: 0x10]
	LinearColor CrossHairColor;//[Offset: 0x10, Size: 0x10]
	<int,ShoulderCrossHairConfig> ShoulderCrossHairConfig;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: WeaponCrossHairIconData
	CanvasIcon2D Icon;//[Offset: 0x0, Size: 0x18]
	Object* IconObj;//[Offset: 0x18, Size: 0x8]
	float Offset;//[Offset: 0x20, Size: 0x4]
	float Alpha;//[Offset: 0x24, Size: 0x4]
	float IconRotate;//[Offset: 0x28, Size: 0x4]
	float LogicRotate;//[Offset: 0x2c, Size: 0x4]
	Vector2D Scale2D;//[Offset: 0x30, Size: 0x8]
	bool IsSpreadEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0, Size: 0x8]
	float U;//[Offset: 0x8, Size: 0x4]
	float V;//[Offset: 0xc, Size: 0x4]
	float UL;//[Offset: 0x10, Size: 0x4]
	float VL;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ShoulderCrossHairConfig
	int ReplaceIndex;//[Offset: 0x0, Size: 0x4]
	WeaponCrossHairIconData ReplaceCrossHair;//[Offset: 0x8, Size: 0x40]

--------------------------------
Class: WeaponCrossHairAimChargeConfig
	Vector2D CrosshairPack;//[Offset: 0x0, Size: 0x8]
	LinearColor CrossHairColor;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: HitCrossHairConfig.DataAsset.Object
	BulletHitPerformData BulletHitData;//[Offset: 0x30, Size: 0xc0]

--------------------------------
Class: BulletHitPerformData
	CanvasIcon2D NormalIcon;//[Offset: 0x0, Size: 0x18]
	CanvasIcon2D HeadShootIcon;//[Offset: 0x18, Size: 0x18]
	Object* NormalIconObj;//[Offset: 0x30, Size: 0x8]
	Object* HeadShootIconObj;//[Offset: 0x38, Size: 0x8]
	BulletHitPositionData[] PositionList;//[Offset: 0x40, Size: 0x10]
	float DefaultShowTime;//[Offset: 0x50, Size: 0x4]
	Vector2D Offset;//[Offset: 0x54, Size: 0x8]
	<uint32,BulletHitData> BulletHitMap;//[Offset: 0x60, Size: 0x50]
	uint32[] RemovedShootIdList;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: BulletHitPositionData
	float Offset;//[Offset: 0x0, Size: 0x4]
	float LogicRotate;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BulletHitData
	float ShowLeftTime;//[Offset: 0x0, Size: 0x4]
	<byte,bool> PelletHitMap;//[Offset: 0x8, Size: 0x50]
	Vector2D RandomOffset;//[Offset: 0x58, Size: 0x8]
	float AimPercent;//[Offset: 0x60, Size: 0x4]
	byte AimChargeLevel;//[Offset: 0x64, Size: 0x1]

--------------------------------
Class: AutoCrossHairConfig.DataAsset.Object
	WeaponCrossHairIconData[] CrossHair;//[Offset: 0x30, Size: 0x10]
	LinearColor WaitColor;//[Offset: 0x40, Size: 0x10]
	LinearColor ShootColor;//[Offset: 0x50, Size: 0x10]
	float ScaleBegin;//[Offset: 0x60, Size: 0x4]
	float ScaleEnd;//[Offset: 0x64, Size: 0x4]
	WeaponCrossHairIconData TipsUI;//[Offset: 0x68, Size: 0x40]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	int ShootState;//[Offset: 0xac, Size: 0x4]
	bool bTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float offsetScale;//[Offset: 0xb4, Size: 0x4]
	float offsetSpeed;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: CameraShakeConfig.DataAsset.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	float OscillationDuration;//[Offset: 0x34, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x38, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x3c, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x40, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x64, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x88, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x94, Size: 0x4]
	float AnimScale;//[Offset: 0x98, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x9c, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0xa0, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0xa4, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0xa8, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]

--------------------------------
Class: MuzzleFxStruct
	Vector LocalMuzzelFXScale;//[Offset: 0x0, Size: 0xc]
	Vector ScopeMuzzelFXScale;//[Offset: 0xc, Size: 0xc]
	Vector RemoteMuzzelFXScale;//[Offset: 0x18, Size: 0xc]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x24, Size: 0x10]
	bool bUseMuzzleLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0, Size: 0x4]
	float FXEndScaleDistance;//[Offset: 0x4, Size: 0x4]
	float FXStartScaleValue;//[Offset: 0x8, Size: 0x4]
	float FXEndScaleValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SpecificWeaponSoundConfig
	enum FireMode;//[Offset: 0x0, Size: 0x1]
	int AttachmentID;//[Offset: 0x4, Size: 0x4]
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0x8, Size: 0x50]
	<byte,AkAudioEvent*> SoundDataMap_3P;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: WeaponReloadStageConfig
	enum ReloadStage;//[Offset: 0x0, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	bool bInterraptStore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bClearClipBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bAddClipBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	int AddBulletNum;//[Offset: 0xc, Size: 0x4]
	bool bCirculate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int CirculationTime;//[Offset: 0x14, Size: 0x4]
	bool bInterraptByFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float FireInterraptTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: WeaponAntiCheatConfig
	float HitHeightRatio;//[Offset: 0x0, Size: 0x4]
	float HitRadiusRatio;//[Offset: 0x4, Size: 0x4]
	float ShootHeightRatio;//[Offset: 0x8, Size: 0x4]
	float ShootRadiusRatio;//[Offset: 0xc, Size: 0x4]
	float HeadHitFloorRatio;//[Offset: 0x10, Size: 0x4]
	float HeadHitRadiusRatio;//[Offset: 0x14, Size: 0x4]
	float BodyHitFloorRatio;//[Offset: 0x18, Size: 0x4]
	float BodyHitHeightRatio;//[Offset: 0x1c, Size: 0x4]
	float BodyHitRadiusRatio;//[Offset: 0x20, Size: 0x4]
	float HitPlayerScaleRatio;//[Offset: 0x24, Size: 0x4]
	float MoveSpeedScaleRatio;//[Offset: 0x28, Size: 0x4]
	float ShootRateCheckMulCoff;//[Offset: 0x2c, Size: 0x4]
	int ValidBulletNumTolerance;//[Offset: 0x30, Size: 0x4]
	float ValidBulletCheckMulCoff;//[Offset: 0x34, Size: 0x4]
	float ShootForWardAngle;//[Offset: 0x38, Size: 0x4]
	float PlayerForWardAngleFPP;//[Offset: 0x3c, Size: 0x4]
	float PlayerForWardAngleTPP;//[Offset: 0x40, Size: 0x4]
	float ShootForWardDitance;//[Offset: 0x44, Size: 0x4]
	int ShootForWardCounts;//[Offset: 0x48, Size: 0x4]
	float ShootDistanceRadiusRatio;//[Offset: 0x4c, Size: 0x4]
	int ShootImpactPointCounts;//[Offset: 0x50, Size: 0x4]
	int ShootNoViewMoveCounts;//[Offset: 0x54, Size: 0x4]
	float ShootAutoAimAlwAngle;//[Offset: 0x58, Size: 0x4]
	CurveFloat* ShootAutoAimAngleCurve;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: ApgameWeaponAttachPosToSocketOverride
	enum Pos;//[Offset: 0x0, Size: 0x1]
	FName SocketName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ShootWeapon.Weapon.Actor.Object
	ApexSoundSpeakerComponent* ApexSoundSpeakerComponent;//[Offset: 0x320, Size: 0x8]
	CrossHairLogicObject* CrossHairComponent;//[Offset: 0x328, Size: 0x8]
	WeaponAntiCheatLogicObject* WeaponAntiCheatComponent;//[Offset: 0x330, Size: 0x8]
	WeaponDisruptorLogicObject* WeaponDisruptorComponent;//[Offset: 0x338, Size: 0x8]
	WeaponBallisticLogicObject* WeaponBallisticComponent;//[Offset: 0x340, Size: 0x8]
	TraceBulletLogicObject* TraceBulletComponent;//[Offset: 0x348, Size: 0x8]
	HeatSystemLogicObject* HeatSystemComponent;//[Offset: 0x350, Size: 0x8]
	ShootWeaponEffectLogicObject* ShootWeaponEffectComponent;//[Offset: 0x358, Size: 0x8]
	WeaponReloadLogicObject* WeaponReloadComponent;//[Offset: 0x360, Size: 0x8]
	ShootWeaponLogicObject* ShootWeaponComponent;//[Offset: 0x368, Size: 0x8]
	BulletEffectConfig DefaultBulletEffectConfig;//[Offset: 0x370, Size: 0x118]
	bool WasLastShootCharged();// 0x3d86a70
	void ToggleZoomScale(bool bOB);// 0x3d86d88
	void StopFireWeapon();// 0x3d86b14
	bool StopFireFilter();// 0x3d86adc
	void StartReload();// 0x3d86354
	void SetSpecialBulletUse(bool _bUseSpecialBullet);// 0x3d85c34
	void SetMaxBulletNumInOneClip(int Num);// 0x3d85df8
	void SetExtraBulletNum(int _ExtraBulletNum);// 0x3d85a9c
	void SetExtendedMagQuality(int Quality);// 0x3d85b4c
	void SetCurSpecialBulletNum(int Num, enum ChangeReason, bool bToClient);// 0x3d85cec
	void SetBulletNumInClip(int Num, enum ChangeReason, bool NeedToClient, bool NeedToServer);// 0x3d85ea8
	void ReloadImmediately(bool bCostBullet);// 0x3d86040
	void NotifyResetValidBulletNumToAntiCheat();// 0x3d85354
	void NotifyReloadToAntiCheat();// 0x3d85368
	bool JudgeCanReload();// 0x3d860fc
	bool JudgeBulletFull();// 0x3d860c4
	bool IsOverHeat();// 0x3d8699c
	bool HasMultipleScaleScope();// 0x3d86b28
	bool HasEquippedHighMagScopeAndADS();// 0x3d86b60
	float GetWeaponBodyLength();// 0x3d85688
	FName GetVerifyScopeSocketNameFromEntity();// 0x3d857d0
	int GetUnEquipMagBulletNum();// 0x3d85a68
	float GetTraceDistanceFromEntity();// 0x3d8586c
	bool GetSpecialBulletUse();// 0x3d85bfc
	int GetSpecialBulletNumInClipSync();// 0x3d85a00
	int GetSingleShootPelletNum();// 0x3d85998
	enum GetSightTypeRuntime();// 0x3d8537c
	FName GetShellDropSocketNameFromEntity();// 0x3d858a0
	double GetServerTimeFromClient();// 0x3d85480
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex);// 0x3d855bc
	float GetReloadTimePerkRatio();// 0x3d861d4
	float GetReloadAnimStartPercent(bool bStoredOrCurrent);// 0x3d86294
	float GetReferenceDistance();// 0x3d854b4
	float GetRangeModifier();// 0x3d854e8
	Transform GetMuzzleTransformConsiderBarrelStab();// 0x3d856bc
	Transform GetMuzzleTransform();// 0x3d85728
	FName GetMuzzleSocketNameFromEntity();// 0x3d85964
	FText GetMinScale();// 0x3d86bcc
	float GetMaxValidHitTimeFromEntity();// 0x3d85838
	FText GetMaxScale();// 0x3d86ca8
	int GetMaxHeat();// 0x3d85320
	int GetMaxChargeEnergy();// 0x3d86a3c
	int GetMaxBulletNumInOneClip();// 0x3d85e74
	float GetLensDamageBase();// 0x3d85554
	bool GetIsMaxScale();// 0x3d86d50
	bool GetIsAlternantMuzzleSocketActiveFromEntity(bool bThinkBarrel);// 0x3d858d4
	bool GetIsAllowShoulderShoot();// 0x3d8692c
	int GetIntMaxScale();// 0x3d86c74
	WeaponHitPartCoff GetHitPartCoff();// 0x3d8551c
	Vector2D GetFireRecoilTarget();// 0x3d853b0
	Vector2D GetFireRecoilRandom();// 0x3d853e4
	WeaponFireModeInfo[] GetFireModeList();// 0x3d86430
	int GetFireModeIndex();// 0x3d863fc
	int GetExtraBulletNum();// 0x3d85b18
	int GetExtendedMagQuality();// 0x3d85bc8
	int GetCurSpecialBulletNum();// 0x3d85cb8
	int GetCurrentHeat();// 0x3d86aa8
	int GetCurrentEquipSight();// 0x3d86b98
	float GetCurReloadTime(bool bIncludePerk);// 0x3d86208
	enum GetCurReloadMethod();// 0x3d86320
	WeaponFireModeInfo GetCurFireModeInfo();// 0x3d864b8
	enum GetCurFireMode();// 0x3d8650c
	BulletEffectConfig GetCurBulletEffectConfig(out bool bGetSuccess);// 0x3d86540
	float GetCrossHairBurstSpeed();// 0x3d8544c
	float GetCrossHairBurstIncreaseSpeed();// 0x3d85418
	bool GetClipHasInfiniteBullets();// 0x3d86368
	int GetChargeTime();// 0x3d86a08
	int GetChargeItemNumToConsume();// 0x3d869d4
	ItemDefineID GetBulletTypeFromEntity();// 0x3d863b4
	float GetBulletRangeEntity();// 0x3d85804
	int GetBulletNumInClipSync();// 0x3d85a34
	int GetBulletNumInClipFake();// 0x3d859cc
	int GetBulletNumInClip();// 0x3d8600c
	float GetBulletFireSpeedFromEntity();// 0x3d8579c
	float GetBaseImpactDamageEntity();// 0x3d85588
	int GetAvailableBulletsNumInBackpack(bool bExcludeInfiniteBullet);// 0x3d86148
	void FixBulletNumWithValideData();// 0x3d863a0
	void ClientReportBulletNumNoEnough();// 0x3d86134
	bool CheckDisruptorCanCharge();// 0x3d86964

--------------------------------
Class: CrossHairLogicObject.ApgameWeaponLogicObject.Object
	CrossHairConfig* CrossHairConfig_Runtime;//[Offset: 0x68, Size: 0x8]
	HitCrossHairConfig* HitCrossHairConfig_Runtime;//[Offset: 0x70, Size: 0x8]
	AutoCrossHairConfig* AutoCrossHairConfig_Runtime;//[Offset: 0x78, Size: 0x8]
	ApexCharacterBase* CrossHairHitCharacter;//[Offset: 0x80, Size: 0x8]
	void OnWeaponShoot();// 0x3b48dec
	void DrawWeaponCrosshair(HUDWidgetBase* WeaponHudWidget);// 0x3b48e00

--------------------------------
Class: HUDWidgetBase.Object
	bool EnableSWidgetDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float DesignedResolution;//[Offset: 0x30, Size: 0x4]
	Vector2D Position;//[Offset: 0x34, Size: 0x8]
	Vector2D ScreenPosition;//[Offset: 0x3c, Size: 0x8]
	bool bScaleByDesignedResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bMaintainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	float Opacity;//[Offset: 0x48, Size: 0x4]
	bool bIgnoreHUDBaseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	ApexGameHUD* HUDOwner;//[Offset: 0x50, Size: 0x8]
	ApexPlayerController* APPlayerController;//[Offset: 0x58, Size: 0x8]
	Pawn* CharacterOwner;//[Offset: 0x60, Size: 0x8]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1]
	float LastRenderTime;//[Offset: 0x6c, Size: 0x4]
	Vector2D RenderPosition;//[Offset: 0x70, Size: 0x8]
	Vector2D RenderSize;//[Offset: 0x78, Size: 0x8]
	float RenderScale;//[Offset: 0x80, Size: 0x4]
	Vector2D CanvasCenter;//[Offset: 0x84, Size: 0x8]
	Canvas* Canvas;//[Offset: 0x90, Size: 0x8]
	Canvas* DebugCanvas;//[Offset: 0x98, Size: 0x8]
	RenderObjectList(FieldPathProperty)[] RenderObjectList;//[Offset: 0xa0, Size: 0x10]
	void SWidgetDraw(float DeltaTime);// 0x3c39a9c
	bool ShouldSWidgetDraw(bool bShowScores);// 0x3c39b20
	bool ShouldDraw(bool bShowScores);// 0x3c39a04
	void SetHidden(bool bIsHidden);// 0x3c39bb8
	void RenderObj_TextureAt(out HUDRenderObject_Texture TextureObject, float X, float Y, float Width, float Height);// 0x3c38718
	void RenderObj_Texture(out HUDRenderObject_Texture TextureObject, Vector2D DrawOffset);// 0x3c38928
	Vector2D RenderObj_TextAt(out HUDRenderObject_Text TextObject, float X, float Y);// 0x3c381f8
	Vector2D RenderObj_Text(out HUDRenderObject_Text TextObject, Vector2D DrawOffset);// 0x3c38518
	Vector2D ProjectToCanvasPos(Vector WorldPos, Actor* WorldActor);// 0x3c38128
	void DrawTexture(Texture* Texture, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUL, float MaterialVL, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot, float Depth, bool ToDebugCanvas);// 0x3c38efc
	Vector2D DrawTextAPEX(FText Text, float X, float Y, Font* Font, bool bDrawShadow, Vector2D ShadowDirection, LinearColor ShadowColor, bool bDrawOutline, LinearColor OutlineColor, float TextScale, float DrawOpacity, LinearColor DrawColor, byte TextHorzAlignment, byte TextVertAlignment, out const FontRenderInfo RenderInfo);// 0x3c39380
	void DrawMaterial(MaterialInterface* Material, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot);// 0x3c38b10
	void DrawAllRenderObjects(float DeltaTime, Vector2D DrawOffset);// 0x3c38a50
	void Draw(float DeltaTime);// 0x3c39980
	LinearColor ApplyHUDColor(LinearColor DrawColor);// 0x3c398e8

--------------------------------
Class: HUDRenderObject_Texture.HUDRenderObject
	Texture* Atlas;//[Offset: 0x38, Size: 0x8]
	TextureUVs UVs;//[Offset: 0x40, Size: 0x10]
	bool bUseTeamColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	LinearColor[] TeamColorOverrides;//[Offset: 0x58, Size: 0x10]
	bool bIsBorderElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bIsSlateElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	Vector2D RenderOffset;//[Offset: 0x6c, Size: 0x8]
	float Rotation;//[Offset: 0x74, Size: 0x4]
	Vector2D RotPivot;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: HUDRenderObject
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float RenderPriority;//[Offset: 0xc, Size: 0x4]
	Vector2D Position;//[Offset: 0x10, Size: 0x8]
	Vector2D Size;//[Offset: 0x18, Size: 0x8]
	LinearColor RenderColor;//[Offset: 0x20, Size: 0x10]
	float RenderOpacity;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: TextureUVs
	float U;//[Offset: 0x0, Size: 0x4]
	float V;//[Offset: 0x4, Size: 0x4]
	float UL;//[Offset: 0x8, Size: 0x4]
	float VL;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: HUDRenderObject_Text.HUDRenderObject
	FText Text;//[Offset: 0x48, Size: 0x18]
	Font* Font;//[Offset: 0x60, Size: 0x8]
	float TextScale;//[Offset: 0x68, Size: 0x4]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	Vector2D ShadowDirection;//[Offset: 0x70, Size: 0x8]
	LinearColor ShadowColor;//[Offset: 0x78, Size: 0x10]
	bool bDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	LinearColor OutlineColor;//[Offset: 0x8c, Size: 0x10]
	byte HorzPosition;//[Offset: 0x9c, Size: 0x1]
	byte VertPosition;//[Offset: 0x9d, Size: 0x1]

--------------------------------
Class: ApexGameHUD.HUD.Actor.Object
	bool bShowEnemyHeadName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	bool bShowEnemyHeadHp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 0x1]
	bool bShowTeammateHeadName_BR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x362, Size: 0x1]
	bool bShowTeammateHeadHp_BR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x363, Size: 0x1]
	bool bShowTeammateHeadName_MP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	bool bShowTeammateHeadHp_MP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 0x1]
	int HeadNameMaxShowCount;//[Offset: 0x368, Size: 0x4]
	bool bShowEnemyHeadName_RT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 0x1]
	bool bShowEnemyHeadHp_RT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36d, Size: 0x1]
	bool bShowTeammateHeadName_BR_RT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36e, Size: 0x1]
	bool bShowTeammateHeadHp_BR_RT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36f, Size: 0x1]
	bool bShowTeammateHeadName_MP_RT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	bool bShowTeammateHeadHp_MP_RT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 0x1]
	bool bDiffCharacterNameColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x372, Size: 0x1]
	class HUDWidgetBase[] HUDWidgetClassList;//[Offset: 0x378, Size: 0x10]
	HUDWidgetBase*[] HudWidgets;//[Offset: 0x388, Size: 0x10]
	bool IsOpenAutoMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	bool IsOpenADSMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 0x1]
	bool ArcUseWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a, Size: 0x1]
	<uint32,HeadNamePool> HeadNameMap;//[Offset: 0x3a0, Size: 0x50]
	<FName,Widget*> WidgetMap;//[Offset: 0x400, Size: 0x50]
	delegate OnTeamInfoChange;//[Offset: 0x460, Size: 0x10]
	delegate OnHealthInfoChange;//[Offset: 0x470, Size: 0x10]
	delegate OnKnockdownShiledChange;//[Offset: 0x480, Size: 0x10]
	delegate OnLifeNumber;//[Offset: 0x4a0, Size: 0x10]
	delegate OnPlayerKillOrAssist;//[Offset: 0x4b0, Size: 0x10]
	delegate OnVisualSoundTrigger;//[Offset: 0x4c0, Size: 0x10]
	delegate OnTeamInfoTotalChange;//[Offset: 0x4d0, Size: 0x10]
	delegate OnPlayerCompleteDie;//[Offset: 0x4e0, Size: 0x10]
	delegate OnAutonomousPlayerStateChange;//[Offset: 0x4f0, Size: 0x10]
	delegate OnPlayerHurt;//[Offset: 0x500, Size: 0x10]
	delegate OnPlayerIconClicked;//[Offset: 0x510, Size: 0x10]
	delegate OnPlayerEmoteRefresh;//[Offset: 0x520, Size: 0x10]
	delegate OnTurnTableRefresh;//[Offset: 0x530, Size: 0x10]
	FString GameHUDSuffix;//[Offset: 0x558, Size: 0x10]
	FName SmallMapUIName;//[Offset: 0x568, Size: 0x8]
	Widget* SmallMapUI;//[Offset: 0x570, Size: 0x8]
	Widget* NavigatorPanelUI;//[Offset: 0x578, Size: 0x8]
	bool bMapRotationEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 0x1]
	InGameUIMgrComponent* inGameUIMgr;//[Offset: 0x5c0, Size: 0x8]
	void ShowViewportCanvas();// 0x39c887c
	void SetShowEnemyHeadHp_RT(bool Enable);// 0x39c88a4
	void SetRedPointSizeAndPos(Widget* NavigatorPanel, float HalfLength, Vector2D InPos, float AngleLength);// 0x39c7f80
	void SetMiniMapSizeAndPos(Vector2D InSize, Vector2D InPos, float DistanceScale, float RenderScale);// 0x39c80c0
	void SetForbiddenCrossHairEnable(bool Enable);// 0x39c86c8
	void SetDrawHUD(bool Visible);// 0x39c8764
	void SetCrossHairVisible(bool Visible);// 0x39c87e8
	void RemoveNameShowPool(UserWidget* TargetWidget);// 0x39c89b0
	void PopCanvasSafeZone();// 0x39c8868
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x39c81f8
	void OnAsyncLoadingFinished();// 0x39c8890
	InGameUIMgrComponent* GetUIMgr();// 0x39c7f4c
	FString GetGameHUDSuffix();// 0x39c8404
	GameHUDItemBase* GetGameHUDItemByType(enum ItemType);// 0x39c8380
	bool GetForbiddenCrossHairEnable();// 0x39c86ac
	bool GetDrawHUD();// 0x39c8748
	bool CheckNameShowByPool(uint32 PlayerKey, bool bEnemy, float DistanceSq, UserWidget* TargetWidget);// 0x39c8a2c
	bool CheckNameShow(uint32 PlayerKey);// 0x39c8928
	void AddTexture(int Index, Actor* Target, Texture2D* Texture, out const Vector2D TexturePosition, out const Vector2D TextureSize, float DrawOpacity, float LifeTime);// 0x39c8488

--------------------------------
Class: HeadNamePool
	float DistanceSq;//[Offset: 0x0, Size: 0x4]
	bool bEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	UserWidget* TargetWidget;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InGameUIMgrComponent.ActorComponent.Object
	UserWidget* UIRoot;//[Offset: 0xf8, Size: 0x8]
	<FString,InstanceArray> UILayer;//[Offset: 0x150, Size: 0x50]
	<FString,APInGameUserWidget*> UIMap;//[Offset: 0x1a0, Size: 0x50]
	void TickModule(float DeltaTime);// 0x3c51120
	void ShutdownModule();// 0x3c51104
	bool ShowUI(FString UIType);// 0x3c50ea0
	void SetUIRoot(UserWidget* Root);// 0x3c50cd8
	bool SetParentInRoot(FString UIType, APInGameUserWidget* NewWidget);// 0x3c50b50
	bool SetMaxZorderByDelete(FString Layer, APInGameUserWidget* pWidget);// 0x3c504c0
	int SetMaxZorderByAdd(FString Layer);// 0x3c505a8
	bool RecordUILayer(FString UIType, APInGameUserWidget* pWidget, bool IsExist);// 0x3c50a1c
	void PushZorderFromLua(FString Layer, const int NewOrder, bool isAddOrDelete);// 0x3c506e8
	void PushUIConfig(FString UIType, FString Layer, FString BpPath);// 0x3c50804
	APInGameUserWidget* OpenUI(FString UIType, bool IsMultiple);// 0x3c51018
	void InitModule();// 0x3c511a4
	bool HideUI(FString UIType);// 0x3c50dfc
	APInGameUserWidget* GetWidgetByPath(FString UIType);// 0x3c50c38
	APInGameUserWidget* GetUI(FString UIType);// 0x3c50d5c
	int GetMaxZorderToLua(FString Layer);// 0x3c50648
	void CloseUI(FString UIType, APInGameUserWidget* pWidget);// 0x3c50f44
	bool ClearRecordUILayer(FString UIType, APInGameUserWidget* pWidget);// 0x3c50934
	bool CheckIsInitSuccess();// 0x3c50488

--------------------------------
Class: InstanceArray
	APInGameUserWidget*[] Datas;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: APInGameUserWidget.APUserWidget.UserWidget.Widget.Visual.Object
	Widget* ParentWidget;//[Offset: 0x348, Size: 0x8]
	<FString,APInGameUserWidget*> SubUIMap;//[Offset: 0x350, Size: 0x50]
	InGameUIMgrComponent* UIMgr;//[Offset: 0x3a0, Size: 0x8]
	void SetUIMgr(InGameUIMgrComponent* _UIMgr, FString _UIType);// 0x3a6d9a4
	void SetParentWidget(Widget* _PrentWidget);// 0x3a6da78
	void SetCustomVisible(enum VisibilityType);// 0x3a6db78
	Widget* GetParentWidget();// 0x3a6dafc
	bool GetCustomVisible();// 0x3a6db38
	void CloseUI();// 0x3a6d7fc
	APInGameUserWidget* AddSubUI(FString Parent, FString UIType, FString UIName, bool IsGenerate);// 0x3a6d818

--------------------------------
Class: APUserWidget.UserWidget.Widget.Visual.Object
	bool bBlockTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	int BlueprintNumber;//[Offset: 0x244, Size: 0x4]
	<FName,FName> RegisterNodeNameMap;//[Offset: 0x248, Size: 0x50]
	<FName,enum> GamepadNodeNameToActionTypeMap;//[Offset: 0x298, Size: 0x50]
	bool bEnableGamepadProcessor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	FName GamepadWidgetName;//[Offset: 0x2ec, Size: 0x8]
	<FName,Widget*> CacheNodeWidgetMap;//[Offset: 0x2f8, Size: 0x50]
	void OpenGamepadProcessor();// 0x3a7e350
	void CloseGamepadProcessor();// 0x3a7e334

--------------------------------
Class: GameHUDItemBase.ActorComponent.Object
	void TryRefreshUI();// 0x3ba3e18
	GameFlowHUDMgr* GetOwnerHUDMgr();// 0x3ba3de4

--------------------------------
Class: GameFlowHUDMgr.ActorComponent.Object
	class GameFlowHUDItemBase[] ConfigGameFlowHUDItems;//[Offset: 0xf0, Size: 0x10]
	GameFlowHUDItemBase*[] InstancedGameFlowHUDItems;//[Offset: 0x118, Size: 0x10]
	void TryRefreshUI();// 0x3ba31fc
	bool IsPlayerReconnected();// 0x3ba3108
	bool IsPlayerHasPawnState(enum State);// 0x3ba3140
	ApexCharacter* GetViewedCharacter();// 0x3ba30d4
	PawnStateManager* GetPlayerPawnStateManager();// 0x3ba31c8
	GameStateCommonInfo* GetGameStateCommonInfo();// 0x3ba306c
	ApexGameState* GetApexGameState();// 0x3ba30a0

--------------------------------
Class: GameFlowHUDItemBase.Object
	bool EnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float UpdateTimerInterval;//[Offset: 0x2c, Size: 0x4]
	class UserWidget* EffectUI;//[Offset: 0x38, Size: 0x8]
	void TryRefreshUI();// 0x3ba2b34
	void OnTickBP(float DeltaSeconds);// 0x43841ec
	void OnGameFlowEndBP();// 0x43841ec
	void OnGameFlowBeginBP();// 0x43841ec
	GameFlowHUDMgr* GetOwnerHUDMgr();// 0x3ba2b00

--------------------------------
Class: PawnStateManager.ActorComponent.Object
	FName PawnStateRelationTableName;//[Offset: 0xf0, Size: 0x8]
	PawnStateManagerTableMap* PawnStateManagerTableMap;//[Offset: 0xf8, Size: 0x8]
	PawnStateDataAsset* PawnStateConfig;//[Offset: 0x100, Size: 0x8]
	ApexCharacterBase* PawnStateCharacterBase;//[Offset: 0x108, Size: 0x8]
	ApexCharacterMovementComponent* PawnStateMovementComponent;//[Offset: 0x110, Size: 0x8]
	ApexGameState* PawnStateGameState;//[Offset: 0x118, Size: 0x8]
	uint64 StateMask;//[Offset: 0x1d0, Size: 0x8]
	<enum> MainHandStates;//[Offset: 0x1d8, Size: 0x50]
	<enum,enum> PawnStateOverrideMap;//[Offset: 0x228, Size: 0x50]
	uint64 ReconnectedStateMask;//[Offset: 0x278, Size: 0x8]
	uint64 DebugServerStateMask;//[Offset: 0x280, Size: 0x8]
	bool IgnoreStateTimeoutCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1]
	delegate OnStateAdded;//[Offset: 0x3c0, Size: 0x10]
	delegate OnStateRemoved;//[Offset: 0x3d0, Size: 0x10]
	delegate OnPoseStateChanged;//[Offset: 0x3e0, Size: 0x10]
	delegate OnMovementModeChanged;//[Offset: 0x3f0, Size: 0x10]
	delegate OnPostStateChanged;//[Offset: 0x400, Size: 0x10]
	delegate OnOverrideStateChanged;//[Offset: 0x410, Size: 0x10]
	void ServerSyncOverrideStates(const OverrideStateSyncData[] SynDataList);// 0x3cecf0c
	void ServerReportStatePath(uint64 Mask, const StateBlockMap[] StateBlockMaps, const StatePath[] StatePath);// 0x3cecb0c
	void ServerReportSimpleState(uint64 Mask, uint64 BlockMask, const enum[] BlockOverrideState, uint64 RemoveMask, const enum[] RemoveOverrideState);// 0x3cec964
	void ServerReportBlockState(enum State);// 0x3cec8e0
	void S2CSyncStateMask(uint64 ServerStateMask);// 0x3cece04
	void RequestSyncOverrideState();// 0x3ced02c
	void RemoveMainHandState(enum RemovedState);// 0x3ced048
	void OnRep_StateMask(uint64 PrevStateMask);// 0x3cecc80
	void OnRep_ReconnectedStateMask();// 0x3cecc6c
	void IgnoreStateTimeout(bool bIgnore);// 0x3cec85c
	void ClientSyncOverrideStates(const OverrideStateSyncData[] SynDataList);// 0x3cecf9c
	void C2SSyncStateMask(uint64 AutonomousStateMask);// 0x3cecd80
	void C2SReliableSyncStateMask(uint64 AutonomousStateMask);// 0x3ceccfc
	void BrocastSyncStateMask(uint64 ServerStateMask);// 0x3cece88
	void BPSyncStateMask();// 0x3ced150
	void AddMainHandState(enum NewState);// 0x3ced0cc

--------------------------------
Class: OverrideStateSyncData
	enum SrcPawnState;//[Offset: 0x0, Size: 0x1]
	enum DestPawnState;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: StateBlockMap
	enum State;//[Offset: 0x0, Size: 0x1]
	bool bRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	StateBlockData[] StateBlockData;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: StateBlockData
	enum BlockState;//[Offset: 0x0, Size: 0x1]
	int BlockCount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StatePath
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	bool bEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum State;//[Offset: 0x5, Size: 0x1]
	bool bSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	byte MovementMode;//[Offset: 0x7, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: PawnStateManagerTableMap.BaseGameflowSubsystem.Object
	FString PawnStateConfig;//[Offset: 0x38, Size: 0x10]
	PawnStateDataAsset* PawnStateDataAsset;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: BaseGameflowSubsystem.Object
	void OnApexCharacterBeginPlayOrEndPlay(ApexCharacter* InApexCharacter, bool bBeginPlay);// 0x3ac0914

--------------------------------
Class: PawnStateDataAsset.DataAsset.Object
	bool bLogDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bLogAuthority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bLogAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	bool bLogSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]
	enum[] ServerControlStates;//[Offset: 0x38, Size: 0x10]
	float AutonomousSyncInterval;//[Offset: 0x48, Size: 0x4]
	float StateLogInterval;//[Offset: 0x4c, Size: 0x4]
	float DefaultStateTimeOutWarningTime;//[Offset: 0x50, Size: 0x4]
	<enum> NoWarningState;//[Offset: 0x58, Size: 0x50]
	<enum,float> ForceStateLeaveCondition;//[Offset: 0xa8, Size: 0x50]

--------------------------------
Class: ApexGameState.GameState.GameStateBase.Info.Actor.Object
	enum GameViewType;//[Offset: 0x2c0, Size: 0x1]
	int MaxCampNum;//[Offset: 0x2c4, Size: 0x4]
	int MaxPlayerNumInGame;//[Offset: 0x2c8, Size: 0x4]
	int MaxPlayerNumInTeam;//[Offset: 0x2cc, Size: 0x4]
	int ValidRealPlayerNum;//[Offset: 0x2d0, Size: 0x4]
	int MaxRealPlayerNum;//[Offset: 0x2d4, Size: 0x4]
	class MsgCenter* MsgCenterClass;//[Offset: 0x328, Size: 0x8]
	MsgCenter* ServerMsgCenter;//[Offset: 0x330, Size: 0x8]
	bool bEnableAnimationBudget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	GameStatisticsManager* GameStatisticsManager;//[Offset: 0x340, Size: 0x8]
	GameEndDataReportComponent* GameEndDataReportComponent;//[Offset: 0x348, Size: 0x8]
	ProxyMovementManager* ProxyMovementManager;//[Offset: 0x350, Size: 0x8]
	GameSyncSettingComponent* GameSyncSettingComponent;//[Offset: 0x358, Size: 0x8]
	BattlefieldMessageComponent* BattlefieldMessageComp;//[Offset: 0x360, Size: 0x8]
	GameInitControllerComponent* GameInitController;//[Offset: 0x368, Size: 0x8]
	SoftObjectPath InitDataAsset;//[Offset: 0x370, Size: 0x18]
	ApexGameCreditScoreRatingManager* CreditScoreRatingManager;//[Offset: 0x388, Size: 0x8]
	ApexSequenceComponent* SequenceComponent;//[Offset: 0x390, Size: 0x8]
	SelectLegendComponentBase* GameStateSelectLegendComp;//[Offset: 0x398, Size: 0x8]
	GameStateInGameRegionComponent* GameStateInGameRegionComponent;//[Offset: 0x3a0, Size: 0x8]
	LevelEventCenter* LevelEventCenter;//[Offset: 0x3a8, Size: 0x8]
	ApexPlayerState*[] DefenderTeam;//[Offset: 0x3b0, Size: 0x10]
	ApexPlayerState* Defender;//[Offset: 0x3c0, Size: 0x8]
	RTPCParamInfo[] CustomShootSoundRTPCParamList;//[Offset: 0x3c8, Size: 0x10]
	class MiniMapManager* MiniMapManagerClass;//[Offset: 0x3d8, Size: 0x8]
	bool ShowKillAssistTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	bool bShowBulletAs999;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 0x1]
	enum ServerSpawnMethod;//[Offset: 0x3e2, Size: 0x1]
	enum ClientSpawnMethod;//[Offset: 0x3e3, Size: 0x1]
	FString GameModeID;//[Offset: 0x3e8, Size: 0x10]
	FString GameModeZoneID;//[Offset: 0x3f8, Size: 0x10]
	bool bForbidVisualSoundByBucket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	bool bForbidVisualSoundByCircleWave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 0x1]
	int ForbidVisualSoundWaveNumber;//[Offset: 0x414, Size: 0x4]
	GameModeStageInfo GameModeStageInfo;//[Offset: 0x418, Size: 0x10]
	ZiplineManager* ZiplineManager;//[Offset: 0x428, Size: 0x8]
	ApexTrain* Train;//[Offset: 0x480, Size: 0x8]
	ConveyorBeltCamp* ConveyorCamp;//[Offset: 0x488, Size: 0x8]
	ParticleEffectFactory* AParticleEffectFactoryInstance;//[Offset: 0x490, Size: 0x8]
	class ParticleEffectFactory* ParticleEffectFactoryClass;//[Offset: 0x498, Size: 0x8]
	AudioEffectManager* AudioEffectManagerInstance;//[Offset: 0x4a0, Size: 0x8]
	class AudioEffectManager* AudioEffectManagerClass;//[Offset: 0x4a8, Size: 0x8]
	GlobalSpeakerComponent* GlobalSoundPlayer;//[Offset: 0x4b8, Size: 0x8]
	AudioRegionMgrComponent* GlobalAudioRegionMgr;//[Offset: 0x4c0, Size: 0x8]
	GameStatisticsReportComponent* GameStatisticsReportComponent;//[Offset: 0x4c8, Size: 0x8]
	BGMManager* BGMManagerInstance;//[Offset: 0x4d0, Size: 0x8]
	class BGMManager* BGMManagerClass;//[Offset: 0x4d8, Size: 0x8]
	EffectLoaderManager* EffectLoaderManagerInstance;//[Offset: 0x4e0, Size: 0x8]
	GameStateCommonInfo* GameStateCommonInfo;//[Offset: 0x4e8, Size: 0x8]
	ApexRespawnBeacon*[] ApexRespawnBeaconArray;//[Offset: 0x4f0, Size: 0x10]
	ApexHeatShield*[] ApexHeatShieldArray;//[Offset: 0x500, Size: 0x10]
	SurveyBeacon*[] ApexSurveyBeaconArray;//[Offset: 0x518, Size: 0x10]
	int64[] ScoutCharacterCount;//[Offset: 0x528, Size: 0x10]
	int[] NextWhiteCircleForCurrentWave;//[Offset: 0x538, Size: 0x10]
	int SurveyBeaconGoal;//[Offset: 0x548, Size: 0x4]
	int DispersionDistance;//[Offset: 0x54c, Size: 0x4]
	<class InGameSingletonObject,InGameSingletonObject*> MapInGameObjectClass2Instanced;//[Offset: 0x580, Size: 0x50]
	CommonSignMgr* CommonSignMgr;//[Offset: 0x5d0, Size: 0x8]
	int[] ActionFilterList;//[Offset: 0x5d8, Size: 0x10]
	LootDronesPathsDataAsset* LootDronesPathsDataAsset;//[Offset: 0x5e8, Size: 0x8]
	int ReviveFlowID;//[Offset: 0x5f0, Size: 0x4]
	<int,Actor*> KnockdownShieldMap;//[Offset: 0x5f8, Size: 0x50]
	GameStatisticsSetting GameStatisticsSetting;//[Offset: 0x648, Size: 0x20]
	SurfaceGridManager* SurfaceGridManager;//[Offset: 0x668, Size: 0x8]
	<class ApexAnimNotifySound,ApexAnimNotifySound*> AnimNotifyMap;//[Offset: 0x670, Size: 0x50]
	GameStateMapComponent* MapComponent;//[Offset: 0x6c0, Size: 0x8]
	bool bMapUseClientOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 0x1]
	int64 RespawnDeadlineTime;//[Offset: 0x6d0, Size: 0x8]
	CharacterAnimationIntKey[] EditAnimPreLoad;//[Offset: 0x6d8, Size: 0x10]
	bool bOpenFriendOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 0x1]
	bool bOpenEnemyOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e9, Size: 0x1]
	bool bOpenEnemyOutline_Addition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ea, Size: 0x1]
	int EnemyOutlineID_Addition;//[Offset: 0x6ec, Size: 0x4]
	bool bRemoveEnemyOutlinePerformDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 0x1]
	bool bEnablePickUpOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f1, Size: 0x1]
	<int> ForcePickUpOutlineItemSet;//[Offset: 0x6f8, Size: 0x50]
	bool bIsShowInvincibleEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x748, Size: 0x1]
	bool bOverridePlayerDeadDelayHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x749, Size: 0x1]
	float OverrideDelayHideDuration;//[Offset: 0x74c, Size: 0x4]
	bool bUsingCacheCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 0x1]
	enum CacheCameraMode;//[Offset: 0x751, Size: 0x1]
	bool bShowPickUpEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x752, Size: 0x1]
	bool bEnablePickItemPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x753, Size: 0x1]
	bool bShowPingTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x754, Size: 0x1]
	bool bOverrideAutoPickUpSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x755, Size: 0x1]
	bool bOverrideEnableAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x756, Size: 0x1]
	bool bEnableTDMTeamColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x757, Size: 0x1]
	SkillConfigDataAsset* SkillConfigOnGameMode;//[Offset: 0x758, Size: 0x8]
	DsFunctionConfig[] DsFunctionConfigArray;//[Offset: 0x7d0, Size: 0x10]
	GameStateAirDropMgr* AirDropStateMgr;//[Offset: 0x848, Size: 0x8]
	RadiationCircleStateComponent* RadiationCircleState;//[Offset: 0x850, Size: 0x8]
	GamblingMachine* GamblingMachine;//[Offset: 0x858, Size: 0x8]
	bool bDoNotNeedReleaseSelectLegendSceneInPostInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 0x1]
	bool UseSurveyBeacon(int TeamID);// 0x39d8338
	bool UseRespawnBeacon(int Index);// 0x39d83c0
	bool ShouldTakeDamage(float Damage, byte CurDamageType, Controller* EventInstigator, Actor* DamageCauser, ApexCharacter* Victim);// 0x39d8cac
	void SetMaxCampNum(int NewMaxCampNum);// 0x39d907c
	void SetGameViewType(enum NewGameViewType);// 0x39d90f8
	void SetForbidVisualSoundByCircleWave(bool NewForbid);// 0x39d8b14
	void SetForbidVisualSoundByBucketID(bool NewForbid);// 0x39d8b98
	void ResetNextWhiteCircleForCurrentWave();// 0x39d8248
	void ReportMultiData(FString FlowName, out const FString[] DataJsonArray);// 0x43841ec
	void RemoveKnockdownShield(int InPlayerKey);// 0x39d7d9c
	void RemoveActionFilterID(int ActionFilterID);// 0x39d7eec
	void PushEvent(int EventID, Actor* RelevantActors, Controller* Controller);// 0x39d8f00
	void OnWaveStart();// 0x39d8324
	void OnRepLootDronesPathsDataAsset();// 0x39d7ed8
	void OnRep_ScoutCharacterCount(out const int64[] OriginValue);// 0x39d8118
	void OnRep_NextWhiteCircleForCurrentWave(out const int[] OriginValue);// 0x39d81b0
	void OnRep_GameModeZoneID();// 0x39d8c68
	void OnRep_GameModeStageInfo(GameModeStageInfo OldStageInfo);// 0x39d86a8
	void OnRep_GameModeID_Lua();// 0x43841ec
	void OnRep_GameModeID();// 0x39d8c7c
	void OnRep_DefenderTeam();// 0x39d8c90
	void OnRep_Defender();// 0x43841ec
	void OnRep_bForbidVisualSoundByCircleWave();// 0x39d8c40
	void OnRep_bForbidVisualSoundByBucket();// 0x39d8c54
	void OnPlayerValid(uint32 PlayerKey);// 0x39d9000
	void OnEffectLoaderManagerBPLoaded(SoftObjectPath BpPath);// 0x39d8448
	void NotifyRemoteURLChanged(FString IP, int Port);// 0x39d7c44
	bool IsForbidVisualSound();// 0x39d8c1c
	Actor* GMGetClosestLootDrones();// 0x39d861c
	ZiplineManager* GetZiplineManager();// 0x39d8650
	Vector GetTrainStationLocation(bool bCurrentStation);// 0x39d8524
	FString GetSubModeID();// 0x39d87dc
	SelectLegendComponentBase* GetSelectLegendComp();// 0x39d8e6c
	RadiationCircleStateComponent* GetRadiationCircleState();// 0x39d7bdc
	InGameSingletonObject* GetOrAddInGameSingletonObject(class InGameSingletonObject InGameObjectClass);// 0x39d8094
	FString GetMainModeID();// 0x39d8860
	Actor* GetKnockdownShield(int InPlayerKey);// 0x39d7d18
	GameStateInGameRegionComponent* GetInGameRegionComponent();// 0x39d8e50
	GameStatisticsManager* GetGameStatisticsManager();// 0x39d8ec4
	ApexGameSettings GetGameSetting();// 0x39d88e4
	FString GetGameModeZoneID();// 0x39d8720
	GameModeStageInfo GetGameModeStageInfo();// 0x39d866c
	FString GetGameModeID();// 0x39d898c
	GameEndDataReportComponent* GetGameEndDataReportComponent();// 0x39d8e88
	enum GetCurrentStageType();// 0x39d868c
	ConveyorBeltCamp* GetConveyorCamp();// 0x39d85b4
	CommonSignMgr* GetCommonSignMgr();// 0x39d8060
	ApexTrain* GetApexTrain();// 0x39d85e8
	GameStateAirDropMgr* GetAirDropStateMgr();// 0x39d7c10
	bool CanSeeBeacon(int TeamID);// 0x39d825c
	static int ApexInGameEncryptTest(Object* WorldContext, int TargetInt, float TargetFloat);// 0x39d8a10
	void AddKnockdownShield(int InPlayerKey, Actor* InActor);// 0x39d7e18
	void AddActionFilterID(int ActionFilterID);// 0x39d7f68
	void ActionFilter_ApplyActionsByID(int ID);// 0x39d7fe4

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x290, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x298, Size: 0x8]
	int ElapsedTime;//[Offset: 0x2a0, Size: 0x4]
	void OnRep_MatchState();// 0x5f46264
	void OnRep_ElapsedTime();// 0x5f46248

--------------------------------
Class: MsgCenter.Object
	<enum,MsgCenterConfig> Config;//[Offset: 0x28, Size: 0x50]
	int MaxShowNum;//[Offset: 0x78, Size: 0x4]
	float ShowTime;//[Offset: 0x7c, Size: 0x4]
	void PushEvent(int EventID, Actor* RelevantActors, Controller* Controller, bool bHasAutonomousPlayed, bool bHasCDCheckedProbability);// 0x3cc3b2c

--------------------------------
Class: GameStatisticsManager.ActorComponent.Object
	GameStatisticsSetting GameStatisticsSetting;//[Offset: 0x110, Size: 0x20]
	GameStatisticsVOSetting GameStatisticsVOSetting;//[Offset: 0x130, Size: 0x28]
	UAEDataTable* ParameterIntegerDataTable;//[Offset: 0x158, Size: 0x8]
	UAEDataTable* GameModeDataTable;//[Offset: 0x160, Size: 0x8]
	UAEDataTable* GameModeSecondTable;//[Offset: 0x168, Size: 0x8]
	void OnSkillReleased(ApexCharacter* Character, UTSkill* Skill, enum SkillType);// 0x3bf3220
	void OnPlayerRespawn(int CauserPlayerKey, int VictimPlayerKey);// 0x3bf2f14
	void OnPlayerInputReActive(uint32 PlayerKey);// 0x3bf3094
	void OnPlayerInputDeActive(uint32 PlayerKey);// 0x3bf3118
	void OnPlayerExit(uint32 PlayerKey);// 0x3bf319c
	void OnLegendRespawnOrChanged_dynamic(int CauserPlayerKey, int VictimPlayerKey);// 0x3bf2fd8
	int GetTotalTeamNum();// 0x3bf3494
	int GetTotalPlayerNum();// 0x3bf34d0
	int GetSurviveTeam();// 0x3bf3458
	int GetSurvivePlayer();// 0x3bf341c
	int GetRatingKillAssistScore(int PlayerKey);// 0x3bf3390
	PlayerStatisticsManager* GetPlayerStatisticsManager(uint32 PlayerKey);// 0x3bf330c
	PlayerInfo[] GetPlayerObservers(int PlayerKey);// 0x3bf350c
	int GetPlayerKill(int PlayerKey);// 0x3bf37d8
	float GetPlayerDamage(int PlayerKey);// 0x3bf36d0
	int GetPlayerAssist(int PlayerKey);// 0x3bf3754
	int GetObservers();// 0x3bf385c
	ApexPlayerState*[] GetDeadPlayers();// 0x3bf2e90

--------------------------------
Class: GameStatisticsSetting
	float AssistAccountableDuration;//[Offset: 0x0, Size: 0x4]
	float KnockDownCauserTime;//[Offset: 0x4, Size: 0x4]
	CurveFloat* ComboTime;//[Offset: 0x8, Size: 0x8]
	float ComboKnockDownTime;//[Offset: 0x10, Size: 0x4]
	float VerticalDamageHeight;//[Offset: 0x14, Size: 0x4]
	float BehindDamageAngle;//[Offset: 0x18, Size: 0x4]
	float DamageRecoveryHPTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: GameStatisticsVOSetting
	float MegaKillTime;//[Offset: 0x0, Size: 0x4]
	int MegaKillNum;//[Offset: 0x4, Size: 0x4]
	float[] KnockDownCamboTime;//[Offset: 0x8, Size: 0x10]
	float FarEngagementMinDist;//[Offset: 0x18, Size: 0x4]
	float SquadEngagementCalloutDebounce;//[Offset: 0x1c, Size: 0x4]
	float SameEventDebounce;//[Offset: 0x20, Size: 0x4]
	float ChanceForCharacterComment;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: UAEDataTable.DataTable.Object
	<FName,nameToProperty(FieldPathProperty)> nameToProperty;//[Offset: 0xc0, Size: 0x50]
	static bool BP_ToDerivedRowDataQuery(out AETableDerivedRowDataQueryBP IoDerivedQuery, out const AETableRowDataQueryBP InQuery, FName InParentRowColumnName);// 0x3ed5674
	static bool BP_MakeRowDataQuery(out AETableRowDataQueryBP OutQuery, UAEDataTable* InTable, FName InRowName);// 0x3ed5890
	static bool BP_MakeDerivedRowDataQueryWithColumnName(out AETableDerivedRowDataQueryBP IoDerivedQuery, UAEDataTable* InTable, FName InRowName, FName InParentRowColumnName);// 0x3ed542c
	static bool BP_GetCellValueFromQuery(out TableRowBase OutValue, out const AETableRowDataQueryBP InQuery, FName InColumnName);// 0x3ed61ac
	static bool BP_GetCellValueFromDerivedQuery(out TableRowBase OutValue, out const AETableDerivedRowDataQueryBP InQuery, FName InColumnName);// 0x3ed5f08
	static bool BP_GetCellArrayValueFromQuery(out int[] OutArray, out const AETableRowDataQueryBP InQuery, FName InColumnName);// 0x3ed5d94
	static bool BP_GetCellArrayValueFromDerivedQuery(out int[] OutArray, out const AETableDerivedRowDataQueryBP InQuery, FName InColumnName);// 0x3ed5b20

--------------------------------
Class: AETableDerivedRowDataQueryBP

--------------------------------
Class: AETableRowDataQueryBP

--------------------------------
Class: TableRowBase

--------------------------------
Class: PlayerStatisticsManager.ActorComponent.Object
	float[] CreditScores;//[Offset: 0xf0, Size: 0x10]
	float RefreshTime;//[Offset: 0x110, Size: 0x4]
	GMStatisticsData GMStatisticsData;//[Offset: 0x114, Size: 0x44]
	void SetbLogStatisticsDataServer(bool Val);// 0x3d42d3c
	void OnRep_OpenCreditScoresChanged();// 0x3d42d28
	void BroadcastSurviveUpdate(byte SurvivePlayer, byte SurviveTeam);// 0x3d43218
	void BroadcastSlidingWeaponListTime(int TotalTime);// 0x3d42e4c
	void BroadcastRemovePlayer(const uint32 PlayerKey);// 0x3d4303c
	void BroadcastPlayerKilled_BR(uint32 Causer, uint32 RealCauser, uint32 Victim, const uint32[] AssisterKeys, byte SurvivePlayer, byte SurviveTeam, const PlayerRatingKillScore[] RatingKillScores);// 0x3d433a8
	void BroadcastPlayerKilled(uint32 Causer, uint32 RealCauser, uint32 Victim, const uint32[] AssisterKeys);// 0x3d43aec
	void BroadcastPlayerDamage(const uint32 Causer, const uint32 Victim, const float Damage);// 0x3d439e4
	void BroadcastOpenSocreTime(int TotalTime);// 0x3d42dc8
	void BroadcastObStop(uint32 PlayerKey, uint32 ObserverPlayerKey);// 0x3d436ac
	void BroadcastObStart(uint32 PlayerKey, PlayerInfo Observer);// 0x3d43770
	void BroadcastMsg(uint32 PlayerKey, FString Msg);// 0x3d435d8
	void BroadcastDyingDamage(uint32 Causer, uint32 Victim, float Damage);// 0x3d43c44
	void BroadcastBecomeKillKing_BR(uint32 KillKingPlayerKey, byte KillKingMaxKill);// 0x3d432e0
	void BroadcastAddPlayer(const PlayerInfoToClient PlayerInfo);// 0x3d43d4c
	void BoardcastResetRoundStatistics();// 0x3d43020
	void BoardcastOpenShopTime(float TotalTime);// 0x3d42ed0
	void BoardcastBombPlantAndDefuse(uint32 PlayerKey, bool bPlanted);// 0x3d42f54
	void BoardcastAddPlayerScore(int PlayerKey, int Score);// 0x3d43154
	void BoardcastAddCampScore(const CampScoringRecord Record);// 0x3d430c0

--------------------------------
Class: PlayerRatingKillScore
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]
	int KillScore;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PlayerInfo
	uint64 UID;//[Offset: 0x0, Size: 0x8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 0x4]
	int TeamID;//[Offset: 0xc, Size: 0x4]
	int CampID;//[Offset: 0x10, Size: 0x4]
	FString PlayerName;//[Offset: 0x18, Size: 0x10]
	int Corps_Select_ID;//[Offset: 0x28, Size: 0x4]
	int LegendId;//[Offset: 0x2c, Size: 0x4]
	int LegendSkin;//[Offset: 0x30, Size: 0x4]
	int[] CurrentEmotePaintingData;//[Offset: 0x38, Size: 0x10]
	int FrameID;//[Offset: 0x48, Size: 0x4]
	int PosID;//[Offset: 0x4c, Size: 0x4]
	uint32 PlayerLevel;//[Offset: 0x50, Size: 0x4]
	int SegmentLevel;//[Offset: 0x54, Size: 0x4]
	int Rating;//[Offset: 0x58, Size: 0x4]
	int DailyWinTime;//[Offset: 0x5c, Size: 0x4]
	bool bAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: PlayerInfoToClient
	PlayerInfo PlayerInfo;//[Offset: 0x0, Size: 0xf8]
	SimpleTrackerData[] TrackerData;//[Offset: 0xf8, Size: 0x10]

--------------------------------
Class: CampScoringRecord
	int CampID;//[Offset: 0x0, Size: 0x4]
	int CampRole;//[Offset: 0x4, Size: 0x4]
	int Score;//[Offset: 0x8, Size: 0x4]
	enum Reason;//[Offset: 0xc, Size: 0x1]
	bool FinishGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: GMStatisticsData
	byte TeamRank;//[Offset: 0x0, Size: 0x1]
	byte Rank;//[Offset: 0x1, Size: 0x1]
	int KillNum;//[Offset: 0x4, Size: 0x4]
	int DeathNum;//[Offset: 0x8, Size: 0x4]
	float DamageAmount;//[Offset: 0xc, Size: 0x4]
	float SurviveTime;//[Offset: 0x10, Size: 0x4]
	float TeamSurviveTime;//[Offset: 0x14, Size: 0x4]
	int RescueNum;//[Offset: 0x18, Size: 0x4]
	int RevivalNum;//[Offset: 0x1c, Size: 0x4]
	int AssistNum;//[Offset: 0x20, Size: 0x4]
	int ComboKill;//[Offset: 0x24, Size: 0x4]
	float HeadShotRate;//[Offset: 0x28, Size: 0x4]
	float RecoveryHP;//[Offset: 0x2c, Size: 0x4]
	int MeleeKillNum;//[Offset: 0x30, Size: 0x4]
	int GrenadeLikeItemKill;//[Offset: 0x34, Size: 0x4]
	float MoveDistance;//[Offset: 0x38, Size: 0x4]
	int RevivalByOtherNum;//[Offset: 0x3c, Size: 0x4]
	int KillCountBySelf;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: GameEndDataReportComponent.ActorComponent.Object
	void ServerDataRepWorkbenchTypeChoose(enum InType);// 0x3b9e0d4
	void ServerDataRepRowdyPlayNum(int InIndex);// 0x3b9dc78
	void ServerDataRepRowdyLocData(out int Index, Vector Location);// 0x3b9dcf4
	void ServerDataRepReplicatorUseSuccessNum(int InIndex);// 0x3b9e35c
	void ServerDataRepReplicatorUseNum(int InIndex);// 0x3b9e3d8
	void ServerDataRepReplicatorSpawnItemNum(int InIndex);// 0x3b9dbfc
	void ServerDataRepReplicatorLocData(out int Index, int Type, Vector Location);// 0x3b9e454
	void ServerDataRepReplicatorCostMaterial(int InIndex, int InCostNum);// 0x3b9e2a0
	void ServerDataRepLootBinOpenData(int InIndex, int PlayerKey);// 0x3b9df00
	void ServerDataRepLootBinLocData(out int Index, Vector Location, int BinType);// 0x3b9dfbc
	void ServerDataRepLootBinIceGenerateData(int InIndex, int IceNum);// 0x3b9ddc8
	void ServerDataRepLootBinIceActiveData(int InIndex);// 0x3b9de84
	void ServerDataRepLootBinCreepLocData(out int Index, Vector Location);// 0x3b9e7ec
	void ServerDataRepLootBinCreepDestroyData(int InIndex, int InQuality, <int,int> PickUpData);// 0x3b9e568
	void ServerDataRepHarvesterLocData(out int Index, Vector Location);// 0x3b9e1cc
	void ServerDataRepHarvesterExtractNum(int Index);// 0x3b9e150
	void ServerDataRepDoorData(out int DoorIndex, bool bOpen, Vector Location);// 0x3b9e8c0

--------------------------------
Class: ProxyMovementManager.ActorComponent.Object
	bool bProxySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	float LimitAngle;//[Offset: 0xf4, Size: 0x4]
	bool bDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	float CharacterSyncDistance;//[Offset: 0xfc, Size: 0x4]
	bool bEquipSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	int SyncSight;//[Offset: 0x1bc, Size: 0x4]
	float ProxyExistTime;//[Offset: 0x1c0, Size: 0x4]
	bool RemoteWeaponSoundSyncSW;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	float RemoteWeaponSoundSyncDis;//[Offset: 0x1d4, Size: 0x4]
	float RemoteWeaponSoundKeepTime;//[Offset: 0x1d8, Size: 0x4]

--------------------------------
Class: GameSyncSettingComponent.ActorComponent.Object
	CharacterSyncSetting CharacterSyncSetting;//[Offset: 0xf0, Size: 0x10]
	FString MovementConfigPath;//[Offset: 0x100, Size: 0x10]
	bool bSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]
	void Onrep_CharacterSyncSetting();// 0x3bfbb30

--------------------------------
Class: CharacterSyncSetting
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	CharacterMovementSyncSetting MovementSyncSetting;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: CharacterMovementSyncSetting
	float JumpHeight;//[Offset: 0x0, Size: 0x4]
	float MaxJumpHeight;//[Offset: 0x4, Size: 0x4]
	float MaxSpeed;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BattlefieldMessageComponent.ActorComponent.Object
	FName KillAssistTableName;//[Offset: 0xf4, Size: 0x8]
	FName KATextureName;//[Offset: 0xfc, Size: 0x8]
	FName KABgTexturesName;//[Offset: 0x104, Size: 0x8]
	FName KAPriorityName;//[Offset: 0x10c, Size: 0x8]
	FName KAGroupName;//[Offset: 0x114, Size: 0x8]
	FName KADisplayTextName;//[Offset: 0x11c, Size: 0x8]
	FName KAAnimLevelName;//[Offset: 0x124, Size: 0x8]
	FName KAAnimAudioName;//[Offset: 0x12c, Size: 0x8]
	int MaxCacheNumber;//[Offset: 0x134, Size: 0x4]
	int MaxDisplayNumber;//[Offset: 0x138, Size: 0x4]
	float MinDisplayTime;//[Offset: 0x13c, Size: 0x4]
	float KAItemLifeTime;//[Offset: 0x140, Size: 0x4]
	<int> Groups;//[Offset: 0x148, Size: 0x50]
	float LongDistanceThreshold;//[Offset: 0x198, Size: 0x4]
	float SuperLongDistanceThreshold;//[Offset: 0x19c, Size: 0x4]
	int KillerRowName;//[Offset: 0x1a0, Size: 0x4]
	int AssistRowName;//[Offset: 0x1a4, Size: 0x4]
	int HeadShotRowName;//[Offset: 0x1a8, Size: 0x4]
	int DoubleKillRowName;//[Offset: 0x1ac, Size: 0x4]
	int TriKillRowName;//[Offset: 0x1b0, Size: 0x4]
	int QuaKillRowName;//[Offset: 0x1b4, Size: 0x4]
	int PentaKillRowName;//[Offset: 0x1b8, Size: 0x4]
	int AbovePentaKillRowName;//[Offset: 0x1bc, Size: 0x4]
	int RevengeRowName;//[Offset: 0x1c0, Size: 0x4]
	int ShutDownRowName;//[Offset: 0x1c4, Size: 0x4]
	int FirstBloodRowName;//[Offset: 0x1c8, Size: 0x4]
	int MeleeRowName;//[Offset: 0x1cc, Size: 0x4]
	int GrenadeRowName;//[Offset: 0x1d0, Size: 0x4]
	int LongDistanceRowName;//[Offset: 0x1d4, Size: 0x4]
	int SuperLongDistanceRowName;//[Offset: 0x1d8, Size: 0x4]
	bool bOnlyDisplayTeamMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 0x1]
	uint32 CurrentKillKing;//[Offset: 0x1f4, Size: 0x4]
	void OnPlayerKilled(Controller* Killer, Controller* VictimPlayer, out const DamageEvent DamageEvent, int ComboKill, bool bIsShutDown, const uint32[] AssisterKeys);// 0x3ac6944
	void OnPlayerGoToDying(Controller* Killer, Controller* VictimPlayer, out const DamageEvent DamageEvent, int ComboKill, bool bIsShutDown, const uint32[] AssisterKeys);// 0x3ac66e4
	void MulticastKillKingMessage(BattlefieldKillKingMessage Message);// 0x3ac6410
	void GenerateNewInfos(out KillAssistInfo Info, out <int,int> UsedGroup2BestRowName);// 0x3ac629c
	void DispatchKillKingMessage(enum MessageType, Controller* Killer, Controller* Victim, int KillCount);// 0x3ac65a0
	void ClientDispatchPlayerKillMessage(BattlefieldPlayerKillMessage Message);// 0x3ac6ba4

--------------------------------
Class: BattlefieldKillKingMessage
	enum MessageType;//[Offset: 0x0, Size: 0x1]
	enum KillKingMessageType;//[Offset: 0x1, Size: 0x1]
	BattlefieldPlayerInfo KillerInfo;//[Offset: 0x8, Size: 0x20]
	BattlefieldPlayerInfo VictimInfo;//[Offset: 0x28, Size: 0x20]
	int KillCount;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: BattlefieldPlayerInfo
	FString PlayerName;//[Offset: 0x0, Size: 0x10]
	uint32 PlayerKey;//[Offset: 0x10, Size: 0x4]
	int TeamID;//[Offset: 0x14, Size: 0x4]
	int TeamIdx;//[Offset: 0x18, Size: 0x4]
	int SegmentLevel;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: KillAssistInfo
	bool IsKiller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	int ComboKill;//[Offset: 0x4, Size: 0x4]
	bool IsRevenge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool IsShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool IsFirstBlood;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool IsMeleeAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool IsGrenadeAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool IsLongDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool IsSuperLongDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]

--------------------------------
Class: BattlefieldPlayerKillMessage
	BattlefieldPlayerInfo KillerInfo;//[Offset: 0x0, Size: 0x20]
	uint32[] AssisterPlayerKeys;//[Offset: 0x20, Size: 0x10]
	BattlefieldPlayerInfo VictimInfo;//[Offset: 0x30, Size: 0x20]
	int DamageType;//[Offset: 0x50, Size: 0x4]
	int WeaponID;//[Offset: 0x54, Size: 0x4]
	int WeaponSkinID;//[Offset: 0x58, Size: 0x4]
	bool bHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool bBlindSnipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	bool bShootThroughSmoke;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 0x1]
	int ComboKill;//[Offset: 0x60, Size: 0x4]
	bool bKillLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool bIsShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	float KillDistance;//[Offset: 0x68, Size: 0x4]
	bool IsFirstBlood;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	bool IsRevenge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1]
	enum MessageType;//[Offset: 0x6e, Size: 0x1]
	enum KillKingMessageType;//[Offset: 0x6f, Size: 0x1]
	int KillCount;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: GameInitControllerComponent.ActorComponent.Object
	GameInitAction*[] Actions;//[Offset: 0xf0, Size: 0x10]

--------------------------------
Class: GameInitAction.Object

--------------------------------
Class: ApexGameCreditScoreRatingManager.ActorComponent.Object
	SoftObjectPath CreditScoreConfig;//[Offset: 0xf0, Size: 0x18]
	CreditScoreRatingData* CreditScoreData;//[Offset: 0x108, Size: 0x8]

--------------------------------
Class: CreditScoreRatingData.DataAsset.Object
	float RecoverValue;//[Offset: 0x30, Size: 0x4]
	float RecoRecoverValueverThreshold;//[Offset: 0x34, Size: 0x4]
	float KickOutScore;//[Offset: 0x38, Size: 0x4]
	<enum,float> ScoreLimitation;//[Offset: 0x40, Size: 0x50]
	<enum,float> ScoreReduceLimitation;//[Offset: 0x90, Size: 0x50]
	<enum,float> TacticScore;//[Offset: 0xe0, Size: 0x50]
	<enum,int> TacticToleranceNum;//[Offset: 0x130, Size: 0x50]
	float PingToleranceThreshold;//[Offset: 0x180, Size: 0x4]
	int PingToleranceNum;//[Offset: 0x184, Size: 0x4]
	float SuspiciousActionThresholdMid;//[Offset: 0x188, Size: 0x4]
	float SuspiciousActionThresholdHigh;//[Offset: 0x18c, Size: 0x4]
	bool bOpenCreditScore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]

--------------------------------
Class: ApexSequenceComponent.ActorComponent.Object
	ApexLevelSequenceActor* LevelSequenceActor;//[Offset: 0xf0, Size: 0x8]
	delegate OnSpawnObjectEvent;//[Offset: 0xf8, Size: 0x10]
	Object* TransformOriginActor;//[Offset: 0x108, Size: 0x8]
	void SetSequnce(LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings);// 0x3a1d138
	void OverrideBindings(const FString[] OverrideNames, const Actor*[] OverrideActors);// 0x3a1ca7c
	Actor* GetSequenceActorBindingObj(LevelSequenceActor* SequenceActor);// 0x3a1ccd0
	LevelSequenceActor* GetLevelSequenceActor();// 0x3a1cc9c
	void ApexStopSequence();// 0x3a1ce2c
	void ApexSequenceOnFinish();// 0x3a1cd54
	void ApexPlaySequence(LevelSequence* LevelSequence, const FString[] OverrideNames, const Actor*[] OverrideActors, MovieSceneSequencePlaybackSettings Settings);// 0x3a1ce40
	void ApexPauseSequence();// 0x3a1ce18
	void ApexJumpToFrameSequence(int NewPosition);// 0x3a1cd68
	float ApexGetSequenceDuration();// 0x3a1cde4

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x350, Size: 0x50]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x3a0, Size: 0xa0]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x440, Size: 0x50]
	class Object* DirectorClass;//[Offset: 0x490, Size: 0x8]
	void RemoveMetaDataByClass(class Object InClass);// 0x555d8f0
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x555d9c8
	Object* FindMetaDataByClass(class Object InClass);// 0x555da3c
	Object* CopyMetaData(Object* InMetaData);// 0x555d954

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18]
	FString ObjectPath;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c]
	FString ComponentName;//[Offset: 0x20, Size: 0x10]
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float StartTime;//[Offset: 0xc, Size: 0x4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bApplyRebase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bApplyOffset;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	float StartBlendInTime;//[Offset: 0x14, Size: 0x4]
	Vector Offset;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ApexLevelSequenceActor.LevelSequenceActor.Actor.Object

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x260, Size: 0x24]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x288, Size: 0x8]
	SoftObjectPath LevelSequence;//[Offset: 0x290, Size: 0x18]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x2a8, Size: 0x10]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x2b8, Size: 0x8]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x2c0, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c8, Size: 0x1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c8, Size: 0x1]
	Object* DefaultInstanceData;//[Offset: 0x2d0, Size: 0x8]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x2d8, Size: 0x8]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	void ShowBurnin();// 0x555ef04
	void SetSequence(LevelSequence* InSequence);// 0x555f114
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x555ef60
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x555efe4
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x555ec6c
	void ResetBindings();// 0x555e8e4
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x555e934
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x555ea00
	void OnLevelSequenceLoaded__DelegateSignature();// 0x43841ec
	LevelSequence* LoadSequence();// 0x555f190
	void HideBurnin();// 0x555ef18
	LevelSequencePlayer* GetSequencePlayer();// 0x555ef2c
	LevelSequence* GetSequence();// 0x555f1c4
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x555eb10

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x828, Size: 0x10]
	CameraComponent* GetActiveCameraComponent();// 0x5560974
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x55609ac

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x3b8, Size: 0x10]
	delegate OnPlayReverse;//[Offset: 0x3c8, Size: 0x10]
	delegate OnStop;//[Offset: 0x3d8, Size: 0x10]
	delegate OnPause;//[Offset: 0x3e8, Size: 0x10]
	delegate OnFinished;//[Offset: 0x3f8, Size: 0x10]
	byte Status;//[Offset: 0x408, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x409, Size: 0x1]
	MovieSceneSequence* Sequence;//[Offset: 0x410, Size: 0x8]
	FrameNumber StartTime;//[Offset: 0x418, Size: 0x4]
	int DurationFrames;//[Offset: 0x41c, Size: 0x4]
	int CurrentNumLoops;//[Offset: 0x420, Size: 0x4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x438, Size: 0x24]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x460, Size: 0x300]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x7c8, Size: 0x10]
	interface class None* PlaybackClient;//[Offset: 0x7d8, Size: 0x10]
	void StopAtCurrentTime();// 0x5183bbc
	void Stop();// 0x5183bd0
	void SetTimeRange(float StartTime, float Duration);// 0x5183510
	void SetPlayRate(float PlayRate);// 0x5182efc
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x5183888
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x5183944
	void SetFrameRate(FrameRate FrameRate);// 0x51836d0
	void SetFrameRange(int StartFrame, int Duration);// 0x51835cc
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x5182e70
	void ScrubToSeconds(float TimeInSeconds);// 0x51832a4
	bool ScrubToMarkedFrame(FString InLabel);// 0x51830f0
	void ScrubToFrame(FrameTime NewPosition);// 0x5183418
	void Scrub();// 0x5183be4
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x5182b54
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x5182bd8
	void PlayToSeconds(float TimeInSeconds);// 0x5183320
	bool PlayToMarkedFrame(FString InLabel);// 0x518318c
	void PlayToFrame(FrameTime NewPosition);// 0x5183494
	void PlayReverse();// 0x5183c9c
	void PlayLooping(int NumLoops);// 0x5183c0c
	void Play();// 0x5183cb0
	void Pause();// 0x5183bf8
	void JumpToSeconds(float TimeInSeconds);// 0x5183228
	void JumpToPosition(float NewPlaybackPosition);// 0x518380c
	bool JumpToMarkedFrame(FString InLabel);// 0x5183054
	void JumpToFrame(FrameTime NewPosition);// 0x518339c
	bool IsReversed();// 0x5182fac
	bool IsPlaying();// 0x518301c
	bool IsPaused();// 0x5182fe4
	void GoToEndAndStop();// 0x5183ba8
	QualifiedFrameTime GetStartTime();// 0x51836b0
	float GetPlayRate();// 0x5182f78
	float GetPlaybackStart();// 0x5183a7c
	float GetPlaybackPosition();// 0x5183b00
	float GetPlaybackEnd();// 0x5183a20
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x5182ca0
	float GetLength();// 0x5183acc
	FrameRate GetFrameRate();// 0x5183754
	int GetFrameDuration();// 0x5183770
	QualifiedFrameTime GetEndTime();// 0x5183688
	QualifiedFrameTime GetDuration();// 0x51837a4
	bool GetDisableCameraCuts();// 0x5182e50
	QualifiedFrameTime GetCurrentTime();// 0x51837d8
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x5182d64
	void ChangePlaybackDirection();// 0x5183c88

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8]
	FrameRate Rate;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8]
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4]
	enum Space;//[Offset: 0x4, Size: 0x1]
	Guid Guid;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x555e484

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 0x18]
	Object* Object;//[Offset: 0x18, Size: 0x8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x240, Size: 0xb8]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x2f8, Size: 0x8]
	void SetSettings(Object* InSettings);// 0x43841ec
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x555fd24

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10]
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10]
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x28]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 0xc]
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 0x8]
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: SelectLegendComponentBase.ActorComponent.Object
	LegendLoadoutInfo[] LegendLoadoutInfoList;//[Offset: 0xf0, Size: 0x10]
	void ReChooseLegend(ApexPlayerState* PlayerState, int LegendId);// 0x3d74240
	void OnRep_LegendLoadoutInfoList();// 0x43841ec
	void OnCancelConfirmLegend(ApexPlayerState* PlayerState);// 0x3d741bc
	void ConfirmLegend(ApexPlayerState* PlayerState, bool bIsRepick, bool ImmediatelyChange);// 0x3d73fd0
	void ChooseLegendSkin(ApexPlayerState* PlayerState, int SkinId);// 0x3d73f08
	void ChooseLegend(ApexPlayerState* PlayerState, int LegendId);// 0x3d740f4

--------------------------------
Class: LegendLoadoutInfo
	int LegendId;//[Offset: 0x0, Size: 0x4]
	int LoadoutID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameStateInGameRegionComponent.ActorComponent.Object
	bool bNeedDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool bEnableTickUpdateDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	<enum,InGameRegionData> RegionTypeToRegionData;//[Offset: 0x108, Size: 0x50]
	InGameRegionConfig[] InGameRegionConfigArray;//[Offset: 0x158, Size: 0x10]
	void OnRep_EnableTickUpdateDynamic();// 0x3bdcfc8

--------------------------------
Class: InGameRegionData
	<InGameRegionID,InGameRegionObjectList> RegionIDToObjectList_Static;//[Offset: 0x10, Size: 0x50]
	<InGameRegionID,InGameRegionObjectList> RegionIDToObjectList_Dynamic;//[Offset: 0x60, Size: 0x50]
	<InGameRegionObject,InGameRegionID> DynamicRegionObjectToRegionID;//[Offset: 0xb0, Size: 0x50]

--------------------------------
Class: InGameRegionID

--------------------------------
Class: InGameRegionObjectList
	InGameRegionObject[] InGameRegionObjectDataArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InGameRegionObject

--------------------------------
Class: InGameRegionConfig
	enum RegionType;//[Offset: 0x0, Size: 0x1]
	int ClientRegionSize;//[Offset: 0x4, Size: 0x4]
	int ServerRegionSize;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LevelEventCenter.Object
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: TriggerEvent.TriggerBaseEelement.Object
	Object* EventInstigator;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: TriggerBaseEelement.Object
	TriggerObject* OwnerTrigger;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TriggerObject.Object
	FString TriggerName;//[Offset: 0x58, Size: 0x10]
	enum RunType;//[Offset: 0x68, Size: 0x1]
	Actor* OuterActor;//[Offset: 0x70, Size: 0x8]
	class Object[] TriggerEventsClass;//[Offset: 0x78, Size: 0x10]
	TriggerAction*[] TriggerActions;//[Offset: 0x88, Size: 0x10]
	TriggerCondition*[] TriggerConditions;//[Offset: 0x98, Size: 0x10]
	<TriggerEvent*> TriggeredEvents;//[Offset: 0xa8, Size: 0x50]
	<TriggerAction*> CompleteActions;//[Offset: 0xf8, Size: 0x50]
	LevelDirector* OwnerLevelDirector;//[Offset: 0x148, Size: 0x8]
	FlowNodeBase* CarrierFlowNode;//[Offset: 0x150, Size: 0x8]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	float TickInterval;//[Offset: 0x15c, Size: 0x4]
	bool bShouldReplicateAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	bool bCacheParamToTriggerObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 0x1]
	EventParams(FieldPathProperty)[] EventParams;//[Offset: 0x168, Size: 0x10]

--------------------------------
Class: TriggerAction.TriggerBaseEelement.Object
	TriggerVariableSet* DataSource;//[Offset: 0x68, Size: 0x8]
	bool bEnableActionTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	bool bSupportNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]

--------------------------------
Class: TriggerVariableSet.Object
	VariableSetCachedActors DataActors;//[Offset: 0x78, Size: 0x58]

--------------------------------
Class: VariableSetCachedActors
	Actor* LastAccessActor;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: TriggerCondition.TriggerBaseEelement.Object
	TriggerVariableSet* VariableSet;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: LevelDirector.Actor.Object
	TaskRepData TaskData;//[Offset: 0x258, Size: 0x18]
	TriggerActionWrapper[] InstanceActions;//[Offset: 0x270, Size: 0x10]
	FString[] ClassPaths;//[Offset: 0x280, Size: 0x10]
	FString ConfigFilePath;//[Offset: 0x298, Size: 0x10]
	FString DescData;//[Offset: 0x2a8, Size: 0x10]
	LevelDirectorRepData LevelDirectorRepData;//[Offset: 0x2b8, Size: 0x18]
	TriggerFuncLib*[] FunctionLibList;//[Offset: 0x2d0, Size: 0x10]
	TriggerFlowTree* TriggersFlowTree;//[Offset: 0x2e0, Size: 0x8]
	<FString,TriggerObject*> TriggerObjectMap;//[Offset: 0x2e8, Size: 0x50]
	TriggerVariableSet* AllVariableSet;//[Offset: 0x338, Size: 0x8]
	bool StartLevelDirector();// 0x265dfc4
	void SetTriggerRunType(FString TriggerName, enum RunType);// 0x265dea8
	void RequestTriggerComplete(TriggerObject* CompleteTrigger);// 0x265d99c
	void OnRep_LevelDirectorData();// 0x265d7ec
	bool InitialLevelDirector();// 0x265dffc
	TriggerVariableSet* GetDataSet();// 0x265dc34
	int GetCurTaskID();// 0x265d800
	bool FlowControll(FString[] TriggerNames, enum FlowNodeType);// 0x265da54
	void ClientExecuteAction(FString ActionClassName, int64 UID, const TriggerParamRepData[] RepParams);// 0x265d834
	void AddEventToTrigger(FString TriggerName, class Object Event);// 0x265dd8c
	TriggerCondition* AddConditionToTrigger(FString TriggerName, class Object Condition);// 0x265dc68

--------------------------------
Class: TaskRepData
	FString TaskName;//[Offset: 0x0, Size: 0x10]
	int TaskId;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TriggerActionWrapper
	int64 ActionUniqueID;//[Offset: 0x0, Size: 0x8]
	TriggerAction* Action;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: LevelDirectorRepData
	FlowNodeRepData FlowNodeRepData;//[Offset: 0x0, Size: 0x18]

--------------------------------
Class: FlowNodeRepData
	FString RepData;//[Offset: 0x0, Size: 0x10]
	int NodeID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TriggerParamRepData
	byte ParamType;//[Offset: 0x0, Size: 0x1]
	FString ParamName;//[Offset: 0x8, Size: 0x10]
	byte[] ParamData;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: TriggerFuncLib.Object
	TriggerClassItem[] ClassItemList;//[Offset: 0x28, Size: 0x10]
	TriggerVariableSet* DataSet;//[Offset: 0x38, Size: 0x8]
	Actor* GetLastIteratorActor();// 0x2660400

--------------------------------
Class: TriggerClassItem
	FString TagName;//[Offset: 0x0, Size: 0x10]
	FString ClassFullPath;//[Offset: 0x10, Size: 0x10]
	float RandomRadius;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: TriggerFlowTree.Object
	FlowNodeBase* RootNode;//[Offset: 0x38, Size: 0x8]
	FlowNodeBase* TailNode;//[Offset: 0x40, Size: 0x8]
	FlowNodeBase* CurrentNode;//[Offset: 0x48, Size: 0x8]
	LevelDirector* OwnerLevelDirector;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: FlowNodeBase.Object
	FlowNodeBase* NextFlowNode;//[Offset: 0x28, Size: 0x8]
	FlowNodeRepData RepData;//[Offset: 0x30, Size: 0x18]
	TriggerFlowTree* CarriedFlowTree;//[Offset: 0x50, Size: 0x8]
	enum NodeType;//[Offset: 0x58, Size: 0x1]
	TriggerObject*[] TriggerObjects;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: RTPCParamInfo
	FString RTPCKey;//[Offset: 0x0, Size: 0x10]
	float Value;//[Offset: 0x10, Size: 0x4]
	int InterpolationTimeMs;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: MiniMapManager.ActorComponent.Object
	void UpdateRedCircleItem();// 0x3ca9dcc

--------------------------------
Class: GameModeStageInfo
	enum StageType;//[Offset: 0x0, Size: 0x1]
	float EnterStageTime;//[Offset: 0x4, Size: 0x4]
	float StageDuration;//[Offset: 0x8, Size: 0x4]
	int EnterStageTimes;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ZiplineManager.Object
	ZiplineBatchActor* ZiplineBatchActorStatic;//[Offset: 0x30, Size: 0x8]
	ZiplineBatchActor* ZiplineBatchActorDynamic;//[Offset: 0x38, Size: 0x8]
	ZiplineBatchComponent* ZiplineRidingBatchComponent;//[Offset: 0x40, Size: 0x8]
	<ZiplineComponent*,bool> ZipLineMap;//[Offset: 0x48, Size: 0x50]

--------------------------------
Class: ZiplineBatchActor.Actor.Object
	ZiplineISMBatchComponent* ZiplineISMBatchComponent;//[Offset: 0x250, Size: 0x8]

--------------------------------
Class: ZiplineISMBatchComponent.HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ZiplineInstanceData[] ZiplineDataList;//[Offset: 0x880, Size: 0x10]
	ZiplineComponent*[] ZiplineCompList;//[Offset: 0x890, Size: 0x10]
	StaticMesh* SplitStaticMesh;//[Offset: 0x8a0, Size: 0x8]
	MaterialInterface* MeshMaterialDynamic;//[Offset: 0x8a8, Size: 0x8]
	MaterialInterface* MeshMaterialStatic;//[Offset: 0x8b0, Size: 0x8]
	StaticMesh* SoftMeshPtr;//[Offset: 0x8b8, Size: 0x28]
	MaterialInterface* SoftMatDynamicPtr;//[Offset: 0x8e0, Size: 0x28]
	MaterialInterface* SoftMatStaticPtr;//[Offset: 0x908, Size: 0x28]
	enum ZiplineState;//[Offset: 0x930, Size: 0x1]
	void SetState(out const enum InState);// 0x3eb9848
	void RemoveZipline(ZiplineComponent* InZipline);// 0x3eb9a18
	void LoadResourceDone(AsyncLoaderBase* Loader);// 0x3eb97cc
	void HighlightZipline(ZiplineComponent* InZipline, bool bHighlight);// 0x3eb98d4
	void HideZipline(ZiplineComponent* InZipline);// 0x3eb999c
	void AddZipline(ZiplineComponent* InZipline);// 0x3eb9a94

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x798, Size: 0x10]
	int NumBuiltInstances;//[Offset: 0x7a8, Size: 0x4]
	Box BuiltInstanceBounds;//[Offset: 0x7b0, Size: 0x1c]
	Box UnbuiltInstanceBounds;//[Offset: 0x7cc, Size: 0x1c]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x7e8, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7f8, Size: 0x1]
	int OcclusionLayerNumNodes;//[Offset: 0x800, Size: 0x4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x804, Size: 0x1c]
	bool bWorldBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 0x1]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x825, Size: 0x1]
	int InstanceCountToRender;//[Offset: 0x828, Size: 0x4]
	int SpecifiedSplitFactor;//[Offset: 0x82c, Size: 0x4]
	int SpecifiedMinVertsToSplitNode;//[Offset: 0x830, Size: 0x4]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x5f4bd98

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x6b0, Size: 0x10]
	InstancedStaticMeshInstanceCustomData[] PerInstanceSMCustomData;//[Offset: 0x6c0, Size: 0x10]
	bool bUsePerInstanceMPData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d0, Size: 0x1]
	InstancedStaticMeshMeshProbesData[] PerInstanceMPData;//[Offset: 0x6d8, Size: 0x10]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6e8, Size: 0x1]
	int InstancingRandomSeed;//[Offset: 0x6ec, Size: 0x4]
	int InstanceStartCullDistance;//[Offset: 0x6f0, Size: 0x4]
	int InstanceEndCullDistance;//[Offset: 0x6f4, Size: 0x4]
	float InstanceMinScreenSize;//[Offset: 0x6f8, Size: 0x4]
	int[] InstanceReorderTable;//[Offset: 0x700, Size: 0x10]
	int NumPendingLightmaps;//[Offset: 0x770, Size: 0x4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x778, Size: 0x10]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x5f59728
	bool UpdateInstanceCustomData(int InstanceIndex, out const Vector4 NewInstanceCustomData, bool bMarkRenderStateDirty, bool bTeleport);// 0x5f5959c
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x5f58c44
	bool RemoveInstance(int InstanceIndex);// 0x5f58d50
	void NewInstance();// 0x5f5a05c
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x5f5994c
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x5f58adc
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x5f58980
	int GetInstanceCount();// 0x5f58d00
	void DeleteInstance();// 0x5f5a070
	void ClearInstances();// 0x5f58d34
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x5f593b0
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x5f58fb0
	bool BatchUpdateInstancesCustomDatas(int StartInstanceIndex, out const Vector4[] NewInstancesCustomDatas, bool bMarkRenderStateDirty, bool bTeleport);// 0x5f59214
	bool BatchUpdateInstancesCustomData(int StartInstanceIndex, int NumInstances, out const Vector4 NewInstancesCustomData, bool bMarkRenderStateDirty, bool bTeleport);// 0x5f58de0
	int AddInstanceWorldSpaceWithCustomData(out const Transform WorldTransform, out const Vector4 InstnaceCustomData);// 0x5f59bfc
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x5f59e8c
	int AddInstanceWithCustomData(out const Transform InstanceTransform, out const Vector4 InstnaceCustomData);// 0x5f59d40
	int AddInstanceOffset(out const Transform InstanceTransform, out const Vector InstanceOffset);// 0x5f59abc
	int AddInstance(out const Transform InstanceTransform);// 0x5f59f70

--------------------------------
Class: ZiplineInstanceData
	int InstanceIdxStart;//[Offset: 0x0, Size: 0x4]
	int InstanceCount;//[Offset: 0x4, Size: 0x4]
	Matrix[] InstanceMatrix;//[Offset: 0x8, Size: 0x10]
	ZiplineBuildData BuildData;//[Offset: 0x18, Size: 0x2c]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ZiplineBuildData
	Vector ZiplineStart;//[Offset: 0x0, Size: 0xc]
	Vector ZiplineEnd;//[Offset: 0xc, Size: 0xc]
	int CurveSeparateNum;//[Offset: 0x18, Size: 0x4]
	int NumSegments;//[Offset: 0x1c, Size: 0x4]
	float TileMaterial;//[Offset: 0x20, Size: 0x4]
	Vector2D ZiplineMinMax;//[Offset: 0x24, Size: 0x8]

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40]
	Vector4 ShCoefficient;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: InstancedStaticMeshInstanceCustomData
	Vector4 CustomData;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InstancedStaticMeshMeshProbesData
	float MeshProbesIntensity;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: ZiplineBatchComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Material* ZiplineMat;//[Offset: 0x5a0, Size: 0x8]
	Material* SoftMatPtr;//[Offset: 0x5a8, Size: 0x28]
	ZiplineComponent*[] TmpZiplineList;//[Offset: 0x5d0, Size: 0x10]
	ZiplineComponent*[] CurZiplineList;//[Offset: 0x5e0, Size: 0x10]
	<ZiplineComponent*,ZiplineBatchData> ZiplineMeshMap;//[Offset: 0x5f0, Size: 0x50]
	ZiplineBatchData ZiplineBatchData;//[Offset: 0x640, Size: 0x28]
	ZiplineComponent*[] NeedZiplineList;//[Offset: 0x668, Size: 0x10]
	ZiplineIndexDist[] ZiplineIndexDistList;//[Offset: 0x678, Size: 0x10]
	void LoadResourceDone(AsyncLoaderBase* Loader);// 0x3eb377c

--------------------------------
Class: ZiplineBatchData

--------------------------------
Class: ZiplineIndexDist

--------------------------------
Class: ApexTrain.Actor.Object
	float AudioEffectRange;//[Offset: 0x2c0, Size: 0x4]
	TrainCoach* NearestCoach;//[Offset: 0x2c8, Size: 0x8]
	TrainSaveData ReplicatedSaveData;//[Offset: 0x2f8, Size: 0x18]
	enum CurrentState;//[Offset: 0x310, Size: 0x1]
	float TickInterval;//[Offset: 0x314, Size: 0x4]
	bool bAdjustDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	bool bTrainHiddenTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	ApexSoundSpeakerComponent* Speaker;//[Offset: 0x378, Size: 0x8]
	AkComponent* AKComp;//[Offset: 0x380, Size: 0x8]
	float ForceUpdateDistance;//[Offset: 0x3a0, Size: 0x4]
	float LerpLimit;//[Offset: 0x3a4, Size: 0x4]
	bool bOpenOverlapOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	float DepartureBanTime;//[Offset: 0x3ac, Size: 0x4]
	bool bPlayBGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 0x1]
	AkAudioEvent* EngineAudio;//[Offset: 0x3b8, Size: 0x8]
	TrainStateComponent* TrainStateComp;//[Offset: 0x3c8, Size: 0x8]
	ApexRail* LocalDrivingRail;//[Offset: 0x3d0, Size: 0x8]
	bool bPenetrateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1]
	ApexRail* ServerDrivingRail;//[Offset: 0x3e0, Size: 0x8]
	float PreCalcNextRailSeconds;//[Offset: 0x3e8, Size: 0x4]
	ApexRail* ServerNextDrivingRail;//[Offset: 0x3f0, Size: 0x8]
	ApexRail* LastDrivingRail;//[Offset: 0x3f8, Size: 0x8]
	bool bForceDetectedFlash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 0x1]
	bool bLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 0x1]
	TrainInfo Locomotives;//[Offset: 0x410, Size: 0x28]
	TrainInfo[] Coachs;//[Offset: 0x438, Size: 0x10]
	float MAXERRORDISTANCE;//[Offset: 0x448, Size: 0x4]
	int VehicleGUID;//[Offset: 0x450, Size: 0x4]
	Transform Offset;//[Offset: 0x460, Size: 0x30]
	bool bRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	float Acceleration;//[Offset: 0x494, Size: 0x4]
	float MaxSpeed;//[Offset: 0x498, Size: 0x4]
	float TrainRuntime;//[Offset: 0x49c, Size: 0x4]
	bool bOpenParkTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1]
	FString TrainName;//[Offset: 0x4a8, Size: 0x10]
	bool bStartWithNearestPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	enum StartUpType;//[Offset: 0x4b9, Size: 0x1]
	float ManualParkingWatingTime;//[Offset: 0x4bc, Size: 0x4]
	FName RailTag;//[Offset: 0x4c0, Size: 0x8]
	TrainSaveData StateSnapShot;//[Offset: 0x500, Size: 0x18]
	float PenetrateCharacterDistance;//[Offset: 0x524, Size: 0x4]
	Vector BoxSize;//[Offset: 0x528, Size: 0xc]
	Vector BoxLocation;//[Offset: 0x534, Size: 0xc]
	bool bShowPenetrateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	float PenetrateCheckDistance;//[Offset: 0x544, Size: 0x4]
	void SwitchTrainControlStateTrack(out const ChapterParams Params);// 0x3a309fc
	void SwitchTrainControlState(ApexPlayerController* Controller, bool bManual);// 0x3a30ad4
	void SetTrainMaxSpeed(out const ChapterParams Params);// 0x3a30924
	void SetTrainDistance(float Distance);// 0x3a301e4
	void ServerChangeState(enum TargetStateType);// 0x3a302e4
	float SelectARandomRail();// 0x3a3074c
	void OnRep_ServerNext();// 0x3a30880
	void OnRep_SaveData();// 0x3a30b9c
	void OnRep_locomotivesInfo();// 0x3a30794
	void OnRep_Hidden();// 0x3a30c48
	void Onrep_GUID();// 0x3a30780
	void OnRep_CurrentState();// 0x3a30c34
	void OnRep_CoachInfo();// 0x3a307a8
	void NetMulticast_ChangeState(enum TargetStateType, TrainSaveData TheStateSnapShot, bool bManual);// 0x3a30368
	void Multi_SetDrivingRail(ApexRail* Rail, bool bInit, float Distance);// 0x3a30630
	void Multi_ChangeRail(ApexRail* Rail);// 0x3a305ac
	void Hidden(bool bNewHidden);// 0x3a30bb0
	Transform GetTrainTransform();// 0x3a304d0
	Transform GetTrainTrans();// 0x3a30280
	Vector GetTrainStationLocation(bool bCurrentStation);// 0x3a307bc
	enum GetTrainState();// 0x3a30260
	Rotator GetTrainRotation();// 0x3a3053c
	Vector GetTrainLocation();// 0x3a30574
	Vector GetSafeLocation(float DistanceAlgongRail);// 0x3a3001c
	int GetNextStationIndex();// 0x3a3084c
	float GetDistancePercent();// 0x3a30c5c
	int GetCoachsNum();// 0x3a301b0
	Vector GetCoachLocation(int CoachIndex);// 0x3a30128
	TrainCoach* GetCoach(int CoachIndex);// 0x3a300a4
	void EnterPoint(FString Tag);// 0x3a30894

--------------------------------
Class: ChapterParams
	ChapterParam[] Params;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ChapterParam
	FString VariableName;//[Offset: 0x0, Size: 0x10]
	float FloatValue;//[Offset: 0x10, Size: 0x4]
	FString StringValue;//[Offset: 0x18, Size: 0x10]
	int NumberValue;//[Offset: 0x28, Size: 0x4]
	enum Type;//[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: TrainCoach.Actor.Object
	FString ID;//[Offset: 0x2d8, Size: 0x10]
	float SimulatedMoveDistance;//[Offset: 0x324, Size: 0x4]
	float BodyLength;//[Offset: 0x328, Size: 0x4]
	int CoachKey;//[Offset: 0x32c, Size: 0x4]
	TargetPoint* MoveProxy;//[Offset: 0x338, Size: 0x8]
	ApexCharacter*[] Passengers;//[Offset: 0x348, Size: 0x10]
	ApexTrain* TrainOwner;//[Offset: 0x360, Size: 0x8]
	PrimitiveComponent*[] IndirectOptimizeComps;//[Offset: 0x368, Size: 0x10]
	bool bOpentClientOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	float CoachCullDistance;//[Offset: 0x37c, Size: 0x4]
	float InteractiveDistance;//[Offset: 0x380, Size: 0x4]
	Vector BoxExtent;//[Offset: 0x384, Size: 0xc]
	Transform BoxOffset;//[Offset: 0x390, Size: 0x30]
	bool bApplyAttachmentReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	StaticMeshComponent* CoachMainMesh;//[Offset: 0x3c8, Size: 0x8]
	Actor*[] AttachActorList;//[Offset: 0x3d0, Size: 0x10]
	NavMeshSurfaceComponent* NavMeshSurfaceComponent;//[Offset: 0x3e0, Size: 0x8]
	void OnRep_Coachkey();// 0x3decbac
	void OnCoachTransformUpdate();// 0x43841ec
	void Hidden(bool bNewHidden);// 0x3decaac
	int GetPingType();// 0x3deca70
	void AddIndirectOptimizeComp(PrimitiveComponent* TargetComp);// 0x3decb30

--------------------------------
Class: TargetPoint.Actor.Object

--------------------------------
Class: NavMeshSurfaceComponent.ActorComponent.Object
	bool bEnableTickUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	float UpdateInterval;//[Offset: 0x104, Size: 0x4]
	bool bNeedGenerateNavLinks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	void UpdateSurface();// 0x3ccc9e4

--------------------------------
Class: TrainSaveData
	float Velocity;//[Offset: 0x0, Size: 0x4]
	float DistanceToStartPoint;//[Offset: 0x4, Size: 0x4]
	float Timestamp;//[Offset: 0x8, Size: 0x4]
	ApexRail* Rail;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ApexRail.Actor.Object
	ApexTrain* SimulateTrain;//[Offset: 0x250, Size: 0x8]
	float DrivingTime;//[Offset: 0x258, Size: 0x4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1]
	int AutoBrakeEventID;//[Offset: 0x260, Size: 0x4]
	int ManualBrakeEventID;//[Offset: 0x264, Size: 0x4]
	int DepartureEventID;//[Offset: 0x268, Size: 0x4]
	int ManualParkingEventID;//[Offset: 0x26c, Size: 0x4]
	int AutoParkingEventID;//[Offset: 0x270, Size: 0x4]
	int BinNum;//[Offset: 0x274, Size: 0x4]
	class StopSuplyBin* BinClass;//[Offset: 0x278, Size: 0x8]
	StopSuplyBin*[] StopBins;//[Offset: 0x280, Size: 0x10]
	StopSuplyBin*[] SharedBins;//[Offset: 0x290, Size: 0x10]
	SplineComponent* RailEditorComp;//[Offset: 0x2a0, Size: 0x8]
	SplineComponent* RailRuntimeComp;//[Offset: 0x2a8, Size: 0x8]
	bool bFinishRailBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	float RTRailSubLength;//[Offset: 0x2c8, Size: 0x4]
	ApexRail*[] NextStations;//[Offset: 0x2d0, Size: 0x10]
	ApexRail*[] PreStations;//[Offset: 0x2e0, Size: 0x10]
	FString StationName;//[Offset: 0x2f0, Size: 0x10]
	int StationIndex;//[Offset: 0x300, Size: 0x4]
	float WaitDuration;//[Offset: 0x304, Size: 0x4]
	float RailLength;//[Offset: 0x308, Size: 0x4]
	bool bDrawOrientation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	StaticMesh* OrientationMesh;//[Offset: 0x310, Size: 0x8]
	MaterialInterface* OrientationMat;//[Offset: 0x318, Size: 0x8]
	bool bNeedDrawMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	float RailMeshPerLen;//[Offset: 0x324, Size: 0x4]
	StaticMesh* RailMesh;//[Offset: 0x328, Size: 0x8]
	void OnFinishRailBuild();// 0x43841ec
	Vector GetStationLocation();// 0x3a1713c
	int GetStationIndex();// 0x3a17120
	FString GetPointTagInScaleY(float TagValue);// 0x43841ec
	FString GetPointTagInScaleX(float TagValue);// 0x43841ec
	void AutoSetTangent(float Tension, bool bStationaryEndpoints);// 0x3a17058

--------------------------------
Class: StopSuplyBin.Actor.Object
	Vector LeftDoorDefaultLocation;//[Offset: 0x250, Size: 0xc]
	Vector RightDoorDefaultLocation;//[Offset: 0x25c, Size: 0xc]
	Vector BinDefaultLocation;//[Offset: 0x268, Size: 0xc]
	SceneComponent* LeftDoorGroup;//[Offset: 0x278, Size: 0x8]
	SceneComponent* RightDoorGroup;//[Offset: 0x280, Size: 0x8]
	SceneComponent* BinGroup;//[Offset: 0x288, Size: 0x8]
	ParticleSystemComponent* OpenParticleComp;//[Offset: 0x290, Size: 0x8]
	ParticleSystemComponent* FlashParticleComp;//[Offset: 0x298, Size: 0x8]
	class BinActor* SuplyBinClass;//[Offset: 0x2a0, Size: 0x8]
	BinActor* SuplyBin;//[Offset: 0x2a8, Size: 0x8]
	bool bBinOpenState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	bool bNeedBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	CurveVector* DoorRotateCurve;//[Offset: 0x2b8, Size: 0x8]
	TimelineComponent* DoorRotateTimeLineComp;//[Offset: 0x2c0, Size: 0x8]
	CurveVector* DoorLiftCurve;//[Offset: 0x2c8, Size: 0x8]
	TimelineComponent* DoorLiftTimeLineComp;//[Offset: 0x2d0, Size: 0x8]
	CurveVector* BinLiftCurve;//[Offset: 0x2d8, Size: 0x8]
	TimelineComponent* BinLCTimeLineComp;//[Offset: 0x2e0, Size: 0x8]
	byte TimelineDirection;//[Offset: 0x2e8, Size: 0x1]
	void SwitchFlashLightState(bool bBeginFlash);// 0x3dc5764
	void PlayAnimationFromEnd();// 0x3dc5908
	void PlayAnimation();// 0x3dc591c
	void Onrep_BinOnpenState();// 0x3dc59c0
	void OnLerpDoorRotate(Vector interpolatedVal);// 0x3dc5944
	void OnLerpDoorLift(Vector interpolatedVal);// 0x3dc588c
	void OnLerpBinLift(Vector interpolatedVal);// 0x3dc57fc
	void OnFinishLerpDoorRotate();// 0x3dc5930
	void OnFinishDoorLift();// 0x3dc5878
	void OnFinishBinLift();// 0x3dc57e8
	enum GetStopBinState();// 0x3dc59d4

--------------------------------
Class: BinActor.SignificanceManagedActor.Actor.Object
	enum eZoneType;//[Offset: 0x2f0, Size: 0x1]
	LootZoneTypeInfo LootZoneTypeInfo;//[Offset: 0x2f8, Size: 0x18]
	enum eBuildingType;//[Offset: 0x310, Size: 0x1]
	SceneComponent* BinWrapper;//[Offset: 0x318, Size: 0x8]
	StaticMeshComponent* BinCover;//[Offset: 0x320, Size: 0x8]
	StaticMeshComponent* BinLight;//[Offset: 0x328, Size: 0x8]
	StaticMeshComponent* BinBottom;//[Offset: 0x330, Size: 0x8]
	StaticMeshComponent* BinTray;//[Offset: 0x338, Size: 0x8]
	StaticMeshComponent* BinBase;//[Offset: 0x340, Size: 0x8]
	MaterialInterface* BlueMat;//[Offset: 0x348, Size: 0x8]
	MaterialInterface* BlueLightMat;//[Offset: 0x350, Size: 0x8]
	ParticleSystemComponent* ParticleSys;//[Offset: 0x358, Size: 0x8]
	CapsuleComponent* KillBox;//[Offset: 0x360, Size: 0x8]
	float KillBoxActiveTime;//[Offset: 0x368, Size: 0x4]
	BinDetectedBox[] Boxs;//[Offset: 0x370, Size: 0x10]
	BinDetectedBox AutoOpenBox;//[Offset: 0x380, Size: 0x18]
	float NeedTraceDist;//[Offset: 0x398, Size: 0x4]
	float NoBtnNeedTraceTime;//[Offset: 0x39c, Size: 0x4]
	float Duration;//[Offset: 0x3a0, Size: 0x4]
	CurveVector* VectorCurve;//[Offset: 0x3a8, Size: 0x8]
	CurveFloat* FloatCurve;//[Offset: 0x3b0, Size: 0x8]
	Vector RotateAxis;//[Offset: 0x3b8, Size: 0xc]
	bool HasCloseOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 0x1]
	bool CanOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c5, Size: 0x1]
	bool IsAICanOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c6, Size: 0x1]
	float TriggerOutDist;//[Offset: 0x3c8, Size: 0x4]
	Vector PropNotOpenOffset;//[Offset: 0x3cc, Size: 0xc]
	int NotOpenShowPropLevel;//[Offset: 0x3d8, Size: 0x4]
	float PropHeight;//[Offset: 0x3dc, Size: 0x4]
	<int,int> PropCount2TotalWidth;//[Offset: 0x3e0, Size: 0x50]
	float DefaultTotalWidth;//[Offset: 0x430, Size: 0x4]
	float GenerateDelay;//[Offset: 0x434, Size: 0x4]
	bool bIsDynamicSpawnItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	int MaterialNum;//[Offset: 0x43c, Size: 0x4]
	int[] ItemsList;//[Offset: 0x440, Size: 0x10]
	FName ZoneVolumeID;//[Offset: 0x454, Size: 0x8]
	FName SpawnItemTableName;//[Offset: 0x45c, Size: 0x8]
	int MaxSpawnItemRetryCount;//[Offset: 0x464, Size: 0x4]
	int SpawnItemCount;//[Offset: 0x468, Size: 0x4]
	int MiniSpawnItemCount;//[Offset: 0x46c, Size: 0x4]
	FName OpenBinSoundName;//[Offset: 0x470, Size: 0x8]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x478, Size: 0x8]
	bool bCanCryptoDroneFind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	int OpenBottomEventID;//[Offset: 0x4a0, Size: 0x4]
	TimelineComponent* MoveTimeline;//[Offset: 0x4a8, Size: 0x8]
	TimelineComponent* RotateTimeline;//[Offset: 0x4b0, Size: 0x8]
	byte MoveTimelineDirection;//[Offset: 0x4b8, Size: 0x1]
	byte RotateTimelineDirection;//[Offset: 0x4b9, Size: 0x1]
	bool IsAlreadyOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 0x1]
	Vector TimelineVector;//[Offset: 0x4dc, Size: 0xc]
	float TimelineRotate;//[Offset: 0x4e8, Size: 0x4]
	Vector TrayTimelineVector;//[Offset: 0x4ec, Size: 0xc]
	float TrayTimelineRotate;//[Offset: 0x4f8, Size: 0x4]
	PickUpWrapperActor*[] PickUpList;//[Offset: 0x500, Size: 0x10]
	SceneComponent* BinBottomWrapper;//[Offset: 0x510, Size: 0x8]
	SceneComponent* BinTrayWrapper;//[Offset: 0x518, Size: 0x8]
	ParticleSystemComponent* BottomParticleSys;//[Offset: 0x520, Size: 0x8]
	int[] Heros;//[Offset: 0x528, Size: 0x10]
	float BottomDuration;//[Offset: 0x538, Size: 0x4]
	CurveVector* TrayVectorCurve;//[Offset: 0x540, Size: 0x8]
	CurveFloat* BottomFloatCurve;//[Offset: 0x548, Size: 0x8]
	Vector BottomRotateAxis;//[Offset: 0x550, Size: 0xc]
	Vector[] BottomPropPos;//[Offset: 0x560, Size: 0x10]
	float BottomGenerateDelay;//[Offset: 0x570, Size: 0x4]
	bool bIsBottomDynamicSpawnItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 0x1]
	int[] BottomItemsList;//[Offset: 0x578, Size: 0x10]
	FName BottomSpawnItemTableName;//[Offset: 0x588, Size: 0x8]
	int BottomSpawnItemCount;//[Offset: 0x590, Size: 0x4]
	TimelineComponent* TrayMoveTimeline;//[Offset: 0x598, Size: 0x8]
	TimelineComponent* BottomRotateTimeline;//[Offset: 0x5a0, Size: 0x8]
	byte TrayMoveTimelineDirection;//[Offset: 0x5a8, Size: 0x1]
	byte BottomRotateTimelineDirection;//[Offset: 0x5a9, Size: 0x1]
	bool IsBottomOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]
	bool IsBlueBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9, Size: 0x1]
	MaterialInterface* RedMat;//[Offset: 0x5d0, Size: 0x8]
	MaterialInterface* RedLightMat;//[Offset: 0x5d8, Size: 0x8]
	int GroupID;//[Offset: 0x5e0, Size: 0x4]
	bool IsSpatialGroupBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e4, Size: 0x1]
	FName SpatialGroupName;//[Offset: 0x5e8, Size: 0x8]
	int ID;//[Offset: 0x5f0, Size: 0x4]
	enum[] DisableOpenPawnStates;//[Offset: 0x5f8, Size: 0x10]
	TimerHandle KillBoxActiveTimer;//[Offset: 0x610, Size: 0x8]
	float MinAdditinalSpeed;//[Offset: 0x630, Size: 0x4]
	float MaxAdditinalSpeed;//[Offset: 0x634, Size: 0x4]
	float TreasureSpawnDely;//[Offset: 0x638, Size: 0x4]
	enum IceBinState;//[Offset: 0x63c, Size: 0x1]
	enum BinType;//[Offset: 0x63d, Size: 0x1]
	int IceCoinItemID;//[Offset: 0x640, Size: 0x4]
	int MinIceCoinNum;//[Offset: 0x644, Size: 0x4]
	int MaxIceCoinNum;//[Offset: 0x648, Size: 0x4]
	int IceGrenadeItemID;//[Offset: 0x64c, Size: 0x4]
	int MinIceGrenadeNum;//[Offset: 0x650, Size: 0x4]
	int MaxIceGrenadeNum;//[Offset: 0x654, Size: 0x4]
	float IceUnFreezeTime;//[Offset: 0x658, Size: 0x4]
	float IceUnFreezeValue;//[Offset: 0x65c, Size: 0x4]
	float MiniMapWarningTime;//[Offset: 0x660, Size: 0x4]
	FName IceFreezeParamName;//[Offset: 0x664, Size: 0x8]
	FName IceFreezeMatParamName;//[Offset: 0x66c, Size: 0x8]
	FString IceBinBankName;//[Offset: 0x678, Size: 0x10]
	FName IceMeltSoundName;//[Offset: 0x688, Size: 0x8]
	FString IceBoxSpawnBankName;//[Offset: 0x690, Size: 0x10]
	FName IceBoxSpawnSoundName;//[Offset: 0x6a0, Size: 0x8]
	Vector IceBoxSpawnOffset;//[Offset: 0x6a8, Size: 0xc]
	bool IsNeedShowIceBinLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 0x1]
	StaticMeshComponent* IceMesh;//[Offset: 0x6b8, Size: 0x8]
	ParticleSystemComponent* IceEffect;//[Offset: 0x6c0, Size: 0x8]
	MaterialInstanceDynamic* DynamicLightMeshMatrial;//[Offset: 0x6c8, Size: 0x8]
	void TrayMoveTimelineCallback(Vector Val);// 0x3ad9678
	void StartUnFreeze();// 0x3ad941c
	void SetID(int InID, enum InReason);// 0x3ad9490
	void SetCanOpen(bool bCanOpen);// 0x3ad98bc
	void RotateTimelineCallback(float Val);// 0x3ad978c
	void PlayTimeline(bool bReverse);// 0x3ad9708
	void PlaySpawnSound();// 0x3ad9400
	void OnRep_RepIsBottomOpen();// 0x3ad9564
	void OnRep_RepIsBlueBin();// 0x3ad9550
	void OnRep_RepIsAlreadyOpen();// 0x3ad96f4
	void OnRep_IsFreeze();// 0x3ad9430
	void MoveTimelineCallback(Vector Val);// 0x3ad9808
	bool IsFreeze();// 0x3ad9444
	bool IsCanOpen();// 0x3ad9884
	void DynamicBinEarlyGenerate();// 0x3ad947c
	void BP_OnServerOpen(Character* OpenCharacter);// 0x43841ec
	void BP_BinOpen_Callback();// 0x43841ec
	void BP_BinBottomOpen_Callback();// 0x43841ec
	void BottomRotateTimelineCallback(float Val);// 0x3ad95fc
	void BottomPlayTimeline(bool bReverse);// 0x3ad9578

--------------------------------
Class: SignificanceManagedActor.Actor.Object
	FName SignificanceTag;//[Offset: 0x258, Size: 0x8]
	enum SignificanceByType;//[Offset: 0x260, Size: 0x1]
	enum PostSignificanceType;//[Offset: 0x261, Size: 0x1]
	void OnSignificanceChanged(float OldSignificance, float Significance);// 0x3d927c8

--------------------------------
Class: LootZoneTypeInfo
	enum LootZoneType;//[Offset: 0x0, Size: 0x1]
	FString CustomZoneType;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BinDetectedBox
	Vector RelativeLocation;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xf0, Size: 0x98]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1]
	void Stop();// 0x60a951c
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x60a8e10
	void SetTimelineLengthMode(byte NewLengthMode);// 0x60a9044
	void SetTimelineLength(float NewLength);// 0x60a90c0
	void SetPlayRate(float NewRate);// 0x60a9220
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x60a938c
	void SetNewTime(float NewTime);// 0x60a9170
	void SetLooping(bool bNewLooping);// 0x60a92d4
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x60a8d54
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x60a8fc0
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x60a8ecc
	void ReverseFromEnd();// 0x60a9530
	void Reverse();// 0x60a9544
	void PlayFromStart();// 0x60a9558
	void Play();// 0x60a956c
	void OnRep_Timeline();// 0x60a8d40
	bool IsReversing();// 0x60a94ac
	bool IsPlaying();// 0x60a94e4
	bool IsLooping();// 0x60a929c
	float GetTimelineLength();// 0x60a913c
	float GetPlayRate();// 0x60a91ec
	float GetPlaybackPosition();// 0x60a9358
	bool GetIgnoreTimeDilation();// 0x60a8f88

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x10]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x560, Size: 0x68]
	InterpCurveVector SplineInfo;//[Offset: 0x5c8, Size: 0x18]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x5e0, Size: 0x18]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x5f8, Size: 0x18]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x610, Size: 0x18]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x62c, Size: 0x4]
	float Duration;//[Offset: 0x630, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x634, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x635, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x636, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x637, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x639, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63a, Size: 0x1]
	float LoopPosition;//[Offset: 0x63c, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x640, Size: 0xc]
	void UpdateSpline();// 0x60925fc
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x60916d0
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x6091264
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x6092574
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x60913c4
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x6091570
	void SetSplineWorldPoints(out const Vector[] Points);// 0x60919a4
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x60910d4
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x6091a44
	void SetSplineLocalPoints(out const Vector[] Points);// 0x6091904
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x60924ec
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x60917a4
	void SetDrawDebug(bool bShow);// 0x6092468
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x609023c
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x6092274
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x6092394
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x6091c90
	bool IsClosedLoop();// 0x609223c
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x608fd28
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x608f094
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x608fbd0
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x608f5a4
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x6090f48
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x608ffd8
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x608f3ac
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x608fe80
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x608ef74
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6090a80
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x608fb04
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x608ecb0
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x6090718
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x608f79c
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x608f28c
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6090db0
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x608fdb4
	byte GetSplinePointType(int PointIndex);// 0x60911e0
	float GetSplineLength();// 0x609030c
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x608eac0
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x6090864
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x608f8e8
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x608f16c
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6090b4c
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x608fc5c
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x608eb94
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x60908ec
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x608f970
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x608ee54
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x60909b4
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x608fa38
	int GetNumberOfSplinePoints();// 0x60910a0
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x608f67c
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6090fd4
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6090064
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x60905b8
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x6090494
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6090c18
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x6090130
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x6090340
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x6090410
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x608f484
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6090e7c
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x608ff0c
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x60901b4
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6090ce4
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x608e5dc
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x608e230
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x608e794
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x608e38c
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x608e6b8
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x608e428
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x608e500
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x608e94c
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x608ea28
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x608e870
	void ClearSplinePoints(bool bUpdateSpline);// 0x60921b8
	void AddSplineWorldPoint(out const Vector Position);// 0x6091c00
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x6091d54
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x6091eb4
	void AddSplineLocalPoint(out const Vector Position);// 0x6091b70
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x6091fd0
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x60920b8

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector Position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: TrainStateComponent.ActorComponent.Object
	<enum,TrainSaveData> PendingState;//[Offset: 0xf0, Size: 0x50]
	<enum,TrainState*> TrainStateMap;//[Offset: 0x148, Size: 0x50]
	ApexTrain* Train;//[Offset: 0x198, Size: 0x8]
	TrainState* CurrentState;//[Offset: 0x1b8, Size: 0x8]
	TrainstateConfig[] StateConfig;//[Offset: 0x1c8, Size: 0x10]

--------------------------------
Class: TrainState.Object
	AkAudioEvent*[] TempAudios;//[Offset: 0x28, Size: 0x10]
	AkAudioEvent*[] Audios;//[Offset: 0x58, Size: 0x10]
	bool bAutoPlayAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	int EventID;//[Offset: 0x6c, Size: 0x4]
	bool bShowBroadCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	ApexTrain* Train;//[Offset: 0x78, Size: 0x8]
	ApexRail* CurrentRail;//[Offset: 0x80, Size: 0x8]
	TrainStateComponent* TrainStateMachine;//[Offset: 0x88, Size: 0x8]
	void SelfPlayAudiosInTurn();// 0x3def180
	void PlayAudiosInTurn(AkAudioEvent*[] InAudios);// 0x3def08c
	void BroadcastText();// 0x3def16c

--------------------------------
Class: TrainstateConfig
	TrainState* State;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TrainInfo
	float BodyLength;//[Offset: 0x0, Size: 0x4]
	class Actor* BodyClass;//[Offset: 0x8, Size: 0x8]
	float Padding;//[Offset: 0x10, Size: 0x4]
	bool bAllowIgnoreMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float DistanceTOLocomotive;//[Offset: 0x18, Size: 0x4]
	TrainCoach* Coach;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ConveyorBeltCamp.Actor.Object
	ApexRail* RailCache;//[Offset: 0x260, Size: 0x8]
	ConveyorBeltVehicle*[] ActiveBelts;//[Offset: 0x2e0, Size: 0x10]
	ConveyorBeltVehicle*[] SleepBelts;//[Offset: 0x2f0, Size: 0x10]
	bool bActiveSpawnerAtBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	class ConveyorBeltVehicle* ConveyorBeltClass;//[Offset: 0x308, Size: 0x8]
	FString TransTag;//[Offset: 0x310, Size: 0x10]
	ApexRail* RunRail;//[Offset: 0x320, Size: 0x8]
	int BeltsPoolCapacity;//[Offset: 0x328, Size: 0x4]
	bool bUseCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	ConveyCampGroup[] Groups;//[Offset: 0x330, Size: 0x10]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	void UpdateRailLocation();// 0x3b465e4
	void StartSpawnConveyBelt(ConveyCampGroup InGroup, int Index);// 0x3b4641c
	void SpawnCamp();// 0x3b465f8
	void PlayEffectOnBoxSwitchState(bool bUp);// 0x3b464dc
	void OnVehicleDestroyed(Actor* Actor);// 0x3b46568
	void OnRunRailChanged(Vector BeginLocation, Vector EndLocation);// 0x43841ec
	void OnBoxSwitchState(bool bUp);// 0x43841ec

--------------------------------
Class: ConveyCampGroup
	int BoxNum;//[Offset: 0x0, Size: 0x4]
	int BoxSpawnInterval;//[Offset: 0x4, Size: 0x4]
	int NextGroupInterval;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ConveyorBeltVehicle.ApexTrain.Actor.Object
	AKAudioEventArgs[] CacheAudio;//[Offset: 0x590, Size: 0x10]
	FString IgnoreDirectionName;//[Offset: 0x5a8, Size: 0x10]
	void OnReceivedTrainStateChanged(enum TargetType);// 0x3b46f30
	void NetMulticastSetTrans(Transform Intrans);// 0x3b46e10
	void MarkDestroy();// 0x3b46f14

--------------------------------
Class: AKAudioEventArgs
	AkAudioEvent* Audio;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ParticleEffectFactory.Info.Actor.Object
	<int,class ParticleEffectBase> MapEffectID2CameraParticleEffectCfg;//[Offset: 0x250, Size: 0x50]

--------------------------------
Class: ParticleEffectBase.Object
	int ParticleEffectID;//[Offset: 0x28, Size: 0x4]
	int ParticleDisplayDuration;//[Offset: 0x2c, Size: 0x4]
	int DelayHideTime;//[Offset: 0x30, Size: 0x4]
	bool DestroyWhenHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool DeactivatePSCWhenHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	bool ShouldRefreshWhenCameraModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	bool bUseTranslucencySortPriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1]
	int TranslucencySortPriority;//[Offset: 0x38, Size: 0x4]
	delegate OnShow;//[Offset: 0x3c, Size: 0x10]
	delegate OnReqHide;//[Offset: 0x4c, Size: 0x10]
	bool EnableSeparateFov;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	ParticleSystem* ParticleTemplate;//[Offset: 0x60, Size: 0x28]
	ParticleSystemComponent* ParticleSystemComp;//[Offset: 0x90, Size: 0x8]
	FName BindSocket;//[Offset: 0x98, Size: 0x8]
	Actor* InstigatorActor;//[Offset: 0xa0, Size: 0x8]
	void SetParticleEffectID(int EffectID);// 0x3ce1bfc
	void SetOnShowDelegate(delegate OnShowCallBack);// 0x3ce1d50
	void SetOnReqHideDelegate(delegate OnReqHideCallBack);// 0x3ce1cac
	void ReqShow();// 0x3ce1f28
	bool ReqHide(bool ForceImmediatelyHide);// 0x3ce1e98
	void PreShowParticleEffect();// 0x3ce1e7c
	void PreLoad();// 0x3ce1f3c
	void PostShowParticleEffect();// 0x3ce1e60
	void OnReqHideParticleEffect();// 0x3ce1e28
	void OnHideParticleEffect();// 0x3ce1e44
	ParticleSystemComponent* GetParticleSystemComp();// 0x3ce1df4
	int GetParticleEffectID();// 0x3ce1c78

--------------------------------
Class: AudioEffectManager.ActorComponent.Object
	<FName,class AudioEffect> MapAudioEffectID2AudioEffectCfg;//[Offset: 0xf0, Size: 0x50]
	FString[] BanksNames;//[Offset: 0x140, Size: 0x10]
	enum AudioAttachMode;//[Offset: 0x150, Size: 0x1]
	<FName,AudioEffect*> MapAudioID2InstancedAudioEffect;//[Offset: 0x158, Size: 0x50]
	<FName,int> MapAudioID2LastInstancedPlayingID;//[Offset: 0x1a8, Size: 0x50]
	void StopParachuteAudioEvent(FName AudioEffectID);// 0x3a8e7e0
	void StopAudio(FName AudioEffectID, int PlayingID);// 0x3a8e8d8
	void PostParachuteAudioEvent(FName AudioEffectID);// 0x3a8e85c
	int PlayAudio(FName AudioEffectID, bool StopWhenAttachedToDestroyed, Actor* AudioInstigator);// 0x3a8e998

--------------------------------
Class: AudioEffect.Object
	AkAudioEvent* AudioEvent_Autonomous;//[Offset: 0x28, Size: 0x8]
	FName AttachSocket;//[Offset: 0x30, Size: 0x8]
	Vector AttachOffset;//[Offset: 0x38, Size: 0xc]
	AkComponent* AkComponent;//[Offset: 0x48, Size: 0x8]
	void Stop();// 0x3a8e138
	int PlayAtAttachment(Actor* AttachedActor, bool StopWhenAttachedToDestroyed, Actor* AudioInstigator);// 0x3a8e14c

--------------------------------
Class: GlobalSpeakerComponent.ApexSoundSpeakerComponent.ActorComponent.Object
	void SettActorSwitch(Actor* Target, FName SwitchGroup, FName SwitchState);// 0x3c06844
	void SetComponentSwitch(AkComponent* Target, FName SwitchGroup, FName SwitchState);// 0x3c06944
	void SetActorRTPCValue(Actor* Target, FName RTPC, float Value, int InterpolationTimeMs);// 0x3c06a44
	int PlayWorldObjectSoundByName(Actor* Target, FName EventName, bool StopWhenOwnerDestroyed);// 0x3c06de4
	int PlayWorldObjectSound(enum SoundType, Actor* Target, AkAudioEvent* AkEvent, bool StopWhenOwnerDestroyed);// 0x3c06efc
	int PlayUISoundByName(FName EventName);// 0x3c07058
	int PlayUISound(AkAudioEvent* AkEvent);// 0x3c070dc
	int PlaySoundAtLocationByName(FName EventName, Vector Location, Rotator Orientation);// 0x3c06b88
	int PlaySoundAtLocation(enum SoundType, AkAudioEvent* AkEvent, Vector Location, Rotator Orientation);// 0x3c06c94
	int PlayBGMByName(FName EventName);// 0x3c07160
	int PlayBGM(AkAudioEvent* AkEvent);// 0x3c071e4
	int Play2DSound(enum SoundType, AkAudioEvent* AkEvent);// 0x3c06774

--------------------------------
Class: AudioRegionMgrComponent.ActorComponent.Object
	<AkComponent*> EnemyPositionComponents;//[Offset: 0x100, Size: 0x50]
	<AkComponent*> RemotePositionComponents;//[Offset: 0x150, Size: 0x50]
	AkComponent*[] RemoteUpdatedCompsCache;//[Offset: 0x1a0, Size: 0x10]
	AkComponent* RiverAmbComp;//[Offset: 0x1b0, Size: 0x8]
	AkComponent* MagmaAmbComp;//[Offset: 0x1b8, Size: 0x8]
	FName[] RowNames;//[Offset: 0x1c0, Size: 0x10]
	AudioRegionInitializer* AudioRegionIniter;//[Offset: 0x1d0, Size: 0x8]
	AudioRegion* AudioRegionCore;//[Offset: 0x1d8, Size: 0x8]
	<int,AudioRegion*> EnemyPositionCompWithAudioRegionsMap;//[Offset: 0x1e0, Size: 0x50]
	RiverAmbient* RiverAmbCore;//[Offset: 0x230, Size: 0x8]
	RiverAmbient* MagmaAmbCore;//[Offset: 0x238, Size: 0x8]
	AudioRegion* AudioRegionRemote;//[Offset: 0x240, Size: 0x8]
	void RiverAmbUnloadBank();// 0x3a903b4
	void RiverAmbLoadBank();// 0x3a903c8
	void OnRemoteExitAudioRegion(int AkCompId, uint32 RegionID);// 0x3a903dc
	void OnRemoteEnterAudioRegion(int AkCompId, uint32 RegionID);// 0x3a90498
	void OnExitAudioRegion(uint32 RegionID);// 0x3a90610
	void OnEnterAudioRegion(uint32 RegionID);// 0x3a90748
	void OnEnemyUpdate();// 0x3a90378
	void OnEnemyExitAudioRegion(int AkCompId, uint32 RegionID);// 0x3a90554
	void OnEnemyEnterAudioRegion(int AkCompId, uint32 RegionID);// 0x3a9068c
	void MagmaAmbUnloadBank();// 0x3a9038c
	void MagmaAmbLoadBank();// 0x3a903a0

--------------------------------
Class: AudioRegionInitializer.Object

--------------------------------
Class: AudioRegion.Object

--------------------------------
Class: RiverAmbient.Object
	AkComponent* pRiverAmbComp;//[Offset: 0x180, Size: 0x8]

--------------------------------
Class: GameStatisticsReportComponent.ActorComponent.Object
	DataReportInfoTableDataAsset* DataReportInfoTableDataAsset;//[Offset: 0xf0, Size: 0x8]
	int ZoneTD;//[Offset: 0x1f4, Size: 0x4]
	LootDronesDataReporter* LootDronesDataReporter;//[Offset: 0x200, Size: 0x8]
	void OnGameStart();// 0x3bfb520

--------------------------------
Class: DataReportInfoTableDataAsset.DataAsset.Object
	<enum,DataReportModeInfo> DataReportInfoTable;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: DataReportModeInfo
	byte ReportCount;//[Offset: 0x0, Size: 0x1]
	float ReportTiming;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LootDronesDataReporter.Object
	void OnGameModeFinish();// 0x3c85880

--------------------------------
Class: BGMManager.ActorComponent.Object
	bool bStopLastBGMActively;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	<enum,FName> MapBGMType2AudioEffect;//[Offset: 0xf8, Size: 0x50]
	void StopBGM(enum BGMType);// 0x3ad7094
	void SetBGM(enum BGMType, FName AudioEffectID);// 0x3ad6fd4
	void PlayBGM(enum BGMType);// 0x3ad7110

--------------------------------
Class: EffectLoaderManager.ActorComponent.Object
	EffectLoaderGroupManager*[] HighGroupManagers;//[Offset: 0x100, Size: 0x10]
	EffectLoaderGroupManager*[] MiddleGroupManagers;//[Offset: 0x110, Size: 0x10]
	EffectLoaderGroupManager*[] LowGroupManagers;//[Offset: 0x120, Size: 0x10]
	EffectLoaderGroupManager*[] GroupManagers;//[Offset: 0x130, Size: 0x10]
	FString EffectLoaderManagerClassName;//[Offset: 0x140, Size: 0x10]
	ApexCharacter* OwnerCharacter;//[Offset: 0x150, Size: 0x8]

--------------------------------
Class: EffectLoaderGroupManager.Object
	enum PickerType;//[Offset: 0x28, Size: 0x1]
	int PoolNum;//[Offset: 0x2c, Size: 0x4]
	int Score;//[Offset: 0x30, Size: 0x4]
	EffectLoaderAction*[] EffectLoaderActions;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: EffectLoaderAction.Object
	EffectLoaderGroupManager* OwnerManager;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: GameStateCommonInfo.ActorComponent.Object
	int LineTraceLowestZ;//[Offset: 0xf0, Size: 0x4]
	Vector2D MapHeightRange;//[Offset: 0xf4, Size: 0x8]
	float SeaLevelHeightOffset;//[Offset: 0xfc, Size: 0x4]

--------------------------------
Class: ApexHeatShield.Actor.Object
	float LifeTime;//[Offset: 0x2b8, Size: 0x4]
	float StartupTime;//[Offset: 0x2bc, Size: 0x4]
	float DestroyTime;//[Offset: 0x2c0, Size: 0x4]
	float WarningTime;//[Offset: 0x2c4, Size: 0x4]
	float DestroyDelayTime;//[Offset: 0x2c8, Size: 0x4]
	float Realtime;//[Offset: 0x2cc, Size: 0x4]
	float TakeDamageInterval;//[Offset: 0x2d0, Size: 0x4]
	float[] TakeDamageValue;//[Offset: 0x2d8, Size: 0x10]
	float MaxHealth;//[Offset: 0x2e8, Size: 0x4]
	float PoisonCircleAlpha;//[Offset: 0x2ec, Size: 0x4]
	AkAudioEvent* CenterDeployAudio;//[Offset: 0x2f0, Size: 0x28]
	AkAudioEvent* SustainAudio;//[Offset: 0x318, Size: 0x28]
	AkAudioEvent* PoisonSustainAudio;//[Offset: 0x340, Size: 0x28]
	AkAudioEvent* EndingAudio;//[Offset: 0x368, Size: 0x28]
	AkAudioEvent* PoisonEndingAudio;//[Offset: 0x390, Size: 0x28]
	AkAudioEvent* DestroyAudio;//[Offset: 0x3b8, Size: 0x28]
	AkAudioEvent* PoisonDestroyAudio;//[Offset: 0x3e0, Size: 0x28]
	AkAudioEvent* TakeDamageAudio;//[Offset: 0x408, Size: 0x28]
	CapsuleComponent* RangeCapsule;//[Offset: 0x430, Size: 0x8]
	StaticMeshComponent* HeatShieldMesh;//[Offset: 0x438, Size: 0x8]
	AdditiveFadeComponent* AdditiveFadeComponent;//[Offset: 0x440, Size: 0x8]
	Actor* MissileHeatShieldWeak;//[Offset: 0x448, Size: 0x8]
	enum CurrentState;//[Offset: 0x450, Size: 0x1]
	RadiationCircleStateComponent* RadiationCircleStateComponentWeak;//[Offset: 0x454, Size: 0x8]
	CircleMgrComponent* CircleMgrComponentWeak;//[Offset: 0x45c, Size: 0x8]
	Vector PoisonCirclePos;//[Offset: 0x464, Size: 0xc]
	float PoisonCircleRadius;//[Offset: 0x470, Size: 0x4]
	bool bInWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 0x1]
	bool bIsEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x475, Size: 0x1]
	bool bNeedTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x476, Size: 0x1]
	float TakeDamageTime;//[Offset: 0x478, Size: 0x4]
	float CurrentHealth;//[Offset: 0x47c, Size: 0x4]
	int TeamID;//[Offset: 0x480, Size: 0x4]
	int CampID;//[Offset: 0x484, Size: 0x4]
	int CurrentIndex;//[Offset: 0x488, Size: 0x4]
	void PlayAudio(out const AkAudioEvent* AudioEvent, bool bStopWhenAttachedToDestroyed);// 0x39dc8a4
	void OnRepHealth();// 0x39dc998
	void NotifyHeatSHieldUI();// 0x39dc890
	void NotifyEndUI();// 0x39dc87c
	void DisplayWarning();// 0x43841ec
	void DisplayTakeDamage();// 0x43841ec
	void DisplayStartup();// 0x43841ec
	void DisplayDestroy();// 0x43841ec
	void DisplayAtWork();// 0x43841ec

--------------------------------
Class: AdditiveFadeComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x258, Size: 0x4]
	LinearColor ShapeColorHDR;//[Offset: 0x25c, Size: 0x10]
	float Radius;//[Offset: 0x26c, Size: 0x4]
	float FadeDistance;//[Offset: 0x270, Size: 0x4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 0x1]
	bool bAddedToSceneVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274, Size: 0x1]
	bool bIsMixFade;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x274, Size: 0x1]
	void SetRadius(float InRadius);// 0x5e9bf8c

--------------------------------
Class: RadiationCircleStateComponent.ActorComponent.Object
	bool bIsEnableCircleVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool bIsEnableCircleRunVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	bool bIsFinalCircleOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 0x1]
	bool bIsPreInitBlueCircleLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3, Size: 0x1]
	bool bIsPreInitBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	RadiationCircleStateRep RadiationCircleStateRep;//[Offset: 0xf8, Size: 0x38]
	int TotalCircleWaveNum;//[Offset: 0x130, Size: 0x4]
	void SetTotalCircleWaveNum(int CircleWaveNum);// 0x3d57ad4
	void OnRep_RepRadiationCircleStateRep();// 0x3d570a0
	bool IsLessening();// 0x3d57a9c
	bool IsInWhiteCircle(out const Vector Location, bool IsPosRebaseUsed);// 0x3d570b4
	bool IsInCircleLessenFrom(out const Vector Location, bool IsPosRebaseUsed);// 0x3d57290
	bool IsInBlueCircle(out const Vector Location, bool IsPosRebaseUsed);// 0x3d573fc
	bool IsFinalCircleOver();// 0x3d57198
	bool IsCircleValid();// 0x3d571d0
	bool IsActorInWhiteCircle(Actor* InActor);// 0x3d57208
	bool IsActorInCircleLessenFrom(Actor* InActor);// 0x3d57374
	bool IsActorInBlueCircle(Actor* InActor);// 0x3d574e0
	bool HasLessened();// 0x3d57a64
	Vector GetWhiteCircle();// 0x3d57c28
	int GetTotalCircleWaveNum();// 0x3d57b50
	float GetShrinkDirDistance2CircleLessenFrom(out const Vector Location, bool IsPosRebaseUsed);// 0x3d57568
	float GetPlayerDistPercentBetweenTowCircle();// 0x3d57994
	Vector GetOrignBlueCircle();// 0x3d57c60
	Vector GetNextWhiteCircle();// 0x3d57bf0
	float GetLessenProgress();// 0x3d579c8
	bool GetIsPreInitBlueCircle();// 0x3d57bb8
	float GetDistPercentBetweenTowCircle(out const Vector Location, bool IsPosRebaseUsed);// 0x3d57830
	float GetDistance2WhiteCircle(out const Vector Location, bool IsPosRebaseUsed);// 0x3d576cc
	int GetCurCircleWave();// 0x3d57b84
	float GetCurCircleStatusLastTime();// 0x3d57a30
	float GetCurCircleStatusElapsedTime();// 0x3d579fc
	Vector GetBlueCircle();// 0x3d57c98
	float GetActorShrinkDirDistance2CircleLessenFrom(Actor* InActor);// 0x3d57648
	float GetActorDistPercentBetweenTowCircle(Actor* InActor);// 0x3d57910
	float GetActorDistance2WhiteCircle(Actor* InActor);// 0x3d577ac
	void BroadcastShutDownCircle();// 0x3d57cd0

--------------------------------
Class: RadiationCircleStateRep
	enum CircleInfo;//[Offset: 0x0, Size: 0x1]
	Vector BlueCircle;//[Offset: 0x4, Size: 0xc]
	Vector WhiteCircle;//[Offset: 0x10, Size: 0xc]
	Vector NextWhiteCircle;//[Offset: 0x1c, Size: 0xc]
	int CircleWaveIndex;//[Offset: 0x28, Size: 0x4]
	float StartTimeSpan;//[Offset: 0x2c, Size: 0x4]
	float EndTimeSpan;//[Offset: 0x30, Size: 0x4]
	bool IsPreInitMiniMapShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: CircleMgrComponent.ActorComponent.Object
	RadiationCircleStateComponent* CircleStateComponent;//[Offset: 0x100, Size: 0x8]
	int CareerNumberTips;//[Offset: 0x11c, Size: 0x4]
	float CircleBlueTimeScale;//[Offset: 0x120, Size: 0x4]
	ApexCharacter* FirstCharacter;//[Offset: 0x128, Size: 0x8]
	enum CircleType;//[Offset: 0x130, Size: 0x1]
	FirstCircleCfg FirstCircleConfigs;//[Offset: 0x134, Size: 0x18]
	CircleCfg[] CircleConfigs;//[Offset: 0x150, Size: 0x10]
	int TeammatesTooFarEventID;//[Offset: 0x160, Size: 0x4]
	float TeammatesTooFarDistance;//[Offset: 0x164, Size: 0x4]
	float TeammatesTooFarCheckSeconds;//[Offset: 0x168, Size: 0x4]
	CircleCfg[] RuntimeCircleConfigs;//[Offset: 0x170, Size: 0x10]
	bool bMakePainWhenOutOfBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	float CircleTimeScale;//[Offset: 0x184, Size: 0x4]
	Vector CurBlueCircle;//[Offset: 0x188, Size: 0xc]
	Vector CachedBlueCircle;//[Offset: 0x194, Size: 0xc]
	Vector CurWhiteCircle;//[Offset: 0x1a0, Size: 0xc]
	Vector CachedWhiteCircle;//[Offset: 0x1ac, Size: 0xc]
	Vector NextCachedWhiteCircle;//[Offset: 0x1b8, Size: 0xc]
	int CurCircleIndex;//[Offset: 0x1c4, Size: 0x4]
	bool bPlaySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	bool bPlaySound2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 0x1]
	int CircleLessenLogIntervalTicks;//[Offset: 0x1f0, Size: 0x4]
	CirleAreaVolume* CacheCircleAreaVolume;//[Offset: 0x1f8, Size: 0x8]
	CirleAreaVolume* PoisonCircleAreaVolumeConfig;//[Offset: 0x208, Size: 0x28]
	SequenceTimer* WaveTimer;//[Offset: 0x230, Size: 0x8]
	void SetCirclePainEnable(bool Enable);// 0x3b24144
	CircleCfg GetCurrentCircleConfig();// 0x3b24088
	void EndReportCircleFlowData(int CircleIndex);// 0x3b23f90
	void EndCircle();// 0x3b2424c
	void BeginReportCircleFlowData(int CircleIndex);// 0x3b2400c
	void BeginCircle();// 0x3b24260
	void AheadOneCircleFlow(bool ExecuteCircleFunc);// 0x3b241c8

--------------------------------
Class: CircleCfg
	float DelayTime;//[Offset: 0x0, Size: 0x4]
	CircleSoundStart WhiteCircleSoundStart;//[Offset: 0x4, Size: 0x10]
	CircleSoundDelay[] BlueCircleCountDownSound;//[Offset: 0x18, Size: 0x10]
	float BlueCircleStartLessenTime;//[Offset: 0x28, Size: 0x4]
	CircleSoundStart BlueCircleSoundStart;//[Offset: 0x2c, Size: 0x10]
	bool WhiteCircleNotBan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	float LessenDuration;//[Offset: 0x40, Size: 0x4]
	float WhiteCircleRadius;//[Offset: 0x44, Size: 0x4]
	float WhiteOffset;//[Offset: 0x48, Size: 0x4]
	float RadianPainValue;//[Offset: 0x4c, Size: 0x4]
	float RadianPainIntervalTime;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: CircleSoundStart
	float SoundDelayTime;//[Offset: 0x0, Size: 0x4]
	int SoundID1;//[Offset: 0x4, Size: 0x4]
	int SoundID2;//[Offset: 0x8, Size: 0x4]
	int SoundID3;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CircleSoundDelay
	int SoundIDFar;//[Offset: 0x0, Size: 0x4]
	int SoundIDClose;//[Offset: 0x4, Size: 0x4]
	float SoundDelayTime;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: FirstCircleCfg
	bool bUseCustomWhiteCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D WhiteCircleCenter;//[Offset: 0x4, Size: 0x8]
	bool bPreInitBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float BluerCircleRadius;//[Offset: 0x10, Size: 0x4]
	bool bConcentricCircles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool IsPreInitCircleShowOnMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	bool IsWhiteCircleNotBan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 0x1]

--------------------------------
Class: CirleAreaVolume.Actor.Object
	FName[] AvoidAreaTag;//[Offset: 0x250, Size: 0x10]
	int LazyTryCountForPermittedPos;//[Offset: 0x260, Size: 0x4]
	Vector2D ForceCenterOnLinePointA;//[Offset: 0x264, Size: 0x8]
	Vector2D ForceCenterOnLinePointB;//[Offset: 0x26c, Size: 0x8]
	BoxComponent* CircleBoxArea;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: SequenceTimer.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	FString TimerDesc;//[Offset: 0x30, Size: 0x10]
	float TimerDuration;//[Offset: 0x40, Size: 0x4]
	SequenceTimerData[] RegisterTimers;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SequenceTimerData
	float Time;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SurveyBeacon.SignificanceManagedActor.Actor.Object
	float FadeDist;//[Offset: 0x2e0, Size: 0x4]
	float NearDist;//[Offset: 0x2e4, Size: 0x4]
	float HeightOffset;//[Offset: 0x2e8, Size: 0x4]
	float MaxDist;//[Offset: 0x2ec, Size: 0x4]
	float MaxAngle;//[Offset: 0x2f0, Size: 0x4]
	bool bIsShowUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	int Index;//[Offset: 0x2f8, Size: 0x4]
	ParticleSystem* DetectEnemyParticle;//[Offset: 0x300, Size: 0x28]
	ApexCharacter* BeUsedPlayer;//[Offset: 0x328, Size: 0x8]
	bool hasShowTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	bool hasOpenBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1]
	void SetShowIcon(bool bNewShow);// 0x3dc7e18
	void SetOffset(Transform Offset);// 0x3dc7f10
	void SetIndex(int InIndex);// 0x3dc8050
	void Lua_MiniMapShowIcon();// 0x43841ec
	void Lua_MiniMapHideIcon();// 0x43841ec
	int GetPingType();// 0x3dc80d4
	Transform GetOffset();// 0x3dc7e9c
	int GetIndex();// 0x3dc8014
	void BrocastPlayDetectParticle(float DetectRadius);// 0x3dc7d94
	void BP_PingSelf();// 0x43841ec
	void BP_OnUseBeacon(ApexCharacter* Character);// 0x43841ec
	void BP_OnStopUseBeacon(bool bHasInjected, ApexCharacter* Character);// 0x43841ec
	void BP_OnShowChange(bool bNewShow);// 0x43841ec
	void BP_OnFade(float Opacity);// 0x43841ec

--------------------------------
Class: InGameSingletonObject.Object

--------------------------------
Class: CommonSignMgr.ActorComponent.Object
	CommonSignData[] CommonSignDataList;//[Offset: 0xf8, Size: 0x10]
	CommonSignData[] PreRepCommonSignDataList;//[Offset: 0x108, Size: 0x10]
	<int,CommonSignData> CommonSignDataMap_Client;//[Offset: 0x118, Size: 0x50]
	void Server_DeleteSign(int Index);// 0x3b31aa8
	void OnRep_CommonSignDataList();// 0x3b31a94
	CommonSignData GetCommonSignData(int Index);// 0x3b31b24
	void DeleteSignForSelf(const int Index);// 0x3b31be0
	void DeleteAllSign();// 0x3b31bcc
	int CreateSignWithTimeForSelf(const Vector WorldPosition, const enum SignType, const float Duration);// 0x3b31d48
	int CreateSignForTeamWithData(ApexPlayerController* PlayerController, Vector WorldPosition, enum SignType, out const SignAdditionData SignAdditionData);// 0x3b32150
	int CreateSignForTeam(ApexPlayerController* PlayerController, Vector WorldPosition, enum SignType);// 0x3b322b8
	int CreateSignForSelf(Vector WorldPosition, enum SignType, Actor* FollowedCharacter, int SignStyle, float Duration);// 0x3b31fb4
	int CreateSignForAllWithData(Vector WorldPosition, enum SignType, out const SignAdditionData SignAdditionData);// 0x3b323c8
	int CreateSignForAll(Vector WorldPosition, enum SignType);// 0x3b324f0
	int CreateFollowedSignForSelf(Vector WorldPosition, enum SignType, Actor* FollowedCharacter, int SignStyle);// 0x3b31e5c
	int CreateCommonSign_Client(out CommonSignData SignData);// 0x3b31c5c

--------------------------------
Class: CommonSignData
	int SignSyncIndex;//[Offset: 0x0, Size: 0x4]
	Vector WorldPosition;//[Offset: 0x4, Size: 0xc]
	enum SignType;//[Offset: 0x10, Size: 0x1]
	enum TypeFor;//[Offset: 0x11, Size: 0x1]
	uint32 SourcePlayerID;//[Offset: 0x14, Size: 0x4]
	float Duration;//[Offset: 0x18, Size: 0x4]
	int TeamID;//[Offset: 0x1c, Size: 0x4]
	Actor* FollowedActor;//[Offset: 0x20, Size: 0x8]
	uint32 NetworkGUIDValue;//[Offset: 0x28, Size: 0x4]
	int SkinType;//[Offset: 0x2c, Size: 0x4]
	bool bIsClientCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	SignAdditionData SignAdditionData;//[Offset: 0x34, Size: 0x8]
	float CreateTime;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: SignAdditionData
	int CampID;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LootDronesPathsDataAsset.DataAsset.Object
	class SplinePathActor[] LootDronesPathsClass;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SplinePathActor.Actor.Object
	Vector InitLocation;//[Offset: 0x250, Size: 0xc]

--------------------------------
Class: GameStateMapComponent.ActorComponent.Object
	MiniMapStaticItemInfo[] ApexMiniMapStaticItemInfos;//[Offset: 0xf8, Size: 0x10]
	MiniMapStaticItemInfo[] ApexMiniMapStaticItemAddInfos;//[Offset: 0x108, Size: 0x10]
	MiniMapStaticItemInfo[] ApexMiniMapStaticItemChangeInfos;//[Offset: 0x118, Size: 0x10]
	MiniMapStaticItemInfo[] ApexMiniMapStaticItemRemoveInfos;//[Offset: 0x128, Size: 0x10]
	MiniMapStaticItemInfo[] ClientSideApexMiniMapStaticItemInfos;//[Offset: 0x138, Size: 0x10]
	<int,MiniMapStaticItemInfo> CacheApexMiniMapStaticItemInfos;//[Offset: 0x148, Size: 0x50]
	void RemoveMapItemStaicInfo(int Index, enum Type);// 0x3be1cf0
	void OnRep_ApexMiniMapStaticItemInfos();// 0x3be19dc
	MiniMapStaticItemInfo[] GetApexMiniMapStaticItemRemoveInfos();// 0x3be19f0
	MiniMapStaticItemInfo[] GetApexMiniMapStaticItemInfos();// 0x3be1c30
	MiniMapStaticItemInfo[] GetApexMiniMapStaticItemChangeInfos();// 0x3be1ab0
	MiniMapStaticItemInfo[] GetApexMiniMapStaticItemAddInfos();// 0x3be1b70
	void ChangeMapItemStaicStateInfo(int Index, enum Type, byte State, Vector Location, float Yaw);// 0x3be1db0
	int AddMapItemStaicInfo(enum Type, Vector Location, float Yaw, int ScaleType, float Length, bool Immediately, float Radius, int Level, int InTrainCoachIndex);// 0x3be1f38

--------------------------------
Class: MiniMapStaticItemInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	byte Type;//[Offset: 0x4, Size: 0x1]
	byte State;//[Offset: 0x5, Size: 0x1]
	Vector Location;//[Offset: 0x8, Size: 0xc]
	float Yaw;//[Offset: 0x14, Size: 0x4]
	float Radius;//[Offset: 0x18, Size: 0x4]
	byte ScaleType;//[Offset: 0x1c, Size: 0x1]
	float Length;//[Offset: 0x20, Size: 0x4]
	int Level;//[Offset: 0x24, Size: 0x4]
	int TrainCoachIndex;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: CharacterAnimationIntKey
	byte ListType;//[Offset: 0x0, Size: 0x1]
	byte AnimType;//[Offset: 0x1, Size: 0x1]
	byte PoseType;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: SkillConfigDataAsset.DataAsset.Object
	<enum,float> FloatDataAsset;//[Offset: 0x30, Size: 0x50]
	<enum,bool> BoolDataAsset;//[Offset: 0x80, Size: 0x50]
	bool HasFloat(enum Key);// 0x3da317c
	bool HasBool(enum Key);// 0x3da30f4
	float GetFloat(enum Key, float DefaultFloat);// 0x3da302c
	bool GetBool(enum Key, bool DefaultBool);// 0x3da2f58

--------------------------------
Class: DsFunctionConfig
	int IsClose;//[Offset: 0x0, Size: 0x4]
	int FunctionId;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameStateAirDropMgr.ActorComponent.Object
	AirDropSpawnInfo[] LandingAirdropArray;//[Offset: 0xf0, Size: 0x10]
	AirDropSpawnInfo[] LastAirdropArray;//[Offset: 0x100, Size: 0x10]
	float ShowEffectTime;//[Offset: 0x110, Size: 0x4]
	bool bNeedNotifySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	FString SpeakerNameKey;//[Offset: 0x118, Size: 0x10]
	FString ContentKey;//[Offset: 0x128, Size: 0x10]
	AkAudioEvent* AudioEvent;//[Offset: 0x138, Size: 0x8]
	<enum,AirDropAudioConfigData> EventIDMap;//[Offset: 0x140, Size: 0x50]
	TimerHandle ShowCurPointsInfoTimer;//[Offset: 0x1b0, Size: 0x8]
	AirDropAreaSpawnInfo[] CurAreasInfo;//[Offset: 0x1b8, Size: 0x10]
	AirDropPointSpawnInfo[] CurPointsInfo;//[Offset: 0x1c8, Size: 0x10]
	void OnSpawnAirDrops(int Round, enum AirDropType, enum ActorType, out const AirDropSpawnInfo[] SpawnInfoArray);// 0x3bda454
	void OnSpawnAirDropAreas(int Round, enum AirDropType, out const AirDropAreaSpawnInfo[] SpawnInfoArray);// 0x3bda208
	void OnSpawnAirDropAreaFirsts(int Round, enum AirDropType, out const AirDropPointSpawnInfo[] SpawnInfoArray, float ShowTime);// 0x3bda09c
	void OnRep_RepCurPointsInfo();// 0x3bd9f58
	void OnRep_RepCurAreasInfo();// 0x3bd9f6c
	void OnRep_LandingAirdropArray();// 0x3bda32c
	void OnPlayAirDropAreaNotify();// 0x3bda088
	void OnAirDropLanded(int ID);// 0x3bda3d8
	AirDropPointSpawnInfo[] GetCurPointSpawnInfo();// 0x3bd9f80
	AirDropAreaSpawnInfo[] GetCurAreaSpawnInfo();// 0x3bda004
	AirDropSpawnInfo[] GetAirDropSpawnInfoArray();// 0x3bda340
	void ClearCurPointsInfo();// 0x3bd9f44
	void ClearAirDrop();// 0x3bda3c4

--------------------------------
Class: AirDropSpawnInfo
	int ID;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	byte Type;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: AirDropAreaSpawnInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	int Level;//[Offset: 0x4, Size: 0x4]
	Vector Location;//[Offset: 0x8, Size: 0xc]
	float Radius;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: AirDropPointSpawnInfo
	int ID;//[Offset: 0x0, Size: 0x4]
	int Level;//[Offset: 0x4, Size: 0x4]
	Vector Location;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: AirDropAudioConfigData
	int EventID;//[Offset: 0x0, Size: 0x4]
	float DropAirDropTeamAudioDelta;//[Offset: 0x4, Size: 0x4]
	int DropAirDropTeamAudioID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: GamblingMachine.SignificanceManagedActor.Actor.Object
	int SpeedMini;//[Offset: 0x2e0, Size: 0x4]
	int SpeedMax;//[Offset: 0x2e4, Size: 0x4]
	int PlayerUserCount;//[Offset: 0x2e8, Size: 0x4]
	int MachineUserCount;//[Offset: 0x2ec, Size: 0x4]
	int ItemOutPut;//[Offset: 0x2f0, Size: 0x4]
	int CD;//[Offset: 0x2f4, Size: 0x4]
	int Index;//[Offset: 0x2f8, Size: 0x4]
	void SetOffset(Transform Offset);// 0x3b99b54
	void SetIndex(int InIndex);// 0x3b99c94
	void ServerPlayGameMarkStart(FString BoxName, int PlayerKey);// 0x3b99770
	void ServerPlayGameMarkEnd(int PlayerKey);// 0x3b9983c
	enum ServerPlayGameCheck(FString BoxName, int PlayerKey);// 0x3b99a04
	enum ServerPlayGame(out const int[] ListID, out const int[] ListNum, int PlayerKey);// 0x3b998b8
	void OnCompEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3b9942c
	void OnCompBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3b99570
	int GetPingType();// 0x3b99d18
	Transform GetOffset();// 0x3b99ae0
	int GetIndex();// 0x3b99c58

--------------------------------
Class: ApexGameSettings
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool IsSkipNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool KnockdownShield4NoSkipDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool IsSkipRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool IsNeedSpawnTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool KeepBackpackWhenNoTome;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool ClearBackpackWhenChangeLegend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool ResetHealthWhenChangeLegend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	FName PlayerLoadoutTable;//[Offset: 0x8, Size: 0x8]
	FName LoadoutWeaponTable;//[Offset: 0x10, Size: 0x8]
	bool WithLoadout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bForceLoadout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool AutoAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	FName ModeItemJsonPath;//[Offset: 0x1c, Size: 0x8]
	FName ModeDynamicItemPath;//[Offset: 0x24, Size: 0x8]
	bool bIsAutoCreateLegend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	FString GameModeSkillConfigID;//[Offset: 0x30, Size: 0x10]
	int SecurityModeID;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: FontRenderInfo
	bool bClipText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEnableShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	DepthFieldGlowInfo GlowInfo;//[Offset: 0x4, Size: 0x24]

--------------------------------
Class: DepthFieldGlowInfo
	bool bEnableGlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	LinearColor GlowColor;//[Offset: 0x4, Size: 0x10]
	Vector2D GlowOuterRadius;//[Offset: 0x14, Size: 0x8]
	Vector2D GlowInnerRadius;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: WeaponAntiCheatLogicObject.ApgameWeaponLogicObject.Object
	int ValidBulletNum;//[Offset: 0x40, Size: 0x4]
	CharacterPositionCheckRecord ShootPlayerPosInfo;//[Offset: 0x48, Size: 0x48]
	CharacterPositionCheckRecord HitPlayerPosInfo;//[Offset: 0x90, Size: 0x48]
	BulletHitInfoUploadData[] ServerCacheHitInfoData;//[Offset: 0x180, Size: 0x10]
	BulletHitInfoUploadData[] ServerRecordHitInfoData;//[Offset: 0x190, Size: 0x10]
	void SetSafetyScoreLastTime(enum SafeReason, float Time);// 0x3e6cf40
	void ServerRecordHitInfoArray();// 0x3e6d1a0
	void ServerCacheHitInfoArray(out const BulletHitInfoUploadData[] InHitDataArr);// 0x3e6d1b4
	void ResetValidBulletNum();// 0x3e6d288
	void OperateRecordHitInfoSimp();// 0x3e6d18c
	bool OnWeaponShootHitLinkCheck();// 0x3e6e4d0
	bool OnWeaponShootHitCheck(out BulletHitInfoUploadData BulletHitData);// 0x3e6e1d8
	void OnWeaponReload();// 0x3e6e508
	Vector GetShootPlayerShootDirAndDist(BulletHitInfoUploadData BulletHitData, out float Dist);// 0x3e6e2b4
	float GetSafetyScoreLastTime(enum SafeReason);// 0x3e6cebc
	WeaponAntiCheatConfig GetAntiCheatConfig();// 0x3e6d120
	CharacterPositionCheckRecord GetActionPositonByTimeStamp(ApexCharacter* Character, double Timestamp, bool bAutonomous, out FString DebugStr);// 0x3e6d518
	void ForceSetBulletNum();// 0x3e6d260
	void EnterSafetyScore(enum SafeReason, FString Details);// 0x3e6d000
	void ClearPlayerPosRecordInfo();// 0x3e6d504
	bool CheckWeaponCreditScore(out const BulletHitInfoUploadData BulletHitData);// 0x3e6df44
	bool CheckValidBulletNum(out const BulletHitInfoUploadData BulletHitData);// 0x3e6e020
	bool CheckShootStartPoint(out const BulletHitInfoUploadData BulletHitData);// 0x3e6dbd4
	bool CheckShootPlayerLuffy(out BulletHitInfoUploadData BulletHitData);// 0x3e6dcb0
	bool CheckShootObstacle(out BulletHitInfoUploadData BulletHitData);// 0x3e6d864
	bool CheckShootInterval(out const BulletHitInfoUploadData BulletHitData);// 0x3e6de68
	bool CheckShootForward(out const BulletHitInfoUploadData BulletHitData);// 0x3e6d788
	bool CheckShootEndPoint(out BulletHitInfoUploadData BulletHitData);// 0x3e6da1c
	bool CheckShootDistance(out BulletHitInfoUploadData BulletHitData);// 0x3e6d940
	bool CheckShootDataViewMove();// 0x3e6e460
	bool CheckShootDataTimeOut(out const BulletHitInfoUploadData BulletHitData);// 0x3e6dd8c
	bool CheckShootDataImPactPoint();// 0x3e6e498
	bool CheckShootDataChargeLens();// 0x3e6e428
	bool CheckShootBulletID(out const BulletHitInfoUploadData BulletHitData);// 0x3e6e0fc
	bool CheckPointInsideSphere(Vector CheckPoint, Vector SphereCenter, float SphereRadius);// 0x3e6d29c
	bool CheckPointInsideCapsule(Vector CheckPoint, Vector CapsuleCenter, float CapsuleHalfHeight, float CapsuleRadius);// 0x3e6d3b0
	bool CheckPlayerForward(out const BulletHitInfoUploadData BulletHitData);// 0x3e6d6ac
	bool CheckHitPlayerScale(out BulletHitInfoUploadData BulletHitData);// 0x3e6daf8
	void AdjustValidBulletNum();// 0x3e6d274
	void AdjustClipBulletByAntiCheat();// 0x3e6d24c

--------------------------------
Class: BulletHitInfoUploadData
	uint32 ShootID;//[Offset: 0x0, Size: 0x4]
	Vector_NetQuantize ShootMomentMuzzlePos;//[Offset: 0x4, Size: 0xc]
	PrimitiveComponent* ShootBaseComp;//[Offset: 0x10, Size: 0x8]
	Vector_NetQuantize PlyShtScl;//[Offset: 0x18, Size: 0xc]
	double ShootTimeStamp;//[Offset: 0x28, Size: 0x8]
	double Timestamp;//[Offset: 0x30, Size: 0x8]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x38, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x44, Size: 0xc]
	PrimitiveComponent* HitBaseComp;//[Offset: 0x50, Size: 0x8]
	Actor* Actor;//[Offset: 0x58, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x60, Size: 0x8]
	Vector_NetQuantize PlyHtScl;//[Offset: 0x68, Size: 0xc]
	int PlayerKey;//[Offset: 0x74, Size: 0x4]
	int AgentKnockdownShieldPlayerKey;//[Offset: 0x78, Size: 0x4]
	Vector_NetQuantize VMPlyIpt;//[Offset: 0x7c, Size: 0xc]
	Vector_NetQuantize VMAtAim;//[Offset: 0x88, Size: 0xc]
	Vector_NetQuantize VMFrRcl;//[Offset: 0x94, Size: 0xc]
	FName BoneName;//[Offset: 0xa0, Size: 0x8]
	float AimPercent;//[Offset: 0xa8, Size: 0x4]
	float AimChargePercent;//[Offset: 0xac, Size: 0x4]
	byte PelletID;//[Offset: 0xb0, Size: 0x1]
	byte SurfaceType;//[Offset: 0xb1, Size: 0x1]
	byte HitBodyType;//[Offset: 0xb2, Size: 0x1]
	byte ScopeType;//[Offset: 0xb3, Size: 0x1]
	byte AimChargeLevel;//[Offset: 0xb4, Size: 0x1]
	bool bHasCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]
	bool bLens;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 0x1]

--------------------------------
Class: CharacterPositionCheckRecord
	double Timestamp;//[Offset: 0x0, Size: 0x8]
	double TimeLineRTT;//[Offset: 0x8, Size: 0x8]
	float CapsuleRadius;//[Offset: 0x10, Size: 0x4]
	float CapsuleHalfHeight;//[Offset: 0x14, Size: 0x4]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	Vector Velocity;//[Offset: 0x30, Size: 0xc]
	PrimitiveComponent* Base;//[Offset: 0x3c, Size: 0x8]

--------------------------------
Class: WeaponDisruptorLogicObject.ApgameWeaponLogicObject.Object
	bool bIsCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bChargingSuccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1]
	void WeaponCharge();// 0x3e80378
	void OnStateLeave(enum State, enum Reason, enum InterruptedBy);// 0x3e80134
	void OnSprintStateChange(int SprintState);// 0x3e802e8
	void OnShot();// 0x3e802d4
	void OnCharging();// 0x3e802ac
	void OnChargePhaseChanged(enum NewPhase, enum OldPhase);// 0x3e7fed8
	void OnChargeItemChanged();// 0x3e7ff98
	void OnChargeInterrupt();// 0x3e80364
	void OnChargeEnd();// 0x3e80298
	void OnChargeBegin();// 0x3e802c0
	void NotifyChargingEffect();// 0x3e7fec4
	bool HasEnoughChargeItem();// 0x3e7ffe0
	bool HasCharged();// 0x3e800fc
	byte GetOwnerNetRole();// 0x3e7ffac
	void DisruptorEnergyDecreaseByTime();// 0x3e80238
	void DisruptorEnergyDecreaseByShot();// 0x3e8024c
	bool ConsumeChargeItem(ItemDefineID ItemID, int count);// 0x3e80018
	bool CheckCanCharge();// 0x3e80260

--------------------------------
Class: WeaponBallisticLogicObject.ApgameWeaponLogicObject.Object
	void OnWeaponStopFire();// 0x3e6f738
	void OnWeaponStartFire();// 0x3e6f74c
	void OnWeaponShootPlayer();// 0x3e6f710
	void OnWeaponShoot();// 0x3e6f724

--------------------------------
Class: TraceBulletLogicObject.ApgameWeaponLogicObject.Object
	Vector2D ScreenCenter;//[Offset: 0x44, Size: 0x8]
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0x68, Size: 0x18]
	TssModule* TssModule;//[Offset: 0x80, Size: 0x8]
	void UseTraceBullet(int UseNum);// 0x3de4b18
	void GetTraceBulletTrans(out Transform BulletStartTrans);// 0x3de4a3c
	bool CheckTraceRangeEnemy();// 0x3de4a04
	bool CheckRemainTraceBullet(int UseNum);// 0x3de4b94

--------------------------------
Class: AutoAimEnemyInfo
	ApexCharacter* EnemyPawn;//[Offset: 0x0, Size: 0x8]
	float DisToScreenCenterSq;//[Offset: 0x8, Size: 0x4]
	Vector WorldLocation;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: TssModule.ApexGameInstanceSubsystem.GameInstanceSubsystem.Subsystem.Object
	bool bCheckDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	FString[] ChannelHost;//[Offset: 0x60, Size: 0x10]
	FString[] ChannelIP;//[Offset: 0x70, Size: 0x10]
	EmulatorInfo GetEmulatorInfo();// 0x3df7914

--------------------------------
Class: ApexGameInstanceSubsystem.GameInstanceSubsystem.Subsystem.Object
	bool bCreateInDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bCreateInClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: EmulatorInfo
	bool bEmulator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FString EmulatorName;//[Offset: 0x8, Size: 0x10]
	bool bRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bMalware;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bCDN;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool bCS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	bool bPermission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: HeatSystemLogicObject.ApgameWeaponLogicObject.Object
	void OnStateEnter(enum State, enum EnteredOverrideState);// 0x3c2e36c
	int GetMaxHeat();// 0x3c2e31c
	int GetCurrentHeat();// 0x3c2e350
	void BeginHeatIncrease();// 0x3c2e440
	void BeginHeatDecrease();// 0x3c2e42c

--------------------------------
Class: ShootWeaponEffectLogicObject.WeaponEffectLogicObject.ApgameWeaponLogicObject.Object
	ParticleSystemComponent* FppMuzzleFXComp;//[Offset: 0xb8, Size: 0x8]
	ParticleSystemComponent* TppMuzzleFXComp;//[Offset: 0xc0, Size: 0x8]
	ParticleSystemComponent* AlternantMuzzleFXComp;//[Offset: 0xc8, Size: 0x8]
	ParticleSystemComponent* FireLightFXComp;//[Offset: 0xd0, Size: 0x8]
	ParticleSystemComponent*[] OBBulletTrackFXCompsArray;//[Offset: 0xd8, Size: 0x10]
	Vector MuzzleFXOriginalScale;//[Offset: 0xe8, Size: 0xc]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0xf4, Size: 0x4]
	ParticleSystemComponent* FppShellDropFXComp;//[Offset: 0xf8, Size: 0x8]
	ParticleSystemComponent* TppShellDropFXComp;//[Offset: 0x100, Size: 0x8]
	ParticleSystemComponent* FppAlternateShellDropFXComp;//[Offset: 0x108, Size: 0x8]
	ParticleSystemComponent* TppAlternateShellDropFXComp;//[Offset: 0x110, Size: 0x8]
	float RandomRadius_Runtime;//[Offset: 0x134, Size: 0x4]
	CameraShake* CameraShakeInst_FPP;//[Offset: 0x148, Size: 0x8]
	CameraShake* CameraShakeInst_TPP;//[Offset: 0x150, Size: 0x8]
	CameraShake* CameraShakeInst_Aim;//[Offset: 0x158, Size: 0x8]
	void StopChargeSound();// 0x3d8b0b0
	void OnWeaponUnEquipped();// 0x3d8b34c
	void OnWeaponEquipped();// 0x3d8b360
	void OnStopFire();// 0x3d8ae28
	void OnStateEnter(enum State, enum EnteredOverrideState);// 0x3d8b28c
	ParticleSystem* GetParticleSystem(FrameParticleEffect ParticleEffect, bool bIsFPP, bool bADS, bool bSelf);// 0x3d8ae3c
	OBEffectBullet* GetOBEffectBullet(out const OBEffectBullet*[] OBEffectBulletsCacheList, int MaxBulletNum);// 0x3d8b1a4
	int GetAvailableOBEffectBulletNum(OBEffectBullet*[] OBEffectBulletsCacheList);// 0x3d8b0c4
	void AddActiveMuzzleFXQueue(bool bIsLocal, bool bIsScopeIn, bool bIsFPP, bool bHasBarrel, bool bHasCharged, bool bHasL4Barrel, float DistanceToViewer);// 0x3d8b634
	void ActiveMuzzleFX_Delay(bool bIsLocal, bool bIsScopeIn, bool bIsFPP, bool bHasBarrel, bool bHasCharged, bool bHasL4Barrel, float DistanceToViewer, bool bPreSpawn);// 0x3d8b374
	void ActiveLocalShellDropFX(bool bIsFPP);// 0x3d8b8a8

--------------------------------
Class: WeaponEffectLogicObject.ApgameWeaponLogicObject.Object
	<FName,ApexSoundCallback> SoundCallbackMap;//[Offset: 0x58, Size: 0x50]
	AudioRegionMgrComponent* AudioRegionMgr;//[Offset: 0xa8, Size: 0x8]
	void OnSoundEventCallBack(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x3e80f44
	void HandleWeaponAction(byte Action);// 0x3e8100c
	static AkAudioEvent* GetAkAudioBySoundMap(out const <byte,AkAudioEvent*> SoundMap, byte Action);// 0x3e80df4

--------------------------------
Class: ApexSoundCallback
	ApexSoundCallbackConfig* CallBackConfig;//[Offset: 0x0, Size: 0x8]
	int SoundSeq;//[Offset: 0x8, Size: 0x4]
	delegate SoundEventCB;//[Offset: 0xc, Size: 0x10]
	Actor* Actor;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ApexSoundCallbackConfig.Object
	int CallbackMask;//[Offset: 0x28, Size: 0x4]
	ApexAnimNotifySoundModule*[] Modules;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: FrameParticleEffect
	FString EffectName;//[Offset: 0x0, Size: 0x10]
	ParticleSystem* ParticleFPP;//[Offset: 0x10, Size: 0x28]
	ParticleSystem* ParticleFPPADS;//[Offset: 0x38, Size: 0x28]
	ParticleSystem* ParticleTPPSelf;//[Offset: 0x60, Size: 0x28]
	ParticleSystem* ParticleTPPOther;//[Offset: 0x88, Size: 0x28]
	FName AttachSocket;//[Offset: 0xb0, Size: 0x8]
	enum ParticleEvent;//[Offset: 0xb8, Size: 0x1]

--------------------------------
Class: OBEffectBullet.SignificanceManagedActor.Actor.Object
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x270, Size: 0x10]
	ParticleSystem* CurFXTemplate;//[Offset: 0x288, Size: 0x8]
	float CurMovingTime;//[Offset: 0x2b0, Size: 0x4]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x2b8, Size: 0x8]

--------------------------------
Class: WeaponReloadLogicObject.ApgameWeaponLogicObject.Object
	WeaponReloadStageConfig[] CurReloadStageConfig;//[Offset: 0x48, Size: 0x10]
	void WeaponReloadWaitOnServer();// 0x3e9b464
	void WeaponReloadWait();// 0x3e9b478
	void WeaponReloadStart();// 0x3e9b48c
	void WeaponReloadEnd(bool bResetBulletNum, bool bNeedToServer, bool bNeedToClient);// 0x3e9b324
	bool WeaponReloadCheck();// 0x3e9b4a0
	bool VerifyAddBulletToClip(out int AddBulletNum, double AddBulletTime);// 0x3e9aeac
	void UpdateWeaponReloadWait(float DeltaTime);// 0x3e9b114
	void UpdateAutoReload(float DeltaTime);// 0x3e9a9d8
	void StopReloadAndFire();// 0x3e9aaec
	void StopReload();// 0x3e9b688
	void StartReload();// 0x3e9b69c
	void SimulateStartReloadWait();// 0x3e9b500
	void SimulateEndReload();// 0x3e9b4ec
	void SetReloadStage(int ReloadStageIndex);// 0x3e9b190
	void ResetReloadAnim();// 0x3e9b0d8
	void ResetFakeBulletNumInBackpack();// 0x3e9b010
	void OnWeaponUnEquip();// 0x3e9ac0c
	void OnWeaponPostSwap();// 0x3e9abf8
	void OnWeaponEquip();// 0x3e9ac20
	void OnWeaponAttachEquipped(int ItemID, bool bEquip, enum SlotID);// 0x3e9ac48
	void OnUnlimitedBulletChange(Controller* Instigator);// 0x3e9ab7c
	void OnStateInterrupted(enum LeavedState, enum Reason, enum InterruptedBy);// 0x3e9b20c
	void OnReloadStageStart();// 0x3e9b100
	void OnReloadStageEnd();// 0x3e9b0ec
	void OnItemPickUpSuccess(out const PickupNotifyData PickupNotifyData);// 0x3e9ad60
	void OnItemListNetUpdated();// 0x3e9ac34
	void OnItemDropSuccess();// 0x3e9ae04
	void NotifyShootBtnPress();// 0x3e9b548
	void NotifyAutoReloadUiEffect();// 0x3e9b4d8
	void InitReloadStageConfig();// 0x3e9b310
	float GetStoredReloadAnimStartPercent();// 0x3e9b630
	float GetReloadAnimStartPercent(int StartStageIndex);// 0x3e9b578
	float GetNearAddBulletTime(out int AddBulletNum);// 0x3e9ae18
	float GetCurrentReloadAnimStartPercent();// 0x3e9b5fc
	float GetCurReloadTimeSum();// 0x3e9b514
	enum GetCurReloadMethod();// 0x3e9b55c
	void ForceStopReload();// 0x3e9b450
	int CostReserveBulletNum(int ClipNeedNum);// 0x3e9af8c
	bool CheckStoredReloadStage();// 0x3e9b664
	void CheckStopReloadAndStartFire(float InterruptCheckTime);// 0x3e9ab00
	bool CheckBulletCanAddContinue();// 0x3e9b024
	void CheckAutoReloadStart(bool bForceStart);// 0x3e9aa54
	void CheckAutoReloadEnd();// 0x3e9aad8
	void AddBulletToClip(int AddNum);// 0x3e9b05c

--------------------------------
Class: PickupNotifyData
	bool bPickupResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int OccupiedCapacity;//[Offset: 0x4, Size: 0x4]
	int Capacity;//[Offset: 0x8, Size: 0x4]
	ItemDefineID DefineID;//[Offset: 0x10, Size: 0x10]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bIsAutoPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	enum PickupReason;//[Offset: 0x22, Size: 0x1]

--------------------------------
Class: ShootWeaponLogicObject.ApgameWeaponMainLogicObject.ApgameWeaponLogicObject.Object
	bool bMultiBulletHitCharacter;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	enum ShootHitPostionAI;//[Offset: 0xea, Size: 0x1]
	ParticleSystemComponent* LensParticleComponent1P;//[Offset: 0x1a0, Size: 0x8]
	ParticleSystemComponent* LensParticleComponent3P;//[Offset: 0x1a8, Size: 0x8]
	ParticleSystemComponent* LensParticleComponent;//[Offset: 0x1b0, Size: 0x8]
	BulletHitInfoReplicateData[] RemoteBulletHitInfoData;//[Offset: 0x210, Size: 0x10]
	<uint32,BulletHitInfoUploadData> UploadDataSavedMap;//[Offset: 0x240, Size: 0x50]
	<uint32,SecurityLogHitTargetInfo> HitTargetInfoSavedMap;//[Offset: 0x290, Size: 0x50]
	Vector LastImpactEffectLocation;//[Offset: 0x2e0, Size: 0xc]
	float LastImpactEffectTime;//[Offset: 0x2ec, Size: 0x4]
	Vector ShootTargetLoc;//[Offset: 0x2f0, Size: 0xc]
	Actor* ShootHitActor;//[Offset: 0x2fc, Size: 0x8]
	void UpdateBulletHitData(out const BulletHitInfoReplicateData BulletHitArray);// 0x3d891b4
	void Update3DUIActor();// 0x3d89a08
	void SubBackPackOrSpecialBulletNum(int Num);// 0x3d8998c
	void StopFireWeapon();// 0x3d898fc
	bool StopFireFilter();// 0x3d898c4
	void SetMaxBulletNumInOneClip(int Num);// 0x3d89668
	void SetCurSpecialBulletNum(int Num, enum ChangeReason, bool bToClient);// 0x3d894ec
	void SetBulletNumInClip(int Num, enum ChangeReason, bool NeedToClient, bool NeedToServer);// 0x3d896e4
	void ResetInitialBulletNumInClip(int InitBulletNum);// 0x3d89848
	void OnWeaponUnEquip();// 0x3d89ae8
	void OnWeaponClipMaxBulletChanged();// 0x3d89ac0
	void OnWeaponBulletChanged();// 0x3d89ad4
	void OnWeaponAttachCall(int ItemID, bool bEquip, enum SlotID);// 0x3d89274
	void OnUnlimitedBulletChange(Controller* Instigator);// 0x3d89a44
	void OnTargetCharacterDead();// 0x3d89a30
	void OnStopFire();// 0x3d89a1c
	void OnItemUpdated(ItemDefineID DefineID, int State);// 0x3d8941c
	bool JudgeCanReload();// 0x3d89630
	bool JudgeBulletFull();// 0x3d895f8
	void HandleWeaponScopeUnEquiped();// 0x3d8938c
	void HandleWeaponScopeEquiped(int OpticalType);// 0x3d893a0
	void ConsumeBackPackOrSpecialBulletNum(int Num);// 0x3d89910
	void ClearPawnWeaponState();// 0x3d89afc

--------------------------------
Class: ApgameWeaponMainLogicObject.ApgameWeaponLogicObject.Object
	<FString,WeaponAttrModifyConfig> WeaponAttriModifyRun;//[Offset: 0x48, Size: 0x50]
	<enum,LegendWeaponAttrModifyConfigList> LegendTypeWeaponAttriModifyRun;//[Offset: 0x98, Size: 0x50]
	void SepFrameNotifyEffect(byte Action);// 0x3a663f4
	void OnWeaponUnEquipEnd();// 0x3a66154
	void OnWeaponEquipSecondWeapon();// 0x3a66140
	void OnWeaponEquip();// 0x3a66168
	bool IsOwnerAutonomous();// 0x3a66384
	bool IsLikeAutonomous();// 0x3a663bc
	enum GetWeaponType();// 0x3a662d4
	bool GetWeaponIsInit();// 0x3a6629c
	enum GetWeaponAnimType();// 0x3a66190
	ItemDefineID GetItemDefineID();// 0x3a6633c
	bool GetIsCurUsingWeapon();// 0x3a661c4
	int GetDeriveID();// 0x3a66308
	ItemHandleBase* GetBackpackItemHandle();// 0x3a661fc
	BackpackComponent* GetBackPackComponent();// 0x3a66230
	void DoAttachWeaponToHand();// 0x3a6617c
	bool CheckWeaponEquiping();// 0x3a66264

--------------------------------
Class: BulletHitInfoReplicateData
	int ShootID;//[Offset: 0x0, Size: 0x4]
	double ShootTimeStamp;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantize ShootMomentMuzzlePos;//[Offset: 0x28, Size: 0xc]
	byte SurfaceType;//[Offset: 0x34, Size: 0x1]
	byte HitBodyType;//[Offset: 0x35, Size: 0x1]
	Actor* Actor;//[Offset: 0x38, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x40, Size: 0x8]
	FName BoneName;//[Offset: 0x48, Size: 0x8]
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bHitShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	uint16 Damage;//[Offset: 0x52, Size: 0x2]
	bool bFatalHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bLens;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	byte Pellet;//[Offset: 0x56, Size: 0x1]
	bool bLensFake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 0x1]
	bool bCanTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: SecurityLogHitTargetInfo

--------------------------------
Class: BulletEffectConfig
	ParticleSystem* NormalTailFx1P;//[Offset: 0x0, Size: 0x28]
	ParticleSystem* ChargeTailFx1P;//[Offset: 0x28, Size: 0x28]
	ParticleSystem* BeamTailFx3P;//[Offset: 0x50, Size: 0x28]
	ParticleSystem* LensTail1P;//[Offset: 0x78, Size: 0x28]
	ParticleSystem* LensTail3P;//[Offset: 0xa0, Size: 0x28]
	HitEffectDataAsset* DefaultHitEffects;//[Offset: 0xc8, Size: 0x28]
	HitEffectDataAsset* SpecialHitEffects;//[Offset: 0xf0, Size: 0x28]

--------------------------------
Class: WeaponHitPartCoff
	float Head;//[Offset: 0x0, Size: 0x4]
	float Head_SkullPiercer;//[Offset: 0x4, Size: 0x4]
	float Body;//[Offset: 0x8, Size: 0x4]
	float Thighs;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WeaponFireModeInfo
	enum FireMode;//[Offset: 0x0, Size: 0x1]
	FName BallisticName;//[Offset: 0x4, Size: 0x8]
	float ShootInterval;//[Offset: 0xc, Size: 0x4]
	int ShootMultiMax;//[Offset: 0x10, Size: 0x4]
	int ShootBullets;//[Offset: 0x14, Size: 0x4]
	float FireInterval;//[Offset: 0x18, Size: 0x4]
	float LensInterval;//[Offset: 0x1c, Size: 0x4]
	float FinalShootInterval;//[Offset: 0x20, Size: 0x4]
	float LinkInterval;//[Offset: 0x24, Size: 0x4]
	bool bCanLinkFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bCanAutoAimShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	float AutoAimShootWaitTime;//[Offset: 0x2c, Size: 0x4]
	float DoubleClickInterval;//[Offset: 0x30, Size: 0x4]
	bool bCanSingleAimShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bCanShotgunReleaseShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	int UnlockItemID;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ApgameWeaponEventProxy.ApgameEventProxy.Object
	delegate WeaponEffectActionDelegate;//[Offset: 0x90, Size: 0x10]
	delegate OnWeaponEquipDelegate;//[Offset: 0xa0, Size: 0x10]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0xb0, Size: 0x10]
	delegate OnWeaponUnEquipEndDelegate;//[Offset: 0xc0, Size: 0x10]
	delegate OnWeaponEquipSecondWeaponDelegate;//[Offset: 0xd0, Size: 0x10]
	delegate OnCurBulletChange;//[Offset: 0xe0, Size: 0x10]
	delegate OnMaxBulletChange;//[Offset: 0xf0, Size: 0x10]
	delegate OnOBBackpackBulletChange;//[Offset: 0x100, Size: 0x10]
	delegate OnStartFireDelegate;//[Offset: 0x110, Size: 0x10]
	delegate OnStopFireDelegate;//[Offset: 0x120, Size: 0x10]
	delegate OnWeaponShootDelegate;//[Offset: 0x130, Size: 0x10]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0x140, Size: 0x10]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0x150, Size: 0x10]
	delegate OnWeaponReloadAnimStartDelegage;//[Offset: 0x160, Size: 0x10]
	delegate OnWeaponShootPlayerNotifyDelegate;//[Offset: 0x170, Size: 0x10]
	delegate OnWeaponFireModeDelegate;//[Offset: 0x180, Size: 0x10]
	delegate OnWeaponAttachDelegate;//[Offset: 0x190, Size: 0x10]
	delegate OnEnergyValueChanged;//[Offset: 0x1a0, Size: 0x10]
	delegate WeaponPostFireDelegate;//[Offset: 0x1b0, Size: 0x10]
	delegate OnPlayWeaponFrameStaticMeshEffectDelegate;//[Offset: 0x1c0, Size: 0x10]
	delegate OnDisruptorChargeValueChangedDelegate;//[Offset: 0x1d0, Size: 0x10]
	delegate OnWeaponAimChargeLevelChange;//[Offset: 0x1e0, Size: 0x10]
	delegate OnWeaponAimChargeValueChange;//[Offset: 0x1f0, Size: 0x10]
	delegate OnPreFireEnergyIncrease;//[Offset: 0x200, Size: 0x10]
	delegate OnPreFireEnergyDecrease;//[Offset: 0x210, Size: 0x10]
	delegate OnHeatChangeDelegate;//[Offset: 0x220, Size: 0x10]
	delegate OnPlayWeaponFrameEffectParticleDelegate;//[Offset: 0x230, Size: 0x10]
	delegate OnPlayWeaponFramMainEffectDelegate;//[Offset: 0x240, Size: 0x10]
	delegate OnScopeEquipDelegate;//[Offset: 0x250, Size: 0x10]
	delegate OnScopeUnequipDelegate;//[Offset: 0x260, Size: 0x10]
	delegate OnDisruptorChargeBeginOrEnd;//[Offset: 0x280, Size: 0x10]
	delegate PostShootDelegate;//[Offset: 0x290, Size: 0x10]
	ApgameWeaponCoreComponent* WeaponCoreComp;//[Offset: 0x2b0, Size: 0x8]
	void WeaponEffectActionDelegate__DelegateSignature(byte Action);// 0x43841ec
	void ServerSendUnreliableEventWithId(const ApgameEvent InEvent, uint16 InDataId);// 0x3a6890c
	void ServerSendReliableEventWithId(const ApgameEvent InEvent, uint16 InDataId);// 0x3a68a70
	void ServerHandleTLogDataArray(uint16 InWeaponDataIdentity, const BulletHitInfoTLogData[] DataArray);// 0x3a68f94
	void ServerHandleHitDataArray(uint16 InWeaponDataIdentity, const BulletHitInfoUploadData[] DataArray, const SecurityAntiData AntiData);// 0x3a6909c
	void SendEventToServerWithId(out const ApgameEvent InEvent, bool bInReliable);// 0x3a68e54
	void SendEventToClientWithId(out const ApgameEvent InEvent, bool bInReliable);// 0x3a68d14
	void PostShootDelegate__DelegateSignature();// 0x43841ec
	void OnWeaponUnEquipDelegate__DelegateSignature();// 0x43841ec
	void OnWeaponShootPlayerNotifyDelegate__DelegateSignature();// 0x43841ec
	void OnWeaponShootDelegate__DelegateSignature();// 0x43841ec
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(Actor* InHitActor, out const SecurityLogHitTargetInfo TargetInfo);// 0x43841ec
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0x43841ec
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0x43841ec
	void OnWeaponReloadAnimStartDelegage__DelegateSignature(float StartPercent);// 0x43841ec
	void OnWeaponPostFireDelegate__DelegateSignature();// 0x43841ec
	void OnWeaponFireModeDelegate__DelegateSignature();// 0x43841ec
	void OnWeaponEquipSecondWeaponDelegate__DelegateSignature();// 0x43841ec
	void OnWeaponEquipDelegate__DelegateSignature();// 0x43841ec
	void OnWeaponAttachDelegate__DelegateSignature(int ItemID, bool bEquip, enum SlotID);// 0x43841ec
	void OnWeaponAimChargeValueChangeDelegate__DelegateSignature();// 0x43841ec
	void OnWeaponAimChargeLevelChangeDelegate__DelegateSignature();// 0x43841ec
	void OnStopFireDelegate__DelegateSignature();// 0x43841ec
	void OnStartFireDelegate__DelegateSignature();// 0x43841ec
	void OnScopeUnequipDelegate__DelegateSignature();// 0x43841ec
	void OnScopeEquipDelegate__DelegateSignature(int OpticalType);// 0x43841ec
	void OnPreFireEnergyIncrease__DelegateSignature();// 0x43841ec
	void OnPreFireEnergyDecrease__DelegateSignature();// 0x43841ec
	void OnPlayWeaponFrameStaticMeshEffectDelegate__DelegateSignature(enum EffectEvent, float ValueData, int InStackCount);// 0x43841ec
	void OnPlayWeaponFrameMainEffectDelegate__DelegateSignature(enum EffectEvent, float ValueData, int InStackCount);// 0x43841ec
	void OnPlayWeaponFrameEffectParticleDelegate__DelegateSignature(enum EffectEvent, float ValueData);// 0x43841ec
	void OnOBBackpackBulletChange__DelegateSignature();// 0x43841ec
	void OnMaxBulletChange__DelegateSignature();// 0x43841ec
	void OnHeatChangeDelegate__DelegateSignature(float HeatValue);// 0x43841ec
	void OnEventPlayerLeaveOb(Actor* InTarget);// 0x3a68284
	void OnEventPlayerEnterOb(Actor* InTarget);// 0x3a68300
	void OnEnergyValueChangedDelegate__DelegateSignature(float EnergyValue, enum EffectEvent);// 0x43841ec
	void OnDisruptorChargeValueChangedDelegate__DelegateSignature(float Value);// 0x43841ec
	void OnDisruptorChargeBeginOrEnd__DelegateSignature(bool bBegin);// 0x43841ec
	void OnCurBulletChange__DelegateSignature();// 0x43841ec
	void NetMulticastSendUnreliableEventWithId(const ApgameEvent InEvent, uint16 InDataId);// 0x3a6837c
	void NetMulticastSendReliableEventWithId(const ApgameEvent InEvent, uint16 InDataId);// 0x3a684e0
	void NetMulticastEventWithId(out const ApgameEvent InEvent, bool bInReliable);// 0x3a68bd4
	void ClientSendUnreliableEventWithId(const ApgameEvent InEvent, uint16 InDataId);// 0x3a68644
	void ClientSendReliableEventWithId(const ApgameEvent InEvent, uint16 InDataId);// 0x3a687a8

--------------------------------
Class: ApgameEventProxy.Object
	void ServerSendUnreliableEvent(const ApgameEvent InEvent);// 0x3a520ac
	void ServerSendReliableEvent(const ApgameEvent InEvent);// 0x3a521c8
	void SendEventToServer(out const ApgameEvent InEvent, bool bInReliable);// 0x3a52564
	void SendEventToClient(out const ApgameEvent InEvent, bool bInReliable);// 0x3a52424
	void ResetToReusable(bool bInShrink);// 0x3a52b38
	void NetMulticastSendUnreliableEvent(const ApgameEvent InEvent);// 0x3a51c3c
	void NetMulticastSendReliableEvent(const ApgameEvent InEvent);// 0x3a51d58
	void NetMulticastEvent(out const ApgameEvent InEvent, bool bInReliable);// 0x3a522e4
	bool K2_SendEvent(out const ApgameEvent InEvent);// 0x3a52a34
	void K2_RemoveListenersByObject(const Object* InObject, GameplayTag InTag);// 0x3a52740
	void K2_RemoveListenersByHandle(out ApgameEventHandle IoHandle);// 0x3a526a4
	ApgameEventHandle K2_ListenEventTag(GameplayTag InTag, const Object* InObject, out const delegate InCallback, out const ApgameEventListenParameters InParameters);// 0x3a52834
	void ClientSendUnreliableEvent(const ApgameEvent InEvent);// 0x3a51e74
	void ClientSendReliableEvent(const ApgameEvent InEvent);// 0x3a51f90

--------------------------------
Class: ApgameEvent

--------------------------------
Class: BulletHitInfoTLogData
	uint32 ShootID;//[Offset: 0x0, Size: 0x4]
	byte PelletID;//[Offset: 0x4, Size: 0x1]
	Vector_NetQuantize ShootWeaponPos;//[Offset: 0x8, Size: 0xc]
	Vector2D ShootMomentRecoil;//[Offset: 0x14, Size: 0x8]
	byte ShootMomentSightType;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: ApgameEventHandle
	GameplayTag EventTag;//[Offset: 0x0, Size: 0x8]
	uint16 DelegateId;//[Offset: 0x8, Size: 0x2]

--------------------------------
Class: ApgameEventListenParameters
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	FName PriorityName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: Weapon3DUIEntity.Object
	float[] TimeLineList;//[Offset: 0x28, Size: 0x10]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x38, Size: 0x8]
	FString WidgetKey;//[Offset: 0x40, Size: 0x10]
	Weapon* OwnerWeapon;//[Offset: 0x50, Size: 0x8]
	FName AttachSocketName;//[Offset: 0x58, Size: 0x8]
	DynamicMatConfig[] DynamicMatConfigList;//[Offset: 0x60, Size: 0x10]
	Weapon3DUIActor* DynamicMatActor;//[Offset: 0x70, Size: 0x8]
	LinearColor[] Weapon3DUIColorList;//[Offset: 0x78, Size: 0x10]
	void OnUpdateZoomScale(FText ZoomScale, bool BMax);// 0x3e683f8
	void OnUpdateTickEnable(bool bTick);// 0x3e68b6c
	void OnUpdateSightType(enum SightType);// 0x3e68758
	void OnUpdateShootTypeEvent(enum FireMode);// 0x3e687d4
	void OnUpdateReserveBulletEvent(int ReserveBullet, int ReserveBulletBudget);// 0x3e68924
	void OnUpdateHeat(float HeatValue);// 0x3e686dc
	void OnUpdateDisruptorEnergy(int CurEnergy, int MaxValue);// 0x3e68620
	void OnUpdateBulletEvent(byte ColorLevel, int BulletNum, int MaxBulletNum, int ReserveBulletBudget, bool bFlashing);// 0x3e689e0
	void OnUpdateAimShow(bool IsAiming, bool bHasEquipOptical);// 0x3e68850
	void OnUpdateAimBulletUI(bool bAiming);// 0x3e6859c
	void OnStopFire();// 0x3e68188
	void OnLensShootUpdate(int CurrentShootIndex, int MaxShootIndex);// 0x3e6819c
	void OnLensDecrease(float Value);// 0x3e6810c
	void OnAimChargeAnim(int ChargeLevel, float ChargeRatio, float AimChargeTime, bool AnimEnd, float InChargeSumRatio);// 0x3e68258
	void InitUIActor(class Actor UIBPClass, MeshComponent* AttachMesh, enum w3t, ApexCharacter* Character, Weapon* Weapon, ItemDefineID ItemID);// 0x3e68bf0

--------------------------------
Class: DynamicMatConfig
	MaterialInstanceDynamic*[] DynamicMatList;//[Offset: 0x0, Size: 0x10]
	FString[] DynamicMatParams;//[Offset: 0x10, Size: 0x10]
	bool bOnlyAimShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bOnlyNotEquipShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	MeshComponent* MeshComponent;//[Offset: 0x28, Size: 0x8]
	WidgetComponent* WidgetComponent;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: Weapon3DUIActor.SignificanceManagedActor.Actor.Object
	FName AttachSocket;//[Offset: 0x270, Size: 0x8]
	<FString,FString> MaterialParamMap;//[Offset: 0x278, Size: 0x50]
	LinearColor[] BulletColorList;//[Offset: 0x2c8, Size: 0x10]
	WidgetComponent*[] TickWidgetCompList;//[Offset: 0x2d8, Size: 0x10]
	SceneComponent*[] TickActorCompList;//[Offset: 0x2e8, Size: 0x10]
	ApexCharacter* OwnerCharacter;//[Offset: 0x2f8, Size: 0x8]
	Weapon* OwnerWeapon;//[Offset: 0x300, Size: 0x8]
	void SetThermalEffect(PrimitiveComponent* InComponent, bool bUse);// 0x3e67a7c
	void OnZoom(bool bIsMax);// 0x43841ec
	void OnAim(bool bIsAim);// 0x43841ec

--------------------------------
Class: Weapon3DUIChangeNum
	byte ColorNum1;//[Offset: 0x0, Size: 0x1]
	byte ColorNum2;//[Offset: 0x1, Size: 0x1]
	byte ColorNum3;//[Offset: 0x2, Size: 0x1]
	byte FlashNum;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: WeaponFrameEffectParticleComp
	ParticleSystemComponent* ParticleSysCompFpp;//[Offset: 0x0, Size: 0x8]
	ParticleSystemComponent* ParticleSysCompTpp;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ShootWeaponDataAsset.WeaponDataAsset.DataAsset.Object
	bool bHasMagazine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 0x1]
	bool bCanAutoShoot;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d0, Size: 0x1]
	bool bDrawShootLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d0, Size: 0x1]
	bool bDebugGunBody;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d0, Size: 0x1]
	bool bDebugLog;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d0, Size: 0x1]
	bool bUseRebasing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d0, Size: 0x1]
	bool bDebugAIShotGunMissPierce;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d0, Size: 0x1]
	bool bIsAlternantSocketActive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d0, Size: 0x1]
	bool bIsAutoSwitchAlternantSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d1, Size: 0x1]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d1, Size: 0x1]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d1, Size: 0x1]
	bool bAllowAim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d1, Size: 0x1]
	bool EnableManualCameraOffsetZ;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d1, Size: 0x1]
	bool bCirculateReloadAnim;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d1, Size: 0x1]
	bool bAimAndBolt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d1, Size: 0x1]
	byte AutoShootTargetChannel;//[Offset: 0x7d2, Size: 0x1]
	enum ReloadMethod;//[Offset: 0x7d3, Size: 0x1]
	enum SightType;//[Offset: 0x7d4, Size: 0x1]
	enum FireModeDefault;//[Offset: 0x7d5, Size: 0x1]
	enum FireModeDefaultUnlock;//[Offset: 0x7d6, Size: 0x1]
	enum ImpactDirType;//[Offset: 0x7d7, Size: 0x1]
	enum ShoulderADSConfig;//[Offset: 0x7d8, Size: 0x1]
	int8 BulletPierceTimes;//[Offset: 0x7d9, Size: 0x1]
	CurveVector* SprintCameraShakeCurve;//[Offset: 0x7e0, Size: 0x8]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0x7e8, Size: 0x10]
	float HammerPointDamageRatio;//[Offset: 0x7f8, Size: 0x4]
	FName HitEffectTag;//[Offset: 0x7fc, Size: 0x8]
	float MaxBulletImpactFXClampDistance;//[Offset: 0x804, Size: 0x4]
	float AutoEffectBulletDelay;//[Offset: 0x808, Size: 0x4]
	float BeamStartLength;//[Offset: 0x80c, Size: 0x4]
	float BeamStartLengthTpp;//[Offset: 0x810, Size: 0x4]
	Vector BulletDecalScale;//[Offset: 0x814, Size: 0xc]
	float AutoShootDis;//[Offset: 0x820, Size: 0x4]
	float AutoShootADSDis;//[Offset: 0x824, Size: 0x4]
	float AutoShootDelayBegin;//[Offset: 0x828, Size: 0x4]
	Vector2D AutoShootViewSize;//[Offset: 0x82c, Size: 0x8]
	float AutoShootDelayEnd;//[Offset: 0x834, Size: 0x4]
	float DrawShootLineTime;//[Offset: 0x838, Size: 0x4]
	float TppCosLimit;//[Offset: 0x83c, Size: 0x4]
	int BulletDecreasePerShoot;//[Offset: 0x840, Size: 0x4]
	int BulletSendPerShoot;//[Offset: 0x844, Size: 0x4]
	float GameDeviationAccuracy;//[Offset: 0x848, Size: 0x4]
	float MaxMovingTime;//[Offset: 0x84c, Size: 0x4]
	FOVChangeTimeByScope AdsStartTimeByWeapon;//[Offset: 0x850, Size: 0x20]
	FOVChangeTimeByScope AdsEndTimeByWeapon;//[Offset: 0x870, Size: 0x20]
	<int,float> SightID2ZoomTime;//[Offset: 0x890, Size: 0x50]
	<enum,float> FPPCameraAimOffset;//[Offset: 0x8e0, Size: 0x50]
	<FName,float> FPPCameraAimOffsetZ;//[Offset: 0x930, Size: 0x50]
	<enum,float> AdsFovFactor;//[Offset: 0x980, Size: 0x50]
	<enum,float> AdsFovChangeDelay;//[Offset: 0x9d0, Size: 0x50]
	<enum,bool> TPPAdsUseFPP;//[Offset: 0xa20, Size: 0x50]
	float ADSWeaponFOV;//[Offset: 0xa70, Size: 0x4]
	float SensitiveFireYawRate;//[Offset: 0xa74, Size: 0x4]
	float SensitiveFirePitchRate;//[Offset: 0xa78, Size: 0x4]
	FName DefaultScopeSocket;//[Offset: 0xa7c, Size: 0x8]
	FName ShellDropSocketName;//[Offset: 0xa84, Size: 0x8]
	FName AlternantShellDropSocketName;//[Offset: 0xa8c, Size: 0x8]
	float WeaponBodyLength;//[Offset: 0xa94, Size: 0x4]
	float ShotGunVerticalSpread;//[Offset: 0xa98, Size: 0x4]
	float ShotGunHorizontalSpread;//[Offset: 0xa9c, Size: 0x4]
	ItemDefineID BulletType;//[Offset: 0xaa0, Size: 0x10]
	float BulletFireSpeed;//[Offset: 0xab0, Size: 0x4]
	WeaponFireModeInfo[] FireModeTotal;//[Offset: 0xab8, Size: 0x10]
	WeaponFireModeInfo[] FireModeTotalAI;//[Offset: 0xac8, Size: 0x10]
	FName MuzzleSocketName;//[Offset: 0xad8, Size: 0x8]
	FName AlternantMuzzleSocketName;//[Offset: 0xae0, Size: 0x8]
	FName BarrelStabilizerMuzzleName;//[Offset: 0xae8, Size: 0x8]
	FName DefaultMuzzleSocketName;//[Offset: 0xaf0, Size: 0x8]
	CurveFloat* ShootIntervalCurve;//[Offset: 0xaf8, Size: 0x8]
	CurveFloat* ShootIntervalCurveTurbo;//[Offset: 0xb00, Size: 0x8]
	FName ScopeAimCameraSocketName;//[Offset: 0xb08, Size: 0x8]
	Rotator[] ShotgunBallisticTemplate;//[Offset: 0xb10, Size: 0x10]
	float ShotgunBallisticScale;//[Offset: 0xb20, Size: 0x4]
	CurveFloat* ShotgunAimPackRatioX;//[Offset: 0xb28, Size: 0x8]
	CurveFloat* ShotgunAimPackRatioY;//[Offset: 0xb30, Size: 0x8]
	CurveFloat* ShotgunAimChargePackX;//[Offset: 0xb38, Size: 0x8]
	CurveFloat* ShotgunAimChargePackY;//[Offset: 0xb40, Size: 0x8]
	float PostFireStateTime;//[Offset: 0xb48, Size: 0x4]
	float FireFovDeltaWithoutADS;//[Offset: 0xb4c, Size: 0x4]
	float FireFovDeltaWithoutADSLerpTime;//[Offset: 0xb50, Size: 0x4]
	float FireFovDeltaWithoutADSDelay;//[Offset: 0xb54, Size: 0x4]
	float LineTraceShootRadius;//[Offset: 0xb58, Size: 0x4]
	bool RemoteShootHitOrderPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5c, Size: 0x1]
	int RemoteShootHitAsyncNum;//[Offset: 0xb60, Size: 0x4]
	bool RemoteShootAsyncOverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb64, Size: 0x1]
	int MaxBulletNumInOneClip;//[Offset: 0xb68, Size: 0x4]
	<int,int> ExtendMaxBulletNumInOneClipList;//[Offset: 0xb70, Size: 0x50]
	float BulletSphereRadius;//[Offset: 0xbc0, Size: 0x4]
	CurveFloat* DistanceScaleCurve;//[Offset: 0xbc8, Size: 0x8]
	float MaxValidHitTime;//[Offset: 0xbd0, Size: 0x4]
	float TraceDistance;//[Offset: 0xbd4, Size: 0x4]
	float BulletRange;//[Offset: 0xbd8, Size: 0x4]
	float TppBulletBias;//[Offset: 0xbdc, Size: 0x4]
	float AiBulletBias;//[Offset: 0xbe0, Size: 0x4]
	float AiTraceBlockDistance;//[Offset: 0xbe4, Size: 0x4]
	float RangeModifier;//[Offset: 0xbe8, Size: 0x4]
	float ReferenceDistance;//[Offset: 0xbec, Size: 0x4]
	float BaseImpactDamage;//[Offset: 0xbf0, Size: 0x4]
	float BaseLensDamage;//[Offset: 0xbf4, Size: 0x4]
	float BaseFinalShootDamage;//[Offset: 0xbf8, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0xc00, Size: 0x8]
	float DamageImpulse;//[Offset: 0xc08, Size: 0x4]
	float BulletMomentum;//[Offset: 0xc0c, Size: 0x4]
	int MaxNoGravityRange;//[Offset: 0xc10, Size: 0x4]
	float LaunchGravityScale;//[Offset: 0xc14, Size: 0x4]
	ScopeZeroPointConfig[] ScopeZeroPointConfig;//[Offset: 0xc18, Size: 0x10]
	float BulletSpeedScaleByCharMove;//[Offset: 0xc28, Size: 0x4]
	int LowShootSoundBulletNum;//[Offset: 0xc2c, Size: 0x4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0xc30, Size: 0x4]
	float ImpactEffectSkipDistance;//[Offset: 0xc34, Size: 0x4]
	float MaxImpactEffectSkipTime;//[Offset: 0xc38, Size: 0x4]
	float MaxFakeLensEffectSkipDistance;//[Offset: 0xc3c, Size: 0x4]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0xc40, Size: 0x8]
	int MaxOBBulletTrackCompNum;//[Offset: 0xc48, Size: 0x4]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0xc50, Size: 0x8]
	float RemainEffectTime;//[Offset: 0xc58, Size: 0x4]
	float MinusBiasSquared;//[Offset: 0xc5c, Size: 0x4]
	CurveFloat* FakeStartPointSpeedCurve;//[Offset: 0xc60, Size: 0x8]
	CurveFloat* FakeStartPointSpeedCurveADS;//[Offset: 0xc68, Size: 0x8]
	float LensDecreaseTime;//[Offset: 0xc70, Size: 0x4]
	float LenDecreaseValue;//[Offset: 0xc74, Size: 0x4]
	float LensIncreaseTime;//[Offset: 0xc78, Size: 0x4]
	float LensDrawDistance;//[Offset: 0xc7c, Size: 0x4]
	float FinalDrawDistance;//[Offset: 0xc80, Size: 0x4]
	float CrossHairBurstSpeed;//[Offset: 0xc84, Size: 0x4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0xc88, Size: 0x4]
	Vector2D TppBulletProgressLocation;//[Offset: 0xc8c, Size: 0x8]
	float TppBulletProgressRotate;//[Offset: 0xc94, Size: 0x4]
	<enum,ViewAssistViewMoveConfig> ViewType2ViewMoveConfig;//[Offset: 0xc98, Size: 0x50]
	<enum,ViewAssistAimViewMoveConfig> ViewType2AimViewMoveConfig;//[Offset: 0xce8, Size: 0x50]
	<enum,ViewAssistFireViewMoveConfig> ViewType2FireViewMoveConfig;//[Offset: 0xd38, Size: 0x50]
	<enum,ViewAssistAimSnappingConfig> ViewType2AimSnappingConfig;//[Offset: 0xd88, Size: 0x50]
	<enum,ViewAssistFireSnappingConfig> ViewType2FireSnappingConfig;//[Offset: 0xdd8, Size: 0x50]
	<enum,ViewAssistEdgeSnappingConfig> ViewType2EdgeSnappingConfig;//[Offset: 0xe28, Size: 0x50]
	<enum,ViewAssistTickSnappingConfig> ViewType2TickSnappingConfig;//[Offset: 0xe78, Size: 0x50]
	<enum,ViewAssistQuickSnappingConfig> ViewType2QuickSnappingConfig;//[Offset: 0xec8, Size: 0x50]
	float ReloadTime;//[Offset: 0xf18, Size: 0x4]
	float ReloadTimeTactical;//[Offset: 0xf1c, Size: 0x4]
	float ReloadTimeVerifyCoff;//[Offset: 0xf20, Size: 0x4]
	float ForceExitReloadTimeRatio;//[Offset: 0xf24, Size: 0x4]
	float RelaodAnimTolerenceTime;//[Offset: 0xf28, Size: 0x4]
	float ReloadTacticalAnimTolerenceTime;//[Offset: 0xf2c, Size: 0x4]
	CurveFloat* DamageDecayCurve;//[Offset: 0xf30, Size: 0x8]
	CurveFloat* LensDamageDecayCurve;//[Offset: 0xf38, Size: 0x8]
	int MaxLensFakeEffect;//[Offset: 0xf40, Size: 0x4]
	Vector2D BaseLenFactor;//[Offset: 0xf44, Size: 0x8]

--------------------------------
Class: FOVChangeTimeByScope
	float NoAim;//[Offset: 0x0, Size: 0x4]
	float Sight1X;//[Offset: 0x4, Size: 0x4]
	float Sight2X;//[Offset: 0x8, Size: 0x4]
	float Sight3X;//[Offset: 0xc, Size: 0x4]
	float Sight4X;//[Offset: 0x10, Size: 0x4]
	float Sight6X;//[Offset: 0x14, Size: 0x4]
	float Sight8X;//[Offset: 0x18, Size: 0x4]
	float Sight10X;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ScopeZeroPointConfig
	int ScopeItemID;//[Offset: 0x0, Size: 0x4]
	int ScopeSight;//[Offset: 0x4, Size: 0x4]
	float[] ZeroPointDistanceArray;//[Offset: 0x8, Size: 0x10]
	float[] ZeroPointUIBiasArray;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ViewAssistViewMoveConfig
	bool EnableViewAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableViewAssistDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float ViewAccelerateRadius;//[Offset: 0x4, Size: 0x4]
	float ViewDecelerateRadius;//[Offset: 0x8, Size: 0x4]
	float EdgeDecelerateWidth;//[Offset: 0xc, Size: 0x4]
	CurveFloat* EdgeDecelerateFactor;//[Offset: 0x10, Size: 0x8]
	float MaxDistance;//[Offset: 0x18, Size: 0x4]
	float BaseAccelerateSpeed;//[Offset: 0x1c, Size: 0x4]
	float BaseDecelerateSpeed;//[Offset: 0x20, Size: 0x4]
	CurveFloat* DistanceFactor;//[Offset: 0x28, Size: 0x8]
	CurveFloat* DecelerateCurve;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ViewAssistAimViewMoveConfig
	bool EnableAimViewAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableAimViewAssistDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float AimDecelerateRadius;//[Offset: 0x4, Size: 0x4]
	float AimAccelerateRadius;//[Offset: 0x8, Size: 0x4]
	float AimMaxDistance;//[Offset: 0xc, Size: 0x4]
	float AimEdgeDecelerateWidth;//[Offset: 0x10, Size: 0x4]
	CurveFloat* AimEdgeDecelerateFactor;//[Offset: 0x18, Size: 0x8]
	float AimingAccelerateFactor;//[Offset: 0x20, Size: 0x4]
	float AimBaseDecelerateSpeed;//[Offset: 0x24, Size: 0x4]
	CurveFloat* AimDistanceFactor;//[Offset: 0x28, Size: 0x8]
	CurveFloat* AimDecelerateCurve;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ViewAssistFireViewMoveConfig
	bool EnableFireViewAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableFireViewAssistDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float FireDecelerateRadius;//[Offset: 0x4, Size: 0x4]
	float FireAccelerateRadius;//[Offset: 0x8, Size: 0x4]
	float FireMaxDistance;//[Offset: 0xc, Size: 0x4]
	float FireAccelerateFactor;//[Offset: 0x10, Size: 0x4]
	float FireBaseDecelerateSpeed;//[Offset: 0x14, Size: 0x4]
	float FireEdgeDecelerateWidth;//[Offset: 0x18, Size: 0x4]
	CurveFloat* FireEdgeDecelerateFactor;//[Offset: 0x20, Size: 0x8]
	CurveFloat* FireDistanceFactor;//[Offset: 0x28, Size: 0x8]
	CurveFloat* FireDecelerateCurve;//[Offset: 0x30, Size: 0x8]
	float FireDecelerateTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ViewAssistAimSnappingConfig
	bool EnableAimSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableAimPitchSnapping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool EnableAimSnappingDebug;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool KeepAimSnappingEvenAttach;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float AimSnappingCD;//[Offset: 0x4, Size: 0x4]
	<enum,float> BaseAimSnappingSpeed;//[Offset: 0x8, Size: 0x50]
	float AimSnappingMaxDistance2Reticle;//[Offset: 0x58, Size: 0x4]
	<enum,float> AimSnappingSightFactor;//[Offset: 0x60, Size: 0x50]
	float MaxAimSnappingDistance;//[Offset: 0xb0, Size: 0x4]
	CurveFloat* AimSnappingDistanceFactor;//[Offset: 0xb8, Size: 0x8]
	float EnemyCrouchAimSnappingSizeFactor;//[Offset: 0xc0, Size: 0x4]
	float EnemyDyingAimSnappingSizeFactor;//[Offset: 0xc4, Size: 0x4]
	float AimSnappingTime;//[Offset: 0xc8, Size: 0x4]
	bool ConsiderEnemySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 0x1]
	CurveFloat* Speed2SnappingSpeedCurve;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: ViewAssistFireSnappingConfig
	bool EnableFireSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableFirePitchSnapping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool EnableFireSnappingDebug;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool KeepFireSnappingEvenAttach;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float FireSnappingCD;//[Offset: 0x4, Size: 0x4]
	<enum,float> BaseFireSnappingSpeed;//[Offset: 0x8, Size: 0x50]
	float NoAimFireSnappingSpeed;//[Offset: 0x58, Size: 0x4]
	<enum,float> FireSnappingMaxDistance2Reticle;//[Offset: 0x60, Size: 0x50]
	float NoAimFireSnappingMaxDistance2Reticle;//[Offset: 0xb0, Size: 0x4]
	float MaxFireSnappingDistance;//[Offset: 0xb4, Size: 0x4]
	CurveFloat* FireSnappingDistanceFactor;//[Offset: 0xb8, Size: 0x8]
	float EnemyCrouchFireSnappingSizeFactor;//[Offset: 0xc0, Size: 0x4]
	float EnemyDyingFireSnappingSizeFactor;//[Offset: 0xc4, Size: 0x4]
	float FireSnappingTime;//[Offset: 0xc8, Size: 0x4]
	bool ConsiderEnemySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 0x1]
	CurveFloat* Speed2SnappingSpeedCurve;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: ViewAssistEdgeSnappingConfig
	bool EnableEdgePushing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnablePitchEdgePushing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool EnableDebugEdgePushing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool KeepEdgePushingEvenAttach;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EdgePushingRadius;//[Offset: 0x4, Size: 0x4]
	float EdgePushingWidth;//[Offset: 0x8, Size: 0x4]
	float EdgePushingMaxDistance;//[Offset: 0xc, Size: 0x4]
	CurveFloat* EdgePushingDistanceFactor;//[Offset: 0x10, Size: 0x8]
	float EdgePushingMinSpeed;//[Offset: 0x18, Size: 0x4]
	float BaseEdgePushingSpeed;//[Offset: 0x1c, Size: 0x4]
	float EdgePushingTime;//[Offset: 0x20, Size: 0x4]
	float EdgePushingCD;//[Offset: 0x24, Size: 0x4]
	float GamePadTriggerThreshold;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ViewAssistTickSnappingConfig
	bool EnableTickSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableTickPitchSnapping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool DebugDrawTickSnapping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float TickSnappingMaxDistance2Reticle;//[Offset: 0x4, Size: 0x4]
	float TickSnappingMaxDistance;//[Offset: 0x8, Size: 0x4]
	CurveFloat* TickSnappingDistanceFactor;//[Offset: 0x10, Size: 0x8]
	float TickSnappingSpeed;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ViewAssistQuickSnappingConfig
	bool EnableQuickFireSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableQuickAimSnapping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool EnableQuickPitchSnapping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool DebugDrawQuickSnapping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float QuickSnappingCD;//[Offset: 0x4, Size: 0x4]
	float QuickSnappingMaxDistance;//[Offset: 0x8, Size: 0x4]
	float QuickSnappingTime;//[Offset: 0xc, Size: 0x4]
	float QuickSnappingMaxDistance2Reticle;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WeaponStateManagerLogicObject.ApgameWeaponLogicObject.Object
	int ChangeCounts;//[Offset: 0x138, Size: 0x4]
	void RPC_ServerReportStateRecord(enum State, int Index, bool bClient, bool bAI, bool bLostLink);// 0x3e9de20
	void OnWeaponAttachCall(int InItemID, bool bInEquip, enum InSlotID);// 0x3e9dfdc

--------------------------------
Class: WeaponManagerComponent.ActorComponent.Object
	delegate OnPlayerWeaponChangeState;//[Offset: 0xf8, Size: 0x10]
	delegate OnPlayerStartFireDelegate;//[Offset: 0x108, Size: 0x10]
	delegate OnPlayerStopFireDelegate;//[Offset: 0x118, Size: 0x10]
	delegate OnPlayerWeaponShootDelegate;//[Offset: 0x128, Size: 0x10]
	delegate OnPlayerWeaponHitDelegate;//[Offset: 0x138, Size: 0x10]
	delegate OnPlayerWeaponReloadEndDelegate;//[Offset: 0x148, Size: 0x10]
	delegate OnWeaponDestroyDelegate;//[Offset: 0x158, Size: 0x10]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0x168, Size: 0x10]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x178, Size: 0x10]
	delegate OnPutOnWeaponBeginDelegate;//[Offset: 0x188, Size: 0x10]
	delegate OnPutOnWeaponEndDelegate;//[Offset: 0x198, Size: 0x10]
	delegate OnPutOffBeginDelegate;//[Offset: 0x1a8, Size: 0x10]
	delegate OnPutOffEndDelegate;//[Offset: 0x1b8, Size: 0x10]
	delegate PreSwapWeaponDelegate;//[Offset: 0x1c8, Size: 0x10]
	delegate PostSwapWeaponDelegate;//[Offset: 0x1d8, Size: 0x10]
	delegate EnterFireChangeStageDelegate;//[Offset: 0x218, Size: 0x10]
	delegate OnUnEquipImmediatelyDelegate;//[Offset: 0x228, Size: 0x10]
	delegate EventChangeUseWeaponSlot;//[Offset: 0x238, Size: 0x10]
	ApexCharacter* OwnerCharacter;//[Offset: 0x260, Size: 0x8]
	WeaponTransformConfig[] WeaponTransformConfigs;//[Offset: 0x268, Size: 0x10]
	bool bHnadleWeaponFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	bool bUseSimuScreenRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1]
	float WeaponDisInView;//[Offset: 0x27c, Size: 0x4]
	float CheckWeaponFollowTime;//[Offset: 0x280, Size: 0x4]
	float CheckWeaponFollowUpdateTime;//[Offset: 0x284, Size: 0x4]
	float WeaponFollowDisMin;//[Offset: 0x288, Size: 0x4]
	float WeaponFollowDisMax;//[Offset: 0x28c, Size: 0x4]
	float WeaponFollowDisMinADS;//[Offset: 0x290, Size: 0x4]
	float WeaponFollowDisMaxADS;//[Offset: 0x294, Size: 0x4]
	float SimuScreenRatioMin;//[Offset: 0x298, Size: 0x4]
	float SimuScreenRatioMax;//[Offset: 0x29c, Size: 0x4]
	<enum,SimuWeaponFollow> TeamWeapon1Follow;//[Offset: 0x2a0, Size: 0x50]
	<enum,SimuWeaponFollow> TeamWeapon2Follow;//[Offset: 0x2f0, Size: 0x50]
	<enum,SimuWeaponFollow> EnemyWeapon1Follow;//[Offset: 0x340, Size: 0x50]
	<enum,SimuWeaponFollow> EnemyWeapon2Follow;//[Offset: 0x390, Size: 0x50]
	enum[] StatesToFire;//[Offset: 0x3e8, Size: 0x10]
	bool bDrawAutoShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	bool bBallisticRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1]
	bool bBallisticBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fa, Size: 0x1]
	bool bCostFireSpring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb, Size: 0x1]
	bool bRecoveryEndClearPressGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 0x1]
	bool bLinkFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd, Size: 0x1]
	bool bFireShakeOld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fe, Size: 0x1]
	int FireShakeCounts;//[Offset: 0x400, Size: 0x4]
	float MinCreditScoreEnableDamage;//[Offset: 0x404, Size: 0x4]
	<FName,WeaponBallisticInfo> WeaponBallisticMap;//[Offset: 0x410, Size: 0x50]
	int BulletNoEnoughCount;//[Offset: 0x460, Size: 0x4]
	enum[] StatesCacheFire;//[Offset: 0x468, Size: 0x10]
	delegate OnWeaponAttachChangedDelegate;//[Offset: 0x488, Size: 0x10]
	delegate OnWeaponAttachEquipDelegate;//[Offset: 0x498, Size: 0x10]
	float SwitchWeaponValue;//[Offset: 0x4a8, Size: 0x4]
	enum CurUseWeaponSlot;//[Offset: 0x4ac, Size: 0x1]
	enum SyncUseWeaponSlot;//[Offset: 0x4ad, Size: 0x1]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	SwitchWeaponParamter SimSwitchWeapon;//[Offset: 0x542, Size: 0x5]
	ShootWeaponBullet*[] BulletCacheList;//[Offset: 0x568, Size: 0x10]
	AutoEffectBullet*[] AutoEffectBulletCacheList;//[Offset: 0x578, Size: 0x10]
	OBEffectBullet*[] OBEffectBulletCacheList;//[Offset: 0x588, Size: 0x10]
	class ShootWeaponBullet* BulletTemplate;//[Offset: 0x598, Size: 0x8]
	class AutoEffectBullet* BulletEffectTemplate1P;//[Offset: 0x5a0, Size: 0x8]
	class OBEffectBullet* BulletEffectTemplate3P;//[Offset: 0x5a8, Size: 0x8]
	ApgameWeaponSlotMap RepWeaponSlotMap;//[Offset: 0x5e0, Size: 0x1]
	int GunAdsGuideId;//[Offset: 0x61c, Size: 0x4]
	float EnemyDistance;//[Offset: 0x620, Size: 0x4]
	<enum,int> GunGuideMap;//[Offset: 0x628, Size: 0x50]
	enum[] AdsGunGuide;//[Offset: 0x678, Size: 0x10]
	bool bUseThermal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1]
	bool bGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x699, Size: 0x1]
	void SwitchWeaponBySlot(enum Slot, bool bUseAnimation, bool bNeedPop, bool bInNoneToMeleeSlot);// 0x3e8d24c
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x3e8d238
	void StartGuide(int GuideID);// 0x3e8a9f4
	void SetUseThermal(bool InValue);// 0x3e8a64c
	void SetFirePrepareShooting(bool State);// 0x3e8c334
	void SetBtnPressState(bool bShoot, bool bPress, bool bNeedAim, bool bNeedCloseAim, float ShootDelayTime, bool bNeedNotify, bool bReleaseFire);// 0x3e8be6c
	void SetAutoShootFiring(bool _AutoShootFire);// 0x3e8c0dc
	void SetAutoEnterAim(bool _AutoEnterAim);// 0x3e8bb78
	void ServerStartSwitchWeaponWithTime(enum Slot, bool bUseAnimation, double NowTime);// 0x3e8ae0c
	void ServerStartSwitchWeapon(enum InDataSlot, bool bUseAnimation, bool bNeedPop);// 0x3e8d3bc
	void ServerMainHandStackChanged(HandStateData HandStateData, bool bPush);// 0x3e8cc20
	void RPC_ServerSwitchWeaponWithTime(enum InDataSlot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, double SwitchTime, bool bNeedPop);// 0x3e8b850
	void RPC_ServerSwitchWeapon(enum InDataSlot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, bool bNeedPop, bool bInNoneToMeleeSlot);// 0x3e8d7d4
	void RPC_ServerSetFireShooting(bool State, bool bCancel);// 0x3e8c258
	void RPC_ServerSetBulletNoEnoughCount(int count);// 0x3e8e8ec
	void RPC_Server_WeaponCharge();// 0x3e8dc6c
	void RPC_Server_SwapWeapon();// 0x3e8de10
	void RPC_Server_LocalForceFinishSwitch(bool bInterrupted);// 0x3e8de80
	void RPC_MulticastSwitchWeapon(enum InDataSlot, byte InDataSlotIndex, bool bUseAnimation, bool bNeedPop);// 0x3e8d62c
	void RPC_MulticastSpawnWeapon(enum InDataSlot, const ApgameWeaponInitializationData InData, const ApgameWeaponAttributeSetInitialDataHandle InInitialDataHandle);// 0x3e8eedc
	void RPC_MulticastSetFireShooting(bool State, bool bCancel);// 0x3e8c17c
	void RPC_MulticastEquipSecondWeapon(enum InDataSlot);// 0x3e8e448
	void RPC_MulticastEquipFirstWeapon(enum InDataSlot);// 0x3e8e500
	void RPC_MulticastDestroyWeapon(uint16 InWeaponDataIdentity, bool bEnableBroadcast);// 0x3e8e970
	void RPC_Multicast_WeaponCharge();// 0x3e8dc10
	void RPC_Multicast_OnAttachmentChanged(enum InDataSlot);// 0x3e8dcdc
	void RPC_Multicast_LocalForceFinishSwitch(bool bInterrrupted);// 0x3e8df44
	void RPC_ClientTakeDamage(float Distance);// 0x3e8a6e8
	void RPC_ClientSwitchWeaponWithTime(enum InDataSlot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, double SwitchTime, bool bNeedPop);// 0x3e8b5f0
	void RPC_ClientSwitchWeapon(enum InDataSlot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, bool bNeedPop);// 0x3e8b3d8
	void RPC_ClientFixSwitchError(enum InDataSlot, byte InDataSlotIndex, bool bEquip);// 0x3e8d4dc
	void RPC_ClientEquipSecondeWeapon(enum InDataSlot);// 0x3e8e2d8
	void RPC_ClientEquipFirstWeapon(enum InDataSlot);// 0x3e8e390
	void RPC_ClientChangeReloadTimePerkAttr(enum Op, float ChangeValue);// 0x3e8bab0
	void RPC_Client_SetNeedSwitchIcon(bool bNeed);// 0x3e8c9a4
	void RPC_Client_ServerAckSwitchWeapon(double AckTime);// 0x3e8b320
	void RequestFire();// 0x3e8e75c
	void PreSpawnWeaponBullet();// 0x3e8c934
	void PreSpawnOBEffectBullet();// 0x3e8c920
	void OnWeaponChangeAttachment(Weapon* InWeapon);// 0x3e8da4c
	void OnWeaponAttachmentChanged(Weapon* Weapon);// 0x3e8dd94
	void OnStateLeave(enum State, enum Reason, enum InterruptedBy);// 0x3e8e0c8
	void OnSelfTakeDamage(float Damage, int DamageType, bool HeadShot, bool BreakShield, bool FatalHealth, Pawn* Attacker, Pawn* Victim, byte VictimOldHealthStatus);// 0x3e8a76c
	void OnRep_SyncUseWeaponSlot();// 0x3e8dcc8
	void OnRep_SimSwitchWeapon();// 0x3e8c95c
	void OnRep_RepWeaponSlotMap();// 0x3e8aa70
	void OnMainHandStackChanged(HandStateData HandStateData, bool bPush);// 0x3e8cdcc
	void OnEquipChargeRifle();// 0x3e8a588
	void OnEnterState(enum State, enum EnteredOverrideState);// 0x3e8e008
	void OnAttachProp(enum AttachmentType);// 0x3e8d138
	void OnApexCharacterPossessedCallback(Controller* pController);// 0x3e8f08c
	void OnAimEnd();// 0x3e8e748
	void OnAimChange(bool IsAiming);// 0x3e8e6c4
	void NotifyUseItem();// 0x3e8ca4c
	void NotifyChargeUI(Weapon* Weapon);// 0x3e8db94
	void LocalSwapWeapon();// 0x3e8de6c
	void LocalForceFinishSwitchWeapon(bool bNeedInterrupt);// 0x3e8d1b4
	void LocalEquipFirstWeapon(enum InDataSlot);// 0x3e8e25c
	void LeaveRaiseAfterClimb();// 0x3e8c948
	void HandlePlayerStopFire(Weapon* InWeapon);// 0x3e8e648
	void HandlePlayerStartFire(Weapon* InWeapon);// 0x3e8e5cc
	void HandleFireRelatedPawnState(bool bIsPressing, bool bNeedAim, bool bNeedCloseAim, float FireDelayTime);// 0x3e8e770
	void HandleContinuousUseRecover();// 0x3e8ca60
	WeaponTransformConfig GetWeaponTransformConfig(int WeaponID);// 0x3e8ed10
	Weapon* GetWeaponTargetBySlot(enum Slot);// 0x3e8ec8c
	Weapon* GetWeaponTargetByItemID(int ItemID);// 0x3e8ec08
	Weapon* GetWeaponTargetByInstanceID(int InstanceID);// 0x3e8eb84
	ApgameWeaponCoreComponent* GetWeaponCoreCompByUISlot(enum InUISlot);// 0x3e8ad40
	ApgameWeaponCoreComponent* GetWeaponCoreCompByDataSlot(enum InDataSlot);// 0x3e8aba4
	ShootWeapon* GetWeaponByDataSlot(enum InDataSlot);// 0x3e8ab20
	ShootWeapon* GetUsingWeapon();// 0x3e8aaec
	bool GetUseThermal();// 0x3e8a6cc
	enum GetUISlotByDataSlot(enum InDataSlot);// 0x3e8acb4
	FName GetTargetBackSlot(Weapon* Weapon);// 0x3e8db10
	float GetSwitchTotalTime();// 0x3e8dac8
	ParticleSystem* GetParticleTemplate();// 0x3e8a59c
	OBEffectBullet*[] GetOBEffectBulletCacheList();// 0x3e8c514
	bool GetNeedSwitchIcon();// 0x3e8ca30
	ShootWeapon* GetLastUseMainWeapon();// 0x3e8aa84
	enum GetLastUseMainUISlot();// 0x3e8aab8
	bool GetFirePrepareShooting();// 0x3e8c3b8
	bool GetFirePreparePressing();// 0x3e8c3f0
	int GetEquipScopeMaxSight();// 0x3e8add8
	enum GetDataSlotByUISlot(enum InUISlot);// 0x3e8ac28
	enum GetCurrentUsingWeaponSlot();// 0x3e8e21c
	Weapon* GetCurrentUsingWeapon();// 0x3e8e1cc
	enum GetCurrentUsingDataSlot();// 0x3e8e200
	ShootWeaponBullet*[] GetBulletCacheList();// 0x3e8c864
	bool GetAutoFireShooting();// 0x3e8c160
	bool GetAutoEnterAim();// 0x3e8bbf8
	AutoEffectBullet*[] GetAutoEffectBulletCacheList();// 0x3e8c6bc
	Weapon*[] GetAllWeaponTargetList();// 0x3e8eb00
	ProxyActorWeaponData[] GetAllWeaponProxyData();// 0x3e8ea7c
	void GetAimShootConfigByAutoShooting(out bool bNeedAim, out float ShootDelayTime);// 0x3e8bc14
	enum GetADefaultWeaponSlot();// 0x3e8c970
	void GenerateFakeHitEffect(ParticleSystem* Template);// 0x3e8a5d0
	void ForceBackpackWeapon(Weapon* InWeapon);// 0x3e8d040
	void EnterFireChangeStageSingle(bool bPress, bool bNeedAim, bool bNeedCloseAim, float ShootDelayTime);// 0x3e8bcf0
	void CreateFakeHitEffectPool();// 0x3e8a574
	void ClientSwitchWeapon(enum Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, double SwitchTime);// 0x3e8b160
	void ClientSaveSwitchData(enum Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, double NowTime);// 0x3e8af24
	void ClientRemoveConfirmedData(double RemoveTime);// 0x3e8b0e4
	void ClientMainHandStackChanged(HandStateData HandStateData, bool bPush);// 0x3e8ca74
	void ClientBackpackWeapon(Weapon* ShootWeapon);// 0x3e8d0bc
	void ClearPool();// 0x3e8a560
	void CheckAutoRunGunState(enum curPawnState, bool bIsEnter);// 0x3e8cf78
	void ChangeUseWeaponSlotEvent__DelegateSignature(enum InOld, enum InNew);// 0x43841ec
	void CalSwitchProcess();// 0x3e8dafc
	void BeginClientAccounting();// 0x3e8e5b8
	void AddToOBBulletCacheList(OBEffectBullet* NewBullet);// 0x3e8c428
	void AddToBulletCacheList(ShootWeaponBullet* NewBullet);// 0x3e8c778
	void AddToAutoEffectBulletCacheList(AutoEffectBullet* NewBullet);// 0x3e8c5d0

--------------------------------
Class: ApgameWeaponAttributeSetInitialDataHandle

--------------------------------
Class: WeaponTransformConfig
	int ID;//[Offset: 0x0, Size: 0x4]
	float TPPAO;//[Offset: 0x4, Size: 0x4]
	Vector TPPOffsetHand;//[Offset: 0x8, Size: 0xc]
	<enum,Transform> TPPTransformsMap;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: SimuWeaponFollow
	bool bWeaponMainFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bWeaponAttachFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: WeaponBallisticInfo

--------------------------------
Class: SwitchWeaponParamter
	enum TargetSlot;//[Offset: 0x0, Size: 0x1]
	bool bNeedAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	enum CurrentSlot;//[Offset: 0x2, Size: 0x1]
	bool bNeedPop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	byte RepIndex;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: ShootWeaponBullet.SignificanceManagedActor.Actor.Object
	Color DebugBulletTraceColor;//[Offset: 0x270, Size: 0x4]
	Color DebugBulletSphereColor;//[Offset: 0x274, Size: 0x4]
	float DebugBulletTraceTime;//[Offset: 0x278, Size: 0x4]
	float DebugBulletTraceInterval;//[Offset: 0x27c, Size: 0x4]
	int DebugBulletSphereSegments;//[Offset: 0x280, Size: 0x4]
	ShootWeapon* OwningShootWeapon;//[Offset: 0x290, Size: 0x8]
	ApexCharacter* InstigatorCharacter;//[Offset: 0x2b8, Size: 0x8]
	BulletMovementComponent* PMComp;//[Offset: 0x2c0, Size: 0x8]
	SphereComponent* SphereComp;//[Offset: 0x2c8, Size: 0x8]
	Vector ShootDir;//[Offset: 0x2d0, Size: 0xc]
	CurveFloat* DistanceScaleCurve;//[Offset: 0x340, Size: 0x8]
	delegate OnBulletImpact;//[Offset: 0x358, Size: 0x10]
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0x43841ec
	void OnImpact(out const HitResult _ImpactResult);// 0x3d88bf4
	ApexCharacter* GetInstigatorCharacter();// 0x3d88ca4

--------------------------------
Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 0x1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3, Size: 0x1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x1f8, Size: 0x8]
	void ResumeMoveAfterImpactWithNoLost();// 0x3af5450
	void ResetTickDelay();// 0x3af5438
	void ForceStop();// 0x3af5464

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0x12c, Size: 0x4]
	float MaxSpeed;//[Offset: 0x130, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x134, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x134, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x134, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x134, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x134, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x134, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x134, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x134, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x135, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x135, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x135, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x135, Size: 0x1]
	float PreviousHitTime;//[Offset: 0x138, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0x13c, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x148, Size: 0x4]
	float Buoyancy;//[Offset: 0x14c, Size: 0x4]
	float Bounciness;//[Offset: 0x150, Size: 0x4]
	float Friction;//[Offset: 0x154, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x158, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x15c, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x160, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x170, Size: 0x10]
	float HomingAccelerationMagnitude;//[Offset: 0x180, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x184, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x18c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x190, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x194, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x198, Size: 0x4]
	float InterpRotationTime;//[Offset: 0x19c, Size: 0x4]
	float InterpLocationMaxLagDistance;//[Offset: 0x1a0, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x1a4, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0x6053f68
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x6054018
	void SetInterpolatedComponent(SceneComponent* Component);// 0x6053ee4
	void ResetInterpolation();// 0x6053de4
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x43841ec
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x43841ec
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x6053e00
	Vector LimitVelocity(Vector NewVelocity);// 0x6053d28
	bool IsVelocityUnderSimulationThreshold();// 0x605409c
	bool IsInterpolationComplete();// 0x6053db8

--------------------------------
Class: AutoEffectBullet.SignificanceManagedActor.Actor.Object
	ParticleSystem* CurFXTemplate;//[Offset: 0x278, Size: 0x8]
	ParticleSystem* LastFXTemplate;//[Offset: 0x280, Size: 0x8]
	float CurMovingTime;//[Offset: 0x28c, Size: 0x4]
	float CurRemainTime;//[Offset: 0x290, Size: 0x4]
	float CurBulletSpeed;//[Offset: 0x294, Size: 0x4]
	Vector StartPos;//[Offset: 0x298, Size: 0xc]
	Vector EndPos;//[Offset: 0x2a4, Size: 0xc]
	ShootWeaponBullet* TracedTrueBullet;//[Offset: 0x2d0, Size: 0x8]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x2d8, Size: 0x8]
	ActorComponent*[] FXComps;//[Offset: 0x2e0, Size: 0x10]
	void OnTrueBulletHit(HitResult HitInfo);// 0x3a96980

--------------------------------
Class: ApgameWeaponSlotMap
	bool bSwapped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ProxyActorWeaponData
	ItemDefineID WeaponID;//[Offset: 0x0, Size: 0x10]
	enum WeaponSaveSlot;//[Offset: 0x10, Size: 0x1]
	int WeaponSkinID;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SiglePingInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	int PingType;//[Offset: 0x4, Size: 0x4]
	int DingType;//[Offset: 0x8, Size: 0x4]
	int FromType;//[Offset: 0xc, Size: 0x4]
	uint64 CreateTime;//[Offset: 0x10, Size: 0x8]
	uint32 SourcePlayerID;//[Offset: 0x18, Size: 0x4]
	uint32 ReservePlayerID;//[Offset: 0x1c, Size: 0x4]
	Vector SourcePosition;//[Offset: 0x20, Size: 0xc]
	FString PlayerName;//[Offset: 0x30, Size: 0x10]
	int TeamColor;//[Offset: 0x40, Size: 0x4]
	bool bIsTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	int ItemID;//[Offset: 0x48, Size: 0x4]
	uint64 ItemUUID;//[Offset: 0x50, Size: 0x8]
	int ItemDeriveID;//[Offset: 0x58, Size: 0x4]
	Actor* ReferenceActor;//[Offset: 0x5c, Size: 0x8]
	PrimitiveComponent* PriComp;//[Offset: 0x64, Size: 0x8]
	Vector PositionOffset;//[Offset: 0x6c, Size: 0xc]
	bool IsEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	uint32 SkillOwnerPlayerKey;//[Offset: 0x7c, Size: 0x4]
	FString SkillOwnerPlayerName;//[Offset: 0x80, Size: 0x10]
	enum ReportType;//[Offset: 0x90, Size: 0x1]
	bool IsItemAutoMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]
	bool IsAutoMarkEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 0x1]
	bool bSkillAutoMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93, Size: 0x1]
	float SkillCooling;//[Offset: 0x94, Size: 0x4]
	uint32 MapFlagsPlayerKey;//[Offset: 0x98, Size: 0x4]
	bool bIsRecommendItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	bool bIsPingThroughBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 0x1]

--------------------------------
Class: BlackMarketPickUpWrapperResult.SearchedPickUpWrapperResult
	SearchedPickUpWrapperResult[] PickUpList;//[Offset: 0x88, Size: 0x10]
	int ItemQuality;//[Offset: 0x98, Size: 0x4]
	enum GroupType;//[Offset: 0x9c, Size: 0x1]
	bool bShowAsGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 0x1]
	bool bIsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e, Size: 0x1]
	int AmmoNumInClip;//[Offset: 0xa0, Size: 0x4]
	LobaBlackMarket* BlackMarket;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: ViewAssistParamInfo
	bool OnlyEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool ContainDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool OnlyVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]

--------------------------------
Class: SkillActorDelayShowTime
	float FPPDelayShowTime;//[Offset: 0x0, Size: 0x4]
	float TPPDelayShowTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BuffAffectedActorData
	Actor* BuffActor;//[Offset: 0x0, Size: 0x8]
	float DeltaTime;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: RespawnFlowData
	uint32 Rescuer;//[Offset: 0x0, Size: 0x4]
	byte ReviveFrom;//[Offset: 0x4, Size: 0x1]
	FString SecReportData;//[Offset: 0x8, Size: 0x10]
	int64 ClientStartTime;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: DeathRagDollParams
	float MassInKg;//[Offset: 0x0, Size: 0x4]
	float LinearSpeed;//[Offset: 0x4, Size: 0x4]
	float MaxLinearSpeed;//[Offset: 0x8, Size: 0x4]
	float AngularSpeed;//[Offset: 0xc, Size: 0x4]
	float MaxAngularSpeed;//[Offset: 0x10, Size: 0x4]
	float GravityAlpha;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: UseReplicatorAnimMontageData
	AnimMontage* AnimMontage_FPP;//[Offset: 0x0, Size: 0x28]
	AnimMontage* AnimMontage_TPP;//[Offset: 0x28, Size: 0x28]

--------------------------------
Class: CharacterComponentCreateData
	bool bCreateOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bTickOnDS;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCreateOnAutonomous;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bTickOnAutonomous;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCreateOnSimulated;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bTickOnSimulated;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	class ActorComponent* ComponentClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameModeReSpawn.ActorComponent.Object
	TimerHandle TimerHandle;//[Offset: 0xf0, Size: 0x8]
	int ReSpawnNumber;//[Offset: 0xf8, Size: 0x4]
	bool TeamReSpawnMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	int64 TimeBox;//[Offset: 0x100, Size: 0x8]
	void ReSpawnTimer();// 0x3bc4950
	void OnGameStart();// 0x3bc4964

--------------------------------
Class: Workbench.Actor.Object
	bool IsSideOpening1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	bool IsSideOpening2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1]
	bool IsSideOpening3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c2, Size: 0x1]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x2c8, Size: 0x8]
	delegate OnWorkbenchStateChange;//[Offset: 0x2d0, Size: 0x10]
	FString LinkGuid;//[Offset: 0x2e0, Size: 0x10]
	HarvesterActor*[] SubHarvesterActorArray;//[Offset: 0x2f0, Size: 0x10]
	SkeletalMeshComponent* Mesh;//[Offset: 0x300, Size: 0x8]
	ParticleSystemComponent* HeadIcon;//[Offset: 0x308, Size: 0x8]
	ParticleSystemComponent* ReplicateCompleteLight;//[Offset: 0x310, Size: 0x8]
	ParticleSystemComponent* SdieSmoke1;//[Offset: 0x318, Size: 0x8]
	ParticleSystemComponent* SdieSmoke2;//[Offset: 0x320, Size: 0x8]
	ParticleSystemComponent* SdieSmoke3;//[Offset: 0x328, Size: 0x8]
	ParticleSystemComponent* SdieWindowLight1;//[Offset: 0x330, Size: 0x8]
	ParticleSystemComponent* SdieWindowLight2;//[Offset: 0x338, Size: 0x8]
	ParticleSystemComponent* SdieWindowLight3;//[Offset: 0x340, Size: 0x8]
	BoxComponent* CheckBox1;//[Offset: 0x348, Size: 0x8]
	BoxComponent* CheckBox2;//[Offset: 0x350, Size: 0x8]
	BoxComponent* CheckBox3;//[Offset: 0x358, Size: 0x8]
	BoxComponent* CheckBox1;//[Offset: 0x360, Size: 0x8]
	BoxComponent* CheckBox2;//[Offset: 0x368, Size: 0x8]
	BoxComponent* CheckBox3;//[Offset: 0x370, Size: 0x8]
	SceneComponent* OperatingPoint1;//[Offset: 0x378, Size: 0x8]
	SceneComponent* OperatingPoint2;//[Offset: 0x380, Size: 0x8]
	SceneComponent* OperatingPoint3;//[Offset: 0x388, Size: 0x8]
	int MiniMapIndex;//[Offset: 0x390, Size: 0x4]
	bool CanReplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 0x1]
	enum WorkbenchType;//[Offset: 0x39c, Size: 0x1]
	float MeshAnimationTime;//[Offset: 0x3a0, Size: 0x4]
	float NormalMashInterval;//[Offset: 0x3a4, Size: 0x4]
	<int,int> PlayerKeySideMap;//[Offset: 0x3a8, Size: 0x50]
	CarePackageItemSocketDataAsset* RelicatorItemSocketDataAsset;//[Offset: 0x3f8, Size: 0x8]
	FName ReplicateEffectColorParamName;//[Offset: 0x400, Size: 0x8]
	<int,Vector> ReplicateEffectColorConfig;//[Offset: 0x408, Size: 0x50]
	UseAngleConfigData[] UseAngleConfig;//[Offset: 0x458, Size: 0x10]
	int ReplicatorSideIndex1;//[Offset: 0x468, Size: 0x4]
	int ReplicatorSideIndex2;//[Offset: 0x46c, Size: 0x4]
	int ReplicatorSideIndex3;//[Offset: 0x470, Size: 0x4]
	<int,Vector> ReplicateEffectUIPosConfig;//[Offset: 0x478, Size: 0x50]
	float PlayerCanInteractionDistSqr;//[Offset: 0x4c8, Size: 0x4]
	float PlayerCanInteractionHight;//[Offset: 0x4cc, Size: 0x4]
	float ReplicateTime;//[Offset: 0x4d0, Size: 0x4]
	float ReplicateLimitPlayerTime;//[Offset: 0x4d4, Size: 0x4]
	int BtnGuideID;//[Offset: 0x4d8, Size: 0x4]
	enum[] DisableOpenPawnStates;//[Offset: 0x4e0, Size: 0x10]
	AkComponent* OwnedAudioEffectManager;//[Offset: 0x4f0, Size: 0x8]
	AkAudioEvent* LoopSound;//[Offset: 0x4f8, Size: 0x28]
	AkAudioEvent* DoorOpenSound;//[Offset: 0x520, Size: 0x28]
	AkAudioEvent* DoorCloseSound;//[Offset: 0x548, Size: 0x28]
	AkAudioEvent* ReplicateStartSound;//[Offset: 0x570, Size: 0x28]
	AkAudioEvent* ReplicateCompleteSound;//[Offset: 0x598, Size: 0x28]
	AkAudioEvent* ReplicateWarningToEnd;//[Offset: 0x5c0, Size: 0x28]
	float TimeToEndWaring;//[Offset: 0x5e8, Size: 0x4]
	bool bShowBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec, Size: 0x1]
	bool IsOperatingSide1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ed, Size: 0x1]
	bool IsOperatingSide2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ee, Size: 0x1]
	bool IsOperatingSide3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ef, Size: 0x1]
	ReplicatingRepStateData ReplicatingStateSide1;//[Offset: 0x5f0, Size: 0x8]
	ReplicatingRepStateData ReplicatingStateSide2;//[Offset: 0x5f8, Size: 0x8]
	ReplicatingRepStateData ReplicatingStateSide3;//[Offset: 0x600, Size: 0x8]
	TimerHandle SideReplicateTimer1;//[Offset: 0x608, Size: 0x8]
	TimerHandle SideReplicateTimer2;//[Offset: 0x610, Size: 0x8]
	TimerHandle SideReplicateTimer3;//[Offset: 0x618, Size: 0x8]
	TimerHandle SideSoundTimer1;//[Offset: 0x620, Size: 0x8]
	TimerHandle SideSoundTimer2;//[Offset: 0x628, Size: 0x8]
	TimerHandle SideSoundTimer3;//[Offset: 0x630, Size: 0x8]
	<uint64,int> WorkbenchItemSideCacheMap;//[Offset: 0x638, Size: 0x50]
	<int,int> WorkbenchSideItemCount;//[Offset: 0x688, Size: 0x50]
	<int,int> WorkbenchSignMap;//[Offset: 0x6d8, Size: 0x50]
	AudioEventAsync* AudioEventSide1;//[Offset: 0x728, Size: 0x8]
	AudioEventAsync* AudioEventSide2;//[Offset: 0x730, Size: 0x8]
	AudioEventAsync* AudioEventSide3;//[Offset: 0x738, Size: 0x8]
	TimerHandle MeshTickIntervalToNormalHandle;//[Offset: 0x740, Size: 0x8]
	void ReplicateItems(const int InPlayerKey, const int SideIndex, const int[] Items, const bool IsShield, const int AppendExp);// 0x3ea4c78
	void PlayWaringToEndSound();// 0x3ea4e78
	void OnRep_RepOperatingSide3();// 0x3ea4ec8
	void OnRep_RepOperatingSide2();// 0x3ea4edc
	void OnRep_RepOperatingSide1();// 0x3ea4ef0
	void OnRep_ReplicatingStateSide3();// 0x3ea4e8c
	void OnRep_ReplicatingStateSide2();// 0x3ea4ea0
	void OnRep_ReplicatingStateSide1();// 0x3ea4eb4
	void OnPickUpBePicked(PickUpItemData InItemData, int InCount);// 0x3ea4a54

--------------------------------
Class: HarvesterActor.SignificanceManagedActor.Actor.Object
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x2e0, Size: 0x8]
	bool bIsHideMarkIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	FString LinkGuid;//[Offset: 0x308, Size: 0x10]
	SkeletalMeshComponent* Mesh;//[Offset: 0x318, Size: 0x8]
	CapsuleComponent* Capsule;//[Offset: 0x320, Size: 0x8]
	SphereComponent* CheckSphere;//[Offset: 0x328, Size: 0x8]
	SphereComponent* AutoCheckSphere;//[Offset: 0x330, Size: 0x8]
	AkComponent* OwnedAudioEffectManager;//[Offset: 0x338, Size: 0x8]
	bool CanExtract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	int MaterialNum;//[Offset: 0x344, Size: 0x4]
	float ServerCheckDist;//[Offset: 0x348, Size: 0x4]
	Vector UIFollowPos;//[Offset: 0x34c, Size: 0xc]
	int BtnGuideID;//[Offset: 0x358, Size: 0x4]
	int MiniMapIndex;//[Offset: 0x35c, Size: 0x4]
	enum[] DisableOpenPawnStates;//[Offset: 0x368, Size: 0x10]
	AnimationAsset* ExtractAnimation;//[Offset: 0x378, Size: 0x8]
	int[] ExtractPlayerKeys;//[Offset: 0x380, Size: 0x10]
	bool IsAutomousExtracted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	bool bShowBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 0x1]
	AkAudioEvent* LoopSound;//[Offset: 0x398, Size: 0x28]
	AkAudioEvent* ExtractSound;//[Offset: 0x3c0, Size: 0x28]
	void Reset();// 0x3c26660
	void OnRep_RepExtractPlayerKeys();// 0x3c2664c

--------------------------------
Class: CarePackageItemSocketDataAsset.DataAsset.Object
	<int,CarePackageSocketData> CarePackageSocketDataMap;//[Offset: 0x30, Size: 0x50]
	FName GetSocketName(int SlotIndex, int ItemID, int ItemIndex);// 0x3afc478

--------------------------------
Class: CarePackageSocketData
	FName DefaultSocket;//[Offset: 0x0, Size: 0x8]
	<int,CarePackageIndexToSocketName> ItemTypeToSocketData;//[Offset: 0x8, Size: 0x50]
	<int,CarePackageIndexToSocketName> ItemSubTypeToSocketData;//[Offset: 0x58, Size: 0x50]
	<int,CarePackageIndexToSocketName> ItemIDToSocketData;//[Offset: 0xa8, Size: 0x50]

--------------------------------
Class: CarePackageIndexToSocketName
	FName[] IndexToSocketName;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: UseAngleConfigData
	float StartAngle;//[Offset: 0x0, Size: 0x4]
	float EndAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ReplicatingRepStateData
	enum State;//[Offset: 0x0, Size: 0x1]
	int Level;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AudioEventAsync.AsyncLoaderBase.Object
	Actor* _RoleActor;//[Offset: 0x38, Size: 0x8]
	Actor* _AttachActor;//[Offset: 0x40, Size: 0x8]
	AkComponent* _AkComponent;//[Offset: 0x48, Size: 0x8]
	Object* _WorldContextObject;//[Offset: 0x70, Size: 0x8]
	void StopEvent();// 0x3a8ef70
	int GetPlayingID();// 0x3a8ef3c

--------------------------------
Class: RepBloodHoundHunting
	float HuntingDuration;//[Offset: 0x0, Size: 0x4]
	float HuntingEnterTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ApexCharacterAnimationComponent.ActorComponent.Object
	int CharacterAnimationID;//[Offset: 0x140, Size: 0x4]
	int LoadAnimDataAssetDistance;//[Offset: 0x144, Size: 0x4]
	AnimParamList CurAnimParamList;//[Offset: 0x158, Size: 0x74]
	float TurnInPlaceAngel;//[Offset: 0x1cc, Size: 0x4]
	delegate AnimMontagePlayDelegate;//[Offset: 0x1e0, Size: 0x10]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0x1f0, Size: 0x10]
	delegate OnPlayerPoseChange;//[Offset: 0x200, Size: 0x10]
	delegate PlayMontageByCameraMode;//[Offset: 0x210, Size: 0x10]
	delegate OnPlayCharacterMontage;//[Offset: 0x220, Size: 0x10]
	delegate OnPlayCharacterMontageFourParams;//[Offset: 0x230, Size: 0x10]
	delegate OnPlayCharacterMontageFiveParams;//[Offset: 0x240, Size: 0x10]
	delegate PlayAnimMontageDelegate;//[Offset: 0x250, Size: 0x10]
	delegate StopAnimMontageByAnimTypeAndLayer;//[Offset: 0x260, Size: 0x10]
	float SwitchPoseCDTime;//[Offset: 0x270, Size: 0x4]
	bool bUseBaseBSTransitionFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	bool bUseBaseBSTransitionTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 0x1]
	bool bAnimForceInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x276, Size: 0x1]
	bool bAnimForceInFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x277, Size: 0x1]
	<AnimSequenceBase*,AnimSeqList> AnimSoundSeqMap;//[Offset: 0x280, Size: 0x50]
	ApexCharacter* ApexCharacter;//[Offset: 0x2d8, Size: 0x8]
	byte TryPopMovementMode();// 0x3996e40
	void SetRuntimeAnimPlayScaleBySkillType(enum SkillHandType, float RateScale);// 0x3996d80
	void SetRuntimeAnimPlayScaleByAnimType(byte AnimType, float RateScale);// 0x3996cc0
	byte PopMovementMode();// 0x3996e74
	void OnWeaponStartFire(Weapon* InWeapon);// 0x39972b4
	void OnPoseChanged(enum PrevState, enum NewState);// 0x3997598
	void OnPawnStateLeave(enum LeavedState);// 0x39974a0
	void OnPawnStateEnter(enum EnteredState);// 0x399751c
	void OnPawnStateChanged(enum[] StatesMoreThanOld, enum[] StatesLessThanOld);// 0x3997330
	float GetRuntimeAnimPlayScaleBySkillType(enum SkillHandType);// 0x3996bb8
	float GetRuntimeAnimPlayScale(byte AnimType);// 0x3996c3c
	byte GetPlayerJumpType(bool IsMoveBack);// 0x39971ec
	bool GetInArmedAnimation();// 0x3997028
	byte GetCharacterPoseType();// 0x3997278
	void EnableUseBaseBSTransition(bool bEnable);// 0x3997168
	void EnableAnimForceInFalling(bool bEnable);// 0x3997060
	void EnableAnimForceInAir(bool bEnable);// 0x39970e4
	void ClearSoundSeqByAnim(AnimSequenceBase* Anim);// 0x3996ea8
	void AddAnimSoundMap(AnimSequenceBase* Anim, int SoundSeq, ApexAnimNotifySoundSetting* SoundSetting);// 0x3996f24

--------------------------------
Class: AnimParamList
	float ClimbOverStartRate;//[Offset: 0x0, Size: 0x4]
	bool IsDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool ScopeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool ScopeOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool IsLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool IsLandingLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool IsLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool IsSlidingToAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool IsAirToSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	float ParachuteTurnInput;//[Offset: 0xc, Size: 0x4]
	float ParachuteForwardInput;//[Offset: 0x10, Size: 0x4]
	Vector LastLocation;//[Offset: 0x14, Size: 0xc]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool ImmediatelyKnockdownPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	byte SkillAnimHandType;//[Offset: 0x23, Size: 0x1]
	bool SkillAnimHandPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	enum DeadAnimType;//[Offset: 0x25, Size: 0x1]
	enum AnimRescueType;//[Offset: 0x26, Size: 0x1]
	float RescueAnimPlayRate;//[Offset: 0x28, Size: 0x4]
	BackpackSwitchGunAnimData BackpackSwitchGunAnimData;//[Offset: 0x2c, Size: 0xc]
	enum ClimbOverAnimType;//[Offset: 0x38, Size: 0x1]
	float ClimbAnimVelocity;//[Offset: 0x3c, Size: 0x4]
	Vector HangingPosition;//[Offset: 0x40, Size: 0xc]
	bool bIsBeFinisherStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bInArmedAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bSlideAlongSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	bool bOnSwitchThrowMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 0x1]
	bool bDefuseBombSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	Vector GrapplingAimDirection;//[Offset: 0x54, Size: 0xc]
	float Significance;//[Offset: 0x60, Size: 0x4]
	byte JumpType;//[Offset: 0x64, Size: 0x1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	bool StateEnterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]

--------------------------------
Class: BackpackSwitchGunAnimData
	float Duration;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0x4, Size: 0x4]
	bool bPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: AnimSeqList
	AnimSeqData[] AnimSoundSeqList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSeqData
	int SoundSeq;//[Offset: 0x0, Size: 0x4]
	ApexAnimNotifySoundSetting* SoundSetting;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PickupTipActor.Actor.Object
	PickupTipWidgetComponent* TipWidgetComp;//[Offset: 0x250, Size: 0x8]
	ParticleSystemComponent* TipParticleSystemComp;//[Offset: 0x258, Size: 0x8]
	ParticleSystem* PS1;//[Offset: 0x260, Size: 0x8]
	ParticleSysParam ParticleSysParam1;//[Offset: 0x270, Size: 0x80]
	ParticleSysParam ParticleSysParam2;//[Offset: 0x2f0, Size: 0x80]
	ParticleSysParam ParticleSysParam3;//[Offset: 0x370, Size: 0x80]
	ParticleSysParam ParticleSysParam4;//[Offset: 0x3f0, Size: 0x80]
	ParticleSysParam ParticleSysParam5;//[Offset: 0x470, Size: 0x80]
	Vector AutonomousPickupTipOffset;//[Offset: 0x4f0, Size: 0xc]
	Vector SimulatedPickupTipOffset;//[Offset: 0x4fc, Size: 0xc]
	float PlayPickupTipTimes;//[Offset: 0x508, Size: 0x4]
	float PlayPickupTipInterval;//[Offset: 0x50c, Size: 0x4]
	bool bSwitchRollPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]
	bool bSwitchRollYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511, Size: 0x1]
	bool bSwitchPitchYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x512, Size: 0x1]
	bool bUseRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x513, Size: 0x1]
	bool bUsePitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 0x1]
	bool bUseYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x515, Size: 0x1]
	bool bUseCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x516, Size: 0x1]
	Rotator ExtraRotation;//[Offset: 0x518, Size: 0xc]
	Rotator CorrectRotation;//[Offset: 0x524, Size: 0xc]
	ApexCharacter* pOwner;//[Offset: 0x530, Size: 0x8]
	void PickupTipPlayEnd();// 0x3d150c4
	void PickupTipIntervalEnd();// 0x3d150b0

--------------------------------
Class: PickupTipWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: PickupTipInfo
	byte UniqueID;//[Offset: 0x0, Size: 0x1]
	int ItemID;//[Offset: 0x4, Size: 0x4]
	int DriverID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: EnmityEntity.ActorComponent.Object
	SyncEnmityInfo[] SynEnmityList;//[Offset: 0xf0, Size: 0x10]
	<Actor*,EnmityRealTimeInfo> m_EnmityMap;//[Offset: 0x120, Size: 0x50]
	void SyncTestClient();// 0x3b87490
	void OnRep_EnmityList();// 0x3b8747c
	void EnableServerLog(bool bEnableServerLog);// 0x3b874ac
	void EnableClientLog(bool bEnableClientLog);// 0x3b87538
	void ClientLeaveBattle();// 0x3b873d8
	void ClientEnterBattle(const SyncEnmityInfo SyncEnmityInfo);// 0x3b873f4

--------------------------------
Class: SyncEnmityInfo
	int64 ID;//[Offset: 0x0, Size: 0x8]
	Actor* Target;//[Offset: 0x8, Size: 0x8]
	float EnmityValue;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: EnmityRealTimeInfo
	EnmityInfo EnmityInfo;//[Offset: 0x0, Size: 0x20]
	EnmityTableInfo EnmityTableInfo;//[Offset: 0x20, Size: 0x20]
	float EnmityValue;//[Offset: 0x40, Size: 0x4]
	float ElpaseTime;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: EnmityInfo
	int EEnmityType;//[Offset: 0x0, Size: 0x4]
	int SubID;//[Offset: 0x4, Size: 0x4]
	bool Initiative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	Actor* Target;//[Offset: 0xc, Size: 0x8]
	float Distance;//[Offset: 0x14, Size: 0x4]
	float DamageNumber;//[Offset: 0x18, Size: 0x4]
	bool bShootNone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: EnmityTableInfo
	int64 ID;//[Offset: 0x0, Size: 0x8]
	int EEnmityType;//[Offset: 0x8, Size: 0x4]
	int SubID;//[Offset: 0xc, Size: 0x4]
	bool Initiative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float SrourceCoefficient;//[Offset: 0x14, Size: 0x4]
	float ClosePickupList_Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: RecoverPropComponent.ActorComponent.Object
	<int,BaseRecoverPropItem*> RecoverPropItemMap;//[Offset: 0xf8, Size: 0x50]
	RecoverPropSyncInfo RecoverPropSyncInfo;//[Offset: 0x148, Size: 0x10]
	bool UseItem(int ItemID);// 0x3d5c618
	void RPCServerRecoverProp(int InGUID, int ItemID, float StartTimestamp, enum ERecoverPropUseType, bool bContinuous);// 0x3d5bdec
	void RPCServerEnableLog(bool bEnableLog);// 0x3d5c518
	void RPCServer_RemoveBuff(RecoverPropBuffInfo BuffInfo);// 0x3d5c328
	void RPCServer_AddBuff(RecoverPropBuffInfo BuffInfo);// 0x3d5c420
	void RPCClientEndRecoverProp(int InGUID, int ItemID, enum ERecoverPropUseType, bool bCancel, bool bCanContinue, const enum[] ErrorCodeList);// 0x3d5bbe8
	void RemoveBuff(out const RecoverPropBuffInfo BuffInfo);// 0x3d5c1e8
	void OnRep_RecoverPropUpdate();// 0x3d5c5b8
	void OnItemNumberChanaged(ItemDefineID DefineID, int State);// 0x3d5c118
	void OnHealthInfoChange(uint32 PlayerKey, enum SyncType, ApexCharacter* Character, ApexPlayerState* PlayerState, bool NeedFadeHealthIn);// 0x3d5bf88
	void OnAppEnterForeground();// 0x3d5bb44
	void InterruptRecoverProp();// 0x3d5c5a4
	void ClientStartFailed(const enum[] ErrorCodeList);// 0x3d5bb58
	void Cancel();// 0x3d5c604
	bool BP_IsRecoveringProp();// 0x3d5c5cc
	void AddBuff(out const RecoverPropBuffInfo BuffInfo);// 0x3d5c288

--------------------------------
Class: RecoverPropBuffInfo
	FString Tag;//[Offset: 0x0, Size: 0x10]
	int ItemID;//[Offset: 0x10, Size: 0x4]
	enum eBuffType;//[Offset: 0x14, Size: 0x1]
	float Value;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BaseRecoverPropItem.RecoverPropCommonBase.Object
	FString Desc;//[Offset: 0x28, Size: 0x10]
	bool CanContinueUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	enum RecoverPropPawnState;//[Offset: 0x39, Size: 0x1]
	BaseRecoverPropPhase*[] PhaseList;//[Offset: 0x40, Size: 0x10]
	BaseRecoverPropPhase* CancelPhase;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: RecoverPropCommonBase.Object

--------------------------------
Class: BaseRecoverPropPhase.RecoverPropCommonBase.Object
	float PhaseDuringTime;//[Offset: 0x28, Size: 0x4]
	BaseRecoverPropCondition*[] ConditionList;//[Offset: 0x30, Size: 0x10]
	BaseRecoverPropAction*[] ActionList;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: BaseRecoverPropCondition.RecoverPropCommonBase.Object
	bool IsNot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum[] ErrorCodeList;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: BaseRecoverPropAction.RecoverPropCommonBase.Object
	enum ERecoverPropExecuteEnd;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: RecoverPropSyncInfo
	int UniqueID;//[Offset: 0x0, Size: 0x4]
	int ItemID;//[Offset: 0x4, Size: 0x4]
	float StartTimestamp;//[Offset: 0x8, Size: 0x4]
	enum ERecoverPropUseType;//[Offset: 0xc, Size: 0x1]
	bool bContinuous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: DeathTotem.SkillActorBase.DynamicMovementActor.Actor.Object
	float InitialHealth;//[Offset: 0x4f8, Size: 0x4]
	float CurrentHealth;//[Offset: 0x4fc, Size: 0x4]
	RepDeathTotemDamageEvent TotemDamageEvent;//[Offset: 0x500, Size: 0x10]
	bool InteractionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x510, Size: 0x1]
	bool AutonomousPlayerInInteractRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x510, Size: 0x1]
	bool ProtectionEffectCleared;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x510, Size: 0x1]
	float ProtectionDuration;//[Offset: 0x514, Size: 0x4]
	bool EnableRangeCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]
	float RangeCheckRadius;//[Offset: 0x51c, Size: 0x4]
	float RangeCheckBuffKeepPeriod;//[Offset: 0x520, Size: 0x4]
	float InteractRangeRadius;//[Offset: 0x524, Size: 0x4]
	ApexSkillInteractiveParam* ApexSkillInteractiveParam;//[Offset: 0x528, Size: 0x8]
	ApexCharacterReviveInfo[] ReviveList;//[Offset: 0x5d8, Size: 0x10]
	int BackCount;//[Offset: 0x5e8, Size: 0x4]
	float BackHealthTotal;//[Offset: 0x5ec, Size: 0x4]
	int TeammateEnableCount;//[Offset: 0x5f0, Size: 0x4]
	int EnemyEnableCount;//[Offset: 0x5f4, Size: 0x4]
	void SuggestProtectionForLocalPlayer(ApexCharacter* Player, bool SuggestEnable);// 0x3b5f2a0
	void ServerSwitchTotemProtection(ApexCharacter* Player, bool EnableProtection);// 0x3b5f368
	void ReportDeathTotem();// 0x3b5f138
	void OnRep_TotemDamageEvent();// 0x3b5f160
	void OnRep_CharacterReviveList();// 0x3b5f14c
	void OnDeathTotemOffProtectionByDamage(float RecordedHealth);// 0x3b5f0bc
	bool InPlayerSight(ApexCharacter* Player);// 0x3b5f174
	bool HasEverProtected(const ApexCharacter* Player);// 0x3b5f204
	void ClearProtectionEffect();// 0x3b5f28c
	void BP_OnFinish();// 0x43841ec
	void BP_OnDisconnectPlayer(ApexCharacter* Player);// 0x43841ec
	void BP_OnConnectPlayer(ApexCharacter* Player);// 0x43841ec
	void BP_OnCharacterReviveListUpdate();// 0x43841ec
	void BP_OnBeingDamaged(int DamageType, Pawn* Attacker, bool IsFatal);// 0x43841ec

--------------------------------
Class: RepDeathTotemDamageEvent
	byte ReplicationCounter;//[Offset: 0x0, Size: 0x1]
	bool IsFatal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	byte DamageType;//[Offset: 0x2, Size: 0x1]
	float Damage;//[Offset: 0x4, Size: 0x4]
	Pawn* Attacker;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ApexSkillInteractiveParam.SkillEventParam.Object
	bool bCheckBlocking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	byte CheckBlockingChannel;//[Offset: 0x61, Size: 0x1]
	class Object[] CheckBlockingIgnoreClass;//[Offset: 0x68, Size: 0x10]
	enum[] InvalidPawnStateArray;//[Offset: 0x78, Size: 0x10]
	bool bCheckHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float MaxHeightDiffFPP;//[Offset: 0x8c, Size: 0x4]
	float MaxHeightDiffTPP;//[Offset: 0x90, Size: 0x4]
	bool bCheckDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	float MaxDistanceFPP;//[Offset: 0x98, Size: 0x4]
	float MaxDistanceTPP;//[Offset: 0x9c, Size: 0x4]
	bool bMaxDistanceIgnoreZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bCheckFacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	bool bCheckFacingNoPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 0x1]
	float MaxInteractiveAngleFPP;//[Offset: 0xa4, Size: 0x4]
	float MaxInteractiveAngleTPP;//[Offset: 0xa8, Size: 0x4]
	Vector TargetInteractiveOffset;//[Offset: 0xac, Size: 0xc]
	Vector TargetInteractiveOffsetOnCrouch;//[Offset: 0xb8, Size: 0xc]
	bool bUseMeshRotationWhenTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	bool bDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]
	bool ShouldStartInteractive(ApexCharacter* Character, Actor* PassiveActor);// 0x3a2a098

--------------------------------
Class: ApexCharacterReviveInfo
	ApexCharacter* RevivePlayer;//[Offset: 0x0, Size: 0x8]
	DeathTotem* DeathTotem;//[Offset: 0x8, Size: 0x8]
	bool ReviveInfoValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool RecordedIsCrouching;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	float ReviveInfoValidEndTime;//[Offset: 0x14, Size: 0x4]
	float RecordedHealth;//[Offset: 0x18, Size: 0x4]
	float RecordedSpeed;//[Offset: 0x1c, Size: 0x4]
	Vector ReviveLocation;//[Offset: 0x20, Size: 0xc]
	Quat ReviveQuatRotation;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: VoidDoorActor.SkillActorBase.DynamicMovementActor.Actor.Object
	float MaxRiftPoint;//[Offset: 0x4e0, Size: 0x4]
	float RiftPointPerMeter;//[Offset: 0x4e4, Size: 0x4]
	float EffectiveSquaredDistance;//[Offset: 0x4e8, Size: 0x4]
	float PathMaxDistance;//[Offset: 0x4ec, Size: 0x4]
	float RecordInterval;//[Offset: 0x4f0, Size: 0x4]
	float EfficientDelay;//[Offset: 0x4f4, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x4f8, Size: 0x4]
	float StandCapsuleHalfHeight;//[Offset: 0x4fc, Size: 0x4]
	float CrouchCapsuleHalfHeight;//[Offset: 0x500, Size: 0x4]
	Vector StandCapsuleOffset;//[Offset: 0x504, Size: 0xc]
	Vector CrouchCapsuleOffset;//[Offset: 0x510, Size: 0xc]
	float RemainRiftPoint;//[Offset: 0x520, Size: 0x4]
	enum RecordStatus;//[Offset: 0x524, Size: 0x1]
	bool bHasValidPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 0x1]
	float PathMoveTime;//[Offset: 0x528, Size: 0x4]
	RecordPathNodeData[] PathList;//[Offset: 0x530, Size: 0x10]
	RecordPathNodeData[] TempPathList;//[Offset: 0x540, Size: 0x10]
	CapsuleComponent* StartRift;//[Offset: 0x550, Size: 0x8]
	CapsuleComponent* EndRift;//[Offset: 0x558, Size: 0x8]
	float EfficientDelayTime;//[Offset: 0x560, Size: 0x4]
	ApexCharacter* OwnerCharacter;//[Offset: 0x568, Size: 0x8]
	ApexCharacterMovementComponent* OwnerCMC;//[Offset: 0x570, Size: 0x8]
	SkillModifierInfo OverrideStateSkillModifier;//[Offset: 0x578, Size: 0x28]
	CapsuleComponent* OwnerCapsuleComp;//[Offset: 0x5d0, Size: 0x8]
	VoidMover*[] EnteredMovers_Server;//[Offset: 0x5d8, Size: 0x10]
	float EnterInterval;//[Offset: 0x638, Size: 0x4]
	float EnterSameInterval;//[Offset: 0x63c, Size: 0x4]
	float MinMoveDuration;//[Offset: 0x640, Size: 0x4]
	float MaxMoveDuration;//[Offset: 0x644, Size: 0x4]
	float MoveSpeed;//[Offset: 0x648, Size: 0x4]
	float DirUpdateInterval;//[Offset: 0x64c, Size: 0x4]
	class VoidMover* VoidMoverTemplate;//[Offset: 0x650, Size: 0x8]
	float LifeDuration;//[Offset: 0x65c, Size: 0x4]
	float OutBlueCircleLifeDuration;//[Offset: 0x660, Size: 0x4]
	RadiationCircleStateComponent* CurCircleStateComp;//[Offset: 0x668, Size: 0x8]
	float BornDuration;//[Offset: 0x670, Size: 0x4]
	float OutBlueCircleDuration;//[Offset: 0x674, Size: 0x4]
	bool InBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 0x1]
	void StartRecordPath();// 0x3e5ac04
	void SetRemainRiftPoint(float inRemainRiftPoint);// 0x3e5ab4c
	void SetRecordStatus(enum inRecordStatus);// 0x3e5aaac
	void SetPathMoveTime(float inPathMoveTime);// 0x3e5a95c
	void SetHasValidPoint(bool inHasValidPoint);// 0x3e5a9fc
	void Rep_RemainRiftPoint();// 0x3e5a8c0
	void Rep_RecordStatus();// 0x3e5a8ac
	void RecordComplete();// 0x3e5a884
	void OnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0x3e5a5ac
	void OnRiftEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3e5a268
	void OnRiftBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3e5a3ac
	void OnRep_PathMoveTime();// 0x3e5a66c
	void OnRep_PathList();// 0x3e5a898
	bool HasValidPoint();// 0x3e5aa90
	RecordPathNodeData[] GetValidPath(RecordPathNodeData[] List);// 0x3e5a75c
	float GetRemainRiftPoint();// 0x3e5abd0
	enum GetRecordStatus();// 0x3e5ab30
	float GetPathMoveTime();// 0x3e5a9e0
	RecordPathNodeData[] GetPathList();// 0x3e5a8d4
	void CheckRecordStateCompleted();// 0x3e5abec
	bool CheckPointValid(Vector StartPoint, Vector EndPoint);// 0x3e5a68c
	void BP_SetRiftEffect(CapsuleComponent* Rift, const RecordPathNodeData NodeData);// 0x43841ec
	void BP_RecordSuccess();// 0x43841ec
	void BP_RecordFailure();// 0x43841ec
	void BP_OnBlueCircleStateChanged(bool InBlue);// 0x43841ec

--------------------------------
Class: RecordPathNodeData
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	bool WasCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: VoidMover.VoidActor.SkillActorBase.DynamicMovementActor.Actor.Object
	float SwitchModeLerpInTime;//[Offset: 0x53c, Size: 0x4]
	float SwitchModeLerpOutTime;//[Offset: 0x540, Size: 0x4]
	float BlockCollisionRadiusScale;//[Offset: 0x544, Size: 0x4]
	float BlockCollisionStandHalfHeightScale;//[Offset: 0x548, Size: 0x4]
	float BlockCollisionCrouchHalfHeightScale;//[Offset: 0x54c, Size: 0x4]
	Vector BlockCollisionRHeightOffset;//[Offset: 0x550, Size: 0xc]
	float RotateFactor;//[Offset: 0x55c, Size: 0x4]
	bool BacktrackIfBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]
	MovePathData MovePathData;//[Offset: 0x568, Size: 0x30]
	Actor*[] ActorsToIgnore;//[Offset: 0x640, Size: 0x10]
	void ServerUpdateCharacterLocation(const VoidMoveSynData SynData);// 0x3e5be00
	void OnTargetCharacterBeDestroyed();// 0x3e5bfbc
	void OnRep_MovePathData();// 0x3e5bfd0
	void OnOverridePawnStateChanged(enum State, enum NewOverrideState, enum PrevOverrideState);// 0x3e5beb8

--------------------------------
Class: VoidActor.SkillActorBase.DynamicMovementActor.Actor.Object
	bool bDoActionAtAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d1, Size: 0x1]
	FName PostProcessTemplate;//[Offset: 0x4d4, Size: 0x8]
	enum PostProcessSource;//[Offset: 0x4dc, Size: 0x1]
	class Actor* GhostingSpawnerTemplate;//[Offset: 0x4e0, Size: 0x8]
	bool bAutoSetCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 0x1]
	bool bLimitEnterInterval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 0x1]
	bool bCanSeeOtherInVoid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ea, Size: 0x1]
	bool bCanSeeOtherVoidInVoid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4eb, Size: 0x1]
	bool bClearComponentOverlaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 0x1]
	Actor* GhostingSpawner;//[Offset: 0x4f0, Size: 0x8]
	ApexCharacter* CacheEnterCharacter;//[Offset: 0x4fc, Size: 0x8]
	bool bHadEnterVoid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 0x1]
	void ExitVoid(ApexCharacter* Character);// 0x3e598bc
	void EnterVoid(ApexCharacter* Character);// 0x3e59940
	void DoClientCharacterMesh(ApexCharacter* Character, SkeletalMeshComponent* CharacterMesh, bool IsEnter);// 0x3e5960c
	void DoClientCameraEffect(ApexCharacter* Character, CameraComponent* CameraComponent, bool IsEnter);// 0x3e594fc
	void DoClientAction(ApexCharacter* Character, bool IsEnter);// 0x3e597ec
	void BP_DoClientAction(ApexCharacter* Character, bool IsEnter);// 0x3e5971c
	void AddTrackerForEnterTime(ApexCharacter* Character, float Time);// 0x3e5943c

--------------------------------
Class: VoidMoveSynData
	int CurPointIndex;//[Offset: 0x0, Size: 0x4]
	int NextPointIndex;//[Offset: 0x4, Size: 0x4]
	bool bArrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	Vector BlockLocation;//[Offset: 0xc, Size: 0xc]
	Rotator CurRotation;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: MovePathData
	ApexCharacter* TargetCharacter;//[Offset: 0x0, Size: 0x8]
	RecordPathNodeData[] MovePathList;//[Offset: 0x8, Size: 0x10]
	VoidDoorActor* OwnerDoor;//[Offset: 0x18, Size: 0x8]
	float PathMoveTime;//[Offset: 0x20, Size: 0x4]
	bool bReversal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	float MinMoveDuration;//[Offset: 0x28, Size: 0x4]
	float DirUpdateInterval;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: PropsWeaponFadeOutParams
	enum FadeOutReason;//[Offset: 0x0, Size: 0x1]
	float FadeOutTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BroadcastMsgData
	enum BroadcastMsgType;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: QueryPlayerInfo
	FString GameModeID;//[Offset: 0x0, Size: 0x10]
	float PlayTime;//[Offset: 0x10, Size: 0x4]
	Vector Position;//[Offset: 0x14, Size: 0xc]
	int LegendId;//[Offset: 0x20, Size: 0x4]
	FString CurrSkillIdsStr;//[Offset: 0x28, Size: 0x10]
	FString CurrPawnStatesStr;//[Offset: 0x38, Size: 0x10]
	FString CurrBuffIdsStr;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: ApexSentence.Object
	AkAudioEvent* WwiseEvent;//[Offset: 0x28, Size: 0x8]
	FText Subtitle;//[Offset: 0x30, Size: 0x18]
	float DurationFixedTime;//[Offset: 0x48, Size: 0x4]
	bool bEnableCustomDurationTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	float CustomDurationTime;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: MirageActor.Actor.Object
	enum MirageState;//[Offset: 0x271, Size: 0x1]
	float DefaultHealth;//[Offset: 0x274, Size: 0x4]
	float Health;//[Offset: 0x278, Size: 0x4]
	float FadeOutTime;//[Offset: 0x27c, Size: 0x4]
	float FadeInTime;//[Offset: 0x280, Size: 0x4]
	BoxComponent* DamageAreaComp;//[Offset: 0x288, Size: 0x8]
	SkeletalMeshComponent* SkeletonMeshComp;//[Offset: 0x290, Size: 0x8]
	bool bCanBeKilled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	AnimSequence* NormalSeq;//[Offset: 0x2a0, Size: 0x8]
	AnimSequence* PartySeq;//[Offset: 0x2a8, Size: 0x8]
	float ReviveCD;//[Offset: 0x2b0, Size: 0x4]
	MirageActor* AddtionalMirageActor;//[Offset: 0x2b8, Size: 0x8]
	ApexBuffSystemComponent* BuffSystemComponent;//[Offset: 0x2e0, Size: 0x8]
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x3cb0544
	void SwitchCollision(bool bEnableCollision);// 0x43841ec
	void SwitchAnimation();// 0x3cb0d60
	void SetSkeletonMaterials(MaterialInterface*[] InMaterials);// 0x3cb0944
	void SetOutlineValue(float Ratio, float OriginalInnerColorA, float OriginalOutlineThickness);// 0x3cb0a1c
	void Revive();// 0x3cb0d24
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Controller* pCauser, Actor* CauserActor);// 0x3cb0108
	void PlaySurvive();// 0x43841ec
	void PlayDead();// 0x43841ec
	void PlayDamageEffect(Vector Location, Vector Normal);// 0x43841ec
	void OnRevival();// 0x3cb03d4
	void Onrep_MirageState();// 0x3cb0d4c
	void OnRep_Health();// 0x3cb0d38
	void OnReceivedPointDamage(Vector HitPoint, Vector HitNormal);// 0x3cb03e8
	void OnDetectAreaBeginOverLap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3cb0b1c
	void OnBeKilled();// 0x3cb04ac
	void KillMirage(bool bAutoRevive);// 0x3cb04c0
	bool IsSameTeam(Actor* Other);// 0x3caff98
	bool HasBuff(FName BuffName, bool bPredicatePendingRemove);// 0x3cb0028
	void CreateEffect(ParticleSystem* EmitterTemplate, out const FName AttachPointName, out const Vector Location, ParticleSystemAsync* SourceValue);// 0x3cb0734
	void ChangeState(enum TargetState);// 0x3cb06b0
	void ChangeMirageState(out const ChapterParams Params);// 0x3cb0d74
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x3cb0274

--------------------------------
Class: KnockdownShieldReplicate
	byte Level;//[Offset: 0x0, Size: 0x1]
	bool CanRescueSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool CanUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	int ShieldValue;//[Offset: 0x4, Size: 0x4]
	KnockdownShieldItemHandle* Handle;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: KnockdownShieldItemHandle.BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	byte Level;//[Offset: 0x2b1, Size: 0x1]
	int ShieldValue;//[Offset: 0x2b4, Size: 0x4]
	bool CanRescueSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	bool HandleUse_Implementation(BattleItemUseTarget Target, enum Reason);// 0x3c5e4cc
	bool HandleDisuse_Implementation(enum Reason);// 0x3c5e43c

--------------------------------
Class: BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	UAESkillManagerComponent* SkillManagerComponent;//[Offset: 0x260, Size: 0x8]
	enum SlotID;//[Offset: 0x270, Size: 0x1]
	int Durability;//[Offset: 0x274, Size: 0x4]
	BodyAttachmentConfig BodyAttachmentConfig;//[Offset: 0x280, Size: 0x30]
	enum subSlot;//[Offset: 0x2b0, Size: 0x1]
	void OnCharacterAttrChangedWithDetailEvent(Actor* Owner, FString AttrName, float deltaVal, float resultVal);// 0x3a9b0cc

--------------------------------
Class: BodyAttachmentConfig
	FText AttachmentID;//[Offset: 0x0, Size: 0x18]
	BodyAttachmentAttrModify[] BodyAttachmentAttrModifiers;//[Offset: 0x18, Size: 0x10]
	ModifyAttributeData* ModifyAttributeData;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: BodyAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 0x10]
	enum Op;//[Offset: 0x10, Size: 0x1]
	float ModifyValue;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ModifyAttributeData.Object
	enum NetExecutionPolicy;//[Offset: 0x28, Size: 0x1]
	float Duration;//[Offset: 0x2c, Size: 0x4]
	float Period;//[Offset: 0x30, Size: 0x4]
	int ModifyByPawnStateMask;//[Offset: 0x34, Size: 0x4]
	enum ChangeType;//[Offset: 0x38, Size: 0x1]
	AttributeModifierInfo[] Modifiers;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: AttributeModifierInfo
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	enum ModifierOp;//[Offset: 0x38, Size: 0x1]
	enum SumOp;//[Offset: 0x39, Size: 0x1]
	AttributeModifierMagnitude ModifierMagnitude;//[Offset: 0x40, Size: 0x168]
	ModifyEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x1a8, Size: 0x1]

--------------------------------
Class: GameplayAttribute
	FString AttributeName;//[Offset: 0x0, Size: 0x10]
	FieldPathProperty Attribute;//[Size: 0x20]
	Struct* AttributeOwner;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AttributeModifierMagnitude
	enum MagnitudeCalculationType;//[Offset: 0x0, Size: 0x1]
	ScalableFloat ScalableFloatMagnitude;//[Offset: 0x8, Size: 0x20]
	AttributeBasedFloat AttributeBasedMagnitude;//[Offset: 0x28, Size: 0xb8]
	CustomCalculationBasedFloat CustomMagnitude;//[Offset: 0xe0, Size: 0x78]
	SetByCallerFloat SetByCallerMagnitude;//[Offset: 0x158, Size: 0x10]

--------------------------------
Class: ScalableFloat
	float Value;//[Offset: 0x0, Size: 0x4]
	CurveTableRowHandle Curve;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CurveTableRowHandle
	CurveTable* CurveTable;//[Offset: 0x0, Size: 0x8]
	FName RowName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AttributeBasedFloat
	ScalableFloat Coefficient;//[Offset: 0x0, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x20, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x40, Size: 0x20]
	AttributeCaptureDefinition BackingAttribute;//[Offset: 0x60, Size: 0x40]
	CurveTableRowHandle AttributeCurve;//[Offset: 0xa0, Size: 0x10]
	enum AttributeCalculationType;//[Offset: 0xb0, Size: 0x1]
	enum FinalChannel;//[Offset: 0xb1, Size: 0x1]

--------------------------------
Class: AttributeCaptureDefinition
	GameplayAttribute AttributeToCapture;//[Offset: 0x0, Size: 0x38]
	enum AttributeSource;//[Offset: 0x38, Size: 0x1]
	bool bSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]

--------------------------------
Class: CustomCalculationBasedFloat
	class ModifyMagnitudeCalculation* CalculationClassMagnitude;//[Offset: 0x0, Size: 0x8]
	ScalableFloat Coefficient;//[Offset: 0x8, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x28, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x48, Size: 0x20]
	CurveTableRowHandle FinalLookupCurve;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: ModifyMagnitudeCalculation.AttributeCalculation.Object
	bool bAllowNonNetAuthorityDependencyRegistration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float CalculateBaseMagnitude(out const AttributeModifierSpec Spec);// 0x3cb7a30

--------------------------------
Class: AttributeCalculation.Object
	AttributeCaptureDefinition[] RelevantAttributesToCapture;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AttributeModifierSpec
	FName Tip;//[Offset: 0x0, Size: 0x8]
	ModifyAttributeData* ModifyAttributeData;//[Offset: 0x8, Size: 0x8]
	byte RemoveMode;//[Offset: 0x10, Size: 0x1]
	Actor* Source;//[Offset: 0x14, Size: 0x8]
	ModifierSpec[] Modifiers;//[Offset: 0x20, Size: 0x10]
	bool bCompletedSourceAttributeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bCompletedTargetAttributeCapture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	AttributeCaptureSpecContainer CapturedRelevantAttributes;//[Offset: 0x38, Size: 0x28]
	float Level;//[Offset: 0x100, Size: 0x4]
	FName PawnStateKey;//[Offset: 0x104, Size: 0x8]

--------------------------------
Class: ModifierSpec
	float EvaluatedMagnitude;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AttributeCaptureSpecContainer
	AttributeCaptureSpec[] SourceAttributes;//[Offset: 0x0, Size: 0x10]
	AttributeCaptureSpec[] TargetAttributes;//[Offset: 0x10, Size: 0x10]
	bool bHasNonSnapshottedAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: AttributeCaptureSpec
	AttributeCaptureDefinition BackingDefinition;//[Offset: 0x0, Size: 0x40]

--------------------------------
Class: SetByCallerFloat
	FName DataName;//[Offset: 0x0, Size: 0x8]
	GameplayTag DataTag;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ModifyEvaluationChannelSettings
	enum Channel;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: APPerkManagerComponent.ActorComponent.Object
	DataTable* SkillsTable;//[Offset: 0x100, Size: 0x8]
	int[] PutOnPerkIDs;//[Offset: 0x108, Size: 0x10]
	int[] OutsidePerkIDs;//[Offset: 0x128, Size: 0x10]
	APPerk*[] Perks;//[Offset: 0x138, Size: 0x10]
	PerkBlackBoard* Blackboard;//[Offset: 0x148, Size: 0x8]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	void OnSkillUnInitFinished(int SkillIndex, UTSkill* Skill);// 0x3a7593c
	void OnSkillInitFinished(int SkillIndex, UTSkill* Skill);// 0x3a759fc
	void OnRep_OutsidePerkIDs();// 0x3a757a8
	void OnEnableTriggerSkill(int SkillIndex, UTSkill* Skill);// 0x3a757bc
	void OnDisableTriggerSkill(int SkillIndex, UTSkill* Skill);// 0x3a7587c
	void OnAsyncLoadSucceedByClass(out const SoftObjectPath[] Paths, out const Object*[] LoadAssets, bool bPutOn);// 0x3a75c24
	void OnAsyncLoadSucceed(out const SoftObjectPath[] Paths, out const Object*[] LoadAssets, int ID);// 0x3a75dac
	void OnAsyncLoadFailed(out const SoftObjectPath[] Paths, enum Reason, int ID);// 0x3a75abc
	bool IsDisableTriggerSkill();// 0x3a75f2c
	void Exec_Mult_RemovePerk(int PerkID);// 0x3a75610
	void Exec_Mult_RemoveAllPerk();// 0x3a755f4
	void Exec_Mult_AddPerk(int PerkID);// 0x3a75694
	void ClientLogPerkInfo(FString DebugMessage);// 0x3a75718

--------------------------------
Class: APPerk.Object
	int RunPlatform;//[Offset: 0x30, Size: 0x4]
	int ID;//[Offset: 0x34, Size: 0x4]
	float Duration;//[Offset: 0x38, Size: 0x4]
	float Cooldown;//[Offset: 0x3c, Size: 0x4]
	bool bNeedTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bCheckConditionIfNotNeedTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bManualIfNotNeedTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	bool bUpdateWhenActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	bool bStopIfConditionMismatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bShowTipsWhenActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	APPerkContext* Context;//[Offset: 0x48, Size: 0x8]
	APPerkTrigger* Trigger;//[Offset: 0x50, Size: 0x8]
	APPerkAction*[] Actions;//[Offset: 0x58, Size: 0x10]
	APPerkManagerComponent* CurOwnerManagerComp;//[Offset: 0x68, Size: 0x8]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x70, Size: 0x50]
	int InstancedNodesTotalSize;//[Offset: 0xc0, Size: 0x4]
	void OnPerkStop(APPerkManagerComponent* ManagerComponent);// 0x3a6eba8
	void OnPerkCDComplete(APPerkManagerComponent* ManagerComponent);// 0x3a6eb24

--------------------------------
Class: APPerkContext.Object

--------------------------------
Class: APPerkTrigger.Object
	APPerk* OwnerPerk;//[Offset: 0x30, Size: 0x8]
	float ExpiredTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: APPerkAction.Object
	bool bResetWhenStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	APPerk* OwnerPerk;//[Offset: 0x34, Size: 0x8]

--------------------------------
Class: PerkBlackBoard.Object

--------------------------------
Class: MainHandComponent.ActorComponent.Object
	HandStateData[] MainHandStack;//[Offset: 0xf0, Size: 0x10]
	HandStateData[] LastOperationStack;//[Offset: 0x100, Size: 0x10]
	void SyncToServerHandStateListRPC(const SyncToServerMainHandInfo[] MsgList);// 0x3c8eff0
	void SyncToClientHandStateListRPC(const SyncMainHandInfo[] MsgList);// 0x3c8f0c4
	void SyncStackToClient(const HandStateData[] HandStateDatas);// 0x3c8ee8c
	void ServerPopOperation(const HandStateData MainHandInfo);// 0x3c8f1ac
	void RPCToClientRejectOperator(const int[] RejectIDList);// 0x3c8ef60
	void RecvServerStackMsgOK();// 0x3c8ed9c
	void OnRep_MainHandStackChanged();// 0x3c8f198
	void OnApexCharacterPossessedEventCallback(Controller* pController);// 0x3c8f4b0
	void OnAIHostingEventCallback(ApexAIController* pController, bool bHost);// 0x3c8f3e8
	void NotifyReconnect();// 0x3c8ed64
	void GM_SetEnableLog(bool InEnableLog);// 0x3c8f548
	void GM_Disconnect();// 0x3c8f52c
	void ForceSyncStackInfoToServer();// 0x3c8f3d4
	void FirstRPCStackToClient(const HandStateData[] HandStateDatas);// 0x3c8edb8
	void ClientSendKeepAlivePackage();// 0x3c8ed80
	void ClientPushOperation(const HandStateData MainHandInfo);// 0x3c8f31c
	void ClientPopOperation(const HandStateData MainHandInfo);// 0x3c8f264

--------------------------------
Class: SyncToServerMainHandInfo
	uint32 UniqueID;//[Offset: 0x0, Size: 0x4]
	bool bReject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum EMainHandActionType;//[Offset: 0x5, Size: 0x1]
	int Index;//[Offset: 0x8, Size: 0x4]
	HandStateData MainHandInfo;//[Offset: 0x10, Size: 0x40]

--------------------------------
Class: SyncMainHandInfo
	enum EMainHandActionType;//[Offset: 0x0, Size: 0x1]
	int Index;//[Offset: 0x4, Size: 0x4]
	HandStateData MainHandInfo;//[Offset: 0x8, Size: 0x40]

--------------------------------
Class: EffectViewManager.ActorComponent.Object
	ApexCharacter* OwnerCharacter;//[Offset: 0xf0, Size: 0x8]
	<int,EffectViewItemList*> MapInstancedID2EffectViewItemList;//[Offset: 0x100, Size: 0x50]
	<int,InstancedEffectViewItemList> MapEffectViewID2InstancedIDs;//[Offset: 0x150, Size: 0x50]
	class EffectViewConfigCenter* ConfigCenterClass;//[Offset: 0x1a0, Size: 0x8]
	bool RemoveEffectView(int InstancedID, int EffectViewID);// 0x3b7bee4
	void ClearAllEffectView();// 0x3b7bed0
	int AddEffectView(int EffectViewID, float SampleTime);// 0x3b7bfac

--------------------------------
Class: EffectViewItemList.Object
	int EffectViewID;//[Offset: 0x28, Size: 0x4]
	EffectViewItemBase*[] EffectViewItems;//[Offset: 0x30, Size: 0x10]
	ApexCharacter* Owner;//[Offset: 0x40, Size: 0x8]
	uint32 InstancedID;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: EffectViewItemBase.Object
	bool bTakeEffectOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bTakeEffectOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	ApexCharacter* OwnerCharacter;//[Offset: 0x30, Size: 0x8]
	void StopEffectInner();// 0x3b7b494
	void StopEffect();// 0x3b7b534
	void PlayEffectInner(float SampleTime);// 0x3b7b4b0
	void PlayEffect(float SampleTime);// 0x3b7b548

--------------------------------
Class: InstancedEffectViewItemList
	int[] InstancedIDs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: EffectViewConfigCenter.InGameSingletonObject.Object
	<int,class EffectViewItemList> MapID2EffectViewItemList;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: DataReportComponent.ActorComponent.Object
	float SliceTime;//[Offset: 0xf0, Size: 0x4]
	int[] StatisticOpticList;//[Offset: 0xf8, Size: 0x10]
	int[] StatisticAttachList;//[Offset: 0x108, Size: 0x10]
	Controller* CurrentOBTargetPC;//[Offset: 0x218, Size: 0x8]
	OBCacheData[] OBData;//[Offset: 0x220, Size: 0x10]
	void UploadImportantState1(int Number);// 0x3b59ba8
	void ServerSetPlayerCameraMaxDistance(float Dist);// 0x3b598c4
	void ServerReportUseMiniMap(int Data);// 0x3b592a4
	void ServerReportSomeLog(const SecBasic SomeFlow);// 0x3b59abc
	void ServerRecordWatchStat(enum WatchStat, int count, bool CheckInOB);// 0x3b5a09c
	void ServerOnPressTransfer();// 0x3b59384
	void ServerOnPressLeave();// 0x3b59328
	void ServerOnMiniMapShow(bool bShow);// 0x3b59800
	void ServerOnMiniMapPing(Vector2D InPingLoc);// 0x3b59698
	void ServerOnMiniMapPinch(Vector2D InPingchCenter);// 0x3b5974c
	void ServerOnMiniMapDeletePing();// 0x3b5963c
	void ServerDataRepUseReplicator();// 0x3b5945c
	void ServerDataRepOpenDoor(bool bOpen, enum Type);// 0x3b59570
	void ServerDataRepCancleOpenTreasureDoor();// 0x3b59498
	void ServerDataRepBreakOpenTreasureDoorBySkill();// 0x3b59484
	void ServerDataRepBreakOpenTreasureDoorByDying();// 0x3b59470
	void ServerDataRepAutoOpenDoor(bool bAutoOpen);// 0x3b594ac
	void ServerDataRepAddMaterialNum(int AddNum);// 0x3b593e0
	void OnWeaponShoot(Weapon* Weapon);// 0x3b5a020
	void OnWeaponDestroy(Weapon* Weapon);// 0x3b59e94
	void OnPlayerExit();// 0x3b5a8a0
	void OnBulletHit(Weapon* Weapon, out const BulletHitInfoUploadData BulletHitInfoUploadData);// 0x3b59f10
	void EndReportSecCircleFlowData(int CircleIndex);// 0x3b5997c
	void DSReportWeaponHitFlow();// 0x3b59ca8
	void DSReportWeaponHitData(int WeaponID);// 0x3b59c2c
	void DSReportWeaponFlow();// 0x3b59cbc
	void DSReportUpgradeArmorFlow(out const UpgradeArmorFlowData UpgradeArmorFlowData, ApexCharacter* OwnerCharacter);// 0x3b5a62c
	void DSReportNetInfoFlow(int64 UID, FString ClientIP, int ping, int inTotal, int inTotalLost, int inOutOrder, int outTotal, int outTotalLost, int outOutOrder);// 0x3b5a1c0
	void DSReportHurtFlow(Pawn* Victim, ApexPlayerState* EnemyState, out SecHurtFlow CacheHurtFlow);// 0x3b5a738
	void DSReportClientNetInfo(float PingAverage, float MaxPing, float MinPing, int InLossRate, int OutLossRate, int AvgJitter);// 0x3b5a464
	void DSReportAttackFlow(out const BulletHitInfoUploadData BulletHitInfo, ShootWeapon* ShootWeapon, out const SecurityLogHitTargetInfo HitTargetInfo, out const BulletHitInfoTLogData TLogData);// 0x3b59cd0
	void ClientReportSomeLog();// 0x3b5a1ac
	void BeginReportSecCircleFlowData(out const SecCircleFlow SecCircleFlow);// 0x3b599f8

--------------------------------
Class: SecBasic
	FString dtEventTime;//[Offset: 0x0, Size: 0x10]
	FString SecReportData;//[Offset: 0x10, Size: 0x10]
	FString RoleID;//[Offset: 0x20, Size: 0x10]
	FString ClientStartTime;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: UpgradeArmorFlowData
	FString RoleID;//[Offset: 0x0, Size: 0x10]
	FString OpenId;//[Offset: 0x10, Size: 0x10]
	FString dtEventTime;//[Offset: 0x20, Size: 0x10]
	int OldLevel;//[Offset: 0x30, Size: 0x4]
	int OldExp;//[Offset: 0x34, Size: 0x4]
	int NewLevel;//[Offset: 0x38, Size: 0x4]
	int NewExp;//[Offset: 0x3c, Size: 0x4]
	int ChangeType;//[Offset: 0x40, Size: 0x4]
	int DamageType;//[Offset: 0x44, Size: 0x4]
	int ExpFromTrueRole;//[Offset: 0x48, Size: 0x4]
	int ExpFromAI;//[Offset: 0x4c, Size: 0x4]
	int ExpFromNPC;//[Offset: 0x50, Size: 0x4]
	int ExpFromPerk;//[Offset: 0x54, Size: 0x4]
	int CircleCount;//[Offset: 0x58, Size: 0x4]
	int TeamNum;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: OBCacheData.SecBasic
	FString WatchRoleID;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: SecHurtFlow.SecBasic
	int HurtFlowID;//[Offset: 0x40, Size: 0x4]
	FString EnemyRoleID;//[Offset: 0x48, Size: 0x10]
	int HurtTime;//[Offset: 0x58, Size: 0x4]
	int HurtDamage;//[Offset: 0x5c, Size: 0x4]
	int EnemyLegendID;//[Offset: 0x60, Size: 0x4]
	int EnemyGunType;//[Offset: 0x64, Size: 0x4]
	int EnemyGunID;//[Offset: 0x68, Size: 0x4]
	int EnemySkillID;//[Offset: 0x6c, Size: 0x4]
	int HurtFrom;//[Offset: 0x70, Size: 0x4]
	int HitType;//[Offset: 0x74, Size: 0x4]
	int HPstart;//[Offset: 0x78, Size: 0x4]
	int HPEnd;//[Offset: 0x7c, Size: 0x4]
	int ArmorHPStart;//[Offset: 0x80, Size: 0x4]
	int ArmorHPEnd;//[Offset: 0x84, Size: 0x4]
	int PlayerKilled;//[Offset: 0x88, Size: 0x4]
	int HurtType;//[Offset: 0x8c, Size: 0x4]
	int HurtID;//[Offset: 0x90, Size: 0x4]
	int RealHurtType;//[Offset: 0x94, Size: 0x4]
	int RealHurtID;//[Offset: 0x98, Size: 0x4]
	int ArmorKill;//[Offset: 0x9c, Size: 0x4]
	int IfIsAI;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: SecCircleFlow.SecBasic
	int GameStartTime;//[Offset: 0x40, Size: 0x4]
	int NewCircleBornTime;//[Offset: 0x44, Size: 0x4]
	int NewCircleCount;//[Offset: 0x48, Size: 0x4]
	int OldCircleMoveTime;//[Offset: 0x4c, Size: 0x4]
	int OldCircleMoveEndTime;//[Offset: 0x50, Size: 0x4]
	int PlayerOutTime;//[Offset: 0x54, Size: 0x4]
	float NewCirclePositionX;//[Offset: 0x58, Size: 0x4]
	float NewCirclePositionY;//[Offset: 0x5c, Size: 0x4]
	float NewCirclePositionRadius;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: CharacterBuffManager.ActorComponent.Object
	InstancedBuffItem[] InstancedBuffItems;//[Offset: 0xf0, Size: 0x10]
	EffectViewManager* OwnerEffectViewMgr;//[Offset: 0x150, Size: 0x8]
	class BuffConfigCenter* BuffConfigCenterClass;//[Offset: 0x158, Size: 0x8]
	void RemoveBuff(int BuffID, int InstancedBuffIndex);// 0x3b0e614
	void OnRep_InstancedBuffItems();// 0x3b0e404
	float GetEarliestBuffRemainTime(int BuffID);// 0x3b0e57c
	void ClearAllBuff();// 0x3b0e600
	void BroadcastClearAllBuff();// 0x3b0e418
	void BroadcastBuffRemoved(int BuffID, int InstancedBuffIndex);// 0x3b0e434
	void BroadcastBuffAdded(int BuffID);// 0x3b0e4f8
	void AddBuff(int BuffID);// 0x3b0e6d0

--------------------------------
Class: InstancedBuffItem
	int BuffID;//[Offset: 0x0, Size: 0x4]
	float[] BuffAddTimes;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BuffConfigCenter.InGameSingletonObject.Object
	<int,BuffConfigItem> MapBuffID2BuffConfigItem;//[Offset: 0x28, Size: 0x50]
	BuffConfigItem GetBuffConfigByBuffID(int BuffID);// 0x3b0df50

--------------------------------
Class: BuffConfigItem
	float Duration;//[Offset: 0x0, Size: 0x4]
	int[] EffectViewIDs;//[Offset: 0x8, Size: 0x10]
	enum BuffOverlapType;//[Offset: 0x18, Size: 0x1]
	FName BuffName;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: AuraComponent.ActorComponent.Object
	<FName,AuraInfo> AuraInfos;//[Offset: 0xf0, Size: 0x50]
	void SetAuraLegendID(FName AuraName, int LegendIDIn);// 0x3a91ca4
	void RemoveAuraData(out const AuraInfo[] AuraInfoArray);// 0x3a921ac
	void OneAuraForTarget(FName AuraName, delegate ForTargetDynamicDelegate, bool IsIgnoreActive);// 0x3a91f90
	bool DeactiveOneAura(FName AuraName);// 0x3a91d64
	bool CheckTargetInAura(ApexCharacter* TargetCharacter, FName AuraName, bool IsIgnoreActive);// 0x3a91e74
	void AuraForTarget(delegate ForTargetDynamicDelegate, bool IsIgnoreActive);// 0x3a920bc
	void AddAuraData(out const AuraInfo[] AuraInfoArray);// 0x3a92240
	bool ActiveOneAura(FName AuraName);// 0x3a91dec

--------------------------------
Class: AuraInfo
	FName AuraName;//[Offset: 0x0, Size: 0x8]
	AuraShape* AuraShape;//[Offset: 0x8, Size: 0x8]
	bool IsEvaluateBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	byte BlockChannel;//[Offset: 0x11, Size: 0x1]
	<FName> BuffNameArray;//[Offset: 0x18, Size: 0x50]
	enum TargetType;//[Offset: 0x68, Size: 0x1]
	bool bNeedSimulateOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	FName[] RejectedByBuffs;//[Offset: 0x70, Size: 0x10]
	bool CleanBuffOnRemoveAura;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	int LegendId;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: AuraShape.Object

--------------------------------
Class: ActionFilterComponent.ActorComponent.Object
	int[] m_FilterIDList;//[Offset: 0xf0, Size: 0x10]
	void ServerCheck(enum EPawnState);// 0x39362a8
	void RPCRemoveFilterID(const int InID);// 0x3936348
	void RPCClear();// 0x393632c
	void RPCAddFilterID(const int InID);// 0x39363cc

--------------------------------
Class: FSM.Object
	EdGraph* GraphView;//[Offset: 0x28, Size: 0x8]
	FName EntryState;//[Offset: 0x30, Size: 0x8]
	FSMData StateMachine;//[Offset: 0x38, Size: 0x50]

--------------------------------
Class: EdGraph.Object
	class EdGraphSchema* Schema;//[Offset: 0x28, Size: 0x8]
	EdGraphNode*[] Nodes;//[Offset: 0x30, Size: 0x10]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bAllowDeletion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	bool bAllowRenaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: EdGraphSchema.Object

--------------------------------
Class: EdGraphNode.Object
	EdGraphPin_Deprecated*[] DeprecatedPins;//[Offset: 0x38, Size: 0x10]
	int NodePosX;//[Offset: 0x48, Size: 0x4]
	int NodePosY;//[Offset: 0x4c, Size: 0x4]
	int NodeWidth;//[Offset: 0x50, Size: 0x4]
	int NodeHeight;//[Offset: 0x54, Size: 0x4]
	byte AdvancedPinDisplay;//[Offset: 0x58, Size: 0x1]
	enum EnabledState;//[Offset: 0x59, Size: 0x1]
	bool bDisplayAsDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bUserSetEnabledState;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	bool bIsNodeEnabled;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1]
	bool bHasCompilerMessage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5b, Size: 0x1]
	FString NodeComment;//[Offset: 0x60, Size: 0x10]
	int ErrorType;//[Offset: 0x70, Size: 0x4]
	FString ErrorMsg;//[Offset: 0x78, Size: 0x10]
	Guid NodeGuid;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: EdGraphPin_Deprecated.Object
	FString PinName;//[Offset: 0x28, Size: 0x10]
	FString PinToolTip;//[Offset: 0x38, Size: 0x10]
	byte Direction;//[Offset: 0x48, Size: 0x1]
	EdGraphPinType PinType;//[Offset: 0x50, Size: 0x58]
	FString DefaultValue;//[Offset: 0xa8, Size: 0x10]
	FString AutogeneratedDefaultValue;//[Offset: 0xb8, Size: 0x10]
	Object* DefaultObject;//[Offset: 0xc8, Size: 0x8]
	FText DefaultTextValue;//[Offset: 0xd0, Size: 0x18]
	EdGraphPin_Deprecated*[] LinkedTo;//[Offset: 0xe8, Size: 0x10]
	EdGraphPin_Deprecated*[] SubPins;//[Offset: 0xf8, Size: 0x10]
	EdGraphPin_Deprecated* ParentPin;//[Offset: 0x108, Size: 0x8]
	EdGraphPin_Deprecated* ReferencePassThroughConnection;//[Offset: 0x110, Size: 0x8]

--------------------------------
Class: EdGraphPinType
	FName PinCategory;//[Offset: 0x0, Size: 0x8]
	FName PinSubCategory;//[Offset: 0x8, Size: 0x8]
	Object* PinSubCategoryObject;//[Offset: 0x10, Size: 0x8]
	SimpleMemberReference PinSubCategoryMemberReference;//[Offset: 0x18, Size: 0x20]
	EdGraphTerminalType PinValueType;//[Offset: 0x38, Size: 0x1c]
	enum ContainerType;//[Offset: 0x54, Size: 0x1]
	bool bIsArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1]
	bool bIsReference;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1]
	bool bIsConst;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 0x1]
	bool bIsWeakPointer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 0x1]

--------------------------------
Class: EdGraphTerminalType
	FName TerminalCategory;//[Offset: 0x0, Size: 0x8]
	FName TerminalSubCategory;//[Offset: 0x8, Size: 0x8]
	Object* TerminalSubCategoryObject;//[Offset: 0x10, Size: 0x8]
	bool bTerminalIsConst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bTerminalIsWeakPointer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: FSMData
	<FName,TransRule> CurrState_Mapping_TransRule;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TransRule
	<FName,enum> Keyword_mapping_TargetState;//[Offset: 0x0, Size: 0x50]
	FName FromState;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: CharacterInputComponent.ActorComponent.Object
	delegate OnJoyStickInteruptDelegate;//[Offset: 0xf0, Size: 0x10]
	Vector CurInputVector;//[Offset: 0x100, Size: 0xc]
	float LeftRightDegree;//[Offset: 0x10c, Size: 0x4]
	void SetPreOverDrag(bool NewOverDrag);// 0x3b150b8
	void SetOverDrag(bool NewOverDrag);// 0x3b15208
	void SetInvokeSprint(bool Value);// 0x3b14f44
	void ServerSetMovementInputError(int ErrorType);// 0x3b14fc4
	void ServerSetMoveInputDir(enum InputDir);// 0x3b15288
	void ServerEnableAutoForward(bool NewAutoForward);// 0x3b14eb8
	void MoveRight(float Rate);// 0x3b1530c
	void MoveForward(float Rate);// 0x3b15388
	bool IsPreOverDrag();// 0x3b1509c
	bool IsOverDrag();// 0x3b151d8
	bool IsAutoForward();// 0x3b15138
	float GetRawRightInputRate();// 0x3b15048
	float GetRawForwardInputRate();// 0x3b15064
	void EnableAutoForward(bool NewAutoForward);// 0x3b15154

--------------------------------
Class: CarePackage.Actor.Object
	enum[] ForbiddenPawnState;//[Offset: 0x2d8, Size: 0x10]
	int ID;//[Offset: 0x2e8, Size: 0x4]
	int Level;//[Offset: 0x2ec, Size: 0x4]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x2f0, Size: 0x8]
	enum CarePackageLootType;//[Offset: 0x2f8, Size: 0x1]
	CarePackageItemSocketDataAsset* CarePackageItemSocketDataAsset;//[Offset: 0x300, Size: 0x8]
	CarePackageLootPerSide[] LootZoneTypeInfos;//[Offset: 0x308, Size: 0x10]
	FString[] LootZoneTypeInfoAEs;//[Offset: 0x318, Size: 0x10]
	<int,CarePackageItemIDGroupData> ItemIDGroupDataMap;//[Offset: 0x328, Size: 0x50]
	bool bEnableLootConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	bool bEnableLootAEConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 0x1]
	<int,CarePackage_PickupInfo> DropList1;//[Offset: 0x380, Size: 0x50]
	<int,CarePackage_PickupInfo> DropList2;//[Offset: 0x3d0, Size: 0x50]
	<int,CarePackage_PickupInfo> DropList3;//[Offset: 0x420, Size: 0x50]
	float LootRange;//[Offset: 0x470, Size: 0x4]
	float NotOpenLootOffset;//[Offset: 0x474, Size: 0x4]
	bool bHasLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	bool bHasOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 0x1]
	ApexCharacter*[] PlayerInRange;//[Offset: 0x480, Size: 0x10]
	int CreateTime;//[Offset: 0x49c, Size: 0x4]
	<int,int> ReportDropItemInfo;//[Offset: 0x4a0, Size: 0x50]
	Controller* OpenPackageController;//[Offset: 0x4f0, Size: 0x8]
	bool bEnableTickTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	bool bTriggerFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f9, Size: 0x1]
	float CarePackageTickTime;//[Offset: 0x4fc, Size: 0x4]
	int TickTriggerIndex;//[Offset: 0x500, Size: 0x4]
	int PreTickTriggerIndex;//[Offset: 0x504, Size: 0x4]
	CarePackageTickTriggerData[] TickTriggerDataArray;//[Offset: 0x508, Size: 0x10]
	CarePackageCustomDoor[] LifelineCustomDoorList;//[Offset: 0x518, Size: 0x10]
	PickUpWrapperActor*[] CarePackagePickUpList;//[Offset: 0x528, Size: 0x10]
	void SetLootZoneTypeInfos(out const LootZoneTypeInfo[] InLootZoneTypeInfos);// 0x3afb010
	void SetLifelineCustomDoor(CarePackageCustomDoor[] TmpList);// 0x3afa9f8
	void SetCarePackageLootType(enum InCarePackageLootType);// 0x3afaf94
	void ReportCarePackageFlow();// 0x3afacf0
	void ReportCarePackageDropFlow();// 0x3afacdc
	void OnTickTriggerEvent(int TriggerIndex);// 0x3afac58
	void OnServerOpened();// 0x3afb0e4
	void OnServerLanded();// 0x3afb0f8
	void OnRep_HasOpened();// 0x3afb150
	void OnRep_HasLanded();// 0x3afb164
	void OnRep_Array();// 0x3afb13c
	void OnPickUpBeenPicked(ApexCharacter* PickPlayer, int PickCount);// 0x3afab98
	void OnCarePackageRealOpen();// 0x3afb128
	int GetSoundBankItemId();// 0x3afad04
	enum GetItemSpawnReason();// 0x3afae24
	bool GetCustomActorLocation(out Vector NewPosition, int PingIndex);// 0x3afad40
	void CreateDropItem();// 0x3afb114
	void ClearItemIDGroupData();// 0x3afae60
	void BP_OnSpawnItem(PickUpWrapperActor* dropItem1, PickUpWrapperActor* dropItem2, PickUpWrapperActor* dropItem3, FString socket1, FString socket2, FString socket3);// 0x43841ec
	void BP_OnOpenPackage();// 0x43841ec
	void BP_OnLandedPackage();// 0x43841ec
	void AddItemIDGroupData(int SlotIndex, int[] ItemIDGroup);// 0x3afae74

--------------------------------
Class: CarePackageCustomDoor
	enum DoorType;//[Offset: 0x0, Size: 0x1]
	FString TargetTableName;//[Offset: 0x8, Size: 0x10]
	FString BackUpTableName;//[Offset: 0x18, Size: 0x10]
	FString OtherTableName0;//[Offset: 0x28, Size: 0x10]
	FString OtherTableName1;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: CarePackageLootPerSide
	CarePackageLootTypeInfo[] LootItemsPerSide;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CarePackageLootTypeInfo
	int RandomCount;//[Offset: 0x0, Size: 0x4]
	float ChosenProbability;//[Offset: 0x4, Size: 0x4]
	LootZoneTypeInfo[] LootItems;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CarePackageItemIDGroupData
	int[] ItemIDGroup;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CarePackage_PickupInfo
	float Weight;//[Offset: 0x0, Size: 0x4]
	FString SocketName;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CarePackageTickTriggerData
	float TriggerTime;//[Offset: 0x0, Size: 0x4]
	int TriggerIndex;//[Offset: 0x4, Size: 0x4]
	FName TriggerName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: RepRevenantSilence
	float RevenantSilenceEffectEndTime;//[Offset: 0x0, Size: 0x4]
	float RevenantSilenceLastDuration;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: RepDeathTotemProtection
	bool HasProtectionOfDeathTotem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool LeaveByConsumption;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float TotemProtectionLeftSeconds;//[Offset: 0x4, Size: 0x4]
	Vector DeathTotemPosition;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: RepDeathTotemRangeTest
	bool IsOutOfValidRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float OutOfRangeTestEndTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CharacterParachuteComponent.ActorComponent.Object
	ParachuteStartInfo ParachuteStartInfo;//[Offset: 0x11c, Size: 0x2]
	ApexCharacterBase*[] ParachuteTeamCharacterBases;//[Offset: 0x120, Size: 0x10]
	float ServerPredictPercent;//[Offset: 0x15c, Size: 0x4]
	byte CurParachuteState;//[Offset: 0x160, Size: 0x1]
	FString LastParachuteTriggerObjectIDName;//[Offset: 0x168, Size: 0x10]
	bool IsShowRespawnTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	ParachuteInputInfo ReplicatedParachuteInputInfo;//[Offset: 0x17c, Size: 0xc]
	ReplicatedMoveState ReplicatedMoveState;//[Offset: 0x194, Size: 0x2c]
	float MoveForwardInputValue;//[Offset: 0x1c4, Size: 0x4]
	float MoveRightInputValue;//[Offset: 0x1c8, Size: 0x4]
	ParachuteOverrideConfig CurParachuteConf;//[Offset: 0x1cc, Size: 0xc]
	ParachuteAttachmentInfo ParachuteAttachmentInfo;//[Offset: 0x1e0, Size: 0x10]
	Actor*[] TempFollowers;//[Offset: 0x1f0, Size: 0x10]
	ParticleEffectSetCfg CurActiveParachuteEffectIDSet;//[Offset: 0x200, Size: 0x50]
	int JumpTailID;//[Offset: 0x284, Size: 0x4]
	int[] JumpExpressionID;//[Offset: 0x288, Size: 0x10]
	int UseExpressionID;//[Offset: 0x298, Size: 0x4]
	delegate EventOnChangeParachuteState;//[Offset: 0x2a8, Size: 0x10]
	bool bUseDRSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	float DRLerpTime;//[Offset: 0x314, Size: 0x4]
	float DRSimulateTime;//[Offset: 0x318, Size: 0x4]
	float DRVelocityCompatibility;//[Offset: 0x31c, Size: 0x4]
	float DRStopSimulateTime;//[Offset: 0x320, Size: 0x4]
	float MaxSmoothNetUpdateDist;//[Offset: 0x324, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x328, Size: 0x4]
	void UpdateParachuteTransform(float DeltaTime, float ThrottleInput, float SteerInput, out const Rotator ControlRotation);// 0x3b18864
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput);// 0x3b19220
	void SwitchCommanderAtDS();// 0x3b18af8
	void StopDoExpressionDelay(float DelayTime);// 0x3b17af8
	void StopDoExpression();// 0x3b17ae4
	void SetSingleParachuteStatusAtDS(bool NewSingleParachuteStatus);// 0x3b18c28
	void SetParachuteState(enum NewState);// 0x3b1834c
	void SetParachuteCorrectedLocAndQuat(Vector NewLoc, Rotator NewQuat);// 0x3b18444
	void ServerUpdateParachuteInputInfo(float InThrottleInput, float InSteeringInput, byte State);// 0x3b1875c
	void ServerStopParachute(Vector ClientLandLocation);// 0x3b18e30
	void ServerStartParachute(enum TriggerReason, ApexCharacterBase* LeaderCharacter, byte ParachuteIndex);// 0x3b18eb4
	void ServerSetSingleParachuteStatus(bool NewSingleParachuteStatus);// 0x3b18b9c
	void ServerReportParachuteSecurityData(SecJumpFlow ClientJumpFlow);// 0x3b17d84
	void ServerDoExpression(int ID);// 0x3b17b74
	void Server_OverrideParachuteConfig(ParachuteOverrideConfig Conf);// 0x3b180cc
	void SendClientMoveToServerUnreliaby(float Timestamp, const Vector Position, const Vector WorldVelocity);// 0x3b18660
	void ResetParachuteDataRecord();// 0x3b183c8
	void ResetClientPositionOnParachute(Vector NewLocation);// 0x3b185dc
	static void ReqSwitchParachuteCommander(const Object* WorldContext);// 0x3b189b4
	static void ReqLeaveParachuteTeam(const Object* WorldContext);// 0x3b18a8c
	static void ReqJoinParachuteTeam(const Object* WorldContext);// 0x3b18a20
	void ReportParachuteFlowData();// 0x3b17f84
	void ReportParachuteData();// 0x3b17f98
	void PostParachute();// 0x3b18e1c
	void OverrideParachuteConfig(ParachuteOverrideConfig Conf);// 0x3b181fc
	void OnRep_UseExpressionID();// 0x3b17c30
	void OnRep_ReplicatedParachuteInfo();// 0x3b1854c
	void OnRep_ReplicatedMoveState();// 0x3b18538
	void OnRep_ParachuteState(byte LastState);// 0x3b18560
	void OnRep_ParachuteStartInfo();// 0x3b18fc0
	void OnRep_FollowerInfo();// 0x3b180b8
	void OnParachuteStateChanged(enum LastState, enum NewState);// 0x3b1828c
	void LookAtTargetPoint(Vector TargetPoint);// 0x3b17fc0
	bool IsParachuting();// 0x3b18fd4
	bool IsParachuteExpression();// 0x3b17bf8
	static bool IsLocalPlayerIsSingleParachute(const Object* WorldContext);// 0x3b18d1c
	static bool IsLocalPlayerIsCommander(const Object* WorldContext);// 0x3b18d9c
	Vector2D GetSpeedRange();// 0x3b183dc
	Vector GetParachuteWorldVelocity();// 0x3b18500
	float GetParachuteSpeedLength();// 0x3b18410
	enum GetCurrentParachuteReason();// 0x3b1900c
	void EndAutoParachute();// 0x3b17fac
	bool EnableSwitchSingleParachuteStatus(bool NewSingleParachuteStatus);// 0x3b18b0c
	void ClientMulticastStartParachuteEmote(int EmoteID);// 0x3b17a60
	void Client_OverrideParachuteConfig(ParachuteOverrideConfig Conf);// 0x3b18164
	void ChangeParachuteStateDelegate__DelegateSignature(CharacterParachuteComponent* InComp);// 0x43841ec
	bool CanUseJumpEmoteWithID(int InJumpTailID);// 0x3b17c44
	bool CanUseJumpEmote();// 0x3b17ccc
	bool CanReJoinParachuteTeam();// 0x3b18ce4
	static bool CanLocalCharacterUseJumpEmote(const Object* WorldContext);// 0x3b17d04
	bool CanLeaveParachuteTeam();// 0x3b18cac
	void BeginAutoParachute(Vector TargetPoint);// 0x3b1803c
	void ApplyParachuteCompData(CharacterParachuteComponent* Other);// 0x3b19320
	static void ApexStopParachute(ApexCharacterBase* TargetCharacter);// 0x3b19028
	static void ApexStartParachute(ApexCharacterBase* TargetCharacter, enum TriggerReason, ApexCharacterBase* LeaderCharacter, byte ParachuteIndex, bool IsForceJump);// 0x3b19094

--------------------------------
Class: ParachuteStartInfo
	bool bIsStartOrStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	enum ParachuteReason;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: ParachuteInputInfo
	float ThrottleInput;//[Offset: 0x0, Size: 0x4]
	float SteerInput;//[Offset: 0x4, Size: 0x4]
	byte ParachuteState;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ReplicatedMoveState
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector WorldVelocity;//[Offset: 0x18, Size: 0xc]
	float SpeedLength;//[Offset: 0x24, Size: 0x4]
	float SimulateServerTimeStamp;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ParachuteOverrideConfig
	bool bForceHorizontalRotationAtStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ParachuteNoControlTimeSinceStart;//[Offset: 0x4, Size: 0x4]
	float InitSpeedLength;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParachuteAttachmentInfo
	ApexCharacterBase* AttachedParent;//[Offset: 0x0, Size: 0x8]
	int8 ParachuteTeamIndex;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SecJumpFlow.SecBasic
	int GameStartTime;//[Offset: 0x40, Size: 0x4]
	int StartJumpTime;//[Offset: 0x44, Size: 0x4]
	int EndJumpTime;//[Offset: 0x48, Size: 0x4]
	int PlayerJumpTime;//[Offset: 0x4c, Size: 0x4]
	int PlayerLandTime;//[Offset: 0x50, Size: 0x4]
	int PlayerSpeedMax1;//[Offset: 0x54, Size: 0x4]
	int PlayerSpeedMax2;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: ParticleEffectSetCfg
	<enum,ParticleSystem*> ParachuteEffects;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: CharacterMagmaRiseComponent.ActorComponent.Object
	float ForwardMoveSpeed;//[Offset: 0xf0, Size: 0x4]
	float RightMoveSpeed;//[Offset: 0xf4, Size: 0x4]
	float RightAcceleRate;//[Offset: 0xf8, Size: 0x4]
	float MaxRiseZSpeed;//[Offset: 0xfc, Size: 0x4]
	float RiseAcceleration;//[Offset: 0x100, Size: 0x4]
	float RiseHitTopMinHeight;//[Offset: 0x104, Size: 0x4]
	float RiseHitTopMaxAngle;//[Offset: 0x108, Size: 0x4]
	float MagmaRiseDelayTime;//[Offset: 0x10c, Size: 0x4]
	bool bMagmaAnimState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]
	MagmaRiseStateCameraEffectCfg StartCameraEffectCfg;//[Offset: 0x140, Size: 0x40]
	MagmaRiseStateCameraEffectCfg EndCameraEffectCfg;//[Offset: 0x180, Size: 0x40]
	MagmaRiseCameraSpringArmCfg FirstEnterMagmaRiseCameraCfg;//[Offset: 0x1c0, Size: 0x14]
	class CameraShake* FirstEnterMagmaRiseCameraShake;//[Offset: 0x1d8, Size: 0x8]
	float FirstEnterMagmaRiseDurationOffset;//[Offset: 0x1e0, Size: 0x4]
	bool IsFirstEnterMagmaRise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 0x1]
	class CameraShake* CurMagmaRiseCameraShake;//[Offset: 0x1e8, Size: 0x8]
	CameraShake* CameraShakeInst;//[Offset: 0x1f0, Size: 0x8]
	ParticleEffectSetCfg ParticleEffectSetCfg;//[Offset: 0x1f8, Size: 0x50]
	FName[] StartAudioEffectCfg;//[Offset: 0x248, Size: 0x10]
	FName[] StopAudioEffectCfg;//[Offset: 0x258, Size: 0x10]
	AudioEffectManager* OwnerAudioEffectManager;//[Offset: 0x268, Size: 0x8]
	void Switch2MagmaRise();// 0x3b1602c
	void StopMagmaRise();// 0x3b160b0
	void StartMagmaRise();// 0x3b160c4
	void RequestAsyncLoadingParachuteParticle();// 0x3b15e40
	void OnRep_OnMagmaAnimState();// 0x3b15e2c
	void OnMoveHit(out const HitResult Hit);// 0x3b15e68
	void OnCameraStartMagmaRiseDelayFinished();// 0x3b15e54
	bool IsMagmaRise();// 0x3b16078
	Vector GetCurVelocity();// 0x3b16040
	void CalcVelocity(out Vector Velocity, out const Vector Acceleration, float DeltaTime);// 0x3b15f10

--------------------------------
Class: MagmaRiseStateCameraEffectCfg
	MagmaRiseCameraSpringArmCfg Normal;//[Offset: 0x0, Size: 0x14]
	MagmaRiseCameraSpringArmCfg Acc;//[Offset: 0x14, Size: 0x14]
	class CameraShake* MagmaRiseCameraShake;//[Offset: 0x28, Size: 0x8]
	bool EnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x34, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: MagmaRiseCameraSpringArmCfg
	float TargetArmLength;//[Offset: 0x0, Size: 0x4]
	bool bLerpFormCurArmLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	float StartArmLength;//[Offset: 0x8, Size: 0x4]
	float ArmLengthLerpDuration;//[Offset: 0xc, Size: 0x4]
	float NearClippingPlane;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: APAttributeSet.AttributeSet.Object
	GameplayAttributeData SpeedScale;//[Offset: 0x30, Size: 0x10]
	GameplayAttributeData MaxWalkSpeedLimit;//[Offset: 0x40, Size: 0x10]
	GameplayAttributeData DisableSprint;//[Offset: 0x50, Size: 0x10]
	GameplayAttributeData KnockdownSpeedScale;//[Offset: 0x60, Size: 0x10]
	GameplayAttributeData SkillDamageScale;//[Offset: 0x70, Size: 0x10]
	GameplayAttributeData AIDamageScale;//[Offset: 0x80, Size: 0x10]
	GameplayAttributeData MeleeAttackDamageScale;//[Offset: 0x90, Size: 0x10]
	GameplayAttributeData ViewScrollSpeedScale;//[Offset: 0xa0, Size: 0x10]
	GameplayAttributeData SpreadScale;//[Offset: 0xb0, Size: 0x10]
	GameplayAttributeData RescueMultiplier;//[Offset: 0xc0, Size: 0x10]
	GameplayAttributeData RescueSelfMultiplier;//[Offset: 0xd0, Size: 0x10]
	GameplayAttributeData IsIndiviRescue;//[Offset: 0xe0, Size: 0x10]
	GameplayAttributeData MoveShowDistanceScale;//[Offset: 0xf0, Size: 0x10]
	GameplayAttributeData FireShowDistanceScale;//[Offset: 0x100, Size: 0x10]
	GameplayAttributeData ConsumeShowDistanceScale;//[Offset: 0x110, Size: 0x10]
	GameplayAttributeData VisualSoundTriggerFactor;//[Offset: 0x120, Size: 0x10]
	GameplayAttributeData EnableVisualSound;//[Offset: 0x130, Size: 0x10]
	GameplayAttributeData EnableImmuneHitSlowly;//[Offset: 0x140, Size: 0x10]
	GameplayAttributeData TacticsSkillCDScale;//[Offset: 0x150, Size: 0x10]
	GameplayAttributeData UltimateSkillCDScale;//[Offset: 0x160, Size: 0x10]
	GameplayAttributeData TacticsSkillCDThresholdScale;//[Offset: 0x170, Size: 0x10]
	GameplayAttributeData UltimateSkillCDThresholdScale;//[Offset: 0x180, Size: 0x10]
	GameplayAttributeData TacticsSkillCDCastScale;//[Offset: 0x190, Size: 0x10]
	GameplayAttributeData UltimateSkillCDCastScale;//[Offset: 0x1a0, Size: 0x10]
	GameplayAttributeData PathfinderGrappleSpeedScale;//[Offset: 0x1b0, Size: 0x10]
	void OnRep_VisualSoundTriggerFactor(out const GameplayAttributeData OldValue);// 0x394ff58
	void OnRep_ViewScrollSpeedScale(out const GameplayAttributeData OldValue);// 0x3950438
	void OnRep_UltimateSkillCDThresholdScale(out const GameplayAttributeData OldValue);// 0x394fbb0
	void OnRep_UltimateSkillCDScale(out const GameplayAttributeData OldValue);// 0x394fce8
	void OnRep_UltimateSkillCDCastScale(out const GameplayAttributeData OldValue);// 0x394fa78
	void OnRep_TacticsSkillCDThresholdScale(out const GameplayAttributeData OldValue);// 0x394fc4c
	void OnRep_TacticsSkillCDScale(out const GameplayAttributeData OldValue);// 0x394fd84
	void OnRep_TacticsSkillCDCastScale(out const GameplayAttributeData OldValue);// 0x394fb14
	void OnRep_SpreadScale(out const GameplayAttributeData OldValue);// 0x395039c
	void OnRep_SpeedScale(out const GameplayAttributeData OldValue);// 0x395087c
	void OnRep_SkillDamageScale(out const GameplayAttributeData OldValue);// 0x395060c
	void OnRep_RescueSelfMultiplier(out const GameplayAttributeData OldValue);// 0x3950264
	void OnRep_RescueMultiplier(out const GameplayAttributeData OldValue);// 0x3950300
	void OnRep_PathfinderGrappleSpeedScale(out const GameplayAttributeData OldValue);// 0x394f9dc
	void OnRep_MoveShowDistanceScale(out const GameplayAttributeData OldValue);// 0x395012c
	void OnRep_MeleeAttackDamageScale(out const GameplayAttributeData OldValue);// 0x39504d4
	void OnRep_MaxWalkSpeedLimit(out const GameplayAttributeData OldValue);// 0x39507e0
	void OnRep_KnockdownSpeedScale(out const GameplayAttributeData OldValue);// 0x39506a8
	void OnRep_IsIndiviRescue(out const GameplayAttributeData OldValue);// 0x39501c8
	void OnRep_FireShowDistanceScale(out const GameplayAttributeData OldValue);// 0x3950090
	void OnRep_EnableVisualSound(out const GameplayAttributeData OldValue);// 0x394febc
	void OnRep_EnableImmuneHitSlowly(out const GameplayAttributeData OldValue);// 0x394fe20
	void OnRep_DisableSprint(out const GameplayAttributeData OldValue);// 0x3950744
	void OnRep_ConsumeShowDistanceScale(out const GameplayAttributeData OldValue);// 0x394fff4
	void OnRep_AIDamageScale(out const GameplayAttributeData OldValue);// 0x3950570

--------------------------------
Class: AttributeSet.Object

--------------------------------
Class: GameplayAttributeData
	float BaseValue;//[Offset: 0x8, Size: 0x4]
	float CurrentValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	<FName,byte> PlayerStateAttr;//[Offset: 0xf0, Size: 0x50]
	ActiveModifyContainer ActiveModifyContainer;//[Offset: 0x148, Size: 0x2b0]
	AttributeSet*[] SpawnedAttributes;//[Offset: 0x3f8, Size: 0x10]
	bool bCachedIsNetSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	delegate OnAttrModified;//[Offset: 0x420, Size: 0x10]
	bool bIsResBunchModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0x448, Size: 0x10]
	byte[] AttrModifyStateList;//[Offset: 0x458, Size: 0x10]
	AttrModifyItem[] DynamicModifierRepList;//[Offset: 0x468, Size: 0x10]
	AttrModifyItem[] DynamicModifierList;//[Offset: 0x478, Size: 0x10]
	AttrModifyItem[] DynamicModifierClientList;//[Offset: 0x488, Size: 0x10]
	bool UpdateDynamicModifierByFormula(out FormulaProxyAttrModifyItem AttrModifyItem, const float dt);// 0x3a8612c
	bool UpdateDynamicModifier(out AttrModifyItem AttrModifyItem);// 0x3a862b0
	void SetValueToAttribute(FString AttrName, float Value);// 0x3a85d74
	bool ReplaceModifyAbleAttr(out const AttrRegisterItem AttrRegistItem);// 0x3a86868
	bool RegisterModifyAbleAttr(out const AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x3a86974
	void OnRep_DynamicModifierList();// 0x3a85a24
	void OnRep_AttrModifyStateList();// 0x3a85a40
	void OnBatchResLoaded__DelegateSignature(int ReqID);// 0x43841ec
	void OnAttrModifiedEvent__DelegateSignature(out const FString[] AffectedAttrS);// 0x43841ec
	bool HasDynamicModifier(FString AttrModifyId);// 0x3a85f0c
	AttrModifyItem[] GetDynamicModifierRepList();// 0x3a85a5c
	bool GetAttrModifyItemByItemName(FString AttrModifyItemName, out AttrModifyItem OutItem);// 0x3a85b10
	float GetAttributeValueMax(FString AttrName);// 0x3a85c44
	float GetAttributeValue(FString AttrName);// 0x3a85cdc
	void EnableStaticModifiers(out const FString[] AttrModifyItemNames, FString ModifierSuffix);// 0x3a866ac
	bool EnableStaticModifier(FString AttrModifyItemName);// 0x3a867cc
	bool EnableDynamicModifier(out AttrModifyItem AttrModifyItem);// 0x3a86398
	bool EnableAllStaticModifier();// 0x3a864b8
	void DisableStaticModifiers(out const FString[] AttrModifyItemNames, FString ModifierSuffix);// 0x3a864f0
	bool DisableStaticModifier(FString AttrModifyItemName);// 0x3a86610
	bool DisableDynamicModifierById(FString AttrModifyId);// 0x3a86090
	bool DisableDynamicModifier(out AttrModifyItem AttrModifyItem);// 0x3a85fa8
	bool DisableAllStaticModifier();// 0x3a86480
	void AddValueToAttribute(FString AttrName, float Value);// 0x3a85e40

--------------------------------
Class: FormulaProxyAttrModifyItem.AttrModifyItem
	bool bEnableModifyLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	float MinModifyValue;//[Offset: 0x64, Size: 0x4]
	float MaxModifyValue;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: AttrModifyItem
	float FinalAddValue;//[Offset: 0x0, Size: 0x4]
	FString AttrModifyItemName;//[Offset: 0x8, Size: 0x10]
	enum AttrType;//[Offset: 0x18, Size: 0x1]
	FString AttrName;//[Offset: 0x20, Size: 0x10]
	enum ModifierOp;//[Offset: 0x30, Size: 0x1]
	bool bIsResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	float ModifierValue;//[Offset: 0x34, Size: 0x4]
	SoftObjectPath ModifierResValue;//[Offset: 0x38, Size: 0x18]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool ClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool LinearChanging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	float ChangingDuration;//[Offset: 0x54, Size: 0x4]
	float LinearProgressTime;//[Offset: 0x58, Size: 0x4]
	float OriModifierValue;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: AttrRegisterItem
	FString AttrName;//[Offset: 0x0, Size: 0x10]
	enum AttrVariableType;//[Offset: 0x10, Size: 0x1]
	bool HasReplicatedTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	Object* OriginalRes;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: ActiveModifyContainer.FastArraySerializer
	ActiveModify[] ActiveModifies_Internal;//[Offset: 0x270, Size: 0x10]

--------------------------------
Class: FastArraySerializer
	int ArrayReplicationKey;//[Offset: 0x54, Size: 0x4]
	enum DeltaFlags;//[Offset: 0x100, Size: 0x1]

--------------------------------
Class: ActiveModify.FastArraySerializerItem
	AttributeModifierSpec Spec;//[Offset: 0x18, Size: 0x110]
	PredictionKey PredictionKey;//[Offset: 0x128, Size: 0x10]
	float StartServerWorldTime;//[Offset: 0x138, Size: 0x4]
	float CachedStartServerWorldTime;//[Offset: 0x13c, Size: 0x4]
	float StartWorldTime;//[Offset: 0x140, Size: 0x4]
	bool bIsInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]

--------------------------------
Class: FastArraySerializerItem
	int ReplicationID;//[Offset: 0x0, Size: 0x4]
	int ReplicationKey;//[Offset: 0x4, Size: 0x4]
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CharacterDeathInfo
	bool bIsDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int MurderWeaponSkinId;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DispatchingActionCollection
	DispatchableActionBase*[] Actions;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: DispatchableActionBase.Object
	bool bIsCoexistWithOtherActionForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	enum DefaultActionCompatibleType;//[Offset: 0x29, Size: 0x1]
	DispatchableActionBase* GeneratedByTemplate;//[Offset: 0x30, Size: 0x8]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	DispatchableActionReplicationActor* ReplicationActor;//[Offset: 0x40, Size: 0x8]
	bool bIsCachedAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49, Size: 0x1]
	bool bTickable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49, Size: 0x1]
	void SetActionReplicatedTargets(Actor* NetOwner, out const Actor*[] RelevantTargets, bool ReplicateDispatcher, float RelevantDistance);// 0x22d0438
	void ReceiveWhenTick(float DeltaSeconds);// 0x43841ec
	void ReceiveWhenResetAction();// 0x43841ec
	void ReceiveWhenBroadcastDeactived();// 0x43841ec
	void ReceiveWhenBroadcastActived();// 0x43841ec
	void ReceiveWhenActionReactived();// 0x22d02d8
	void ReceiveWhenActionDeactived();// 0x43841ec
	void ReceiveWhenActionConstruct();// 0x43841ec
	void ReceiveWhenActionActived();// 0x43841ec
	void ReceiveWhenActionAborted(enum AbortState);// 0x22d02f4
	bool ReceiveCheckActionDispatchable();// 0x22d0298
	bool IsLocalControlled();// 0x22d05e8
	bool IsEvaluateBound(out const EvaluateDispatchableActionParameter Evaluator);// 0x22d01b4
	bool HasAuthority();// 0x22d05b0
	DispatchableActionReplicationActor* GetNetOwner();// 0x22d0620
	void FinishAction(out const DispatchableActionFinishEvent FinishEvent);// 0x22d038c
	void FinishAbort();// 0x22d0378
	bool ExecuteEvaluate(out const EvaluateDispatchableActionParameter Evaluator);// 0x22d00a4
	void CreateAssignOrResetActionFromTemplate(Object* Outer, out DispatchableActionBase* InstanceRef);// 0x22d06fc
	DispatchableActionBase* CreateActionFromTemplate(Object* Outer);// 0x22d07d0
	void ConstructAndActiveAction();// 0x22d0854

--------------------------------
Class: DispatchableActionReplicationActor.Actor.Object
	Actor*[] NetRelevantTargets;//[Offset: 0x250, Size: 0x10]
	DispatchableActionBase* RealAction;//[Offset: 0x260, Size: 0x8]
	EntityDispatcherBase* EntityDispatcher;//[Offset: 0x268, Size: 0x8]
	DispatchableActionBase* RPC_ProxyAction;//[Offset: 0x270, Size: 0x8]
	void OnRep_ProxyAction();// 0x22cfa7c

--------------------------------
Class: EntityDispatcherBase.Object
	bool DummyVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	DispatchableActionBase*[] ActivedActions;//[Offset: 0x30, Size: 0x10]
	FName CachedFinishTag;//[Offset: 0x58, Size: 0x8]
	delegate OnDispatcherFinishedDelegate;//[Offset: 0x60, Size: 0x10]
	delegate OnDispatcherAbortedDelegate;//[Offset: 0x88, Size: 0x10]
	DispatchableActionBase*[] AbortingActions;//[Offset: 0xb0, Size: 0x10]
	DispatchableActionBase*[] ReactivableActions;//[Offset: 0xc0, Size: 0x10]
	DispatchableActionBase*[] InvalidActions;//[Offset: 0xd0, Size: 0x10]
	bool TriggerActionCheckPass(FName InTriggerEventName);// 0x22d2b78
	void StartByDefaultEntry();// 0x22d2d04
	void ReceiveWhenDeactived();// 0x43841ec
	void ReceiveWhenActived();// 0x43841ec
	void OnDispatcherFinishedDelegate__DelegateSignature(out const FName Tag);// 0x43841ec
	void OnDispatcherAbortedDelegate__DelegateSignature();// 0x43841ec
	bool IsAnyActionActived(out const DispatchableActionBase*[] CheckedByTemplates);// 0x22d2a70
	EntityDispatcherBase* GetMainDispatcher();// 0x22d2b1c
	void FinishDispatch(FName InFinishTag);// 0x22d2c00
	void DefaultDispatchStart();// 0x43841ec
	bool CanActiveAction_ByTemplate(DispatchableActionBase* CheckedByTemplate);// 0x22d29e8
	bool CanActiveAction_ByInstance(DispatchableActionBase* CheckedInstance);// 0x22d2960
	void BP_AbortDispatcher();// 0x22d2b50
	bool ActiveDispatcherCheckPass(FName EntryPointName);// 0x22d2c7c

--------------------------------
Class: EvaluateDispatchableActionParameter

--------------------------------
Class: DispatchableActionFinishEvent
	delegate OnDispatchableActionFinished;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: Apex_NPC_Component.ActorComponent.Object
	TurnMontageSet NoEquipTurnSet;//[Offset: 0xf0, Size: 0x140]
	TurnMontageSet EquipTurnSet;//[Offset: 0x230, Size: 0x140]
	bool bEnableNpcSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x370, Size: 0x1]
	ApexNpcSettings NpcSettings;//[Offset: 0x378, Size: 0x1a0]
	Actor* TurnToTarget;//[Offset: 0x518, Size: 0x8]
	void SpeakSentence_NetMulticast(int SentenceId);// 0x3952b50

--------------------------------
Class: TurnMontageSet
	AnimMontage* TurnLeft45_Montage;//[Offset: 0x0, Size: 0x28]
	AnimMontage* TurnLeft90_Montage;//[Offset: 0x28, Size: 0x28]
	AnimMontage* TurnLeft135_Montage;//[Offset: 0x50, Size: 0x28]
	AnimMontage* TurnLeft180_Montage;//[Offset: 0x78, Size: 0x28]
	AnimMontage* TurnRight45_Montage;//[Offset: 0xa0, Size: 0x28]
	AnimMontage* TurnRight90_Montage;//[Offset: 0xc8, Size: 0x28]
	AnimMontage* TurnRight135_Montage;//[Offset: 0xf0, Size: 0x28]
	AnimMontage* TurnRight180_Montage;//[Offset: 0x118, Size: 0x28]

--------------------------------
Class: ApexNpcSettings
	<FName,float> AttrSettings;//[Offset: 0x0, Size: 0x50]
	PlayerLoadoutConfig LoadoutConfig;//[Offset: 0x50, Size: 0xd0]
	<int,int> TombBoxItems;//[Offset: 0x120, Size: 0x50]
	FText Name;//[Offset: 0x170, Size: 0x18]
	LinearColor Color;//[Offset: 0x188, Size: 0x10]
	int TeamID;//[Offset: 0x198, Size: 0x4]

--------------------------------
Class: PlayerLoadoutConfig
	int LoadoutID;//[Offset: 0x0, Size: 0x4]
	PlayerLoadoutWeapon MainWeapon;//[Offset: 0x8, Size: 0x38]
	PlayerLoadoutWeapon SubWeapon;//[Offset: 0x40, Size: 0x38]
	PlayerLoadoutItem[] Drug;//[Offset: 0x78, Size: 0x10]
	PlayerLoadoutItem[] Shield;//[Offset: 0x88, Size: 0x10]
	PlayerLoadoutItem FallingShield;//[Offset: 0x98, Size: 0x8]
	PlayerLoadoutItem Helmet;//[Offset: 0xa0, Size: 0x8]
	PlayerLoadoutItem Armor;//[Offset: 0xa8, Size: 0x8]
	PlayerLoadoutItem Backpack;//[Offset: 0xb0, Size: 0x8]
	PlayerLoadoutItem[] Grenade;//[Offset: 0xb8, Size: 0x10]
	bool bForceLoadout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]

--------------------------------
Class: PlayerLoadoutWeapon
	int ID;//[Offset: 0x0, Size: 0x4]
	int Set;//[Offset: 0x4, Size: 0x4]
	int Level;//[Offset: 0x8, Size: 0x4]
	bool SpecialWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int WeaponID;//[Offset: 0x10, Size: 0x4]
	int BulletID;//[Offset: 0x14, Size: 0x4]
	int BulletNum;//[Offset: 0x18, Size: 0x4]
	PlayerLoadoutItem[] WeaponFittings;//[Offset: 0x20, Size: 0x10]
	bool bIsWholeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: PlayerLoadoutItem
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemCount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BasePropsWeaponAttrModifier.Object
	<FString,WeaponAttrModifyConfig> WeaponAttrModifyConfigList;//[Offset: 0x28, Size: 0x50]
	<enum,LegendWeaponAttrModifyConfigList> LegendTypeWeaponAttrModifyConfigList;//[Offset: 0x78, Size: 0x50]
	void SetAttrModifierEnable(FString AttrModifierID, bool bEnable, Actor* InCharacter);// 0x3ac3f74
	void ClearAttrModifier(Actor* InCharacter);// 0x3ac3ef8

--------------------------------
Class: ApexKnockdownShield.Actor.Object
	ParticleSystem* ImpactPS;//[Offset: 0x258, Size: 0x8]
	ParticleSystem* TPPShieldPS;//[Offset: 0x260, Size: 0x8]
	ParticleSystem* FPPShieldPS;//[Offset: 0x268, Size: 0x8]
	AkAudioEvent* BeginAudio1P;//[Offset: 0x270, Size: 0x8]
	AkAudioEvent* BeginAudio3P;//[Offset: 0x278, Size: 0x8]
	AkAudioEvent* EndAudio1P;//[Offset: 0x280, Size: 0x8]
	AkAudioEvent* EndAudio3P;//[Offset: 0x288, Size: 0x8]
	AkAudioEvent* BreakAudio;//[Offset: 0x290, Size: 0x8]
	float AddKnockdownSpeedScale;//[Offset: 0x298, Size: 0x4]
	<byte,ColorBlindnessQuality> ColorBlindnessGroup;//[Offset: 0x2a0, Size: 0x50]
	bool bCurrentTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	ParticleSystemComponent* ShieldPSC;//[Offset: 0x2f8, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh1p;//[Offset: 0x300, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh3p;//[Offset: 0x308, Size: 0x8]
	bool bIsAgent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	int OwnerPlayerKey;//[Offset: 0x31c, Size: 0x4]
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x39dec18
	bool StuckInto(Actor* InActor);// 0x39de8f8
	void Start(bool bIsTPP);// 0x39dedac
	void SetColor();// 0x39ded84
	void PlaySound(out AkAudioEvent* Audio);// 0x39dea18
	void OnClientTakeDamage(int DamageTypeId, Actor* DamageCauser, int CauserPlayerKey);// 0x39deaa4
	void OnCameraChanged();// 0x39ded98
	int GetLevel();// 0x39debb0
	ParticleSystem* GetImpactPS();// 0x39debe4
	bool CanStuckInto(Actor* InActor);// 0x39de988

--------------------------------
Class: ColorBlindnessQuality
	LinearColor[] QualityColorArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ApexMirageManagerComponent.ActorComponent.Object
	ApexMirageCharacter*[] MirageDecoyList;//[Offset: 0xf0, Size: 0x10]
	bool bEnableTeammateSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int TeammateSkinMinCount;//[Offset: 0x134, Size: 0x4]
	int TeammateSkinMaxCount;//[Offset: 0x138, Size: 0x4]
	<enum> DecoyListenPawnState;//[Offset: 0x140, Size: 0x50]
	Vector MoveTargetFromIndicator;//[Offset: 0x190, Size: 0xc]
	GameplayTask_InvisibleEffectWithDither* SelfInvisibleTask;//[Offset: 0x1a0, Size: 0x8]
	GameplayTask_InvisibleEffectWithDither* OtherInvisibleTask;//[Offset: 0x1a8, Size: 0x8]
	GameplayTask_InvisibleEffectWithDither* FlashInvisibleTask;//[Offset: 0x1b0, Size: 0x8]
	float MaxRescueRealTimeSec;//[Offset: 0x1b8, Size: 0x4]
	float CurrentRescueRealTimeSec;//[Offset: 0x1bc, Size: 0x4]
	ApexCharacter* BeRescuePlayer;//[Offset: 0x1c0, Size: 0x8]
	ApexCharacter* rescuePlayer;//[Offset: 0x1c8, Size: 0x8]
	enum InvisibleType;//[Offset: 0x1d0, Size: 0x1]
	bool bBeCryptoDrone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]
	bool bIsTeammateWithCryptoDrone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d2, Size: 0x1]
	bool bNeedPrintLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d3, Size: 0x1]
	void UnPossessMirageDocoyByType(enum Type);// 0x39e9930
	void SyncMoveTargetFromIndicator(Vector MoveTarget);// 0x39e9628
	void StopFlash();// 0x43841ec
	void SetInvisibleByParam(ApexCharacter* InCharacter, const bool Invisible, const Vector InMaxTimeAndMaxValue, CurveFloat* InCurve);// 0x39e933c
	void SetInvisible(ApexCharacter* InCharacter, const bool Invisible, enum InSkillEvent, SkillEventParam* InParam);// 0x39e9494
	void RemoveDecoyByType(enum Type, bool bDestroy);// 0x39e9a3c
	void RemoveAllDecoy();// 0x39e9a28
	void PushMirageDecoy(ApexMirageCharacter* MirageCharacter);// 0x39e9dd0
	void PossessMirageDocoyByType(enum Type);// 0x39e99ac
	void PopMirageDecoy(ApexMirageCharacter* MirageCharacter);// 0x39e9d54
	void OnTakeAnyDamage(Actor* DamagedActor, float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x39e8a1c
	void OnStopSkill(int SkillIndex, enum StopReason, int SkillHandleID);// 0x39e8f90
	void OnSetInvisibleByParam(ApexCharacter* InCharacter, const bool Invisible, const Vector InMaxTimeAndMaxValue, CurveFloat* InCurve);// 0x43841ec
	void OnSetInvisible(ApexCharacter* InCharacter, const bool Invisible, enum InSkillEvent, SkillEventParam* InParam);// 0x43841ec
	void OnRespawnFinished();// 0x43841ec
	void OnRescueFinished();// 0x43841ec
	void OnRescueBegin();// 0x43841ec
	void OnRemovePawnState(enum State, enum Reason, enum InterruptedBy);// 0x39e976c
	void OnRemoveBuff(int BuffID, FName BuffName, Controller* BuffCauser, Actor* CauserActor);// 0x39e8ba4
	void OnReceiveSkillEvent(int InSkillID, enum SkillEvent, SkillEventParam* InParam);// 0x39e9094
	void OnReceivePassiveEventInBlueprint(enum SkillEvent, SkillEventParam* InParam);// 0x43841ec
	void OnKeyDown(UTSkillManagerComponent* SkillManagerComponent, byte TriggerEventType);// 0x39e96ac
	void OnInvisibleChange(ApexCharacter* InCharacter, const bool Invisible);// 0x39e9274
	void OnEnterUltimateInvisible(SkillEventParam* InParam);// 0x43841ec
	void OnCharacterRescueFinished();// 0x39e8e84
	void OnCharacterRescue(ApexCharacter* InRescuePlayer);// 0x39e8f14
	void OnCharacterDying();// 0x39e8e70
	void OnCharacterBeRescue(ApexCharacter* InRescuer);// 0x39e8e98
	void OnBeRescuePlayerTakeAnyDamage(Actor* DamagedActor, float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x39e8894
	void OnAddPawnState(enum State, enum OverrideState);// 0x39e9870
	void OnAddBuff(int BuffID, FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x39e8ce8
	void MulticastFlash(const bool bFlashSelf, const bool bLoop);// 0x39e9198
	bool IsInvisibleNeedChangeMaterial();// 0x39e885c
	bool HasAuthority();// 0x39e95ec
	ApexCharacter*[] GetUtlDecoySkinParents();// 0x39e9e4c
	ApexMirageCharacter*[] GetPossesedDecoy(bool bPossesed);// 0x39e9b38
	ApexMirageCharacter*[] GetDecoyListByType(enum Type);// 0x39e9c08
	ApexMirageCharacter*[] GetDecoyList();// 0x39e9cd0
	ApexMirageCharacter* GetCurrentTacticsDecoy();// 0x39e9b04
	void Flash(ApexCharacter* FlashCharacter, bool bLoop);// 0x43841ec
	void DealReconnectedInServer();// 0x39e8848

--------------------------------
Class: ApexMirageCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	bool bPossessByOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa08, Size: 0x1]
	int FlashBuffCount;//[Offset: 0xa0c, Size: 0x4]
	byte CurParachuteState;//[Offset: 0xa10, Size: 0x1]
	bool bMoveToTargetComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa11, Size: 0x1]
	enum DecoySourceType;//[Offset: 0xa12, Size: 0x1]
	float DeltaYawBetweenOwner;//[Offset: 0xa14, Size: 0x4]
	bool bIsDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa18, Size: 0x1]
	PawnStateManager* StateManagerComponent;//[Offset: 0xa48, Size: 0x8]
	CharacterInputComponent* CharacterInputComponent;//[Offset: 0xa58, Size: 0x8]
	ApexCharacter* SkinParent;//[Offset: 0xa60, Size: 0x8]
	bool bArmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa68, Size: 0x1]
	bool bIsCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa69, Size: 0x1]
	bool bExposeHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6a, Size: 0x1]
	BlendSpace* ArmedCharacterStand;//[Offset: 0xa70, Size: 0x8]
	BlendSpace* UnarmedCharacterStand;//[Offset: 0xa78, Size: 0x8]
	BlendSpace* ArmedCharacterCrouch;//[Offset: 0xa80, Size: 0x8]
	BlendSpace* UnarmedCharacterCrouch;//[Offset: 0xa88, Size: 0x8]
	BlendSpace* ADSCharacterCrouch;//[Offset: 0xa90, Size: 0x8]
	BlendSpace* ADSCharacterStand;//[Offset: 0xa98, Size: 0x8]
	BlendSpace1D* UnarmedCharacterSprint;//[Offset: 0xaa0, Size: 0x8]
	BlendSpace1D* ArmedCharacterSprint;//[Offset: 0xaa8, Size: 0x8]
	AnimMontage* SlideMelee;//[Offset: 0xab0, Size: 0x8]
	AnimMontage* StandMelee;//[Offset: 0xab8, Size: 0x8]
	AnimMontage* CrouchMelee;//[Offset: 0xac0, Size: 0x8]
	AnimMontage* SprintMelee;//[Offset: 0xac8, Size: 0x8]
	AnimMontage* JumpMelee;//[Offset: 0xad0, Size: 0x8]
	AnimMontage* DoorMelee;//[Offset: 0xad8, Size: 0x8]
	AnimMontage* PassiveMontage;//[Offset: 0xae0, Size: 0x8]
	bool bIsPlayingPassiveMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae8, Size: 0x1]
	enum UsingWeaponSlot;//[Offset: 0xae9, Size: 0x1]
	<int,SceneComponent*> WeaponMeshMap;//[Offset: 0xaf0, Size: 0x50]
	PrimitiveComponent*[] WeaponMeshArray;//[Offset: 0xb40, Size: 0x10]
	bool bLockOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb50, Size: 0x1]
	bool bNeedEnableOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb51, Size: 0x1]
	GameplayTask_InvisibleEffectWithDither* InvisibleTask;//[Offset: 0xb58, Size: 0x8]
	<FName> FlashBuffs;//[Offset: 0xb68, Size: 0x50]
	PhysicalSurfaceAddBuff[] PhysicalSurfaceAddBuffs;//[Offset: 0xbb8, Size: 0x10]
	bool bIsOwnerFinisherOrEmoji;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc8, Size: 0x1]
	bool bHasPlayingFinisherOrEmojiMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc9, Size: 0x1]
	AnimMontage* FinisherOrEmojiAnimMontage;//[Offset: 0xbd0, Size: 0x8]
	ParticleEffectSetCfg CurActiveParachuteEffectIDSet;//[Offset: 0xbd8, Size: 0x50]
	int[] InstancedParachuteEffects;//[Offset: 0xc28, Size: 0x10]
	float ForceLandingHeight;//[Offset: 0xc38, Size: 0x4]
	float PawnHeight2Ground;//[Offset: 0xc3c, Size: 0x4]
	float ParchuteFlySpeedRate;//[Offset: 0xc48, Size: 0x4]
	float DecoyAutoSlideScale;//[Offset: 0xc4c, Size: 0x4]
	float DecoyJumpZSpeed;//[Offset: 0xc50, Size: 0x4]
	bool bEnableVisualSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc54, Size: 0x1]
	float StuckAdjustHeightValue;//[Offset: 0xc58, Size: 0x4]
	float controlTime;//[Offset: 0xc60, Size: 0x4]
	enum DecoyEndType;//[Offset: 0xc64, Size: 0x1]
	byte[] CheckBeStuckObjectTypes;//[Offset: 0xc68, Size: 0x10]
	float HpCurrent;//[Offset: 0xc78, Size: 0x4]
	float HpMax;//[Offset: 0xc7c, Size: 0x4]
	float StuckTimeToDestroy;//[Offset: 0xc80, Size: 0x4]
	float DoorImpuseForceScale;//[Offset: 0xc84, Size: 0x4]
	bool bIsInitWithOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc90, Size: 0x1]
	<enum> DecoyListenPawnState;//[Offset: 0xc98, Size: 0x50]
	Actor*[] BePingEnemys;//[Offset: 0xce8, Size: 0x10]
	GameplayTag PerkPingEnemyTag;//[Offset: 0xcf8, Size: 0x8]
	float PingInterval;//[Offset: 0xd00, Size: 0x4]
	float CurrentPingTime;//[Offset: 0xd04, Size: 0x4]
	float PingRange;//[Offset: 0xd08, Size: 0x4]
	bool CanPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0c, Size: 0x1]
	bool bIsFightInMainTown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd18, Size: 0x1]
	float NameHightOffset;//[Offset: 0xd34, Size: 0x4]
	void UpdateAnimationInfo();// 0x39e3738
	void UnPossesDecoyToPlayerController();// 0x39e23a0
	void TryPlayPassiveMontage();// 0x39e3584
	void SwitchWeaponSocket();// 0x39e3548
	void SwitchPossesState(bool bPosses);// 0x39e3c40
	void SwitchCrouch();// 0x39e2b74
	void StopParachute();// 0x39e3fa0
	void StartParachute();// 0x39e3fb4
	void SilencedByRevenantComplete();// 0x39e3188
	void SetWeaponMeshVisible(const bool bVisible);// 0x39e34c4
	void SetSkinParent(ApexCharacter* InSkinParent);// 0x39e3904
	void SetMoveToTargetComplete(bool InbMoveToTargetComplete);// 0x39e3f00
	void SetMirageDecoyAutonomousProxy();// 0x39e23b4
	void SetDecoySourceType(enum InDecoySourceType);// 0x39e3e84
	void ServerUpdateCharacterVelocity(Vector InVelocity);// 0x39e231c
	void ServerTriggerJump();// 0x39e3b3c
	void ReportDecoyDestroy(ApexCharacter* OwnerCharacter);// 0x39e278c
	void PingEnemy(const float DeltaTime);// 0x39e1f0c
	void OnSwitchPossesState(bool bPossesed);// 0x43841ec
	void OnStateLeave(enum LeavedState, enum Reason, enum InterruptedBy);// 0x39e2580
	void OnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0x39e268c
	void OnSourceCharacterDynamicSkinChange(Character* TargetCharacter, bool Success, FName SkinId);// 0x39e3774
	void OnSkillTriggerStringEvent(FString EventTypeStr, Actor* OwnerChar);// 0x39e3658
	void OnShootHit(out const HitEffectInstanceData ImpactResult);// 0x39e399c
	void OnRepPossedByOwnerFromServer();// 0x43841ec
	void OnRepDecoySourceTypeFromServer();// 0x43841ec
	void OnRep_SkinParent();// 0x39e3760
	void OnRep_ParachuteState();// 0x39e2884
	void OnRep_FlashBuffCount();// 0x39e3174
	void OnRep_DecoySourceType();// 0x39e3b58
	void OnRep_bPossessByOwner();// 0x39e3e70
	void OnRep_bIsDied();// 0x39e23c8
	void OnRemoveBuff(int BuffID, FName BuffName, Controller* BuffCauser, Actor* CauserActor);// 0x39e2e94
	void OnPutOnWeaponEndDelegate();// 0x39e293c
	void OnPutOnWeaponBeginDelegate(int WeaponID);// 0x39e2964
	void OnPutOffEndDelegate(int WeaponID);// 0x39e28c0
	void OnPutOffBeginDelegate();// 0x39e2950
	void OnParachuteStateChanged();// 0x39e2898
	void OnOwnerRemoveBuff(int BuffID, FName BuffName, Controller* BuffCauser, Actor* CauserActor);// 0x39e2bc8
	void OnOwnerEnterFinisherOrEmoji();// 0x39e28ac
	void OnOwnerCharacterRescueFinished();// 0x39e202c
	void OnOwnerAddBuff(int BuffID, FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x39e2d0c
	void OnOverrideStateChanged(enum State, enum NewOverrideState, enum PrevOverrideState);// 0x39e2474
	void OnMirageRemovePawnState(enum State, enum Reason, enum InterruptedBy);// 0x39e2144
	void OnMirageOverrideStateChange(enum State, enum NewOverrideState, enum PrevOverrideState);// 0x39e2040
	void OnMirageCharacterOnRep_Owner();// 0x43841ec
	void OnMirageAddPawnState(enum State, enum OverrideState);// 0x39e2248
	void OnMeleeAttackFromClient(Vector hitLoc, Vector Dir, float Speed, float Time, bool IsTeammate);// 0x39e29e0
	void OnMainTownControllerUpdateOutlineOverrideId();// 0x39e1ee4
	void OnInitComplete();// 0x39e3fc8
	void OnHitByShootWeaponSpawnEffect(Vector ImpactPoint, Vector ImportNormal, bool IsTeammate);// 0x43841ec
	void OnDoorPushActor(Vector ImpactNormal);// 0x43841ec
	void OnDie(enum DieReason);// 0x43841ec
	void OnChangeFlashBuffCount();// 0x39e3160
	void OnAttackTarget(int TypeID, byte PoseType);// 0x39e3598
	void OnAddBuff(int BuffID, FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x39e2fd8
	void LockOutline(const bool bLock);// 0x39e319c
	void LeaveServerState_Inner(enum State);// 0x39e3d7c
	bool IsAutonomousOrTeammate();// 0x39e2b90
	void InitWithOwner();// 0x39e2308
	void InitSkinAndAnimation(ApexCharacter* Parent);// 0x39e3888
	void InitAnimationInstanceData();// 0x39e3724
	bool HasPerkPingEnemyTag();// 0x39e1fc0
	ApexCharacter* GetSkinParent();// 0x39e3980
	PawnStateManager* GetPawnStateManager();// 0x39e3e34
	bool GetIsPossessByOwner();// 0x39e3f84
	bool GetIsDied();// 0x39e23dc
	void Flash(bool bLoop);// 0x43841ec
	void EnterSimulatedState(enum State);// 0x39e3ab8
	void EnterServerState_Inner(enum State);// 0x39e3cc4
	void EndPingEnemy();// 0x39e1ef8
	void Die(enum DieReason);// 0x39e23f8
	void DestroyWeapon();// 0x39e355c
	void DealPossesState(bool bPossesed, bool bCanJump);// 0x39e3b6c
	SceneComponent* CreateWeaponMesh(Weapon* Weapon, SceneComponent* InWeaponMeshComponent, SceneComponent* InParentComponent);// 0x39e33b8
	void CreateWeapon();// 0x39e3570
	SceneComponent* CreateStaticWeaponMesh(SceneComponent* InWeaponMeshComponent, SceneComponent* InParentComponent);// 0x39e32ec
	SceneComponent* CreateSkeletalWeaponMesh(SceneComponent* InWeaponMeshComponent, SceneComponent* InParentComponent);// 0x39e3220
	int CreatDecoyHeadWidget();// 0x39e1ff8
	bool CheckBeStuck();// 0x39e2754
	void ChangeMaterialByOwner();// 0x39e374c
	bool CanPingEnemy();// 0x39e1f88
	void CancelTaskExternal(GameplayTask* InTask);// 0x39e2808
	void BP_UpdateDecoyHeadUI();// 0x43841ec
	void BP_OnMainTownControllerUpdateOutlineOverrideId(bool bEnter);// 0x43841ec

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 0x1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float AnimLength;//[Offset: 0x8c, Size: 0x4]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 0x4]
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 0x1]
	bool ChooseCorrectIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 0x10]
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 0x4]
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 0x10]
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 0x10]
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 0x20]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8]
	Vector SampleValue;//[Offset: 0x8, Size: 0xc]
	float RateScale;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10]
	float Min;//[Offset: 0x10, Size: 0x4]
	float Max;//[Offset: 0x14, Size: 0x4]
	int GridNum;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]

--------------------------------
Class: GameplayTask_InvisibleEffectWithDither.GameplayTask.Object
	float MaxTime;//[Offset: 0x60, Size: 0x4]
	float CurrentTime;//[Offset: 0x64, Size: 0x4]
	CurveFloat* VisibleCurve;//[Offset: 0x68, Size: 0x8]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool bKeepLastValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	int CustomID;//[Offset: 0x74, Size: 0x4]
	delegate OnFinishCallback;//[Offset: 0x78, Size: 0x10]
	float LastDitherValue;//[Offset: 0x88, Size: 0x4]
	float LastMeshDitherSpeed;//[Offset: 0x8c, Size: 0x4]
	float MaxValue;//[Offset: 0x90, Size: 0x4]
	ApexCharacterBase* UpdateCharacter;//[Offset: 0x98, Size: 0x8]
	void TaskDelayDelegate__DelegateSignature();// 0x43841ec
	void SetProgress(const float Value, const bool ForceSet);// 0x3e3d61c
	static GameplayTask_InvisibleEffectWithDither* InvisibleEffectWithDither(interface classNone TaskOwner, ApexCharacterBase* InUpdateCharacter, int ResourceSetID, const float InvisibleTime, const float InMaxValue, CurveFloat* InVisibleCurve, const byte Priority);// 0x3e3d6e4

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8]
	void ReadyForActivation();// 0x62b38a0
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x43841ec
	void EndTask();// 0x62b388c

--------------------------------
Class: PhysicalSurfaceAddBuff
	byte SurfaceType;//[Offset: 0x0, Size: 0x1]
	FName AddBuffName;//[Offset: 0x4, Size: 0x8]
	bool IsDelayBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: HitEffectInstanceData
	bool bHitCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bIsTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bShooterIsTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bHitKnockdownShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bHitShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bFatalHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	enum CurShieldLevel;//[Offset: 0x7, Size: 0x1]
	int DamageType;//[Offset: 0x8, Size: 0x4]
	bool bIsUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	Transform InstanceTransform;//[Offset: 0x10, Size: 0x30]
	BulletHitInfoReplicateData SurfaceHit;//[Offset: 0x40, Size: 0x60]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	Vector DecalScale;//[Offset: 0xa4, Size: 0xc]
	SceneComponent* TargetImpactComp;//[Offset: 0xb0, Size: 0x8]
	bool bFXOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool bAttackerIsAutonomousClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	bool bVictimIsAutonomousClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1]
	int KnockDownShieldLevel;//[Offset: 0xbc, Size: 0x4]
	Actor* Attacker;//[Offset: 0xc0, Size: 0x8]
	bool bUseEffectOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]

--------------------------------
Class: VehicleComponent.ActorComponent.Object
	ApexVehicleActor* ApexVehicleActor;//[Offset: 0xf8, Size: 0x8]
	void OnRep_OnApexVehicleActorChanaged();// 0x3e52bf0
	void GetOffVehicle(ApexVehicleActor* VehicleTarget);// 0x3e52ccc
	void BrocastGetOffVehicle(ApexVehicleActor* VehicleTarget, int SeatIndex);// 0x3e52c04
	void BrocastBoardingVehicle(ApexVehicleActor* VehicleTarget, int SeatIndex);// 0x3e52d50
	void BoardingVehicle(ApexVehicleActor* VehicleTarget, int SeatIndex);// 0x3e52e18

--------------------------------
Class: ApexVehicleActor.DynamicMovementActor.Actor.Object
	ApexCharacter*[] PassengerInfos;//[Offset: 0x280, Size: 0x10]
	VehicleConfigBase* CacheVehicleConfig;//[Offset: 0x290, Size: 0x8]
	void SpeedUp();// 0x3a37690
	void Brake(bool bEnable);// 0x3a37604

--------------------------------
Class: VehicleConfigBase.DataAsset.Object
	float ServerGettingOnLockTime;//[Offset: 0x30, Size: 0x4]
	float DetectionDistance;//[Offset: 0x34, Size: 0x4]
	Vector GetOffOffset;//[Offset: 0x38, Size: 0xc]
	float BoardingTime;//[Offset: 0x44, Size: 0x4]
	VehiclePassengerSetting[] PassengerSetting;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: VehiclePassengerSetting
	enum CharacterOnVehicleType;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CharacterFinisherComponent.ActorComponent.Object
	class GameActionFinisherInstanceBase* DefaultFinisherAction;//[Offset: 0xf0, Size: 0x8]
	int FinisherActionID;//[Offset: 0xf8, Size: 0x4]
	bool bUseLobbyMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	bool bPreLoadLobbyMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd, Size: 0x1]
	float LobbyMeshLight;//[Offset: 0x100, Size: 0x4]
	float DetectInterval;//[Offset: 0x104, Size: 0x4]
	float InnerPreloadSquaredRange;//[Offset: 0x108, Size: 0x4]
	float OuterUnloadSquaredRange;//[Offset: 0x10c, Size: 0x4]
	bool bEnableForceCleanOnTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	enum WeaponSlot;//[Offset: 0x148, Size: 0x1]
	bool bDrawDirector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	bool bDrawMoveLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]
	bool bDrawMoveLineTraceForSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 0x1]
	bool bDrawMoveLineTraceForTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b, Size: 0x1]
	ApexCharacter* TargetCharacter;//[Offset: 0x170, Size: 0x8]
	GameActionFinisherInstanceBase* FinisherActionInstance;//[Offset: 0x178, Size: 0x8]
	Actor* FinisherDirectorActor;//[Offset: 0x180, Size: 0x8]
	bool bInFinisher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	SceneComponent* SourceParent;//[Offset: 0x190, Size: 0x8]
	SceneComponent* TargetParent;//[Offset: 0x198, Size: 0x8]
	TimerHandle CancelFinisherTimer;//[Offset: 0x1a0, Size: 0x8]
	enum CameraMode;//[Offset: 0x1a8, Size: 0x1]
	TimerHandle SyncTargetLocationOnFinisherEnd;//[Offset: 0x1b0, Size: 0x8]
	Vector FinisherTargetActorLocation;//[Offset: 0x1b8, Size: 0xc]
	Vector FinisherSourceActorLocation;//[Offset: 0x1c4, Size: 0xc]
	SkeletalMesh* LobbySkeletalMesh;//[Offset: 0x1d0, Size: 0x8]
	MaterialInterface*[] LobbyMaterials;//[Offset: 0x1d8, Size: 0x10]
	SceneComponent* SourceCameraEffectNodeParent;//[Offset: 0x1e8, Size: 0x8]
	Transform SourceCameraEffectTransform;//[Offset: 0x1f0, Size: 0x30]
	SceneComponent* TargetCameraEffectNodeParent;//[Offset: 0x220, Size: 0x8]
	Transform TargetCameraEffectTransform;//[Offset: 0x230, Size: 0x30]
	Rotator BaseRotationInFinisher;//[Offset: 0x260, Size: 0xc]
	Rotator BaseMeshRotationInFinisher;//[Offset: 0x26c, Size: 0xc]
	byte CapsuleCollisionResponse;//[Offset: 0x278, Size: 0x1]
	byte MeshCollisionResponse;//[Offset: 0x279, Size: 0x1]
	byte OwnerCapsuleCollisionResponse;//[Offset: 0x27a, Size: 0x1]
	byte OwnerMeshCollisionResponse;//[Offset: 0x27b, Size: 0x1]
	float NextDetectTime;//[Offset: 0x27c, Size: 0x4]
	void UpdateLocalPlayerDetector();// 0x3b0f528
	void SyncLocationToServer(const Vector SourceLocation, const Vector TargetLocation);// 0x3b0fcd0
	void ShowWhiteLightScreenEffect(bool bIsShow);// 0x3b0f78c
	void ShowScreenEffectOnFinisherComplete();// 0x3b0f810
	void ShowCancelButtonTimer();// 0x3b0f514
	void ResetLobbyMesh();// 0x3b0fb5c
	void RemoveGameAction();// 0x3b0f53c
	void RemoveCancelButtonTimer();// 0x3b0f500
	Vector RebaseLocalOriginOntoZero(Vector Location);// 0x3b0f824
	void PrePlayAction(ApexCharacter* Target);// 0x3b0fec0
	void Play(ApexCharacter* Target);// 0x3b100f8
	void OnWeaponPutOffEnd(int WeaponID);// 0x3b0fd8c
	void OnSourceOrTargetDeath();// 0x3b0fe08
	void OnRep_FinisherActionID();// 0x3b0fe1c
	void OnRemoveFinisherState(enum State, enum Reason, enum InterruptedBy);// 0x3b0f3d4
	void OnPlayAction(GameActionFinisherInstanceBase* InFinisherAction, ApexCharacter* Target);// 0x3b1003c
	void OnLoadGameActionForSimulatedProxyComplete(out const SoftObjectPath[] InPaths, out const Object*[] InLoadAssets);// 0x3b0f564
	void OnLoadGameActionClassComplete(SoftObjectPath Loader);// 0x3b0f69c
	void OnFinisherEnd(enum Reason);// 0x3b0fe44
	void OnAsyncPreLoadLobbyMeshComplete(out const SoftObjectPath[] Paths, out const Object*[] LoadAssets);// 0x3b0f8ec
	void OnAsyncLoadLobbyMeshComplete(out const SoftObjectPath[] Paths, out const Object*[] LoadAssets);// 0x3b0fa24
	void LoadLobbyMesh(const bool bIsPreLoad);// 0x3b0fb70
	void LoadGameActionClass();// 0x3b0f778
	void InitFinisherActionInstanceClass();// 0x3b0fe30
	void HideCancelButton();// 0x3b0f4ec
	void CleanStateOnFinisherEnd(enum Reason);// 0x3b0ff44
	void CheckNeedShowMapFlags();// 0x3b0f4d8
	Vector CheckClientLocationValid(ApexCharacter* Character, out const Vector Location);// 0x3b0fbf4
	bool CanUseLobbyMesh();// 0x3b0f8b4
	void AddGameAction();// 0x3b0f550
	void Abort(enum AbortReason);// 0x3b0ffc0

--------------------------------
Class: GameActionFinisherInstanceBase.GameActionInstanceBase.Object
	int MotionMoveID;//[Offset: 0x8c, Size: 0x4]
	ApexCharacter* FinisherTarget;//[Offset: 0x90, Size: 0x8]
	Actor* Director;//[Offset: 0x98, Size: 0x8]
	enum EndReason;//[Offset: 0xa0, Size: 0x1]
	bool bIsSwitchCameraByFinisherRole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	void OnRep_FinisherTarget();// 0x3b9a5b8
	void OnRep_EndReason();// 0x3b9a5cc
	void OnPreActive();// 0x43841ec
	void NetSetFinisherTarget(ApexCharacter* InFinisherTarget);// 0x3b9a86c
	void NetSetEndReasonTarget(const enum Reason);// 0x3b9a6e8
	void __SetFinisherTargetToServer(ApexCharacter* InFinisherTarget);// 0x3b9a7e8
	void __SetFinisherTargetToClient(ApexCharacter* InFinisherTarget);// 0x3b9a764
	void __SetEndReasonToServer(const enum Reason);// 0x3b9a664
	void __SetEndReasonToClient(const enum Reason);// 0x3b9a5e0

--------------------------------
Class: GameActionInstanceBase.Object
	GameActionComponent* OwningComponent;//[Offset: 0x28, Size: 0x8]
	GameActionEntry DefaultEntry;//[Offset: 0x30, Size: 0x10]
	bool bSharePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	GameActionSequencePlayer* SequencePlayer;//[Offset: 0x48, Size: 0x8]
	float SubStepDuration;//[Offset: 0x50, Size: 0x4]
	GameActionSegmentBase* ActivedSegment;//[Offset: 0x58, Size: 0x8]
	Actor*[] InstanceManagedSpawnables;//[Offset: 0x78, Size: 0x10]
	bool TryStartEntry(out const GameActionEntry Entry);// 0x2361ae0
	bool TryStartDefaultEntry();// 0x2361aa8
	bool TryEventTransition(FName EventName);// 0x23619e8
	void TransformActorData(out const GameActionPossessableActorData ActorData, out Vector WorldLocation, out Rotator WorldRotation);// 0x2361838
	void ReceiveWhenDestruct();// 0x43841ec
	void ReceiveWhenDeactived();// 0x43841ec
	void ReceiveWhenConstruct();// 0x43841ec
	void ReceiveWhenActived();// 0x43841ec
	void ReceiveWhenAborted();// 0x23619cc
	void ReceiveTick(float DeltaSeconds);// 0x43841ec
	void PushEnableSubStepMode();// 0x2361c1c
	void PopEnableSubStepMode();// 0x2361c08
	void OnRep_OwningComponent();// 0x2361c30
	void OnRep_ActivedSegment(GameActionSegmentBase* PreActivedSegment);// 0x2361b8c
	bool IsLocalControlled();// 0x2361c7c
	bool IsActived();// 0x2361a70
	void InvokeTransitionToServer(GameActionSegmentBase* FromSegment, GameActionSegmentBase* ToSegment, const FName ServerCheckFunctionName);// 0x2361730
	bool HasAuthority();// 0x2361c44
	Character* GetOwner();// 0x2361cb4
	Transform GetOriginTransform();// 0x2361960
	void FinishInstanceToServer();// 0x2361690
	void CancelActionToClient(GameActionSegmentBase* Segment);// 0x23616ac
	void AbortInstanceToServer();// 0x2361674
	void AbortInstanceNetMulticast();// 0x2361658
	void AbortGameAction();// 0x2361a94

--------------------------------
Class: GameActionEntry
	GameActionEntryTransition[] Transitions;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: GameActionEntryTransition.GameActionTransitionBase

--------------------------------
Class: GameActionTransitionBase
	delegate Condition;//[Offset: 0x0, Size: 0x10]
	GameActionSegmentBase* TransitionToSegment;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: GameActionSegmentBase.Object
	delegate OnActionActivedEvent;//[Offset: 0x28, Size: 0x10]
	delegate OnActionAbortedEvent;//[Offset: 0x38, Size: 0x10]
	delegate OnActionDeactivedEvent;//[Offset: 0x48, Size: 0x10]
	delegate OnActionTickEvent;//[Offset: 0x58, Size: 0x10]
	delegate OnActionTransitionFailed;//[Offset: 0x68, Size: 0x10]
	delegate EvaluateExposedInputsEvent;//[Offset: 0x78, Size: 0x10]
	GameActionTickTransition[] TickTransitions;//[Offset: 0x88, Size: 0x10]
	GameActionEventTransition[] EventTransitions;//[Offset: 0x98, Size: 0x10]
	void ReceiveWhenTransitionFailed(GameActionSegmentBase* TransitionFailedSegment);// 0x2362edc
	void ReceiveWhenActionTick(float DeltaSeconds);// 0x43841ec
	void ReceiveWhenActionDeactived();// 0x43841ec
	void ReceiveWhenActionActived();// 0x43841ec
	void ReceiveWhenActionAborted();// 0x2362f60
	void EvaluateExposedInputsEvent__DelegateSignature();// 0x43841ec
	void DefaultTransitionFailedToClient();// 0x2362ec0

--------------------------------
Class: GameActionTickTransition.GameActionTransitionBase

--------------------------------
Class: GameActionEventTransition.GameActionTransitionBase
	FName EventName;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: GameActionPossessableActorData
	Vector RelativeLocation;//[Offset: 0x0, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: GameActionComponent.ActorComponent.Object
	<class GameActionInstanceBase> DefaultActions;//[Offset: 0xf0, Size: 0x50]
	<GameActionInstanceBase*> PreActionInstances;//[Offset: 0x140, Size: 0x50]
	GameActionInstanceBase*[] ActionInstances;//[Offset: 0x190, Size: 0x10]
	GameActionSequencePlayer* SharedPlayer;//[Offset: 0x1a0, Size: 0x8]
	bool TryPlayCreatedGameAction(GameActionInstanceBase* Instance, out const GameActionEntry Entry);// 0x235dfc4
	void RemoveGameAction(class GameActionInstanceBase Action);// 0x235e304
	void PlayGameActionToServer(class GameActionInstanceBase Action, FName EntryName);// 0x235dec8
	void PlayGameAction(class GameActionInstanceBase Action, FName EntryName);// 0x235e138
	void OnRep_ActionInstances();// 0x235e404
	bool IsSharedPlayerPlaying();// 0x235de90
	bool IsAnyActionActived();// 0x235df8c
	GameActionInstanceBase* GetSharedPlayerActiveAction();// 0x235de5c
	GameActionInstanceBase* FindGameAction(class GameActionInstanceBase Action);// 0x235e280
	GameActionInstanceBase* CreateGameActionToPlay(class GameActionInstanceBase Action);// 0x235e0b4
	bool ContainGameAction(class GameActionInstanceBase Action);// 0x235e1f4
	GameActionInstanceBase* AddGameAction(class GameActionInstanceBase Action);// 0x235e380
	void AbortSharedPlayerActiveAction();// 0x235de48

--------------------------------
Class: GameActionSequencePlayer.Object
	FrameNumber StartTime;//[Offset: 0x498, Size: 0x4]
	int DurationFrames;//[Offset: 0x49c, Size: 0x4]
	GameActionSequence* ServerPlayedSequence;//[Offset: 0x4a0, Size: 0x8]
	GameActionSequence* Sequence;//[Offset: 0x4a8, Size: 0x8]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x4b0, Size: 0x300]
	byte Status;//[Offset: 0x81c, Size: 0x1]
	int CurrentNumLoops;//[Offset: 0x820, Size: 0x4]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x824, Size: 0x10]
	GameActionInstanceBase* GameAction;//[Offset: 0x858, Size: 0x8]
	Character* CameraUpdateActor;//[Offset: 0x868, Size: 0x8]
	PlayerController* CameraUpdateController;//[Offset: 0x870, Size: 0x8]

--------------------------------
Class: GameActionSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	Guid OwnerGuid;//[Offset: 0x350, Size: 0x10]
	<Guid,FName> PossessableActors;//[Offset: 0x360, Size: 0x50]
	<Guid,GameActionSequenceSubobjectBinding> BindingSubobjects;//[Offset: 0x3b0, Size: 0x50]

--------------------------------
Class: GameActionSequenceSubobjectBinding
	FName OwnerPropertyName;//[Offset: 0x0, Size: 0x8]
	FString PathToSubobject;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CharacterAddBuffSelfComponent.ActorComponent.Object
	PhysicalSurfaceAddBuff[] PhysicalSurfaceAddBuffs;//[Offset: 0xf0, Size: 0x10]
	FString AudioID_Cure_Start_1P;//[Offset: 0x100, Size: 0x10]
	FString AudioID_Cure_Start_3P;//[Offset: 0x110, Size: 0x10]
	FString AudioID_Cure_End_1P;//[Offset: 0x120, Size: 0x10]
	FString AudioID_Cure_End_3P;//[Offset: 0x130, Size: 0x10]
	int TPPCureParticleEffectID;//[Offset: 0x140, Size: 0x4]
	ApexCharacter* CharacterOwner;//[Offset: 0x148, Size: 0x8]
	TimerHandle OneSecTimerHandle;//[Offset: 0x150, Size: 0x8]
	bool IsBreakShieldMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1]
	bool CanHealingSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 0x1]
	bool IsHealingHPSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176, Size: 0x1]
	bool IsHealingShieldSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x177, Size: 0x1]
	CureRepData CureRepData;//[Offset: 0x178, Size: 0xc]
	bool IsNeedCuring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	bool IsCuring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 0x1]
	void SetClientRefreshCD();// 0x3b054e8
	void ResetCD(float Damage);// 0x3b0557c
	void RecoverShield();// 0x3b0586c
	void RecoverHP();// 0x3b05880
	void RecoverDelay();// 0x3b05894
	void PostLuaEvent(Actor* OwnerTarget, int LuaCppEventTypeIndex, FString Arg1, FString Arg2, FString Arg3, FString Arg4);// 0x3b058a8
	void OnTakeDamage(float Damage, int DamageType, enum DamagePos, bool BreakShield, bool FatalHealth, Pawn* Attacker, Pawn* Victim, byte VictimOldHealthStatus);// 0x3b055f8
	void OnShieldMaxChange();// 0x3b05568
	void OnRep_OnRepIsNeedCuring();// 0x3b05518
	void OnRep_OnRepIsCuring();// 0x3b05504
	void OnRep_OnRepCureRepData();// 0x3b0552c
	void OnRep_OnRepCanHealingSelf();// 0x3b05540
	void OnPlayerDyingOrDeath();// 0x3b054d4
	void CheckPlayerOnSurfaceToAddBuff();// 0x3b05554
	void BP_StopRepairShield(ApexCharacter* PlayerEnt);// 0x43841ec
	void BP_StartRepairShield(ApexCharacter* PlayerEnt);// 0x43841ec
	void BP_RepairShieldCompleted(ApexCharacter* PlayerEnt);// 0x43841ec

--------------------------------
Class: CureRepData
	bool IsInCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float RecoverCD;//[Offset: 0x4, Size: 0x4]
	bool IsBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ApgameInspectWeaponLogic.Object
	void OnEventUsingWeaponSlotChange(enum InOld, enum InNew);// 0x3a5b278

--------------------------------
Class: ZiplinePlayerFlowData
	ZiplineComponent* RideZipline;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: ZiplineMagnetic.Actor.Object
	ApexCharacter* OwnerCharacter;//[Offset: 0x250, Size: 0x8]
	bool bIsRidingZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	bool bIsVerticalZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	float CenterRotation;//[Offset: 0x25c, Size: 0x4]
	void RefreshShow();// 0x3eba034
	void BP_SetMagneticYawAndPitch(float Yaw);// 0x43841ec
	void BP_SetIsRidingZipline(bool bIsRiding);// 0x43841ec
	void BP_ChangeShow(bool bIsVisible);// 0x43841ec

--------------------------------
Class: PickupLockData
	enum Reason;//[Offset: 0x0, Size: 0x1]
	float LockTime;//[Offset: 0x4, Size: 0x4]
	uint32 LockPlayerKey;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BattleItemPickupInfo
	Object* Source;//[Offset: 0x0, Size: 0x8]
	int count;//[Offset: 0x8, Size: 0x4]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x10, Size: 0x10]
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x28, Size: 0x20]

--------------------------------
Class: ItemRule
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int MaxCount;//[Offset: 0x4, Size: 0x4]
	int ProgressBarCount;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BackpackAddRuleComp.ActorComponent.Object
	<int,int> MaxCountRules;//[Offset: 0xf0, Size: 0x50]

--------------------------------
Class: IncNetArray
	NetArrayUnit[] incArray;//[Offset: 0x0, Size: 0x10]
	int[] unusePool;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NetArrayUnit
	BattleItemNet Unit;//[Offset: 0x0, Size: 0x48]
	bool markDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BattleItemNet
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x10]
	int count;//[Offset: 0x10, Size: 0x4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x18, Size: 0x10]
	ItemAssociation[] Associations;//[Offset: 0x28, Size: 0x10]
	bool bCanUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bBackpackInclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	int DeriveID;//[Offset: 0x3c, Size: 0x4]
	bool Fixed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: PingManagerComponent.ActorComponent.Object
	delegate ItemCreateCallback;//[Offset: 0x100, Size: 0x10]
	delegate ItemDeleteCallback;//[Offset: 0x110, Size: 0x10]
	delegate ItemResponseCallback;//[Offset: 0x120, Size: 0x10]
	delegate ItemCreateTempCallback;//[Offset: 0x130, Size: 0x10]
	delegate ItemClearByPlayerIDCallback;//[Offset: 0x140, Size: 0x10]
	delegate ItemHideCallback;//[Offset: 0x150, Size: 0x10]
	delegate ItemMarkReverseCallback;//[Offset: 0x160, Size: 0x10]
	delegate ItemResetCallback;//[Offset: 0x170, Size: 0x10]
	delegate ItemClearAllCallback;//[Offset: 0x180, Size: 0x10]
	delegate PickUpWrapCallback;//[Offset: 0x190, Size: 0x10]
	delegate ItemSkillResetCallback;//[Offset: 0x1a0, Size: 0x10]
	delegate ItemSkillCoollingResetCallback;//[Offset: 0x1b0, Size: 0x10]
	delegate EnterADSEnemyCallback;//[Offset: 0x1c0, Size: 0x10]
	delegate OnPingItemThroughBlock;//[Offset: 0x1d0, Size: 0x10]
	class PingAttributeDelare* AttributeDelareTemp;//[Offset: 0x1e0, Size: 0x8]
	PingAttributeDelare* AtrributeDelare;//[Offset: 0x1e8, Size: 0x8]
	uint64[] WaitToDeleteItemPingList_Server;//[Offset: 0x2d8, Size: 0x10]
	HitResult[] AllHitResults;//[Offset: 0x2e8, Size: 0x10]
	SiglePingInfo RecentlyLocalPingInfo;//[Offset: 0x300, Size: 0xa0]
	bool IsAutoPingEnemyOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	ApexDoor* TmpDoor;//[Offset: 0x3a8, Size: 0x8]
	PrimitiveComponent* TmpDoorComp;//[Offset: 0x3b0, Size: 0x8]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x3b8, Size: 0x8]
	PingDataReporter* DataReporter;//[Offset: 0x3c0, Size: 0x8]
	SiglePingInfo[] ServerPingList;//[Offset: 0x3c8, Size: 0x10]
	<int,SimpleServerPingInfo> ServerSimpleList;//[Offset: 0x3d8, Size: 0x50]
	<int,SimpleClientPingInfo> ClientPingMap;//[Offset: 0x428, Size: 0x50]
	<uint32,AutoMarkInfo> AutoMarkPlayerList;//[Offset: 0x478, Size: 0x50]
	<uint64,float> ItemHasMarkTimerMap;//[Offset: 0x4e8, Size: 0x50]
	AsynServerPingPositionInfo[] AyncServerPingPositionList;//[Offset: 0x650, Size: 0x10]
	UAEDataTable* PingDataTable;//[Offset: 0x670, Size: 0x8]
	UAEDataTable* WholeWeaponDataTable;//[Offset: 0x678, Size: 0x8]
	UAEDataTable* ItemToPingDataTable;//[Offset: 0x680, Size: 0x8]
	UAEDataTable* APGameItemDataTable;//[Offset: 0x688, Size: 0x8]
	PingAimedInfo PingAimedInfo;//[Offset: 0x690, Size: 0xc]
	enum CurrentButtonState;//[Offset: 0x69c, Size: 0x1]
	ApexCharacterMapFlags* MapFlags;//[Offset: 0x6a0, Size: 0x8]
	<uint32,AutoMarkInfo> ADSEnemyPlayerList;//[Offset: 0x6a8, Size: 0x50]
	bool bIsInADSMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 0x1]
	bool bIsOpenADSFromGameHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f9, Size: 0x1]
	bool bIsOpenADSFromSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fa, Size: 0x1]
	bool StartTraceBlock(int PingType, int FromType, bool UseQueue);// 0x3d26384
	int StartPingItemToTargetPoint(const Vector EndPos);// 0x3d25fb4
	int StartPingItemFromItemIDByDS(int ItemID, int64 ItemUUID);// 0x3d25d08
	int StartPingItemFromActorByDS(Actor* WeakActor, int PingType, float TotalTime, bool bIgnorePlayAudio);// 0x3d25bac
	bool StartPingItemByTombBox(PlayerTombBox* TombBox);// 0x3d25b24
	int StartPingItemByPickUpActor_DS(PickUpWrapperActor* PickActor, out const PickUpItemData PickUpData);// 0x3d259f0
	void StartPingItemByMiniMap(Vector WorldPosition);// 0x3d26308
	bool StartPingItemByItemUUID(int64 ItemUUID, bool IsAuto);// 0x3d25dd8
	void StartPingItemByInteract(Vector WorldPosition, int ItemID, int64 ItemUUID);// 0x3d25eb0
	void StartPingItemByEnemy(ApexCharacter* Target);// 0x3d26040
	int StartPingItemByDS(Vector WorldPosition, int PingType);// 0x3d26178
	void StartPingItem_Client(const Vector WorldPosition, const int PingType);// 0x3d26248
	void ShowDyingOrRespawnInfomation(ApexCharacterMapFlags* TmpMapFlag, const enum StatusMapFlags);// 0x3d227f0
	void SetPickUpNearListOpenState(const bool bIsOpen);// 0x3d234f4
	void SetPickUpListOpenState(const bool bIsOpen);// 0x3d23578
	void SetPickUpDeathBoxListOpenState(const bool bIsOpen);// 0x3d23470
	void SetCustomHitResult(out const HitResult HitResult);// 0x3d232a8
	void RPCServerSetAutoMark(bool IsAutoMark);// 0x3d24500
	void RPCServerResponsePing(SiglePingInfo SingleInfo);// 0x3d2490c
	void RPCServerResetCooling(float RemainTime, int PingIndex);// 0x3d24370
	void RPCServerMakePing(SiglePingInfo SingleInfo);// 0x3d256b4
	void RPCServerDeletePing(SiglePingInfo SingleInfo);// 0x3d25244
	void RPCServerDelayPing(SiglePingInfo SingleInfo);// 0x3d24f88
	void RPCServerClearPingByPlayerID(SiglePingInfo Info);// 0x3d2458c
	void RPCServerCancelReservePing(SiglePingInfo SingleInfo);// 0x3d24c8c
	void RPCClientSetPingVisible(int PingIndex, bool IsShow);// 0x3d22e74
	void RPCClientResponsePing(int PingIndex, const int PingType, int DingType, uint32 SourcePlayerKey);// 0x3d247c4
	void RPCClientResetCooling(float RemainTime, int PingIndex);// 0x3d24438
	void RPCClientMakePing(SiglePingInfo Info);// 0x3d2547c
	void RPCClientDeletePing(int PingIndex);// 0x3d251c0
	void RPCClientDelayPing(int PingIndex, uint32 PlayerKey);// 0x3d24ec4
	void RPCClientCancelReservePing(int PingIndex, int PingType, int DingType, uint32 SourcePlayerKey);// 0x3d24b44
	void ResetSkillCoolingDown(float RemainTime, int PingIndex);// 0x3d2339c
	void PlaySurviveAudio();// 0x3d231b0
	void PlayPingUISound(const enum UIActionType);// 0x3d231c4
	void PlayMapFlagsOKAnim();// 0x3d22760
	void PlayClaimItemAudio(const FString ItemAudioKey);// 0x3d230d8
	void OnUIStateEnterChangeCallback(enum UIState, bool bIsEnter);// 0x3d22684
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x3d22b58
	void OnSendClickPingDing(const enum PingType, int PingIndex, enum DingType, bool bLeftBubble);// 0x3d229f4
	void OnRep_PingListUpdate();// 0x3d22e60
	void OnRep_AsynServerPingPosition();// 0x3d22b44
	void OnGameDataLoaded(SoftClassPath SoftPath);// 0x3d264a4
	void OnClickPingDing(const enum PingButtonState);// 0x3d228b0
	void OnClickPingCallback(const enum PingType, bool UseQueue);// 0x3d2292c
	bool LocalResponsePing(int PingType, int PingIndex, int DingType, const bool bLeftBubble);// 0x3d23db4
	bool LocalMakePing(SiglePingInfo SingleInfo);// 0x3d2412c
	bool LocalDeletePing(int PingIndex);// 0x3d240a4
	bool LocalDelayPing(int PingType, int PingIndex);// 0x3d23fdc
	bool LocalClearPingByPlayerID(int FromType, int PingType);// 0x3d23cec
	bool LocalCancelReservePing(int PingType, int PingIndex);// 0x3d23f14
	bool IsTeammate(const int PlayerKey);// 0x3d22fc8
	bool IsSkill(int PingType);// 0x3d23050
	bool IsRealEnemy(int Index);// 0x3d235fc
	bool IsMarkByMySelf(const int PingIndex);// 0x3d23b64
	bool IsItemExist(const int PingIndex);// 0x3d23adc
	bool IsEnemySkill(const int PingIndex);// 0x3d22f40
	bool IsCurrentAimedState(int64 ItemUUID);// 0x3d239cc
	void HideMapFlagsInfo();// 0x3d2274c
	void HideDyingOrRespawnInfomation(ApexCharacterMapFlags* TmpMapFlag);// 0x3d22774
	Vector GetVectorByIndex(int Index);// 0x3d23684
	Vector GetTempItemActorVector(int64 ItemUUID);// 0x3d2370c
	void GetPingInfoByIndex(int PingIndex, out SiglePingInfo Info);// 0x3d22ce0
	bool GetHitResult(out HitResult TraceHitInfo, const Vector StartPos, const Vector EndPos);// 0x3d23794
	HitResult GetCustomHitResult();// 0x3d23240
	void GetCurrentTraceLinePosition(out Vector WorldPostion);// 0x3d23a54
	bool GetCurrentHitReuslt(out HitResult TraceHitInfo, float LineDist);// 0x3d238d0
	void DeletePingItemByDS(int PingType, int PingIndex);// 0x3d260bc
	void CreateItemPingWithActor_Client(Actor* WeakActor, const int ItemID, const int64 ItemUUID);// 0x3d258ec
	void ClearAutoMarkItemInDeathBox();// 0x3d2345c
	void CheckPickUpWrapHadDestroy(int64 ItemUUID);// 0x3d23bec
	bool CheckIsInEllipse(Vector2D ScreenPosition);// 0x3d23c68
	void AfterTickCheck_Client(float DeltaTime, out const Vector ViewLocation, out const Rotator ViewRotation);// 0x3d26580

--------------------------------
Class: PingAttributeDelare.Object
	float DelayTimeT1;//[Offset: 0x28, Size: 0x4]
	float DelayTimeT2;//[Offset: 0x2c, Size: 0x4]
	float DelayTimeT3;//[Offset: 0x30, Size: 0x4]
	float AvailbleItemRange;//[Offset: 0x34, Size: 0x4]
	float LobaAvailbleItemRange;//[Offset: 0x38, Size: 0x4]
	float DoubleClickAvailbleItemRange;//[Offset: 0x3c, Size: 0x4]
	float PlayerAudioInterval;//[Offset: 0x40, Size: 0x4]
	float EllipticalConstValueX;//[Offset: 0x44, Size: 0x4]
	float EllipticalConstValueY;//[Offset: 0x48, Size: 0x4]
	CurveFloat* MakeEnemyCurve;//[Offset: 0x50, Size: 0x8]
	float OpenEnemyCurve;//[Offset: 0x58, Size: 0x4]
	FString OpenEnemyCompName;//[Offset: 0x60, Size: 0x10]
	float EnemyPingCheckRange;//[Offset: 0x70, Size: 0x4]
	float NormalItemRange;//[Offset: 0x74, Size: 0x4]
	float WeaponItemRange;//[Offset: 0x78, Size: 0x4]
	float LookBelowItemRange;//[Offset: 0x7c, Size: 0x4]
	float NormalItemRangeForAim;//[Offset: 0x80, Size: 0x4]
	float WeaponItemRangeForAim;//[Offset: 0x84, Size: 0x4]
	float LookBelowItemRangeForAim;//[Offset: 0x88, Size: 0x4]
	float ZiplineRadius;//[Offset: 0x8c, Size: 0x4]
	FString OpenPingUIAudioStr;//[Offset: 0x90, Size: 0x10]
	FString CancelPingUIAudioStr;//[Offset: 0xa0, Size: 0x10]
	FString HoverPingUIAudioStr;//[Offset: 0xb0, Size: 0x10]
	FString ConformPingUIAudioStr;//[Offset: 0xc0, Size: 0x10]
	int DingWeaponEventID;//[Offset: 0xd0, Size: 0x4]
	int DingNormalItemEventID;//[Offset: 0xd4, Size: 0x4]
	int SurviveEventID;//[Offset: 0xd8, Size: 0x4]
	int FirstAidEventID;//[Offset: 0xdc, Size: 0x4]
	int RespawnEventID;//[Offset: 0xe0, Size: 0x4]
	float AutoPingEnemyCD;//[Offset: 0xe4, Size: 0x4]
	float PingDoorDistLimit;//[Offset: 0xe8, Size: 0x4]
	float BoundsScreenRadius;//[Offset: 0xec, Size: 0x4]
	float BoundsScreenPerc;//[Offset: 0xf0, Size: 0x4]
	float BoundsScreenStayTimer;//[Offset: 0xf4, Size: 0x4]
	float ADSBoundsScreenStayTimer;//[Offset: 0xf8, Size: 0x4]
	float ADSEnterEnemyDist;//[Offset: 0xfc, Size: 0x4]
	float WaitIntervalTimer;//[Offset: 0x100, Size: 0x4]
	float IntervalTimer;//[Offset: 0x104, Size: 0x4]
	float CheckRadius;//[Offset: 0x108, Size: 0x4]
	float CheckDegreen;//[Offset: 0x10c, Size: 0x4]
	float SameItemAutoMarkInterval;//[Offset: 0x110, Size: 0x4]
	int QuickAutoMarkNum;//[Offset: 0x114, Size: 0x4]
	float QuickAutoMarkInterval;//[Offset: 0x118, Size: 0x4]
	float QuickAutoMarkCooling;//[Offset: 0x11c, Size: 0x4]
	float LeaveAutoMarkItemDist;//[Offset: 0x120, Size: 0x4]
	float LeaveAutoMarkItemDegreen;//[Offset: 0x124, Size: 0x4]
	float LeaveAutoMarkItemStayDuration;//[Offset: 0x128, Size: 0x4]
	float MarkItemGuideDuration;//[Offset: 0x12c, Size: 0x4]
	float GlassToDist;//[Offset: 0x130, Size: 0x4]
	int NotOpenShowPropLevel;//[Offset: 0x134, Size: 0x4]
	float AutoMarkItemExpireTime;//[Offset: 0x138, Size: 0x4]

--------------------------------
Class: ApexDoor.SignificanceManagedActor.Actor.Object
	bool bHisPenetratingAvaliable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	bool bBackDoorChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	enum DoorType;//[Offset: 0x30a, Size: 0x1]
	enum DoorDataRepTyp;//[Offset: 0x30b, Size: 0x1]
	bool CanOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	enum[] DisableOpenPawnStates;//[Offset: 0x310, Size: 0x10]
	float InteractingCD;//[Offset: 0x320, Size: 0x4]
	bool HasCloseOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	float MinAutoOpenSpeedSquared;//[Offset: 0x328, Size: 0x4]
	float NeedTraceDist;//[Offset: 0x32c, Size: 0x4]
	float NoBtnNeedTraceTime;//[Offset: 0x330, Size: 0x4]
	float DoorHalfThickness;//[Offset: 0x334, Size: 0x4]
	float CanInteractDistance;//[Offset: 0x338, Size: 0x4]
	float AutoOpenAngle;//[Offset: 0x33c, Size: 0x4]
	bool UseCameraToFindObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	float DistanceToIgnoreObstable;//[Offset: 0x344, Size: 0x4]
	float MaxOverlapRadius;//[Offset: 0x348, Size: 0x4]
	bool CanBeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	float MaxHP;//[Offset: 0x350, Size: 0x4]
	float HP;//[Offset: 0x354, Size: 0x4]
	float HPEx;//[Offset: 0x358, Size: 0x4]
	float CommonDamageValue;//[Offset: 0x35c, Size: 0x4]
	float KickDamageValue;//[Offset: 0x360, Size: 0x4]
	class Actor* BrokenEffect;//[Offset: 0x368, Size: 0x8]
	AnimationAsset* BrokenAnimationToPlay;//[Offset: 0x370, Size: 0x8]
	float BrokenFindFloorDist;//[Offset: 0x378, Size: 0x4]
	DoorDamageType[] CanDamageTypeList;//[Offset: 0x380, Size: 0x10]
	float DestroyBrokenTime;//[Offset: 0x390, Size: 0x4]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 0x1]
	int DoorState;//[Offset: 0x398, Size: 0x4]
	int DoorStateEx;//[Offset: 0x39c, Size: 0x4]
	int DoorBrokenState;//[Offset: 0x3a0, Size: 0x4]
	int DoorBrokenStateEx;//[Offset: 0x3a4, Size: 0x4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 0x1]
	ApexCharacter* InteractingCharacter;//[Offset: 0x3c8, Size: 0x8]
	uint32 InteractingTeamId;//[Offset: 0x3d0, Size: 0x4]
	<uint32,float> InteractingTeamActiveTimes;//[Offset: 0x3d8, Size: 0x50]
	ApexCharacter* Autonomous_NearDoorCharacter;//[Offset: 0x428, Size: 0x8]
	StaticMeshComponent* DoorModel;//[Offset: 0x430, Size: 0x8]
	StaticMeshComponent* DoorModelEx;//[Offset: 0x438, Size: 0x8]
	BoxComponent* DoorCollisionBox;//[Offset: 0x440, Size: 0x8]
	BoxComponent* DoorCollisionBoxEx;//[Offset: 0x448, Size: 0x8]
	MaterialInterface*[] SavedDoorModelMaterials;//[Offset: 0x450, Size: 0x10]
	MaterialInterface*[] SavedDoorModelMaterialsEx;//[Offset: 0x460, Size: 0x10]
	SceneComponent* DoorModelWrapper;//[Offset: 0x470, Size: 0x8]
	SceneComponent* DoorModelWrapperEx;//[Offset: 0x478, Size: 0x8]
	PrimitiveComponent*[] Accessories;//[Offset: 0x480, Size: 0x10]
	PrimitiveComponent*[] AccessoriesEx;//[Offset: 0x490, Size: 0x10]
	BoxComponent* InteractionBox;//[Offset: 0x4a0, Size: 0x8]
	BoxComponent* AutoOpenInteractionBox;//[Offset: 0x4a8, Size: 0x8]
	ApexBuffSystemComponent* BuffSystemComponent;//[Offset: 0x4b0, Size: 0x8]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x4b8, Size: 0x8]
	bool bCanCryptoDroneFind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1]
	DoorOverlapingActor[] NearDoorActors;//[Offset: 0x4e8, Size: 0x10]
	void TriggerOpenDoor();// 0x39baadc
	void TriggerDoor(Vector Point, bool bIsOpen);// 0x39baaf8
	void TriggerCloseDoor();// 0x39baac0
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x39ba6ac
	bool StuckInto(Actor* InActor);// 0x39b9d6c
	void SetDoorBroken(bool bExtraDoor, Actor* brokenCauser);// 0x39ba888
	void SetCanOpenDoor(bool bInCanOpen);// 0x39bacd0
	void SetCanDamageDoor(bool bCanDamage);// 0x39babc8
	void SetCanCloseDoor(bool bInCanClose);// 0x39bac4c
	void RPC_MulticastReset();// 0x39ba818
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Controller* pCauser, Actor* CauserActor);// 0x39b9ffc
	void RefreshUIOnClient();// 0x39ba874
	void OnRep_RepInteractCharacter();// 0x39ba304
	void OnRep_RepDoorStateEx();// 0x39ba2f0
	void OnRep_RepDoorState();// 0x39ba318
	void OnRep_RepDoorHPEx();// 0x39ba2c8
	void OnRep_RepDoorHP();// 0x39ba2dc
	void OnRep_RepDoorBrokenEx();// 0x39ba684
	void OnRep_RepDoorBroken();// 0x39ba698
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x39ba32c
	void OnDoorRPC(Character* Character, bool bIsOpen);// 0x39ba95c
	void OnDoorAniFinsihDelegate__DelegateSignature(ApexDoor* Door);// 0x43841ec
	void OnCharacterDead();// 0x39ba670
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x39ba470
	bool IsSameTeam(Actor* Other);// 0x39b9e8c
	void InitAccessories(PrimitiveComponent*[] InAccessories, PrimitiveComponent*[] InAccessoriesEx);// 0x39bad54
	void Init(BoxComponent* InInteractionBox, BoxComponent* InAutoOpenInteractionBox, SceneComponent* InDoorModelWrapper, SceneComponent* InDoorModelWrapperEx);// 0x39baec4
	bool HasBuff(FName BuffName, bool bPredicatePendingRemove);// 0x39b9f1c
	int GetPointOnDoorDirection(Vector Point);// 0x39baa2c
	bool CanStuckInto(Actor* InActor);// 0x39b9dfc
	void BP_DoorBroken_Callback(bool bExtraDoor);// 0x43841ec
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x43841ec
	void BP_DoorBlockedOpening_Callback();// 0x43841ec
	void BP_DoorBlockedClosing_Callback();// 0x43841ec
	void BP_DoorBinOpenDone_Callback();// 0x43841ec
	void BP_DoorBinOpen_Callback();// 0x43841ec
	void BP_DoorBinCloseDone_Callback();// 0x43841ec
	void BP_DoorBinClose_Callback();// 0x43841ec
	void BP_DoorBeAttacked_Callback(StaticMeshComponent* HitDoorMesh);// 0x43841ec
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x39ba168

--------------------------------
Class: DoorDamageType
	byte DamageType;//[Offset: 0x0, Size: 0x1]
	int SkillDamageTypeID;//[Offset: 0x4, Size: 0x4]
	float DamageRate;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: DoorOverlapingActor
	Actor* TargetActor;//[Offset: 0x0, Size: 0x8]
	Vector CollisionCenterOffset;//[Offset: 0x8, Size: 0xc]
	float CollisionRadius;//[Offset: 0x14, Size: 0x4]
	float CollisionHalfHeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: PingDataReporter.Object

--------------------------------
Class: SimpleServerPingInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	float LiveEndTime;//[Offset: 0x4, Size: 0x4]
	float VisibleEndTime;//[Offset: 0x8, Size: 0x4]
	bool IsPingVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	uint64 ItemUUID;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SimpleClientPingInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	int ItemID;//[Offset: 0x4, Size: 0x4]
	uint64 ItemUUID;//[Offset: 0x8, Size: 0x8]
	Actor* ReferenceActor;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: AutoMarkInfo
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	float DistanceSquared;//[Offset: 0x8, Size: 0x4]
	ApexCharacterBase* Char;//[Offset: 0xc, Size: 0x8]
	bool bIsMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: AsynServerPingPositionInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	Vector ActorPosition;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: PingAimedInfo
	enum PingType;//[Offset: 0x0, Size: 0x1]
	int PingIndex;//[Offset: 0x4, Size: 0x4]
	bool bIsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum ButtonState;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: EmojiGiveALikeMgr.ActorComponent.Object
	float TickTimerInterval;//[Offset: 0xf0, Size: 0x4]
	float CheckDist;//[Offset: 0xf4, Size: 0x4]
	Emoji3DActor* CurrentEmojiActor;//[Offset: 0xfc, Size: 0x8]
	void SetEmojiOK();// 0x3b7efe4
	void RPCServerSetEmojiOK(Emoji3DActor* EmojiActor);// 0x3b7ef60
	void AfterTickCheck_Client(float DeltaTime, out const Vector ViewLocation, out const Rotator ViewRotation);// 0x3b7eff8

--------------------------------
Class: Emoji3DActor.MissilePropsWeapon.DynamicMovementActor.Actor.Object
	CapsuleComponent* Emoji3DRootCapsule;//[Offset: 0x370, Size: 0x8]
	SceneComponent* EmojiInfoUIRoot;//[Offset: 0x378, Size: 0x8]
	StaticMeshComponent* Emoji3DBaseMesh;//[Offset: 0x380, Size: 0x8]
	ParticleSystemComponent* Emoji3DParticle;//[Offset: 0x388, Size: 0x8]
	ParticleSystemComponent* DestroyPsc;//[Offset: 0x390, Size: 0x8]
	AkComponent* EmojiAkComponent;//[Offset: 0x398, Size: 0x8]
	WidgetComponent* WidgetComp;//[Offset: 0x3a0, Size: 0x8]
	UserWidget* UIWidget;//[Offset: 0x3a8, Size: 0x8]
	FName NormalThrowSound;//[Offset: 0x3b0, Size: 0x8]
	FName NormalLandSound;//[Offset: 0x3b8, Size: 0x8]
	FName NormalActiveSound;//[Offset: 0x3c0, Size: 0x8]
	FName SpecialThrowSound;//[Offset: 0x3c8, Size: 0x8]
	FName SpecialLandSound;//[Offset: 0x3d0, Size: 0x8]
	FName SpecialActiveSound;//[Offset: 0x3d8, Size: 0x8]
	float DestroyFadeOutTime;//[Offset: 0x3e0, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0x3e4, Size: 0x4]
	FName EmojiId;//[Offset: 0x3e8, Size: 0x8]
	bool IsLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1]
	Vector LandedImpactNormal;//[Offset: 0x3f4, Size: 0xc]
	FString OwnerCharName;//[Offset: 0x400, Size: 0x10]
	int OwnerCharTeamID;//[Offset: 0x410, Size: 0x4]
	int OwnerCharTeamIdx;//[Offset: 0x414, Size: 0x4]
	bool bDisplayDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	float DestroyFadeOutTotalDeltaTime;//[Offset: 0x41c, Size: 0x4]
	int[] GiveALikePlayerList;//[Offset: 0x420, Size: 0x10]
	Vector OwnerAimedPosition;//[Offset: 0x430, Size: 0xc]
	void ShowEmojiInfo(bool Show);// 0x3b7c9c8
	void SetDisplayInfo(bool bIsAimed, const bool bShowInAnim);// 0x3b7c8ec
	void OnRepDisplayDestroy();// 0x3b7c73c
	void OnRep_OwnerCharTeamIdx();// 0x3b7cb2c
	void OnRep_OwnerCharTeamID();// 0x3b7cb40
	void OnRep_OwnerCharName();// 0x3b7cb54
	void OnRep_LandedImpactNormal();// 0x3b7cb68
	void OnRep_IsLanded();// 0x3b7cb7c
	void OnRep_EmojiID();// 0x3b7cb90
	void OnRep_EmojiGiveALike();// 0x3b7c8d8
	void OnAimedAtClient(bool NewIsAimed, Vector AimedPosition);// 0x3b7ca54
	bool IsSelfEmojiActor();// 0x3b7c79c
	bool IsExistInGiveALikeList(const int PlayerKey);// 0x3b7c7d4
	Vector GetUIRootPosition();// 0x3b7c764
	void EnterDestroy();// 0x3b7c750
	void DisplayDestroy();// 0x43841ec
	void AddGiveALikePlayer(const int PlayerKey);// 0x3b7c85c

--------------------------------
Class: MissilePropsWeapon.DynamicMovementActor.Actor.Object
	bool bIsFake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	bool bHasFake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 0x1]
	DynamicMovementComponent_Projetile* MovementComponent;//[Offset: 0x278, Size: 0x8]
	bool HasBounce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	bool bMoveStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	bool bImpacted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 0x1]
	bool TempHasBounce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283, Size: 0x1]
	AkAudioEvent* BounceAudio;//[Offset: 0x288, Size: 0x8]
	AkAudioEvent* ExplosionAudio;//[Offset: 0x290, Size: 0x8]
	ParticleSystem* ExplosionPs;//[Offset: 0x298, Size: 0x8]
	float TailFxDelayHideTime;//[Offset: 0x2a0, Size: 0x4]
	float ExplosionTime;//[Offset: 0x2a4, Size: 0x4]
	float LaunchDelayTime;//[Offset: 0x2a8, Size: 0x4]
	bool bDebugProjectile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	float RealExplosionTime;//[Offset: 0x2b0, Size: 0x4]
	bool bRealExplosionTimeTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	TimerHandle ExplosionTh;//[Offset: 0x2b8, Size: 0x8]
	TimerHandle LaunchDelayTh;//[Offset: 0x2c0, Size: 0x8]
	bool DoneExplosion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	int TeamID;//[Offset: 0x2cc, Size: 0x4]
	int CampID;//[Offset: 0x2d0, Size: 0x4]
	Actor*[] TeamMateArray;//[Offset: 0x2d8, Size: 0x10]
	ApexPlayerState* OwnerPs;//[Offset: 0x2e8, Size: 0x8]
	float HintRadius;//[Offset: 0x2f0, Size: 0x4]
	int ExplosionHintId;//[Offset: 0x2f4, Size: 0x4]
	int ExplosionHintInstId;//[Offset: 0x2f8, Size: 0x4]
	int ItemID;//[Offset: 0x2fc, Size: 0x4]
	bool NeedDynamicScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	float DynamicScaleFactor;//[Offset: 0x304, Size: 0x4]
	int IndicatorMaxNum;//[Offset: 0x308, Size: 0x4]
	class WarningActor* ExplosionIndicatorBp;//[Offset: 0x310, Size: 0x8]
	WarningActor* ExplosionIndicator;//[Offset: 0x318, Size: 0x8]
	float ExplosionIndicatorDelay;//[Offset: 0x320, Size: 0x4]
	float BeginPlayTime;//[Offset: 0x324, Size: 0x4]
	FName AttachSocketName;//[Offset: 0x330, Size: 0x8]
	float LeftTime;//[Offset: 0x338, Size: 0x4]
	bool bTimingExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 0x1]
	bool bEnableDamageHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d, Size: 0x1]
	uint64 FakeID;//[Offset: 0x340, Size: 0x8]
	MissilePropsWeapon* LinkMissilePropsWeaponWeak;//[Offset: 0x348, Size: 0x8]
	SkeletalMeshComponent* MissileSkeletalMesh;//[Offset: 0x350, Size: 0x8]
	void OnRepImpacted();// 0x3cb4bec
	void OnRepDoneExplosion();// 0x3cb4bd8
	void OnMoveEventStop(out const HitResult ImpactResult, bool bServer, Actor* InOwner);// 0x3cb4c00
	void OnMoveEventBounce(out const HitResult ImpactResult, out const Vector ImpactVelocity, bool bServer, int BounceNum, Actor* InOwner);// 0x3cb4d40

--------------------------------
Class: WarningActor.Actor.Object
	Actor* Source;//[Offset: 0x250, Size: 0x8]
	Actor* Target;//[Offset: 0x258, Size: 0x8]
	void ShowArrowAndEffect();// 0x43841ec
	void SetTarget(Actor* InTarget);// 0x3e5c6a4
	void SetSourceAndTarget(Actor* InSource, Actor* InTarget);// 0x3e5c5e8
	void SetSource(Actor* InSource);// 0x3e5c720
	void SetCountDownOffset(Vector Offset);// 0x43841ec
	void NativeShowCountDown(float InTime);// 0x43841ec
	void HideArrowAndEffect();// 0x43841ec

--------------------------------
Class: FiniteBattleBehStateMachine.ActorComponent.Object
	bool bStateInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	<enum,AbstractState*> BattleBehStateMap;//[Offset: 0xf8, Size: 0x50]
	AbstractState* CurrentState;//[Offset: 0x148, Size: 0x8]
	byte Role;//[Offset: 0x150, Size: 0x1]

--------------------------------
Class: AbstractState.Object
	byte Role;//[Offset: 0x28, Size: 0x1]
	Actor* Owner;//[Offset: 0x30, Size: 0x8]
	void SetOwner(byte InRole, Actor* InOwner);// 0x3b8d8f0
	Actor* GetOwner();// 0x3b8d8b4

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	int MaxBatchCount;//[Offset: 0x14c, Size: 0x4]
	float MaxBatchSec;//[Offset: 0x150, Size: 0x4]
	BTNode*[] NodeInstances;//[Offset: 0x180, Size: 0x10]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x63d85f4
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x63d87c4
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x63d86b8

--------------------------------
Class: ApexAIPerceptionComponent.AIPerceptionComponent.ActorComponent.Object
	AIHearingEventConfig[] HearingConfig;//[Offset: 0x1c0, Size: 0x10]
	Actor* MuteActor;//[Offset: 0x1d0, Size: 0x8]
	float MuteActorTime;//[Offset: 0x1d8, Size: 0x4]
	int SightBodyHorizontalGrids;//[Offset: 0x1f4, Size: 0x4]
	int SightBodyVerticalGrids;//[Offset: 0x1f8, Size: 0x4]
	int SightBodyGridResolution;//[Offset: 0x1fc, Size: 0x4]
	bool DebugAISightBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xf0, Size: 0x10]
	class AISense* DominantSense;//[Offset: 0x100, Size: 0x8]
	AIController* AIOwner;//[Offset: 0x118, Size: 0x8]
	delegate OnPerceptionUpdated;//[Offset: 0x1a0, Size: 0x10]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x1b0, Size: 0x10]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x63cf3f4
	void RequestStimuliListenerUpdate();// 0x63cf8ec
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x63cf900
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x63cf854
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x63cf5b4
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x63cf694
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x63cf774
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x63cf4bc

--------------------------------
Class: AIHearingEventConfig
	enum HearingType;//[Offset: 0x0, Size: 0x1]
	float Range;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4]
	float MaxAge;//[Offset: 0x2c, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4]
	enum NotifyType;//[Offset: 0x2c, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10]
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x63d076c
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x63d0824
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x63d0668
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x63d041c
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x63d04dc

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18]
	float AcceptanceRadius;//[Offset: 0x88, Size: 0x4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 0x4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 0x4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	int VisualLoggerEQSItemsNum;//[Offset: 0x9c, Size: 0x4]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	byte DefaultSightCollisionChannel;//[Offset: 0xa1, Size: 0x1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa8, Size: 0x8]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xb0, Size: 0x8]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb8, Size: 0x8]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xc0, Size: 0x10]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xd0, Size: 0x8]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd8, Size: 0x8]
	void AILoggingVerbose();// 0x63d695c
	void AIIgnorePlayers();// 0x63d6978

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 0x10]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 0x10]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 0x10]
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 0x4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 0x4]
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 0x8]
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x63f21c4

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8]
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10]
	int GeneratorIdx;//[Offset: 0x40, Size: 0x4]
	int TestIdx;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4]
	int QueryNodeIdx;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x30, Size: 0x4]
	byte TestPurpose;//[Offset: 0x34, Size: 0x1]
	FString TestComment;//[Offset: 0x38, Size: 0x10]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1]
	byte FilterType;//[Offset: 0x4a, Size: 0x1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38]
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1]
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1]
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	RuntimeFloatCurve ScoreCurve;//[Offset: 0x1f0, Size: 0x88]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x279, Size: 0x1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8]
	FName DataField;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8]
	int OptionIndex;//[Offset: 0x60, Size: 0x4]
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10]
	void SetNamedParam(FName ParamName, float Value);// 0x63f0c14
	Vector[] GetResultsAsLocations();// 0x63f0cd4
	Actor*[] GetResultsAsActors();// 0x63f0d58
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x63f0ddc
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x63f0e88
	float GetItemScore(int ItemIndex);// 0x63f0f34
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x43841ec

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFail;//[Offset: 0x38, Size: 0x10]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x63cb6bc

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x63f90dc
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x63f8830
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x63f86b0
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x63f8d80
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x63f8f38
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x63f8930
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x63f8b58

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x24, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: ApexAIComponent.ActorComponent.Object
	void OnSkillStop(int SkillIndex, enum StopReason, int SkillHandleID);// 0x3953284
	void OnMedicineStop(int ItemID);// 0x3953404
	void OnMedicineStart(int ItemID);// 0x3953480
	void OnMedicineBreak(int ItemID);// 0x3953388

--------------------------------
Class: DrugRecommendComponent.ActorComponent.Object
	FName SettingKey;//[Offset: 0x104, Size: 0x8]
	DrugRecommendDefine[] InPoisonCircleRecommendConfig;//[Offset: 0x118, Size: 0x10]
	DrugRecommendDefine[] NotInPoisonCircleRecommendConfig;//[Offset: 0x128, Size: 0x10]
	int RecommendMinAddHealthValue;//[Offset: 0x138, Size: 0x4]
	int RecommendMinAddShieldValue;//[Offset: 0x13c, Size: 0x4]
	float RecommendUpdateInterval;//[Offset: 0x140, Size: 0x4]
	void UpdateDrugRecommend();// 0x3b6d900
	void OnGetHpMpChangeException(bool IsHpChange, float ChangedValue, enum ChangeReason);// 0x3b6d7d4
	void DrugRecommendOver();// 0x3b6d8ec

--------------------------------
Class: DrugRecommendDefine
	int ItemID;//[Offset: 0x0, Size: 0x4]
	float HealthRateMin;//[Offset: 0x4, Size: 0x4]
	float HealthRateMax;//[Offset: 0x8, Size: 0x4]
	float ShieldRateMin;//[Offset: 0xc, Size: 0x4]
	float ShieldRateMax;//[Offset: 0x10, Size: 0x4]
	bool EquipShieldLevel4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	enum DrugRecommendType;//[Offset: 0x15, Size: 0x1]

--------------------------------
Class: CharacterTeamItemUseTipComponent.ActorComponent.Object
	void RPC_BattleItemUse(const BattleItemUseTipInfo BattleItemUseTipInfo);// 0x3b218c4
	void OnBattleItemUseStopEvent(out BattleItemUseTipInfo BattleItemUseTipInfo);// 0x3b2198c
	void OnBattleItemUseStartEvent(out BattleItemUseTipInfo BattleItemUseTipInfo);// 0x3b21ac4
	void OnBattleItemUseInteruptEvent(out BattleItemUseTipInfo BattleItemUseTipInfo);// 0x3b21a28

--------------------------------
Class: BattleItemUseTipInfo
	Character* User;//[Offset: 0x0, Size: 0x8]
	float Duration;//[Offset: 0x8, Size: 0x4]
	uint32 ItemID;//[Offset: 0xc, Size: 0x4]
	byte EventType;//[Offset: 0x10, Size: 0x1]
	int TeamIdx;//[Offset: 0x14, Size: 0x4]
	int HealthHeal;//[Offset: 0x18, Size: 0x4]
	int ShieldHeal;//[Offset: 0x1c, Size: 0x4]
	int SkillID;//[Offset: 0x20, Size: 0x4]
	int PlayerKey;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0x128, Size: 0x8]
	NavigationData* MyNavData;//[Offset: 0x138, Size: 0x8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x63f9984
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x63f9a6c
	Vector GetPathDestination();// 0x63f9a00
	byte GetPathActionType();// 0x63f9a38

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x258, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x260, Size: 0x68]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c8, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c8, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c8, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c8, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x2c9, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x2cc, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x2d0, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3a8, Size: 0x10]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	SoftClassPath NavigationDataClassName;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaID;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xf0, Size: 0x8]
	PawnActionStack[] ActionStacks;//[Offset: 0xf8, Size: 0x10]
	PawnActionEvent[] ActionEvents;//[Offset: 0x108, Size: 0x10]
	PawnAction* CurrentAction;//[Offset: 0x118, Size: 0x8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x63fb508
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x63fb61c
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x63fb400
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x63fb484

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8]
	Object* Instigator;//[Offset: 0x40, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	byte GetActionPriority();// 0x63fa2d8
	void Finish(byte WithResult);// 0x63fa198
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x63fa21c

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc, Size: 0x1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0x100, Size: 0x10]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0x110, Size: 0x10]
	GameplayTask*[] TickingTasks;//[Offset: 0x130, Size: 0x10]
	GameplayTask*[] KnownTasks;//[Offset: 0x140, Size: 0x10]
	delegate OnClaimedResourcesChange;//[Offset: 0x150, Size: 0x10]
	void OnRep_SimulatedTasks();// 0x62b5880
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x62b5614

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4]
	Color DrawColor;//[Offset: 0x34, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: EnemyInfo

--------------------------------
Class: ApexAITeamController.AIController.Controller.Actor.Object
	enum[] NoLeaderPhase;//[Offset: 0x3c0, Size: 0x10]
	void UpdateLeader();// 0x3958468
	void ReceiveTeamLeaderChanged(ApexAIController* NewLeader);// 0x43841ec
	ApexAIController*[] GetTeammateControllers(ApexAIController* Except);// 0x395847c
	ApexAIController* GetTeamLeaderController();// 0x3958540

--------------------------------
Class: DynamicDmgCurve
	bool EnableAILevelAI2AI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve AILevelDamage;//[Offset: 0x8, Size: 0x88]
	RuntimeFloatCurve AILevelHit;//[Offset: 0x90, Size: 0x88]
	RuntimeFloatCurve AI2PlayerDamage;//[Offset: 0x118, Size: 0x88]
	RuntimeFloatCurve AI2PlayerHit;//[Offset: 0x1a0, Size: 0x88]
	RuntimeFloatCurve AI2AIDamage;//[Offset: 0x228, Size: 0x88]
	RuntimeFloatCurve AI2AIHit;//[Offset: 0x2b0, Size: 0x88]
	RuntimeFloatCurve AIVelocityFixHit;//[Offset: 0x338, Size: 0x88]
	RuntimeFloatCurve AIDistanceFixHit;//[Offset: 0x3c0, Size: 0x88]

--------------------------------
Class: HitPositionConfig
	enum Position;//[Offset: 0x0, Size: 0x1]
	float Weight;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SVONNavigationComponent.ActorComponent.Object
	bool DebugPrintCurrentPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool DebugPrintMortonCodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	bool DebugDrawOpenNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 0x1]
	bool UseUnitCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3, Size: 0x1]
	float UnitCost;//[Offset: 0xf4, Size: 0x4]
	float EstimateWeight;//[Offset: 0xf8, Size: 0x4]
	float NodeSizeCompensation;//[Offset: 0xfc, Size: 0x4]
	enum PathCostType;//[Offset: 0x100, Size: 0x1]
	int SmoothingIterations;//[Offset: 0x104, Size: 0x4]

--------------------------------
Class: ApexTreasureDoor.ApexImpusleDoor.ApexDoor.SignificanceManagedActor.Actor.Object
	int TreasureDoorID;//[Offset: 0x50c, Size: 0x4]
	float OpenDuringTime;//[Offset: 0x510, Size: 0x4]
	float FXTime;//[Offset: 0x514, Size: 0x4]
	ItemDefineID KeyItemID;//[Offset: 0x518, Size: 0x10]
	int VaultOpenedEventID;//[Offset: 0x528, Size: 0x4]
	int NoVaultKeyPingID;//[Offset: 0x52c, Size: 0x4]
	int SelfHaveVaultKeyPingID;//[Offset: 0x530, Size: 0x4]
	int TeammateHaveVaultKeyPingID;//[Offset: 0x534, Size: 0x4]
	CommonBtnComponent* TriggeredBtnComponent;//[Offset: 0x538, Size: 0x8]
	bool IsAlreadyOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	bool IsOpenning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1]
	PrimitiveComponent* LockComp;//[Offset: 0x558, Size: 0x8]
	ParticleSystemComponent* DoorLockAlarmParticle;//[Offset: 0x560, Size: 0x8]
	ParticleSystemComponent* LightAlarmParticle;//[Offset: 0x568, Size: 0x8]
	float AlarmInterval;//[Offset: 0x570, Size: 0x4]
	int AlarmCountPerExcute;//[Offset: 0x574, Size: 0x4]
	FName TreasureDoorAlarmSound;//[Offset: 0x578, Size: 0x8]
	Vector AlarmLocation;//[Offset: 0x580, Size: 0xc]
	int CurAlarmCount;//[Offset: 0x58c, Size: 0x4]
	BoxComponent* ForbiddenBox;//[Offset: 0x598, Size: 0x8]
	bool bDebugAreadlyOpenForbidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]
	float ForbiddenCheckInterval;//[Offset: 0x5a4, Size: 0x4]
	Vector ForbiddenTransLocation;//[Offset: 0x5a8, Size: 0xc]
	enum[] ForbiddenTransStates;//[Offset: 0x5b8, Size: 0x10]
	ApexCharacter*[] NeedCheckForbiddenInPlayers;//[Offset: 0x5c8, Size: 0x10]
	void SetLockPrimitiveComp(PrimitiveComponent* Comp);// 0x3a326d8
	void ProcessTreasurePickups();// 0x3a32594
	void OnTreasurePicked(Actor* PickByActor);// 0x3a32518
	void OnRep_RepIsAlreadyOpen();// 0x3a325a8
	void OnRep_CurAlarmCount();// 0x3a32504
	void OnProgress(enum State);// 0x3a32788
	void OnForbiddenIn(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3a32304
	void OnDropKey(Controller* Controller, ItemDefineID ItemDefineID, int count);// 0x3a325bc
	bool IsOpend();// 0x3a32750
	void CheckForForbiddenOut();// 0x3a322f0
	void BP_TreasureDoorOnProgress(enum State);// 0x43841ec
	void BP_TreasureDoorFXStart_Event();// 0x43841ec

--------------------------------
Class: ApexImpusleDoor.ApexDoor.SignificanceManagedActor.Actor.Object
	float OpenDoorImpusle;//[Offset: 0x4f8, Size: 0x4]
	float BulletImpusleRate;//[Offset: 0x4fc, Size: 0x4]
	float OpenDoorImpusleMin;//[Offset: 0x500, Size: 0x4]
	void NetMulticastApplyImpusleEx(Vector Impusle, int Sequence);// 0x39dd400
	void NetMulticastApplyImpusle(Vector Impusle, int Sequence);// 0x39dd4c8

--------------------------------
Class: CommonBtnComponent.ActorComponent.Object
	ApexDoor* TriggeredDoor;//[Offset: 0xf8, Size: 0x8]
	BinActor* TriggeredBin;//[Offset: 0x108, Size: 0x8]
	HarvesterActor* TriggerHarvester;//[Offset: 0x130, Size: 0x8]
	Workbench* TriggerWorkbench;//[Offset: 0x138, Size: 0x8]
	int TriggerWorkbenchSide;//[Offset: 0x140, Size: 0x4]
	void UIClickReplicatorUse();// 0x3b2913c
	void UIClickReplicatorOutUse();// 0x3b29020
	void UIClickOpenExtract();// 0x3b29210
	void UIClickOpenBin();// 0x3b292e4
	void UIClick(bool bIsOpen);// 0x3b293d4
	void ServerUseReplicator(Workbench* WorkbenchActor, int UseSide);// 0x3b2903c
	void ServerOutUseReplicator(Workbench* WorkbenchActor);// 0x3b28f68
	void ServerOpenBin(BinActor* BinActor);// 0x3b2922c
	void ServerExtract(HarvesterActor* HarvesterActor);// 0x3b29158
	FString GetModuleName();// 0x3b28edc
	void DoorRequireRPC(ApexDoor* actionDoor, bool bIsOpen);// 0x3b29460
	void ClientStartOpeningProgress(bool bShow, float TotalTime);// 0x3b29300
	void BP_ShowTreasureDoorOpeningProgress(bool bShow, float TotalTime);// 0x2543478
	void BP_ShowExtractBtn(bool bShow);// 0x2543478
	void BP_ShowDoorBtn(bool bShow, bool bOpen, bool bHasAuto, int DoorType);// 0x2543478

--------------------------------
Class: MetaAIController.AIController.Controller.Actor.Object
	AIJumpScheduleComponent* JumpScheduler;//[Offset: 0x458, Size: 0x8]
	float TickInterval;//[Offset: 0x4b0, Size: 0x4]
	<FName,int> CounterLimit;//[Offset: 0x4b8, Size: 0x50]
	void RemoveConcurrency(FName CounterTag, Object* Controller, Object* VictimObject);// 0x3c99c80
	void OnTakeDamage(Controller* Damaged, float DamageAmount, Controller* DamageInstigator, Actor* Causer);// 0x3c9981c
	void OnServiceTick(AIController* BotController, out const MetaAICounterWatchItem[] CounterWatches, Object* VictimObject);// 0x43841ec
	void OnPlayerTakeDamage(Controller* AttackerPlayerController, Controller* VictimController);// 0x43841ec
	void OnJumpSchedule(Vector PlaneStart, Vector PlaneEnd, out const ApexAIController*[] AIControllers, out const ParachutePoint*[] ParachutePoints);// 0x43841ec
	void OnEndOverload(out const FName[] CounterTags, Object* VictimObject);// 0x43841ec
	void OnBotLeaveSubtree(out const FName[] CounterTags, AIController* BotController, Object* VictimObject);// 0x43841ec
	void OnBotEnterSubtree(out const FName[] CounterTags, AIController* BotController, Object* VictimObject);// 0x43841ec
	void OnBeginOverload(out const FName[] CounterTags, Object* VictimObject);// 0x43841ec
	bool HasPlayerInConcurrency(FName CounterTag, Object* VictimObject);// 0x3c99960
	<Object*> GetOverloadedSet(FName CounterTag, Object* VictimObject);// 0x3c99f50
	Object*[] GetConcurrency(FName CounterTag, Object* VictimObject);// 0x3c99a30
	void DelayedRemoveConcurrency(FName CounterTag, Object* Controller, Object* VictimObject, float Delay);// 0x3c99b3c
	bool CanAddConcurrency(FName CounterTag, Object* VictimObject);// 0x3c99e80
	void AddConcurrency(FName CounterTag, Object* Controller, Object* VictimObject);// 0x3c99d80

--------------------------------
Class: AIJumpScheduleComponent.ActorComponent.Object
	<ApexAIController*,ParachutePoint*> JumpPlan;//[Offset: 0xf0, Size: 0x50]
	static <ApexAIController*,ParachutePoint*> SimpleRandomScheduler(Vector PlaneStart, Vector PlaneEnd, out const ApexAIController*[] InAIControllers, out const ParachutePoint*[] InParachutePoints, float ExtraDistance, float MaxDistance);// 0x3948814
	void FinishJumpSchedule(out const <ApexAIController*,ParachutePoint*> Result);// 0x3948b44
	static <ApexAIController*,ParachutePoint*> ChannelBasedScheduler(Vector PlaneStart, Vector PlaneEnd, out const ApexAIController*[] InAIControllers, out const ParachutePoint*[] InParachutePoints, float MaxDistance);// 0x39481b0
	static <ApexAIController*,ParachutePoint*> AreaBasedScheduler(Vector PlaneStart, Vector PlaneEnd, out const ApexAIController*[] InAIControllers, out const ParachutePoint*[] InParachutePoints, float ExtraDistance, float MaxDistance, int MaxUses);// 0x39484a0

--------------------------------
Class: ParachutePoint.TargetPoint.Actor.Object
	int Channel;//[Offset: 0x250, Size: 0x4]
	int ChannelMaxUses;//[Offset: 0x254, Size: 0x4]

--------------------------------
Class: MetaAICounterWatchItem
	FName CounterTag;//[Offset: 0x0, Size: 0x8]
	BlackboardKeySelector OutValue;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: BlackboardKeySelector
	BlackboardKeyType*[] AllowedTypes;//[Offset: 0x0, Size: 0x10]
	FName SelectedKeyName;//[Offset: 0x10, Size: 0x8]
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x18, Size: 0x8]
	byte SelectedKeyID;//[Offset: 0x20, Size: 0x1]
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: GrapplingHookMovement.ActorComponent.Object
	enum TargetRole;//[Offset: 0xf8, Size: 0x1]
	GrapplingHook* GrapplingHookActor;//[Offset: 0xfc, Size: 0x8]
	SceneComponent* UpdateComp;//[Offset: 0x104, Size: 0x8]
	SceneComponent* TargetComp;//[Offset: 0x10c, Size: 0x8]
	SkillMovementConfig MoveConfig;//[Offset: 0x130, Size: 0x14]
	void UpdateWalkingFrictionParameter(out float WalkingFriction);// 0x3c0e16c
	void UpdateMovementStatusData(float DeltaSeconds);// 0x3c0e4c0
	void UpdateCurrentAcceParameter(out float CurrentAirSpeedCap, out float CurrentAirAcceleRate);// 0x3c0e200
	void UpdateCommon(float DeltaSeconds);// 0x3c0e544
	void SpaceJumpExtraLaunch();// 0x3c0e2e4
	bool ShouldApplyRootRotationFocusOnViewDirection(Character* UpdateChar);// 0x3c0e05c
	bool ShouldApplyMeshRotationFocusOnGrapplingTarget(Character* UpdateChar);// 0x3c0e0e4
	void OnMovementModeChange(byte PreviousMovementMode, byte PreviousCustomMode, byte MovementMode, byte CustomMovementMode);// 0x3c0e340
	Vector GetInputVelocity(ApexCharacterMovementComponent* CharMoveComp);// 0x3c0e5c8
	float GetEnterFaillingZSpeedThreshold(ApexCharacter* TargetCharacter);// 0x3c0dfd8
	void ClearGrapplingHookControl();// 0x3c0e488
	bool CanDoExtraLaunch();// 0x3c0e300
	void ApplyGrapplingHookControl();// 0x3c0e4a4

--------------------------------
Class: GrapplingHook.SkillActorBase.DynamicMovementActor.Actor.Object
	SplineComponent* GrapplingHookSpline;//[Offset: 0x4d8, Size: 0x8]
	GrapplingHookString* GrapplingHookString;//[Offset: 0x4e0, Size: 0x8]
	StaticMeshComponent* GrapplingHookMesh;//[Offset: 0x4e8, Size: 0x8]
	CapsuleComponent* GrapplingHookMeshCapsule;//[Offset: 0x4f0, Size: 0x8]
	SceneComponent* TargetSceneComponent;//[Offset: 0x4f8, Size: 0x8]
	int GrappleHookSkillIndex;//[Offset: 0x500, Size: 0x4]
	float ProjecitleLaunchInitSpeed;//[Offset: 0x504, Size: 0x4]
	float ProjecitleLaunchMaxSpeed;//[Offset: 0x508, Size: 0x4]
	float ProjecitleWithdrawInitSpeed;//[Offset: 0x50c, Size: 0x4]
	float ProjecitleWithdrawMaxSpeed;//[Offset: 0x510, Size: 0x4]
	float ProjecitleWithdrawDownZSpeed;//[Offset: 0x514, Size: 0x4]
	float ProjecitleCollisionSphere;//[Offset: 0x518, Size: 0x4]
	float StringInitSpeed;//[Offset: 0x51c, Size: 0x4]
	float StringMaxSpeed;//[Offset: 0x520, Size: 0x4]
	float StringAcce;//[Offset: 0x524, Size: 0x4]
	float BaseVelocityStringAcce;//[Offset: 0x528, Size: 0x4]
	float PerpendicularDeceleration;//[Offset: 0x52c, Size: 0x4]
	float StringDelayTime;//[Offset: 0x530, Size: 0x4]
	CurveFloat* GravityScaleCurve;//[Offset: 0x538, Size: 0x8]
	float FixedGravityScale;//[Offset: 0x540, Size: 0x4]
	float MinVelocityPullingAngleForFullGravity;//[Offset: 0x544, Size: 0x4]
	bool bUseViewDirGravityScaleCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]
	float MaxGrappleDirAngleForFullGravity;//[Offset: 0x54c, Size: 0x4]
	CurveFloat* ViewDirGravityScaleCurve;//[Offset: 0x550, Size: 0x8]
	bool bIgnoreLaunchSpeedInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 0x1]
	float LaunchSpeedPrePull;//[Offset: 0x55c, Size: 0x4]
	bool bLaunchSpeedPrePullForVictim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]
	float LaunchSpeedPrePullForVictim;//[Offset: 0x564, Size: 0x4]
	float LaunchSpeedPrePullExtra;//[Offset: 0x568, Size: 0x4]
	float ApplyExtraLaunchSpeedTimeThreshold;//[Offset: 0x56c, Size: 0x4]
	Vector4 PullingRotationLimit;//[Offset: 0x570, Size: 0x10]
	bool IsRelatedPullingRotationLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	int MeshRotationLerpDistancePerFrame;//[Offset: 0x584, Size: 0x4]
	bool bTPPMeshRotationFocusOnGrapplingTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	bool bFPPMeshRotationFocusOnGrapplingTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 0x1]
	bool bRootRotationFocusOnViewDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58a, Size: 0x1]
	float RootRotationFocusOnViewDirectionSmoothFactor;//[Offset: 0x58c, Size: 0x4]
	float IgnoreVerticalViewDirOnRootRotation;//[Offset: 0x590, Size: 0x4]
	int RootRotationLerpDistancePerFrame;//[Offset: 0x594, Size: 0x4]
	bool bNotMovingCharOnSimulateProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	bool bCameraRollRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x599, Size: 0x1]
	float MinCameraRoll;//[Offset: 0x59c, Size: 0x4]
	float MaxCameraRoll;//[Offset: 0x5a0, Size: 0x4]
	float CameraRollThreshold;//[Offset: 0x5a4, Size: 0x4]
	float CameraRollSpeed;//[Offset: 0x5a8, Size: 0x4]
	CurveFloat* CameraRollSpeedCurve;//[Offset: 0x5b0, Size: 0x8]
	float EnterFaillingZSpeedThreshold;//[Offset: 0x5b8, Size: 0x4]
	float EnterFaillingZSpeedThresholdDyingTeammate;//[Offset: 0x5bc, Size: 0x4]
	float GrappleEndHardStraightIgnoreCountDownTime;//[Offset: 0x5c0, Size: 0x4]
	float GrappleEndHardStraightIgnoreHeight;//[Offset: 0x5c4, Size: 0x4]
	float MaxAccelForwardDegree;//[Offset: 0x5c8, Size: 0x4]
	bool bForwardDegreeBaseOnString;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 0x1]
	bool bForwardDegreeBaseOnStringIgnoreZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cd, Size: 0x1]
	float CurrentAirSpeedCap;//[Offset: 0x5d0, Size: 0x4]
	float CurrentAirAcceRate;//[Offset: 0x5d4, Size: 0x4]
	float CurrentAirSpeedCapGround;//[Offset: 0x5d8, Size: 0x4]
	float CurrentAirAcceRateGround;//[Offset: 0x5dc, Size: 0x4]
	float CurrentAirSpeedCapBackward;//[Offset: 0x5e0, Size: 0x4]
	float CurrentAirAcceRateBackward;//[Offset: 0x5e4, Size: 0x4]
	Rotator LookAtOtherCharacterSpeedCaster;//[Offset: 0x5e8, Size: 0xc]
	Rotator LookAtOtherCharacterSpeedVictim;//[Offset: 0x5f4, Size: 0xc]
	float AirSpeedCapRateCasterHookOtherCharacter;//[Offset: 0x600, Size: 0x4]
	float AirAcceRateCasterHookOtherCharacter;//[Offset: 0x604, Size: 0x4]
	float AirSpeedCapRateVictimHookOtherCharacter;//[Offset: 0x608, Size: 0x4]
	float AirAcceRateVictimHookOtherCharacter;//[Offset: 0x60c, Size: 0x4]
	float ZDecreaseWhenHookWithCharacter;//[Offset: 0x610, Size: 0x4]
	float WalkingFriction;//[Offset: 0x614, Size: 0x4]
	float FastJumpBtnDisplayTime;//[Offset: 0x618, Size: 0x4]
	bool bShowFastJumpBtnDisplayTimeOnHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1]
	bool bMustOnGroundToEnableJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61d, Size: 0x1]
	ParticleSystem* FlyTracingParticle;//[Offset: 0x620, Size: 0x28]
	class Actor* HitParticleActorClass;//[Offset: 0x648, Size: 0x8]
	Vector MeshOffSetForStringJoint;//[Offset: 0x650, Size: 0xc]
	float MeshVisibleDistane;//[Offset: 0x65c, Size: 0x4]
	float MaxAngleDegreeWithGrapplingHookDir;//[Offset: 0x660, Size: 0x4]
	float MaxAngleDegreeWithGrapplingHookDirTPP;//[Offset: 0x664, Size: 0x4]
	float MaxAngleDegreeWithGrapplingHookDirTargetAbove;//[Offset: 0x668, Size: 0x4]
	float MaxAngleDegreeWithGrapplingHookDirTargetAboveTPP;//[Offset: 0x66c, Size: 0x4]
	Vector MaxAngleDegreeBodyOffsetTPP;//[Offset: 0x670, Size: 0xc]
	float MaxConnectSecondsGrapplingHook;//[Offset: 0x67c, Size: 0x4]
	float MaxConnectSecondsGrapplingHookTPP;//[Offset: 0x680, Size: 0x4]
	bool bUseCharMoveCompVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 0x1]
	float MinSpeedThreshold;//[Offset: 0x688, Size: 0x4]
	float MinSpeedThresholdTPP;//[Offset: 0x68c, Size: 0x4]
	float StopPullingLowSpeedTimeThreshold;//[Offset: 0x690, Size: 0x4]
	float StopPullingLowSpeedTimeThresholdTPP;//[Offset: 0x694, Size: 0x4]
	float PawnStateExitDelayTime;//[Offset: 0x698, Size: 0x4]
	float MinDistanceToGrapplingHook;//[Offset: 0x69c, Size: 0x4]
	CurveFloat* MinDistanceToGrapplingHookCurve;//[Offset: 0x6a0, Size: 0x8]
	Vector MinDistToGrapplingHookOffset;//[Offset: 0x6a8, Size: 0xc]
	bool bCompareGrappleDirectionWithFrameDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 0x1]
	float MaxAngleGrappleDirectionWithFrameDirection;//[Offset: 0x6b8, Size: 0x4]
	float MaxAngleGrappleDirectionWithFrameDirectionTPP;//[Offset: 0x6bc, Size: 0x4]
	bool bSpeedCheckWhenPullingUpward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 0x1]
	float ZiplineRideMaxDistance;//[Offset: 0x6c4, Size: 0x4]
	bool GrapplingHookMovementDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 0x1]
	float DebugLineTime;//[Offset: 0x6cc, Size: 0x4]
	bool bDebugDrawCommon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 0x1]
	bool bDebugDrawViewDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d1, Size: 0x1]
	bool bDebugDrawRootForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d2, Size: 0x1]
	bool bProjecitleDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d3, Size: 0x1]
	AkAudioEvent* GrapplingImpact_3P;//[Offset: 0x6d8, Size: 0x8]
	AkAudioEvent* GrapplingImpact_1P;//[Offset: 0x6e0, Size: 0x8]
	FString GrapplingImpactEventName;//[Offset: 0x6e8, Size: 0x10]
	bool ResetHardStraightTimeOnExitInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 0x1]
	bool ForceOpenEnableCheckSlidingWhenCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f9, Size: 0x1]
	bool TurnOffGrappleStringBreakPointCheckOnCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fa, Size: 0x1]
	bool ForceTPPWhenTPPModeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fb, Size: 0x1]
	PathfinderFlexibleCDConf FlexibleCDConf;//[Offset: 0x700, Size: 0x28]
	float AntiCheatMaxGrappleDistance;//[Offset: 0x728, Size: 0x4]
	PathfinderSyncData SyncData;//[Offset: 0x740, Size: 0x7c]
	enum GrapplingHookState;//[Offset: 0x7bc, Size: 0x1]
	PathfinderHitStruct SavedHitResult;//[Offset: 0x7c0, Size: 0x54]
	PathfinderTraceStruct GrappleLaunchTrace;//[Offset: 0x814, Size: 0x20]
	enum LastGrapplingHookState;//[Offset: 0x834, Size: 0x1]
	interface class None* MainProjMoveComp;//[Offset: 0x838, Size: 0x10]
	interface class None* MainMoveComp;//[Offset: 0x848, Size: 0x10]
	interface class None* TargetMoveComp;//[Offset: 0x858, Size: 0x10]
	UAESkill* CharacterGrappleHookSkill;//[Offset: 0x868, Size: 0x8]
	UAESkillManagerComponent* CharacterSkillManager;//[Offset: 0x870, Size: 0x8]
	GrapplingHookAimSight* AimSightActor;//[Offset: 0x878, Size: 0x8]
	void UpdateGrappleHookString(float DeltaSeconds);// 0x3c08f88
	void TickGrapplingHookWithdrawing(float DeltaSeconds);// 0x3c0969c
	void TickGrapplingHookString(float DeltaSeconds);// 0x3c0959c
	void TickGrapplingHookPulling(float DeltaSeconds);// 0x3c09720
	void TickGrapplingHookLaunching(float DeltaSeconds);// 0x3c097a4
	void TickGrapplingHookFinishing(float DeltaSeconds);// 0x3c09618
	bool ShouldTickGrappleString();// 0x3c08670
	bool ShouldPlayHitEffect(const Actor* TargetActor);// 0x3c085e8
	bool ShouldHandleStateOnServer();// 0x3c09564
	bool ShouldEndPulling();// 0x3c09274
	bool ServerCheckIsValidRPC(out const PathfinderHitStruct HitResultFromRPC, out const PathfinderTraceStruct TraceFromRPC);// 0x3c08e64
	void SafeQuitGrapplingHook();// 0x3c091c8
	void ResetGrapplingHook();// 0x3c091a0
	void RecoverGrapplingHookAimingSightCircleUI(bool RecoverAimSight, bool RecoverAssistCircle);// 0x3c0846c
	void PostStringEventToServer(FString StringEvent);// 0x3c086dc
	void PostStringEvent(FString StringEvent);// 0x3c0876c
	void OnSkillTriggerStringEvent(FString EventTypeStr, Actor* OwnerChar);// 0x3c08d98
	void OnSkillTriggerCustomEvent(byte EventType, Actor* OwnerChar);// 0x3c08cd8
	void OnRep_SyncData();// 0x3c087f4
	void OnProjMoveCompEventRecieved(interface classNone SkillMoveCompInterface);// 0x3c08c3c
	void OnGrapplingHookPreAim();// 0x3c09090
	void OnGrapplingHookAimStart();// 0x3c090a4
	void OnEnterForceField(Actor* ForceFieldActor);// 0x3c08bc0
	void NotifyHandleGrapplingHookStateToServer(enum NewState, const PathfinderHitStruct ServerSavedHitResult, const PathfinderTraceStruct ServerGrappleLaunchTrace, const int GrappleHookCnt);// 0x3c08a54
	bool IsTargetZipline();// 0x3c085b0
	bool IsTargetGibratorShield();// 0x3c08578
	bool IsInEndingPhase();// 0x3c09058
	bool IsHookingCharacter();// 0x3c09004
	bool IsExtraJumpEnabled();// 0x3c09020
	void InteruptPulling(bool IntFlag);// 0x3c091dc
	bool InitWithdrawing();// 0x3c09868
	interface classNone InitPullingMovement(SceneComponent* UpdateRoot, const Vector TargetLocation, const Actor* TargetActor, const PrimitiveComponent* TargetActorComp, const enum inGrapplingHookRole, const SkillMovementConfig MoveConfig);// 0x3c098a8
	bool InitPulling();// 0x3c09aa0
	interface classNone InitLaunchingMovement(SceneComponent* UpdateRoot);// 0x3c09ae0
	bool InitLaunching();// 0x3c09b70
	bool InitGrapplingHookComp();// 0x3c09bb0
	void InitGrappleHookContext();// 0x3c09bf0
	bool InitFinishing();// 0x3c09828
	void HideGunAimingSightUI(bool IsHide);// 0x3c083d4
	void HideGrapplingHookAimingSightUI();// 0x3c08458
	bool HasBreakPoint();// 0x3c08300
	void HandleGrapplingHookStateOnServer(enum NewState);// 0x3c0946c
	void HandleGrapplingHookStateOnClient(enum NewState);// 0x3c093f0
	void HandleGrapplingHookState(enum NewState);// 0x3c094e8
	Vector GetTargetComponentLocation();// 0x3c08540
	HitResult GetSavedHitResult();// 0x3c08168
	Vector GetNearestBreakPoint(const enum TargetRole);// 0x3c08338
	enum GetGrapplingStringType();// 0x3c086a8
	enum GetGrapplingHookState();// 0x3c0814c
	float GetBaseVelocityStringAcce(Actor* MovingContextActor);// 0x3c0827c
	void FastJumpBtnClicked();// 0x3c08138
	void EndPulling();// 0x3c09260
	void EndGrapplingHook();// 0x3c091b4
	void DoHandleGrapplingHookStateInner(enum NewState, bool IsRpcState);// 0x3c092ac
	void DoHandleGrapplingHookState(enum NewState);// 0x3c09374
	void DoEndMovement(interface classNone SkillMoveCompInterface, bool bDestroy);// 0x3c090b8
	void ClientProjMoveNotifyHitResultToServer(HitResult CharacterHitResult, enum EndReason);// 0x3c08930
	void ClientNotifyAimSightResultToServer(PathfinderHitStruct ClientHit, PathfinderTraceStruct ClientTrace);// 0x3c08808
	void ActiveFlexibleCDStatus();// 0x3c083c0

--------------------------------
Class: GrapplingHookString.ActorComponent.Object
	float StartCurveKey;//[Offset: 0xf0, Size: 0x4]
	float EndCurveKey;//[Offset: 0xf4, Size: 0x4]
	float QuarterCycleNumUp;//[Offset: 0xf8, Size: 0x4]
	float QuarterCycleNumRight;//[Offset: 0xfc, Size: 0x4]
	float OffsetQuarterCycleFactorUp;//[Offset: 0x100, Size: 0x4]
	float OffsetQuarterCycleFactorRight;//[Offset: 0x104, Size: 0x4]
	float OffsetQuarterCycleUp;//[Offset: 0x108, Size: 0x4]
	float OffsetQuarterCycleRight;//[Offset: 0x10c, Size: 0x4]
	bool UseRandomParameter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	RopeAnimationParam[] RopeAnimationParamList;//[Offset: 0x118, Size: 0x10]
	RopeAnimationParamRespawn[] RopeAnimationParamRespawnList;//[Offset: 0x128, Size: 0x10]
	int MaxSplinePointNum;//[Offset: 0x138, Size: 0x4]
	int MaxSplineMeshNum;//[Offset: 0x13c, Size: 0x4]
	float MinDistanceBetweenBreakPoint;//[Offset: 0x140, Size: 0x4]
	float MaxOffset;//[Offset: 0x144, Size: 0x4]
	float MinOffset;//[Offset: 0x148, Size: 0x4]
	float MinBreakPointDistanceToEndPos;//[Offset: 0x14c, Size: 0x4]
	float MinBreakPointDistanceToEndPosSweepRemove;//[Offset: 0x150, Size: 0x4]
	float StartPosOffsetSweepRemove;//[Offset: 0x154, Size: 0x4]
	int MaxBreakPointNum;//[Offset: 0x158, Size: 0x4]
	class Object[] ClassCanNotBreakString;//[Offset: 0x160, Size: 0x10]
	float RemoveBreakPointDotProd;//[Offset: 0x170, Size: 0x4]
	float BaseScale;//[Offset: 0x174, Size: 0x4]
	StaticMesh* GrapplingHookStringMesh;//[Offset: 0x178, Size: 0x8]
	byte GrapplingHookStringMeshForwardAxis;//[Offset: 0x180, Size: 0x1]
	MaterialInterface* GrapplingHookStringMeshMat;//[Offset: 0x188, Size: 0x8]
	float SimulatedBoxWidthHeight;//[Offset: 0x190, Size: 0x4]
	bool bDrawDebugSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 0x1]
	bool bDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x195, Size: 0x1]
	bool bDrawDebugHitSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x196, Size: 0x1]
	bool bDrawDebugLineWithBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x197, Size: 0x1]
	bool bDrawDebugLineWithBoxSweepRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	bool bDrawDebugLineWithBoxSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 0x1]
	float DebugDrawTime;//[Offset: 0x19c, Size: 0x4]
	bool bFuncAEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	bool bFuncBEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 0x1]
	bool bFuncCEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a2, Size: 0x1]
	Actor*[] StringMoveIgnoreActors;//[Offset: 0x1a8, Size: 0x10]
	float CurLength;//[Offset: 0x1b8, Size: 0x4]
	float FinLength;//[Offset: 0x1bc, Size: 0x4]
	int SimPointNum;//[Offset: 0x1c0, Size: 0x4]
	Vector StartPos;//[Offset: 0x1c4, Size: 0xc]
	Vector EndPos;//[Offset: 0x1d0, Size: 0xc]
	Vector FinPos;//[Offset: 0x1dc, Size: 0xc]
	Vector EyePos;//[Offset: 0x1e8, Size: 0xc]
	Vector LastStartPos;//[Offset: 0x1f4, Size: 0xc]
	Vector LastEndPos;//[Offset: 0x200, Size: 0xc]
	Vector LastBoxExt;//[Offset: 0x20c, Size: 0xc]
	Vector ForwardVector;//[Offset: 0x218, Size: 0xc]
	Vector UpVector;//[Offset: 0x224, Size: 0xc]
	Vector RightVector;//[Offset: 0x230, Size: 0xc]
	float UpVectorDirFlag;//[Offset: 0x23c, Size: 0x4]
	float RightVectorDirFlag;//[Offset: 0x240, Size: 0x4]
	float StringOffsetBase;//[Offset: 0x244, Size: 0x4]
	bool bLastPositionRotationSaved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	Vector LastPosition;//[Offset: 0x24c, Size: 0xc]
	Quat LastRotation;//[Offset: 0x260, Size: 0x10]
	enum GrapplingHookStringType;//[Offset: 0x270, Size: 0x1]
	SceneComponent* RootCompToAttach;//[Offset: 0x274, Size: 0x8]
	HitResult[] BreakPointHitResultList;//[Offset: 0x280, Size: 0x10]
	SplineMeshComponent*[] SplineMeshCompList;//[Offset: 0x290, Size: 0x10]
	SplineComponent* UpdateSplineComp;//[Offset: 0x2a0, Size: 0x8]
	bool UpdateStringBreakPoint();// 0x3c0fe44
	void UpdateSplineMesh();// 0x3c0fc88
	void UpdateGrapplingHookString(Vector inStartPos, Vector inEndPos, Vector inFinPos, Vector inEyePos, SplineComponent* inUpdateSplineComp, enum inStringType);// 0x3c0ffbc
	bool UpdateGrapplingHookParameters();// 0x3c0feec
	bool TangentCalculate(int InputKey, out SplinePoint outSplinePoint);// 0x3c0f970
	bool SplinePointCalculate(int CurPointIndex, out SplinePoint outSplinePoint);// 0x3c0fc9c
	bool ScaleCalculate(int InputKey, out SplinePoint outSplinePoint);// 0x3c0fb80
	bool RotationCalculate(int InputKey, out SplinePoint outSplinePoint);// 0x3c0fa78
	bool QuadraticPositionCalculate(int InputKey, out SplinePoint outSplinePoint);// 0x3c0f760
	bool LinearPositionCalculate(int InputKey, out SplinePoint outSplinePoint);// 0x3c0f868
	void InitRandomStringAnimationParams();// 0x3c0f63c
	bool FilterBreakPointList();// 0x3c0fe7c
	bool CubicPositionCalculate(int InputKey, out SplinePoint outSplinePoint);// 0x3c0f658
	void ClearStringData();// 0x3c0ffa8
	void ClearSplineMeshComp(SplineMeshComponent* MeshComp);// 0x3c0ff2c
	bool BuildSplineAndMesh();// 0x3c0feb4
	bool BuildQuadraticBezierCurvesSpline();// 0x3c0fdd4
	bool BuildLinearBezierCurvesSpline();// 0x3c0fe0c
	bool BuildCubicBezierCurvesSpline();// 0x3c0fd9c

--------------------------------
Class: RopeAnimationParam
	float QuarterCycleNumUp;//[Offset: 0x0, Size: 0x4]
	float QuarterCycleNumRight;//[Offset: 0x4, Size: 0x4]
	float OffsetQuarterCycleFactorUp;//[Offset: 0x8, Size: 0x4]
	float OffsetQuarterCycleFactorRight;//[Offset: 0xc, Size: 0x4]
	float OffsetQuarterCycleUp;//[Offset: 0x10, Size: 0x4]
	float OffsetQuarterCycleRight;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: RopeAnimationParamRespawn
	float Angle;//[Offset: 0x0, Size: 0x4]
	float Offset;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x6b8, Size: 0x58]
	Vector SplineUpDir;//[Offset: 0x710, Size: 0xc]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71c, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71c, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x71d, Size: 0x1]
	float SplineBoundaryMin;//[Offset: 0x720, Size: 0x4]
	float SplineBoundaryMax;//[Offset: 0x724, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x728, Size: 0x8]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x730, Size: 0x10]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x740, Size: 0x1]
	void UpdateMesh();// 0x6097568
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x6097368
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x6096ed8
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x6096ddc
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x6097468
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x6096ce4
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x6096fd0
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x60967ec
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x60968fc
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x6097168
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x6096bec
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x6096af0
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x6097268
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x60969f8
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x60966f0
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x60965f4
	Vector GetStartTangent();// 0x6097430
	Vector2D GetStartScale();// 0x6096f9c
	float GetStartRoll();// 0x6096ea4
	Vector GetStartPosition();// 0x6097530
	Vector2D GetStartOffset();// 0x6096da8
	Vector GetSplineUpDir();// 0x60968c4
	byte GetForwardAxis();// 0x60969c4
	Vector GetEndTangent();// 0x6097230
	Vector2D GetEndScale();// 0x6096cb0
	float GetEndRoll();// 0x6096bb8
	Vector GetEndPosition();// 0x6097330
	Vector2D GetEndOffset();// 0x6096abc
	float GetBoundaryMin();// 0x60967b8
	float GetBoundaryMax();// 0x60966bc

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]
	float StartRoll;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector EndTangent;//[Offset: 0x38, Size: 0xc]
	Vector2D EndScale;//[Offset: 0x44, Size: 0x8]
	float EndRoll;//[Offset: 0x4c, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: PathfinderFlexibleCDConf
	bool bEnableFlexibleCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool ActiveCDOnExitInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bEnableMaxConnTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float MaxConnectTime;//[Offset: 0x4, Size: 0x4]
	float MinCDDuration;//[Offset: 0x8, Size: 0x4]
	float MaxCDDuration;//[Offset: 0xc, Size: 0x4]
	float CDSlope;//[Offset: 0x10, Size: 0x4]
	float CDConstantAddition;//[Offset: 0x14, Size: 0x4]
	bool bIgnoreZDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	class ModifyAttributeData* ModifyAttributeDataClass;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: PathfinderSyncData
	enum State;//[Offset: 0x0, Size: 0x1]
	PathfinderHitStruct Hit;//[Offset: 0x4, Size: 0x54]
	PathfinderTraceStruct Trace;//[Offset: 0x58, Size: 0x20]
	int GrappleHookCnt;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: PathfinderHitStruct
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float ZiplineTime;//[Offset: 0x4, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x14, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x20, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x2c, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x38, Size: 0xc]
	Actor* Actor;//[Offset: 0x44, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x4c, Size: 0x8]

--------------------------------
Class: PathfinderTraceStruct
	Vector TraceStart;//[Offset: 0x0, Size: 0xc]
	Vector TraceEnd;//[Offset: 0xc, Size: 0xc]
	SceneComponent* BaseSceneComp;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: UAESkill.UAEBaseSkill.ApexSkill.UTSkill.Actor.Object
	UAESkillUIData SkillUIConfig;//[Offset: 0x440, Size: 0x2b0]
	bool TriggerFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 0x1]
	bool IsAddHealTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f1, Size: 0x1]
	bool bStopByKillDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f2, Size: 0x1]
	bool AutoEnterState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f3, Size: 0x1]
	enum SkillPawnState;//[Offset: 0x6f4, Size: 0x1]
	bool bIsMainHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f5, Size: 0x1]
	bool bForceInterruptedBySameSkillState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f6, Size: 0x1]
	bool bPauseSkillLossTopOfMHStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f7, Size: 0x1]
	bool bNeedWeaponProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 0x1]
	FString SkillGroup;//[Offset: 0x700, Size: 0x10]
	bool SwitchToMainHandAtZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x710, Size: 0x1]
	int[] DisabledByPawnStateArray;//[Offset: 0x718, Size: 0x10]
	int ConfigId;//[Offset: 0x728, Size: 0x4]
	class APPerk[] TriggerByPerks;//[Offset: 0x730, Size: 0x10]
	void ShowSkillDisabledTips(UTSkillManagerComponent* SkillManagerComponent);// 0x3e05a0c

--------------------------------
Class: UAESkillUIData
	UAESkillUIMode StandardUIMode;//[Offset: 0x0, Size: 0x130]
	UAESkillUIMode SimpleUIMode;//[Offset: 0x130, Size: 0x130]
	UAESkillAncillaryButton AncillaryBtn;//[Offset: 0x260, Size: 0x40]
	UAESkillGuideTips GuideTipsSetting;//[Offset: 0x2a0, Size: 0xc]

--------------------------------
Class: UAESkillUIMode
	FString UIDefineName;//[Offset: 0x0, Size: 0x10]
	enum UISlot;//[Offset: 0x10, Size: 0x1]
	class UserWidget* SkillBtnBPTemplate;//[Offset: 0x18, Size: 0x28]
	class UserWidget* SkillBtnBPTemplatePlanB;//[Offset: 0x40, Size: 0x28]
	class UserWidget* SkillBtnBP;//[Offset: 0x68, Size: 0x8]
	class UserWidget* SkillBPTemplate;//[Offset: 0x70, Size: 0x28]
	class UserWidget* SkillBPTemplatePlanB;//[Offset: 0x98, Size: 0x28]
	class UserWidget* SkillBP;//[Offset: 0xc0, Size: 0x8]
	class UserWidget* CancelBtnBPTemplate;//[Offset: 0xc8, Size: 0x28]
	class UserWidget* CancelBtnBP;//[Offset: 0xf0, Size: 0x8]
	class UserWidget* UndoBtnBPTemplate;//[Offset: 0xf8, Size: 0x28]
	class UserWidget* UndoBtnBP;//[Offset: 0x120, Size: 0x8]
	SkillUIOperationData* UIOperationData;//[Offset: 0x128, Size: 0x8]

--------------------------------
Class: SkillUIOperationData.Object
	enum OperationType;//[Offset: 0x28, Size: 0x1]
	FString SkillBtnName;//[Offset: 0x30, Size: 0x10]
	FString CancelBtnName;//[Offset: 0x40, Size: 0x10]
	FString UndoBtnName;//[Offset: 0x50, Size: 0x10]
	FString StatusWSName;//[Offset: 0x60, Size: 0x10]
	FString SkillReleaseAnimName;//[Offset: 0x70, Size: 0x10]
	FString CDStatusUseAnimName;//[Offset: 0x80, Size: 0x10]
	FString CDCompleteAnimName;//[Offset: 0x90, Size: 0x10]
	FString CDCompleteAudioName;//[Offset: 0xa0, Size: 0x10]
	FString CDPressedButNotReady;//[Offset: 0xb0, Size: 0x10]
	FString CDPressedButNotReadyAndSilenced;//[Offset: 0xc0, Size: 0x10]
	FString CDPressedButReadyAndSilenced;//[Offset: 0xd0, Size: 0x10]
	float ReleaseInterval;//[Offset: 0xe0, Size: 0x4]
	bool bCancelWhenIllogical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	bool bTipWhenIllogical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5, Size: 0x1]
	FString StrTipWhenIllogical;//[Offset: 0xe8, Size: 0x10]
	bool bShowTimerWhenCDMeetCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool bRefreshCDWhenActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	bool bEnableSkillEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 0x1]
	FString AtCDAnimName;//[Offset: 0x100, Size: 0x10]
	FString AtReadyAnimName;//[Offset: 0x110, Size: 0x10]
	FString AtActiveAnimName;//[Offset: 0x120, Size: 0x10]
	FString AtDurationAnimName;//[Offset: 0x130, Size: 0x10]
	FString GetProxyLuaPath();// 0x3e3b44c

--------------------------------
Class: UAESkillAncillaryButton
	FString UIDefineName;//[Offset: 0x0, Size: 0x10]
	class UserWidget* AuxiliaryBtnBPTemplate;//[Offset: 0x10, Size: 0x28]
	class UserWidget* AuxiliaryBtnBP;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: UAESkillGuideTips
	float ShowTipsHoldTime;//[Offset: 0x0, Size: 0x4]
	float ShowTipsMoveRange;//[Offset: 0x4, Size: 0x4]
	enum ShowTipsStatus;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: GrapplingHookAimSight.SkillActorBase.DynamicMovementActor.Actor.Object
	float MinRange;//[Offset: 0x4d4, Size: 0x4]
	float MaxRange;//[Offset: 0x4d8, Size: 0x4]
	float RangeExtendForAimSight;//[Offset: 0x4dc, Size: 0x4]
	float TPPExtraOffset;//[Offset: 0x4e0, Size: 0x4]
	PathfinderCheckSweepConfig[] SweepSphereRadiusArray;//[Offset: 0x4e8, Size: 0x10]
	bool SweepSphereFarToNear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	bool AimTargetMustBeSeen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f9, Size: 0x1]
	float ProjSweepSphereRadius;//[Offset: 0x4fc, Size: 0x4]
	float SweepSphereRadiusZipline;//[Offset: 0x500, Size: 0x4]
	float MaxHalfAngleForZipline;//[Offset: 0x504, Size: 0x4]
	bool bDisableBlueAimUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	int GrapplingHookSkillID;//[Offset: 0x50c, Size: 0x4]
	class Object[] IgnoreClassArray;//[Offset: 0x510, Size: 0x10]
	class Object[] TeammateIgnoreSkillActorClassArray;//[Offset: 0x520, Size: 0x10]
	enum[] InAirExclusivePawnStateArray;//[Offset: 0x530, Size: 0x10]
	float SyncBouncingCameraInfoTolerance;//[Offset: 0x540, Size: 0x4]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1]
	float DebugDisplayTime;//[Offset: 0x57c, Size: 0x4]
	float PerkEffectiveDuration;//[Offset: 0x580, Size: 0x4]
	float PerkRescueRate;//[Offset: 0x584, Size: 0x4]
	bool bReportFlowData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x631, Size: 0x1]
	TrackerData MoveDiffTrackerData;//[Offset: 0x664, Size: 0x18]
	SkillAimSight AimSight;//[Offset: 0x680, Size: 0x30]
	bool bRefreshConfigOnSkillUIMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 0x1]
	bool bUseExtensionAimFind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b1, Size: 0x1]
	bool bUseDoubleAimSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b2, Size: 0x1]
	bool bHideMainAimSightWhenDisplayViceAimSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b3, Size: 0x1]
	bool bHideAssistWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 0x1]
	bool bUseExtensionAimFindWhenAimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b5, Size: 0x1]
	float DoubleAimSightMaxValue;//[Offset: 0x6b8, Size: 0x4]
	float AimAnimInterval;//[Offset: 0x6bc, Size: 0x4]
	LinearColor TargetNotFoundColor;//[Offset: 0x6c0, Size: 0x10]
	LinearColor TargetInvalidColor;//[Offset: 0x6d0, Size: 0x10]
	LinearColor TargetFoundColor;//[Offset: 0x6e0, Size: 0x10]
	LinearColor SubTargetFoundColor;//[Offset: 0x6f0, Size: 0x10]
	CurveFloat* AimSightScaleAnim;//[Offset: 0x700, Size: 0x8]
	int SkillConfigId;//[Offset: 0x790, Size: 0x4]
	void UpdateGrapplingHookAimingSightUI(enum TargetState2Lua);// 0x3c0ca78
	void TickAimSight();// 0x3c0cd20
	void SyncBouncingCameraInfo(bool IsBouncing, const Vector RelativeLocation);// 0x3c0c69c
	void ServerUpdateUIConfigStatus(enum SkillUIMode);// 0x3c0c774
	void ServerSavedResult(HitResult SavedHitResultToSever);// 0x3c0c7f8
	void ReportFlowCacheData();// 0x3c0c130
	void PathfindAimSightDebugPrint();// 0x3c0c0e4
	void OnSkillTriggerStringEvent(FString EventTypeStr, Actor* OwnerChar);// 0x3c0c5b4
	void OnSkillTriggerCustomEvent(byte EventType, Actor* OwnerChar);// 0x3c0c4ec
	void OnSkillAssistSwitch(bool bEnable, UTSkill* Skill);// 0x3c0cd34
	void OnPlayerRescueEnd(int RescueSrcPlayerKey, int RescueTargetPlayerKey);// 0x3c0bf24
	void OnPawnStateChanged(enum[] StatesMoreThanOld, enum[] StatesLessThanOld);// 0x3c0c17c
	void OnCrosshairDraw(HUDWidgetBase* Widget);// 0x3c0c470
	void OnAPEvent_NotifyHideAimSight(bool bHide, float HiddenTime);// 0x3c0c328
	void OnAPEvent_NotifyGrappleHookSkillCDStart();// 0x3c0c314
	void OnAPEvent_NotifyGrappleHookSkillCDReady();// 0x3c0c300
	void OnAPEvent_NotifyGrappleHookAssistCircleInitAimSightActor();// 0x3c0c2ec
	void OnAPEvent_NotifyAimSightStatus(enum NewStatus);// 0x3c0c3f4
	bool IsPerkGrappleDyingTeammate(ApexCharacter* GrappleTeammate);// 0x3c0bfe0
	bool IsGrapplingCDReady();// 0x3c0c0f8
	bool IsGrapplingCDPending();// 0x3c0c144
	bool GetSweepTestParamsFromSceenCenter(out Vector outStartPos, out Vector outEndPos, out Quat outRot, out Vector OutCameraPos);// 0x3c0caf4
	HitResult GetSavedHitResult();// 0x3c0cca4
	PathfinderTraceStruct GetGrappleTrace();// 0x3c0cc7c
	bool CheckZiplineHitWithAngle(Vector StartPos, Vector EndPos);// 0x3c0c8d8
	bool CheckZiplineHit(Vector StartPos, Vector EndPos);// 0x3c0c9a8
	void AimSightInit();// 0x3c0c688
	void AddPerkDyingTeammateWhenGrapple(ApexCharacter* GrappleTeammate);// 0x3c0c068

--------------------------------
Class: PathfinderCheckSweepConfig
	float StartLocationPercentage;//[Offset: 0x0, Size: 0x4]
	float SphereRadius;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TrackerData
	float Value;//[Offset: 0x0, Size: 0x4]
	int TrackerType;//[Offset: 0x4, Size: 0x4]
	int LegendId;//[Offset: 0x8, Size: 0x4]
	int TrackerParam1;//[Offset: 0xc, Size: 0x4]
	int TrackerParam2;//[Offset: 0x10, Size: 0x4]
	int TrackerID;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SkillAimSight
	Texture*[] AimSightTextureArray;//[Offset: 0x0, Size: 0x10]
	Vector2D AimSightSize;//[Offset: 0x10, Size: 0x8]
	bool Disabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: SkillMovementConfig

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x258, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x25c, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x268, Size: 0xc]
	float ProbeSize;//[Offset: 0x274, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x278, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x279, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x279, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x279, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x279, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x279, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x279, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x279, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x279, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27a, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x27c, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x280, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x284, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x288, Size: 0x4]
	bool IsCollisionFixApplied();// 0x6098a1c
	Vector GetUnfixedCameraPosition();// 0x6098a54
	Rotator GetTargetRotation();// 0x6098a8c

--------------------------------
Class: ApexPostProcessComponent.ActorComponent.Object
	class UserWidget* CloseEyeWidgetClass;//[Offset: 0xf0, Size: 0x8]
	UserWidget* CloseEyeWidgetInst;//[Offset: 0xf8, Size: 0x8]
	<enum,ApexPostProcessCfgItem> PostProcessConfigMap;//[Offset: 0x100, Size: 0x50]
	<enum,Object*> PostProcessUnitMap;//[Offset: 0x150, Size: 0x50]
	TimerHandle CloseEyeTh;//[Offset: 0x1a0, Size: 0x8]
	void UnRegisterPostProcess(enum PPT);// 0x3a14b0c
	void RegisterPostProcess(enum PPT, Object* ApexPostProcessUnit);// 0x3a14b90
	void EndPostProcess(enum PPT);// 0x3a14c58
	void EndGreyScreen();// 0x3a14d98
	void EndCloseEye();// 0x3a14dd0
	void EndArc();// 0x3a14d60
	void BeginPostProcess(enum PPT);// 0x3a14cdc
	void BeginGreyScreen();// 0x3a14db4
	void BeginCloseEye(byte TimeSec, float StartAtTime);// 0x3a14dec
	void BeginArc();// 0x3a14d7c

--------------------------------
Class: ApexPostProcessCfgItem
	enum PPT;//[Offset: 0x0, Size: 0x1]
	class Actor* PostProcessClass;//[Offset: 0x8, Size: 0x8]
	float Duation;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: QuickItemComponent.ActorComponent.Object
	<int,QuickItemArray> ProjectileModeCfg;//[Offset: 0xf0, Size: 0x50]
	<int,QuickItemArray> MedicalModeCfg;//[Offset: 0x140, Size: 0x50]
	void GetQuickItemModeCfg(FString ModeId, out <int,QuickItemArray> ModeCfgMap, out QuickItemArray QuickItemArray, FString ConfigKey);// 0x3d54de4
	QuickItemArray GetProjectileModeCfg(FString ModeId);// 0x3d54cc0
	QuickItemArray GetMedicalModeCfg(FString ModeId);// 0x3d54b9c

--------------------------------
Class: QuickItemArray
	int[] ItemIdArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: HUDManagerComponent.ActorComponent.Object
	enum[] PreCreateArray;//[Offset: 0xf0, Size: 0x10]
	<enum,class UserWidget> HUDDefines;//[Offset: 0x100, Size: 0x50]
	<enum,UserWidget*> HUDMap;//[Offset: 0x150, Size: 0x50]
	bool bKillLeaderOnShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	BattlefieldKillKingMessage[] KillLeaderMsgArray;//[Offset: 0x1a8, Size: 0x10]
	void ShowKillLeaderTip(BattlefieldKillKingMessage Msg);// 0x3c35240
	void ShowKillLeaderKilledTip(FString Msg, int MsgType);// 0x3c35094
	void ShowKillLeaderAchievedTip(int KillCount);// 0x3c351b0
	void PreCreateWidget();// 0x3c35460
	void PopKillLeaderMsg();// 0x3c3522c
	void OnPreWidgetLoad();// 0x3c3544c
	UserWidget* GetUserWidget(enum HUDType);// 0x3c353c8
	void EnableExplosionTimeTips(bool bEnable, float RealExplosionTime, float Percent);// 0x3c34f7c

--------------------------------
Class: UIStateMgr.ActorComponent.Object
	<enum,byte> Type2Priorities;//[Offset: 0x100, Size: 0x50]
	<enum,UIStateList> ConfigStateMap;//[Offset: 0x1a0, Size: 0x50]
	DataTable* UIStateConfig;//[Offset: 0x1f0, Size: 0x8]
	<FName,ApexUIStateBaseInfo> WaitToChangeMap;//[Offset: 0x218, Size: 0x50]
	void PostUIStateChange_Lua(const enum UIState, const enum PreUIState);// 0x2543478
	void PostUIStateChange(const enum UIState, bool bIsEnter);// 0x3e4c538
	void HandleNextTickFunc();// 0x3e4c37c
	void GetNodeWidget(FName NodeName, out Widget*[] FindList);// 0x3e4c390
	FString GetModuleName();// 0x3e4c61c
	void BeginPlay_Lua();// 0x2543478

--------------------------------
Class: UIStateList
	ApexUIStateBaseInfo[] StateList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ApexUIStateBaseInfo
	FName BlueprintNodeName;//[Offset: 0x0, Size: 0x8]
	FName FuncName;//[Offset: 0x8, Size: 0x8]
	bool IgnoreExistState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString[] IgnoreSimpleModeIDList;//[Offset: 0x18, Size: 0x10]
	bool bInnerEnterShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	FName StateKey;//[Offset: 0x2c, Size: 0x8]
	bool FinalVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: ApLUTComponent.ActorComponent.Object
	LutDataAsset* LutData;//[Offset: 0xf0, Size: 0x8]
	<FName,Actor*> HighLevelEndLUTs;//[Offset: 0xf8, Size: 0x50]
	void UseLutByName(FName ID, float Speed, float PlayTime, enum Source, bool IsFromCallback);// 0x3a6e4c0
	void StopLutByName(FName ID, enum Source);// 0x3a6e400
	void ClearAllLut();// 0x3a6e3ec

--------------------------------
Class: LutDataAsset.DataAsset.Object
	<FName,ApLUTCommands> LutCommands;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: ApLUTCommands
	int Priority;//[Offset: 0x0, Size: 0x4]
	int HeroID;//[Offset: 0x4, Size: 0x4]
	FString[] LutCommands;//[Offset: 0x8, Size: 0x10]
	class Actor* HighLevelEndLut_Ptr;//[Offset: 0x18, Size: 0x28]

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float ShadowCascadeBiasDistribution;//[Offset: 0x394, Size: 0x4]
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398, Size: 0x1]
	float OcclusionMaskDarkness;//[Offset: 0x39c, Size: 0x4]
	float OcclusionDepthRange;//[Offset: 0x3a0, Size: 0x4]
	Vector LightShaftOverrideDirection;//[Offset: 0x3a4, Size: 0xc]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x3b0, Size: 0x4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x3b4, Size: 0x4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x3b8, Size: 0x4]
	int DynamicShadowCascades;//[Offset: 0x3bc, Size: 0x4]
	bool bEnableCSMOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 0x1]
	float OverrideCSMNear;//[Offset: 0x3c4, Size: 0x4]
	float OverrideCSMFar;//[Offset: 0x3c8, Size: 0x4]
	float CascadeDistributionExponent;//[Offset: 0x3cc, Size: 0x4]
	float CascadeTransitionFraction;//[Offset: 0x3d0, Size: 0x4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x3d4, Size: 0x4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d8, Size: 0x1]
	int FarShadowCascadeCount;//[Offset: 0x3dc, Size: 0x4]
	float FarShadowDistance;//[Offset: 0x3e0, Size: 0x4]
	float DistanceFieldShadowDistance;//[Offset: 0x3e4, Size: 0x4]
	float LightSourceAngle;//[Offset: 0x3e8, Size: 0x4]
	float LightSourceSoftAngle;//[Offset: 0x3ec, Size: 0x4]
	float TraceDistance;//[Offset: 0x3f0, Size: 0x4]
	Texture* CloudMaskTexture;//[Offset: 0x3f8, Size: 0x8]
	Vector4 CloudRelOffset_U;//[Offset: 0x400, Size: 0x10]
	Vector4 CloudRelOffset_V;//[Offset: 0x410, Size: 0x10]
	LinearColor TintAndMonochrome;//[Offset: 0x420, Size: 0x10]
	float DynamicLightScalarDirectional;//[Offset: 0x430, Size: 0x4]
	float DynamicLightScalarEnvironment;//[Offset: 0x434, Size: 0x4]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x438, Size: 0x10]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x448, Size: 0x1]
	Color ModulatedShadowColor;//[Offset: 0x44c, Size: 0x4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x450, Size: 0x1]
	bool bUseCustomShadowBound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x450, Size: 0x1]
	float ShadowCasterBoundRadius;//[Offset: 0x454, Size: 0x4]
	void SetTintAndMonochrome(LinearColor NewValue);// 0x5f15810
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x5f152b4
	void SetOverrideCSMNear(float NewValue);// 0x5f153ac
	void SetOverrideCSMFar(float NewValue);// 0x5f15330
	void SetOcclusionMaskDarkness(float NewValue);// 0x5f151b4
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x5f15138
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x5f15230
	void SetEnableCSMOverride(bool bNewValue);// 0x5f15428
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x5f15620
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x5f1569c
	void SetDynamicShadowCascades(int NewValue);// 0x5f155a4
	void SetDynamicLightScalarEnvironment(float NewValue);// 0x5f15718
	void SetDynamicLightScalarDirectional(float NewValue);// 0x5f15794
	void SetCloudRelOffset_V(Vector4 NewValue);// 0x5f1588c
	void SetCloudRelOffset_U(Vector4 NewValue);// 0x5f15914
	void SetCloudMaskTexture(Texture* NewValue);// 0x5f1599c
	void SetCascadeTransitionFraction(float NewValue);// 0x5f154ac
	void SetCascadeDistributionExponent(float NewValue);// 0x5f15528

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x284, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0x288, Size: 0x4]
	float MaxDistanceFadeRange;//[Offset: 0x28c, Size: 0x4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	int ShadowMapChannel;//[Offset: 0x294, Size: 0x4]
	float MinRoughness;//[Offset: 0x29c, Size: 0x4]
	float SpecularScale;//[Offset: 0x2a0, Size: 0x4]
	float ShadowResolutionScale;//[Offset: 0x2a4, Size: 0x4]
	float ShadowBias;//[Offset: 0x2a8, Size: 0x4]
	float ShadowSlopeBias;//[Offset: 0x2ac, Size: 0x4]
	float ShadowSharpen;//[Offset: 0x2b0, Size: 0x4]
	float ContactShadowLength;//[Offset: 0x2b4, Size: 0x4]
	int LightPriority;//[Offset: 0x2b8, Size: 0x4]
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bc, Size: 0x1]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2bc, Size: 0x1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2bc, Size: 0x1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2bc, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2bc, Size: 0x1]
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2bc, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x2bd, Size: 0x1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x2c0, Size: 0x8]
	Vector LightFunctionScale;//[Offset: 0x2c8, Size: 0xc]
	TextureLightProfile* IESTexture;//[Offset: 0x2d8, Size: 0x8]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 0x1]
	float IESBrightnessScale;//[Offset: 0x2e4, Size: 0x4]
	float LightFunctionFadeDistance;//[Offset: 0x2e8, Size: 0x4]
	float DisabledBrightness;//[Offset: 0x2ec, Size: 0x4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	float BloomScale;//[Offset: 0x2f4, Size: 0x4]
	float BloomThreshold;//[Offset: 0x2f8, Size: 0x4]
	Color BloomTint;//[Offset: 0x2fc, Size: 0x4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	float RayStartOffsetDepthScale;//[Offset: 0x304, Size: 0x4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x5fd0c10
	void SetUseIESBrightness(bool bNewValue);// 0x5fd045c
	void SetTransmission(bool bNewValue);// 0x5fd0750
	void SetTemperature(float NewTemperature);// 0x5fd0acc
	void SetSpecularScale(float NewValue);// 0x5fd026c
	void SetShadowSlopeBias(float NewValue);// 0x5fd02e8
	void SetShadowBias(float NewValue);// 0x5fd0364
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x5fd09d4
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x5fd0a50
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x5fd0958
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x5fd08dc
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x5fd0b48
	void SetIntensity(float NewIntensity);// 0x5fd0d08
	void SetIndirectLightingIntensity(float NewIntensity);// 0x5fd0c8c
	void SetIESTexture(TextureLightProfile* NewValue);// 0x5fd04e0
	void SetIESBrightnessScale(float NewValue);// 0x5fd03e0
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x5fd01e8
	void SetEnableLightShaftBloom(bool bNewValue);// 0x5fd06cc
	void SetBloomTint(Color NewValue);// 0x5fd055c
	void SetBloomThreshold(float NewValue);// 0x5fd05d4
	void SetBloomScale(float NewValue);// 0x5fd0650
	void SetAffectTranslucentLighting(bool bNewValue);// 0x5fd07d4
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x5fd0858

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x258, Size: 0x10]
	float Brightness;//[Offset: 0x268, Size: 0x4]
	float Intensity;//[Offset: 0x26c, Size: 0x4]
	Color LightColor;//[Offset: 0x270, Size: 0x4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 0x1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274, Size: 0x1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x274, Size: 0x1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x274, Size: 0x1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x274, Size: 0x1]
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x274, Size: 0x1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x274, Size: 0x1]
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x274, Size: 0x1]
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x275, Size: 0x1]
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x275, Size: 0x1]
	float IndirectLightingIntensity;//[Offset: 0x278, Size: 0x4]
	float VolumetricScatteringIntensity;//[Offset: 0x27c, Size: 0x4]
	int SamplesPerPixel;//[Offset: 0x280, Size: 0x4]
	void SetSamplesPerPixel(int NewValue);// 0x5fd1830
	void SetCastVolumetricShadow(bool bNewValue);// 0x5fd1a38
	void SetCastShadows(bool bNewValue);// 0x5fd1af4
	void SetCastRaytracedShadow(bool bNewValue);// 0x5fd18ac
	void SetAffectReflection(bool bNewValue);// 0x5fd19b4
	void SetAffectGlobalIllumination(bool bNewValue);// 0x5fd1930
	LinearColor GetLightColor();// 0x5fd1abc

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object
	float Brightness;//[Offset: 0x108, Size: 0x4]
	float TextureMultiplier;//[Offset: 0x10c, Size: 0x4]

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4]
	float ShadowExponent;//[Offset: 0x4, Size: 0x4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ViewAssistComponent.ActorComponent.Object
	FName[] CharacterSnappingBones;//[Offset: 0xf0, Size: 0x10]
	ViewAssistInfo[] ReadyInfos;//[Offset: 0x100, Size: 0x10]
	<uint32,float> Weapon2LastQuickSnappingTime;//[Offset: 0x118, Size: 0x50]
	<uint32,float> Weapon2LastAimSnappingTime;//[Offset: 0x168, Size: 0x50]
	<uint32,float> Weapon2LastFireSnappingTime;//[Offset: 0x1b8, Size: 0x50]
	<uint32,float> Weapon2LastEdgePushingTime;//[Offset: 0x208, Size: 0x50]
	void StopWeaponSnappingByType(ShootWeapon* CurrentShootWeapon, enum Type2Stop);// 0x3e549e0
	void StopWeaponAimSnapping(ShootWeapon* CurrentShootWeapon);// 0x3e5486c
	void StopProjectileAimSnapping();// 0x3e54420
	void SetCurrentWeaponSnappingSpeed(float NewSpeed);// 0x3e543a4
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x3e5421c
	void AddWeaponTickSnapping(ShootWeapon* CurrentShootWeapon, bool Add);// 0x3e54688
	void AddWeaponQuickSnapping(ShootWeapon* CurrentShootWeapon, bool IsAiming, bool IsFire);// 0x3e54750
	void AddWeaponFireSnapping(ShootWeapon* CurrentShootWeapon);// 0x3e54964
	void AddWeaponEdgePushing(ShootWeapon* CurrentShootWeapon);// 0x3e5460c
	void AddWeaponAimSnapping(ShootWeapon* CurrentShootWeapon);// 0x3e548e8
	void AddProjectileAimSnapping(const AimSnappingConfigAsset* AimSnappingConfig, float ProjectileSpeedValue, float GravityAcceleration, out const Vector InLaunchLocation, float TPPPitchOffset, float TPPYawOffset);// 0x3e54434

--------------------------------
Class: ViewAssistInfo
	ShootWeapon* TriggerWeapon;//[Offset: 0x0, Size: 0x8]
	CurveFloat* Speed2SnappingSpeedCurve;//[Offset: 0x30, Size: 0x8]
	CurveFloat* Distance2SpeedFactorCurve;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AimSnappingConfigAsset.DataAsset.Object
	enum SnappingType;//[Offset: 0x30, Size: 0x1]
	float SnappingSpeed;//[Offset: 0x34, Size: 0x4]
	float SnappingTime;//[Offset: 0x38, Size: 0x4]
	float SnappingMaxDistance2Reticle;//[Offset: 0x3c, Size: 0x4]
	float MaxSnappingDistance;//[Offset: 0x40, Size: 0x4]
	FName[] CharacterSnappingBones;//[Offset: 0x48, Size: 0x10]
	CurveFloat* SnappingDistanceFactor;//[Offset: 0x58, Size: 0x8]
	CurveFloat* Speed2SnappingSpeedCurve;//[Offset: 0x60, Size: 0x8]
	bool KeepSnappingEvenAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool ConsiderEnemySpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool EnablePitchSnapping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool EnableViewAssistDebug;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: PlayerNetStaticComponent.ActorComponent.Object
	bool bNetStaticActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	byte CollectGap;//[Offset: 0x101, Size: 0x1]
	PlayerNetStats NetStats;//[Offset: 0x120, Size: 0x80]
	int MinPing;//[Offset: 0x1a0, Size: 0x4]
	int MaxPing;//[Offset: 0x1a4, Size: 0x4]
	bool SerializeToFile(FString InFilename);// 0x3d42178
	int GetRuntimeFps();// 0x3d42078
	int GetPingAverage();// 0x3d420fc
	int GetPing();// 0x3d42130
	void DumpFpsStaticsData();// 0x3d420ac
	void DebugPrintReportData();// 0x3d420c0
	void DebugPrint();// 0x3d42164
	void CountPingAverage();// 0x3d420e8
	void CheckSlagDataCount();// 0x3d420d4

--------------------------------
Class: PlayerNetStats
	FString ClientAddr;//[Offset: 0x0, Size: 0x10]
	FString LocalAddr;//[Offset: 0x10, Size: 0x10]
	float AvgPing;//[Offset: 0x20, Size: 0x4]
	float MaxPing;//[Offset: 0x24, Size: 0x4]
	float HighPingPercent;//[Offset: 0x28, Size: 0x4]
	float InBytesPerSecond;//[Offset: 0x68, Size: 0x4]
	float OutBytesPerSecond;//[Offset: 0x6c, Size: 0x4]
	float InPacketLostRate;//[Offset: 0x70, Size: 0x4]
	float OutPacketLostRate;//[Offset: 0x74, Size: 0x4]
	float OutSaturationRate;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: TimeLineSyncComponent.ActorComponent.Object
	float ServerCheckInterval;//[Offset: 0xf0, Size: 0x4]
	float ServerCheckDelay;//[Offset: 0xf4, Size: 0x4]
	float MaxAllowWait;//[Offset: 0xf8, Size: 0x4]
	bool IsClientUseHardwareTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	float IosTimeJumpSize;//[Offset: 0x100, Size: 0x4]
	void RPC_ServerSyncTimeLine(double InSrvSendTime, double InClientRecvTime, double InClientSendTime);// 0x3ddd98c
	void RPC_ServerReportInfo(int RporetedId);// 0x3ddd908
	void RPC_ClientSyncTimeLine(double InServerTime);// 0x3ddda94
	void OnServerAboutToReconnect();// 0x3ddd8f4
	void CheckTimeLine();// 0x3dddb18

--------------------------------
Class: InGameRecoverItemGuidInfo
	int GuideID;//[Offset: 0x0, Size: 0x4]
	enum eInGameRecoverItemGuidType;//[Offset: 0x4, Size: 0x1]
	float MinPercentValue;//[Offset: 0x8, Size: 0x4]
	float MaxPercentValue;//[Offset: 0xc, Size: 0x4]
	float DurationTime;//[Offset: 0x10, Size: 0x4]
	int ItemID;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InGameRecoverPropGuid.ActorComponent.Object

--------------------------------
Class: CrossHairDampingComponent.ActorComponent.Object
	CrossHairDampingConfig* CrossHairDampingConfig;//[Offset: 0xf0, Size: 0x8]
	PlayerController* PlayerController;//[Offset: 0xf8, Size: 0x8]
	ApexCharacter* PlayerPawn;//[Offset: 0x100, Size: 0x8]
	HitCrossHairConfig_Common* HitCrossHairConfig_Runtime;//[Offset: 0x120, Size: 0x8]

--------------------------------
Class: CrossHairDampingConfig.DataAsset.Object
	FName[] Bones;//[Offset: 0x30, Size: 0x10]
	float NoShootRate;//[Offset: 0x40, Size: 0x4]
	float ShootRate;//[Offset: 0x44, Size: 0x4]
	Vector2D EffectDistanceRange;//[Offset: 0x48, Size: 0x8]
	IntPoint MaxDampingSize;//[Offset: 0x50, Size: 0x8]
	IntPoint MinDampingSize;//[Offset: 0x58, Size: 0x8]
	HitCrossHairConfig_Common* HitCrossHairConfig;//[Offset: 0x60, Size: 0x8]
	bool bShowInvincibleCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: HitCrossHairConfig_Common.DataAsset.Object
	WeaponCrossHairHitPerformData HitCrossHairData;//[Offset: 0x30, Size: 0xb8]
	InvincibleHitPerformData InvincibleHitData;//[Offset: 0xe8, Size: 0x78]

--------------------------------
Class: WeaponCrossHairHitPerformData.WeaponCrossHairPerformData
	float DefaultShowTime;//[Offset: 0x70, Size: 0x4]
	float QuickShootInterval;//[Offset: 0x74, Size: 0x4]
	float QuickShowTime;//[Offset: 0x78, Size: 0x4]
	float DamageStartScale;//[Offset: 0x7c, Size: 0x4]
	float DamageEndScale;//[Offset: 0x80, Size: 0x4]
	float DamageMiddleScale;//[Offset: 0x84, Size: 0x4]
	LinearColor HeadShootColor;//[Offset: 0x88, Size: 0x10]
	LinearColor KillColor;//[Offset: 0x98, Size: 0x10]
	float ShowHitCrosshairLeftTime;//[Offset: 0xa8, Size: 0x4]
	float LastHitLeftTime;//[Offset: 0xac, Size: 0x4]
	float CurDamageScale;//[Offset: 0xb0, Size: 0x4]
	bool bQuickShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	bool bHeadShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]
	bool bFatalHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 0x1]

--------------------------------
Class: InvincibleHitPerformData.WeaponCrossHairPerformData
	float ShowTime;//[Offset: 0x70, Size: 0x4]
	float LastHitLeftTime;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: SimpleBattleResultData
	byte ExitReason;//[Offset: 0x0, Size: 0x1]
	FString ModeType;//[Offset: 0x8, Size: 0x10]
	enum ResultType;//[Offset: 0x18, Size: 0x1]
	bool IsEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	FString Reason;//[Offset: 0x20, Size: 0x10]
	int TotalPlayerCount;//[Offset: 0x30, Size: 0x4]
	int TotalTeamCount;//[Offset: 0x34, Size: 0x4]
	int TeamID;//[Offset: 0x38, Size: 0x4]
	SimpleBattleResultTeamData TeamData;//[Offset: 0x40, Size: 0x18]
	RatingScoreResultData RatingData;//[Offset: 0x58, Size: 0x14]
	WinModeInfo[] WinModeInfos;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: SimpleBattleResultTeamData
	int TeamRank;//[Offset: 0x0, Size: 0x4]
	BattleResultTeammate[] members;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: RatingScoreResultData
	int KillAssistScore;//[Offset: 0x0, Size: 0x4]
	int MatchPlacementScore;//[Offset: 0x4, Size: 0x4]
	int SegmentLevel;//[Offset: 0x8, Size: 0x4]
	int Rating;//[Offset: 0xc, Size: 0x4]
	int DailyWinTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: DamageTipComponent.ActorComponent.Object
	float HitTips2DLifeTime;//[Offset: 0xfc, Size: 0x4]
	class HitTip3D* HitTip3DClass;//[Offset: 0x100, Size: 0x8]
	<HitTip3D*> Cache3DHitTips;//[Offset: 0x108, Size: 0x50]
	static void IndicatorShowGotHit(out const Vector causerLocation, int DamageType, bool bIsHeadShot, bool bIsFatalHealthCost, bool bIsHitShield, bool bIsShieldBroken, bool HasEquippedShield, int PenetrateShieldLevel, float ArrowTipsScale, bool ShowHitEffectUI);// 0x3b55bc0
	void Indicator3DShowGotHit(out const Vector causerLocation, float ArrowTipsScale);// 0x3b55af0

--------------------------------
Class: HitTip3D.Actor.Object
	float CrossHairSafePercent;//[Offset: 0x254, Size: 0x4]
	float ScreenSafePercent;//[Offset: 0x258, Size: 0x4]
	CurveFloat* ScaleCurve;//[Offset: 0x260, Size: 0x8]
	CurveFloat* FOVScaleCurve;//[Offset: 0x268, Size: 0x8]
	CurveFloat* PitchCurve;//[Offset: 0x270, Size: 0x8]
	CurveFloat* ZCurve;//[Offset: 0x278, Size: 0x8]
	float TipDistance;//[Offset: 0x280, Size: 0x4]
	float ActorLifeTime;//[Offset: 0x284, Size: 0x4]
	PlayerCameraManager* CamManager;//[Offset: 0x290, Size: 0x8]
	StaticMeshComponent* TipMesh;//[Offset: 0x298, Size: 0x8]
	Vector AttackerLocation;//[Offset: 0x2a0, Size: 0xc]
	Rotator GetFinalRotation(out const Vector LocalTipDir, out const Vector2D ScreenPercent);// 0x3c2f654
	Vector GetFinalRelaLoc(out const Vector DeproDir);// 0x3c2f5b0
	PlayerCameraManager* GetCamera();// 0x3c2f744
	void FadeOut();// 0x3c2f778

--------------------------------
Class: CharacterAvatar_WearInfo
	CharacterAvatar_EquipSkinInfo[] EquipedSkinList;//[Offset: 0x0, Size: 0x10]
	CharacterAvatar_PendantInfo[] EquipedPendantList;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: CharacterAvatar_EquipSkinInfo
	int ReplacedItemID;//[Offset: 0x0, Size: 0x4]
	CharacterAvatar_WearItemMetaInfo SkinMetaInfo;//[Offset: 0x4, Size: 0x14]

--------------------------------
Class: CharacterAvatar_WearItemMetaInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemType;//[Offset: 0x4, Size: 0x4]
	int ItemSubType;//[Offset: 0x8, Size: 0x4]
	int ItemLevel;//[Offset: 0xc, Size: 0x4]
	bool ValidInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: CharacterAvatar_PendantInfo
	int PendantItemID;//[Offset: 0x0, Size: 0x4]
	CharacterAvatar_WearItemMetaInfo AttachedItemMetaInfo;//[Offset: 0x4, Size: 0x14]

--------------------------------
Class: HitEffectComponent.ActorComponent.Object
	DataTable* ConfigTable;//[Offset: 0xf0, Size: 0x8]
	FName ConfigTablePath;//[Offset: 0xf8, Size: 0x8]
	FName ConfigRow;//[Offset: 0x100, Size: 0x8]
	bool bDebugHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	MaterialParameterCollection* BloodParameterCollection;//[Offset: 0x118, Size: 0x8]
	FName BloodColorRowName;//[Offset: 0x120, Size: 0x8]
	CurveFloat* DistanceFOVFixCurve;//[Offset: 0x128, Size: 0x8]
	<enum,LinearColor> HurtShieldColor;//[Offset: 0x130, Size: 0x50]
	LinearColor BreakShieldColor;//[Offset: 0x180, Size: 0x10]
	<byte,FName> DamageType2Tag;//[Offset: 0x190, Size: 0x50]
	int AutonomousHitEffectCacheLimit;//[Offset: 0x1e0, Size: 0x4]
	int SimulatedHitEffectCacheLimit;//[Offset: 0x1e4, Size: 0x4]
	int BulletHitAudioDistance;//[Offset: 0x1e8, Size: 0x4]
	int BulletFlyAudioDistance;//[Offset: 0x1ec, Size: 0x4]
	HitEffectDataAsset* DefaultHitEffect;//[Offset: 0x1f0, Size: 0x8]
	<FName,HitEffectDataAsset*> ExtraEffect;//[Offset: 0x1f8, Size: 0x50]
	Rotator FxRotation;//[Offset: 0x248, Size: 0xc]
	float FxDeviation;//[Offset: 0x254, Size: 0x4]
	float DecalReverseDistance;//[Offset: 0x258, Size: 0x4]
	float EffectMaxDistance;//[Offset: 0x25c, Size: 0x4]
	HitEffectCachedData[] AutonomousHitEffectList;//[Offset: 0x260, Size: 0x10]
	HitEffectCachedData[] SimulatedHitEffectList;//[Offset: 0x270, Size: 0x10]
	void SetBloodColorStyle(FName NewRowName);// 0x3c2ebe8
	void OnTableReady();// 0x3c2ece0
	bool NeedPlayLensAudio(out const HitEffectInstanceData InstanceData);// 0x3c2eab8
	void HandlePlayerStopFire(Weapon* Weapon);// 0x3c2ec64

--------------------------------
Class: HitEffectCachedData
	DecalComponent* HitDecalComp;//[Offset: 0x0, Size: 0x8]
	ParticleSystemComponent* HitParticleComp;//[Offset: 0x8, Size: 0x8]
	AkComponent* AKComp;//[Offset: 0x10, Size: 0x8]
	AkComponent* BulletFlyAkComp;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x258, Size: 0x8]
	int SortOrder;//[Offset: 0x260, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x264, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x268, Size: 0x4]
	float FadeDuration;//[Offset: 0x26c, Size: 0x4]
	float FadeInDuration;//[Offset: 0x270, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x274, Size: 0x4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1]
	Vector DecalSize;//[Offset: 0x27c, Size: 0xc]
	void SetSortOrder(int Value);// 0x5f0eafc
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x5f0eb78
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x5f0ecb0
	void SetFadeIn(float StartDelay, float Duaration);// 0x5f0ebf4
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x5f0ea80
	float GetFadeStartDelay();// 0x5f0ee54
	float GetFadeInStartDelay();// 0x5f0edec
	float GetFadeInDuration();// 0x5f0edb8
	float GetFadeDuration();// 0x5f0ee20
	MaterialInterface* GetDecalMaterial();// 0x5f0ea4c
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x5f0ea10

--------------------------------
Class: AkSoundBankMgr.ActorComponent.Object
	bool IsLobbyController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	FName SoundBankConfigRowName;//[Offset: 0xf4, Size: 0x8]
	FName DefaultLobbyRowName;//[Offset: 0xfc, Size: 0x8]
	FName DefaultBattleRowName;//[Offset: 0x104, Size: 0x8]
	SoundBankDataAsset* BankData;//[Offset: 0x110, Size: 0x8]
	<AkAudioBank*> RequiredCharacterBanks;//[Offset: 0x170, Size: 0x50]
	<AkAudioBank*> Required1PCharacterBanks;//[Offset: 0x1c0, Size: 0x50]
	<AkAudioBank*> Required3PCharacterBanks;//[Offset: 0x210, Size: 0x50]
	<AkAudioBank*> RequiredItemBanks;//[Offset: 0x260, Size: 0x50]
	<AkAudioBank*> Required1PItemBanks;//[Offset: 0x2b0, Size: 0x50]
	<AkAudioBank*> Required3PItemBanks;//[Offset: 0x300, Size: 0x50]

--------------------------------
Class: SoundBankDataAsset.DataAsset.Object
	BankArray BanksToPreLoad;//[Offset: 0x30, Size: 0x10]
	BankArray BanksToDestroyUnload;//[Offset: 0x40, Size: 0x10]
	<class Actor,float> Class2Distance;//[Offset: 0x50, Size: 0x50]
	<int,BankArray> DefineIdAndBankNames;//[Offset: 0xa0, Size: 0x50]
	<int,BankArray> DefineIdAndBankNames1P;//[Offset: 0xf0, Size: 0x50]
	<int,BankArray> DefineIdAndBankNames3P;//[Offset: 0x140, Size: 0x50]
	float ItemRefreshInterval;//[Offset: 0x190, Size: 0x4]
	<int,BankArray> LegendIdAndBankNames;//[Offset: 0x198, Size: 0x50]
	<int,BankArray> LegendIdAndBankNames1P;//[Offset: 0x1e8, Size: 0x50]
	<int,BankArray> LegendIdAndBankNames3P;//[Offset: 0x238, Size: 0x50]
	<int,BankArray> HeirloomIdAndBankNames;//[Offset: 0x288, Size: 0x50]
	<int,BankArray> HeirloomIdAndBankNames1P;//[Offset: 0x2d8, Size: 0x50]
	<int,BankArray> HeirloomIdAndBankNames3P;//[Offset: 0x328, Size: 0x50]
	float CharacterRefreshInterval;//[Offset: 0x378, Size: 0x4]

--------------------------------
Class: BankArray
	AkAudioBank*[] Banks;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RespawnOperateComponent.ActorComponent.Object
	ApexRespawnBeacon* CapturedBeaconWeakPtr;//[Offset: 0xf0, Size: 0x8]
	Vector2D CurScreenSize;//[Offset: 0xf8, Size: 0x8]
	int8 Cooldown;//[Offset: 0x100, Size: 0x1]
	class Pawn* AirRespawnCamera;//[Offset: 0x108, Size: 0x8]
	float OBTime;//[Offset: 0x110, Size: 0x4]
	float AirRespawnTime;//[Offset: 0x114, Size: 0x4]
	float DelayRespawnTime;//[Offset: 0x118, Size: 0x4]
	float ACEDelayRespawnTime;//[Offset: 0x11c, Size: 0x4]
	float RespawnTime;//[Offset: 0x120, Size: 0x4]
	float TombDis;//[Offset: 0x124, Size: 0x4]
	void TeamStartAirRespawn(out Vector LocalVector);// 0x3d65210
	void TeamDelayAirRespawn(float DelayTime, Vector TeamTombLoaction);// 0x3d65158
	void StopSweepBeacon();// 0x3d65130
	void StartSweepBeacon();// 0x3d65144
	void StartAirRespawn(out Vector LocalVector);// 0x3d64f9c
	void RespawnCharacter();// 0x3d64f88
	void OperateBreakCheck();// 0x3d65024
	void LeaveBeaconZone(ApexRespawnBeacon* Beacon);// 0x3d65038
	float GetRespawnRespawnTime();// 0x3d65298
	void EnterOB();// 0x3d64f74
	void EnterBeaconZone(ApexRespawnBeacon* Beacon);// 0x3d650b4
	void DelayAirRespawn();// 0x3d64f60

--------------------------------
Class: PlayerEventFlowManager.EventFlowManager.ActorComponent.Object
	class UserWidget* EventFlowDebugPanelType;//[Offset: 0x1d8, Size: 0x8]
	UserWidget* EventFlowDebugPanel;//[Offset: 0x1e0, Size: 0x8]

--------------------------------
Class: ControllerCheatHelper.ActorComponent.Object
	class Actor* FreeCameraClass;//[Offset: 0xf0, Size: 0x8]
	FreeCameActor* CurFreeCam;//[Offset: 0xf8, Size: 0x8]
	ApexCharacter* CurControlledCharacter;//[Offset: 0x108, Size: 0x8]
	Vector PingPointOffset;//[Offset: 0x110, Size: 0xc]
	Vector2D MapZRange;//[Offset: 0x11c, Size: 0x8]
	AnimationAsset*[] AllAnimArray;//[Offset: 0x128, Size: 0x10]
	MaterialInterface* NoDither;//[Offset: 0x140, Size: 0x8]
	MaterialInterface* DitherWithMask;//[Offset: 0x148, Size: 0x8]
	MaterialInterface* DitherWithoutMask;//[Offset: 0x150, Size: 0x8]
	Texture* DitherMaskApplyTexture;//[Offset: 0x158, Size: 0x8]
	void VictoryRevive();// 0x3b39bd8
	void UseRespawnBeaconAndPos(int Index, int RespawnPos);// 0x3b39cb0
	void UseRespawnBeacon(int Index);// 0x3b39df0
	void UsePropsWeapon(int ItemID);// 0x3b39954
	void UnHiddenCharacter();// 0x3b3b60c
	void ToggleShowAILoc();// 0x3b37428
	void ToggleMirageTutorial();// 0x3b351a8
	void ToggleDebugPoint();// 0x3b36d68
	void TestUnreliableServer();// 0x3b38b18
	void TestUnreliableMulticast();// 0x3b38b88
	void TestUnreliableClient();// 0x3b38b50
	void TestReliableServer();// 0x3b38b34
	void TestReliableMulticast();// 0x3b38ba4
	void TestReliableClient();// 0x3b38b6c
	void TestOnelink(int LinkID);// 0x3b35e1c
	void TestNavlink(int NavlinkType, int TestAINum);// 0x3b36024
	void TestNaviGuide(int IsShow, int X, int Y, int Z);// 0x3b3584c
	void TestLog();// 0x3b3881c
	void TestLinkLoc(FString Str);// 0x3b35b78
	void TestFPPAISkill(int LegendId, int SkillType, float Dis);// 0x3b364b4
	void TestCloseConnection(int Reason, FString ErrorMessage);// 0x3b382dc
	void TestAISkill(int LegendId, int SkillType, float Dis, int Num, int SpaceBetween);// 0x3b365b4
	void TestAIRumble(int TeamNum, FString HeroLists);// 0x3b360e0
	void TestAIFight(int LegendId, int Num, int ModeType, Vector Loc, int TeamID);// 0x3b35e98
	void TeleportAITo(int AIIndex, Vector Loc);// 0x3b36ca4
	void SwitchCharacterOBViewMode(bool Auto, bool ToFPP);// 0x3b38830
	void StopProfiler();// 0x3b352c4
	void STNS();// 0x3b3b2ec
	void StartFlight();// 0x3b3abf8
	void SpawnTombBox();// 0x3b3a150
	void SpawnDeliverAIImpl();// 0x3b35574
	void SpawnDeliverAI();// 0x3b35590
	void SpawnDeathBox(float LocX, float LocY, float LocZ);// 0x3b3a1e8
	void SpawnAIToPingPoint(int AINum, int AIType, int AITeam, int AICamp);// 0x3b36e24
	void SpawnAICharacters(int AINum, int AIType, int AITeam, int AICamp, Vector Location, int LegendId, int AILevel);// 0x3b37fb8
	void SleepAICharacters(float Range, int Switch);// 0x3b37e50
	void ShowLongSmokeID();// 0x3b3ad04
	void ShowKDER();// 0x3b354ac
	void ShowAISpawn();// 0x3b36d84
	void ShowAIMove(int Index);// 0x3b373a4
	void ShowAILoc(int AIType, int Index, Vector Loc, bool IsFreeze);// 0x3b367c0
	void ShowAIIndex();// 0x3b37758
	void SetVelocityOffset(float Speed);// 0x3b35124
	void SetUploadRotation(bool NewEnable);// 0x3b38eb0
	void SetTPPShoulderAimingOffset(float NewX, float NewY, float NewZ);// 0x3b3b14c
	void SetTouchIgnoreNum(int NewNum);// 0x3b38e34
	void SetPlayerRebasePos(FString VecStr);// 0x3b3a618
	void SetPlayerRealPos(FString VecStr);// 0x3b3a540
	void SetPlayerPosByTag(FName Tag);// 0x3b3a488
	void SetPlayerPosByRandomLootDrones();// 0x3b3a518
	void SetPlayerPosByRandomCreeps();// 0x3b3a504
	void SetPlayerPosByPingPoint();// 0x3b3a52c
	void SetPlayerPosByDrawInfo(FString numStr);// 0x3b3a3b0
	void SetPlayerPos2D(FString Vec2DStr);// 0x3b3a7c8
	void SetPlayerPos(FString VecStr);// 0x3b3a6f0
	void SetPlaneFlowData(float PlaneSpeed, float PlaneHeight, float CanJumpFromPlaneCountDown);// 0x3b3a9dc
	void SetParachuteTraceLineMaxCacheNum(int Num);// 0x3b3a8a0
	void SetLongTimeNoReceiveThreshold(float Threshold);// 0x3b38260
	void SetDebugAIState(int Type, int Can);// 0x3b36200
	void SetDebugAINum(int AINum);// 0x3b362c4
	void SetCurrentWeaponSnappingSpeed(out const float NewSpeed);// 0x3b38a04
	void SetControlledCharacter(int Index);// 0x3b3b50c
	void SetBloodEffectStyle(FName NewRow);// 0x3b38904
	void SetBinActivitySpawnItem(int ItemID);// 0x3b35c50
	void SetBinActivityItemRepeatCount(int count);// 0x3b35cd4
	void SetAllAIHp(int HP);// 0x3b35994
	void SetAIState(int Index, int State);// 0x3b37090
	void SetAIReplicate(int Index, int Flag);// 0x3b35620
	void SetAILevelImpl(int Level);// 0x3b354f0
	void SetAILevel(int Level);// 0x3b355a4
	void SetAIHp(int Index, int HP);// 0x3b3725c
	void SetAICanSkill(int Can);// 0x3b363bc
	void SetAICanMove(int Can);// 0x3b36340
	void SetAICanAttack(int Can);// 0x3b36438
	void ServerVictoryRevive();// 0x3b39bbc
	void ServerUseRespawnBeaconAndPos(int Index, int RespawnPos);// 0x3b39bec
	void ServerUseRespawnBeacon(int Index);// 0x3b39d6c
	void ServerStartFlight();// 0x3b3abdc
	void ServerSpawnTombBox();// 0x3b3a134
	void ServerSpawnDeathBox(Vector Loc);// 0x3b3a164
	void ServerSetPlayerRot(Rotator Rot);// 0x3b39ffc
	void ServerSetPlayerPos(Vector Pos3D);// 0x3b3a080
	void ServerSelectToNextState();// 0x3b3b2d0
	void ServerRespawnInAir();// 0x3b39b8c
	void ServerRemoveBuff(int BuffID);// 0x3b394fc
	void ServerPickBanner();// 0x3b3a97c
	void ServerNavMeshPoint(Vector Loc);// 0x3b3a318
	void ServerMaxKillZ();// 0x3b3a104
	void ServerLoadoutWeapon(int WeaponID, int AttchmentId);// 0x3b399d0
	void ServerGotoDying();// 0x3b3a9ac
	void ServerFirePropsWeapon();// 0x3b3a91c
	void ServerFallDeathBox();// 0x3b3a2e8
	void ServerEquipPropsWeapon();// 0x3b3a94c
	void ServerEndCircle();// 0x3b3ac3c
	void ServerEnableCirclePoison(bool Enable);// 0x3b3af28
	void ServerCMD(FString Cmd);// 0x3b385e0
	void ServerCloseForbiddenZone();// 0x3b3ac0c
	void ServerClearAllBuff();// 0x3b394e0
	void ServerChangeState(FName NewState);// 0x3b3b588
	void ServerBeginCircle(float CircleTimeScale);// 0x3b3ac6c
	void ServerAddBuff(int BuffID);// 0x3b39580
	void RpcServer_EncomyAddCurrency(int Num);// 0x3b351c4
	void RPCFlood(int FloodNum, bool IsReliable);// 0x3b393f4
	void RPC_ClientCMD(FString Cmd);// 0x3b38668
	void RespawnInAir();// 0x3b39ba8
	void ResetAISkill(int Index);// 0x3b36f6c
	void ReqDSChangedListenPort(int NewPort);// 0x3b392b4
	void RemoveParticleEffect(int InstancedID);// 0x3b39e6c
	void RemoveEffectView(int InstancedID);// 0x3b39724
	void RemoveBuff(int BuffID);// 0x3b39618
	void RemoveAILoc(int AIIndex);// 0x3b3673c
	void RecreateSocket();// 0x3b394cc
	void PutNavMeshObstacle(Vector Pos);// 0x3b37b1c
	void PurgeAICharacters(float Range);// 0x3b37f34
	void PullAIHere(float Range);// 0x3b37d48
	void PrintHidden();// 0x3b38f34
	void PrintDither();// 0x3b383fc
	void PlayerLookAtPingPoint();// 0x3b39fe8
	void PickMeAsDeliverTarget();// 0x3b37ac8
	void PickBanner();// 0x3b3a998
	void OBSomeone(bool bRobot, bool Enter);// 0x3b384f8
	void NavMeshPoint();// 0x3b3a39c
	void MulticastFlood(int FloodNum, bool IsReliable);// 0x3b39330
	void MaxKillZ();// 0x3b3a120
	void LogAimingInfo(bool NewEnable);// 0x3b3b24c
	void LoadoutWeapon(int WeaponID, int AttchmentId);// 0x3b39a94
	void LoadAllAnim();// 0x3b39b78
	void LeaveFreeCamera();// 0x3b3b634
	void JumpPlane();// 0x3b3acf0
	void InitEnv(int AINum, int LegendId);// 0x3b353b4
	void HiddenCharacter();// 0x3b3b620
	void GotoDying();// 0x3b3a9c8
	void GMTO(float Time);// 0x3b3b038
	void GMTimeout(float Time);// 0x3b3b0b4
	void GMNS();// 0x3b3b4dc
	void GMNextStage();// 0x3b3b4f0
	void GMNextChapter();// 0x3b3b4c0
	void GMNextBout();// 0x3b3b490
	void GMGoToFightingStage();// 0x3b3b460
	void GMFS();// 0x3b3b138
	void GetCloseToAI(float Range);// 0x3b37dcc
	void FreezeAI(int Index);// 0x3b36ff0
	void ForceSwitchParachuteCMDer(int TeamID, int NextCMDerIndex);// 0x3b39898
	void FirePropsWeapon();// 0x3b3a938
	void FallDeathBox();// 0x3b3a304
	void EquipPropsWeapon();// 0x3b3a968
	void EnterFreeCamera();// 0x3b3b648
	void EndCircle();// 0x3b3ac58
	void EncomyAddCurrency(int Num);// 0x3b35248
	void EnableVisualSoundWidget(bool NewEnable);// 0x3b38db0
	void EnableFixedPlaneRouteByPoint(FString Target);// 0x3b3aaf0
	void EnableFixedPlaneRoute();// 0x3b3abc8
	void EnableDither(bool NewEnable, bool EnableMask);// 0x3b39048
	void EnableCirclePoison(bool Enable);// 0x3b3afb4
	void EnableAutoParachute2PingPoint(bool Enable);// 0x3b39f64
	void EnableAutoFixReticle(bool NewEnbale);// 0x3b38980
	void DumpNaviPath(int CmdId);// 0x3b357d0
	void DumpAnimRef();// 0x3b39b50
	void DumpAnimation();// 0x3b39b64
	void DSChangedListenPort(int NewPort);// 0x3b39238
	void DragATeamAIImpl();// 0x3b354c0
	void DragATeamAI();// 0x3b354dc
	void DragAINum(int Num);// 0x3b3758c
	void DragAIHere(int Index);// 0x3b376d4
	void DisableFixedPlaneRoute();// 0x3b3aadc
	void DeliverMeBot();// 0x3b37ae4
	void DelayCallTestUnreliableMulticast(float Delay);// 0x3b38cb8
	void DelayCallTestUnreliableClient(float Delay);// 0x3b38bc0
	void DelayCallTestReliableMulticast(float Delay);// 0x3b38d34
	void DelayCallTestReliableClient(float Delay);// 0x3b38c3c
	void DebugShadowMirage();// 0x3b35b64
	void DebugNavMeshServer(int Function, int Param);// 0x3b37a04
	void DebugNavMeshClient(int Function, int Param);// 0x3b378bc
	void DebugLootPoint();// 0x3b381c8
	void DebugCmd_HandleGrapplingHookState(int State);// 0x3b3981c
	void DebugAISkill(int Index);// 0x3b36da0
	void DebugAIShoot(int Param1, int Param2, int Param3, int Param4);// 0x3b37774
	void DebugAIReplicate(int Index, int Flag);// 0x3b35714
	void DebugAILoot(int Index);// 0x3b37508
	void DebugAIHost(int Function, int Param1);// 0x3b37444
	void DebugAICell(int Type);// 0x3b37980
	void CSRT(float RemainingTime);// 0x3b3b300
	void CResume();// 0x3b3b400
	void CPause();// 0x3b3b430
	void CloseForbiddenZone();// 0x3b3ac28
	void CloseConnectionManually();// 0x3b394b8
	void ClientShowClientLoginIndex();// 0x3b38410
	void ClientFindPathResult(const Vector[] PathPoints);// 0x3b35a18
	void ClientFindPath(const Vector FeetLocation, const Vector Destination);// 0x3b35aa8
	void ClientExecCMD(FString Cmd);// 0x3b386f8
	void ClientChangedRemoteURL(FString IP, int Port);// 0x3b3911c
	void ClientAddBubbleTip_Top(FString Msg, float show_time);// 0x3b38424
	void ClearAllEffectView();// 0x3b39710
	void ClearAllBuff();// 0x3b39604
	void ClearAIItem(int Index);// 0x3b37320
	void CleanEnv();// 0x3b353a0
	void CircleMeshHide(bool ShowMesh);// 0x3b3ad18
	void CheatBulletHit();// 0x3b38808
	void CheatAddBullet(int BulletNumber);// 0x3b381e4
	void ChapterResume();// 0x3b3b414
	void ChapterPause();// 0x3b3b444
	void ChangeTestAIMode(ApexCharacter* AI, int BTType);// 0x3b36914
	void ChangeCurrentChapterRemainingLength(float RemainingTime);// 0x3b3b37c
	void ChangeAISkin(int Index, int SkinId);// 0x3b37610
	void CGMNC();// 0x3b3b4ac
	void CGMNB();// 0x3b3b47c
	void BTGM();// 0x3b385cc
	void BotRideZipline();// 0x3b37d2c
	void BotDropAllItems(float Range);// 0x3b37ba0
	void BeginProfiler(float ProfilerTime, bool TestUltimate);// 0x3b352d8
	void BeginCircle(float CircleTimeScale);// 0x3b3aeac
	void BecomeSpecialCollector();// 0x3b35484
	void BecomeNormalCollector();// 0x3b35498
	void APSendPkg(FString Cmd);// 0x3b38a90
	void AllServerPlayerExecCMD(FString Cmd);// 0x3b38780
	void AllDitherValue(float InDitherValue);// 0x3b38fcc
	void AllDitherMask(bool NewEnable);// 0x3b38f48
	void AIInteractDoor();// 0x3b37b00
	void AIIgnoreMe();// 0x3b37074
	void AIGotoDying();// 0x3b37f18
	void AIDebugNameImpl();// 0x3b356e4
	void AIDebugName();// 0x3b35700
	void AheadCircleFlowServer(bool NotExecuteCircleFlowFunc);// 0x3b3ad9c
	void AheadCircleFlow(bool NotExecuteCircleFlowFunc);// 0x3b3ae28
	void AddTestBot(Vector Loc, int BTType, int AILevel, FString Items, int Num, int LegendId, int TeamID, bool IsInvincible, bool IsNeedOffset);// 0x3b369dc
	void AddParticleEffect(int ParticleEffectID);// 0x3b39ee8
	void AddItemToBot(int ItemID, int ItemNum, float Range);// 0x3b37c24
	void AddEffectView(int EffectViewID);// 0x3b397a0
	void AddCollectPointActor();// 0x3b35470
	void AddBuff(int BuffID);// 0x3b39694
	void AddAIItem(int Index, int ItemID, int count);// 0x3b37154
	void AddActivityConfigToAI(int ItemID, int count);// 0x3b35d58

--------------------------------
Class: FreeCameActor.ApexSpectatorPawn.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	CineCameraComponent* CameraComponent;//[Offset: 0x2e8, Size: 0x8]
	void SetMoveSpeed(float NewSpeed);// 0x3b988b4

--------------------------------
Class: ApexSpectatorPawn.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	bool bAutoRise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]

--------------------------------
Class: OBManagerNoReplay.OBManager.ActorComponent.Object
	bool ShowExitBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	RepMiniMapPlayerInfo[] OBPlayerInfos;//[Offset: 0x290, Size: 0x10]
	void ServerStopObAndExit();// 0x3cd2ff4
	void ServerObPlayerByKey(int TargetPlayerKey);// 0x3cd2d0c
	void ServerObNextOrPreTeammate(bool Next);// 0x3cd2f30
	void ServerObNextOrPreActor(bool Next, float BlendTime);// 0x3cd2e20
	void ServerObNext();// 0x3cd2dc4
	void ServerLeaveOBMode();// 0x3cd3050
	void ServerEnterOBMode();// 0x3cd30ac
	void OnRep_RepOBPlayerInfos();// 0x3cd2ce4
	void OnReconnected();// 0x3cd2cf8

--------------------------------
Class: OBManager.ActorComponent.Object
	delegate OnCharacterOBTargetSwitched_BP;//[Offset: 0x1e0, Size: 0x10]
	float SmoothSpeed;//[Offset: 0x1f0, Size: 0x4]
	bool DebugShowWorldObj;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 0x1]
	ApexOBInfo CurOBData;//[Offset: 0x1f8, Size: 0x28]
	Controller* OBViewTargetRelevantControllerCache;//[Offset: 0x220, Size: 0x8]
	Controller*[] MyObservers;//[Offset: 0x238, Size: 0x10]
	TimerHandle AutoNextTimer;//[Offset: 0x248, Size: 0x8]
	float AutoNextDelay;//[Offset: 0x250, Size: 0x4]
	float OBTargetLostAutoNextDelay;//[Offset: 0x254, Size: 0x4]
	Actor*[] AliveTeammates;//[Offset: 0x258, Size: 0x10]
	Actor*[] AllAlivePlayers;//[Offset: 0x268, Size: 0x10]
	Actor*[] WorldOBObject;//[Offset: 0x278, Size: 0x10]
	void SwitchCharacterOBViewMode(bool Auto, bool ToFPP);// 0x3cd1630
	bool SetViewTarget(Actor* NewViewTargetPC, Controller* RelevantController, float BlendTime);// 0x3cd1704
	Actor* SelectOBTeammateChar(out Controller* InOutRelevantController, bool Next);// 0x3cd139c
	Actor* SelectOBChar(out Controller* InOutRelevantController, bool Next);// 0x3cd1488
	void OnStopObOtherAtClient(Actor* Target, ApexCharacter* LastTargetRelevantCharacter);// 0x3cd11ec
	void OnRep_CurOBData(out const ApexOBInfo LastInfo);// 0x3cd1a90
	void OnPlayerIconClicked(int IconPlayerKey);// 0x3cd1b5c
	void OnPlayerExit();// 0x3cd1be0
	void OnObOtherAtClient(Actor* Target, ApexCharacter* NewTargetRelevantCharacter);// 0x3cd12a8
	void OnOBedStop(Controller* ObserveCharController);// 0x3cd10f4
	void OnOBedPlayerLost();// 0x3cd18f4
	void OnOBedPlayerForceExit();// 0x3cd1908
	void OnObedCharStateAdd(enum NewState, enum EnteredOverrideState);// 0x3cd1834
	void OnOBedCharDying();// 0x3cd1820
	void OnOBedCharDeath();// 0x3cd191c
	void OnOBedByOther(Controller* ObserveController);// 0x3cd1170
	void OnMyCharacterDeath();// 0x3cd1930
	bool OBViewTargetIsCharacter();// 0x3cd19e8
	void LeaveOBModeAtServer();// 0x3cd1b48
	bool IsObingOther();// 0x3cd19b0
	bool IsObedByOther();// 0x3cd1958
	bool IsCurrentObChracter(int PlayerKey);// 0x3cd1574
	int GetVTArrayNum();// 0x3cd197c
	Actor* GetOBViewTarget();// 0x3cd1a58
	int GetOBTeamID();// 0x3cd1a20
	ApexCharacter* GetOBRelevantCharacter();// 0x3cd1364
	int GetOBPlayerKey();// 0x3cd1a3c
	static OBManager* GetOBComponent(Object* WorldObject);// 0x3cd1de4
	static Actor* GetCurrentOBViewTarget(Object* WorldObject);// 0x3cd1d68
	static int GetCurrentOBTeamID(Object* WorldObject);// 0x3cd1c70
	static ApexCharacter* GetCurrentOBRelevantCharacter(Object* WorldObject);// 0x3cd1bf4
	static int GetCurrentOBPlayerKey(Object* WorldObject);// 0x3cd1cec
	enum GetCurrentOBCameraMode();// 0x3cd15fc
	void AutoSetViewTarget();// 0x3cd1944

--------------------------------
Class: ApexOBInfo
	Actor* OBViewTarget;//[Offset: 0x0, Size: 0x8]
	ApexCharacter* RelevantCharacter;//[Offset: 0x8, Size: 0x8]
	ApexPlayerState* RelevantCharacterPlayerState;//[Offset: 0x10, Size: 0x8]
	int CurrentOBTeamId;//[Offset: 0x18, Size: 0x4]
	int CurrentOBPlayerKey;//[Offset: 0x1c, Size: 0x4]
	bool HasRelevantCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool InOBMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: LineTrace.Object

--------------------------------
Class: ProxySyncComponent.ActorComponent.Object
	ProxySyncData*[] ProxySyncDataList;//[Offset: 0x140, Size: 0x10]
	<uint32,Actor*> ProxyActorMap;//[Offset: 0x1a0, Size: 0x50]
	bool bClientCreateProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	bool bRemoteWeaponSoundCallBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 0x1]
	bool bRemoteWeaponSoundLimitPlayOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x242, Size: 0x1]
	AudioRegionMgrComponent* RemoteAudioRegionMgr;//[Offset: 0x2f8, Size: 0x8]
	void RPC_ClientRemoteWeaponSound(const RemoteWeaponSoundData[] SoundData);// 0x3d542a8
	void OnRemoteWeaponSoundEventCallBack(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x3d541e8

--------------------------------
Class: RemoteWeaponSoundData
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]
	int WeaponID;//[Offset: 0x4, Size: 0x4]
	Vector SoundPos;//[Offset: 0x8, Size: 0xc]
	float SoundTime;//[Offset: 0x14, Size: 0x4]
	int SoundAction;//[Offset: 0x18, Size: 0x4]
	bool bEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]

--------------------------------
Class: ProxySyncData.Object
	float DamageSimulateTimeOut;//[Offset: 0x28, Size: 0x4]
	float SimulateServerTimeStamp;//[Offset: 0x2c, Size: 0x4]
	PrimitiveComponent* Base;//[Offset: 0x30, Size: 0x8]
	ProxyActorBasicData ProxyActorBasicData;//[Offset: 0x38, Size: 0x14]
	ProxyActorMovementData ProxyActorMovementData;//[Offset: 0x4c, Size: 0x24]
	byte ReplicatedMovementMode;//[Offset: 0x70, Size: 0x1]
	uint64 StateMask;//[Offset: 0x78, Size: 0x8]
	bool bFar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	BulletHitInfoReplicateData[] BulletHitData;//[Offset: 0x88, Size: 0x10]
	ProxyActorWeaponData[] WeaponData;//[Offset: 0x98, Size: 0x10]
	ProxyActorHurtData HurtData;//[Offset: 0xa8, Size: 0x30]
	ProxyActorKnockdownShieldData KnockdownShieldData;//[Offset: 0xd8, Size: 0x2]
	ProxyActorRescueData RescueData;//[Offset: 0xdc, Size: 0xc]
	bool bAgentIsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	void OnRep_WeaponData();// 0x3d53414
	void OnRep_StateMask();// 0x3d53478
	void OnRep_RescueData();// 0x3d533d8
	void OnRep_ProxyActorMovementData();// 0x3d53450
	void OnRep_ProxyActorBasicData();// 0x3d53464
	void OnRep_KnockdownShieldData();// 0x3d533ec
	void OnRep_IsFar();// 0x3d5343c
	void OnRep_HurtData();// 0x3d53400
	void OnRep_BulletHitData();// 0x3d53428

--------------------------------
Class: ProxyActorBasicData
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]
	int LegendId;//[Offset: 0x4, Size: 0x4]
	int LegendSkinID;//[Offset: 0x8, Size: 0x4]
	bool bServerDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int ProxyListIndex;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ProxyActorMovementData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector Velocity;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: ProxyActorHurtData
	int VictimPlayerKey;//[Offset: 0x0, Size: 0x4]
	float Damage;//[Offset: 0x4, Size: 0x4]
	int DamageType;//[Offset: 0x8, Size: 0x4]
	int AttackerPlayerKey;//[Offset: 0xc, Size: 0x4]
	byte AvatarDamagePosition;//[Offset: 0x10, Size: 0x1]
	bool bIsHeadShotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bIsFatalHealthCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bIsHitShield;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bIsShieldBroken;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	uint32 ShootID;//[Offset: 0x14, Size: 0x4]
	uint32 PelletID;//[Offset: 0x18, Size: 0x4]
	float AimPercent;//[Offset: 0x1c, Size: 0x4]
	byte AimChargeLevel;//[Offset: 0x20, Size: 0x1]
	double TimeOutServerTime;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ProxyActorKnockdownShieldData
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte Level;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: ProxyActorRescueData
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int SourcePlayerKey;//[Offset: 0x4, Size: 0x4]
	int TargetPlayerKey;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InGameChatContainer.ActorComponent.Object
	int MaxChatNum;//[Offset: 0xf0, Size: 0x4]
	int MaxQuickChatNum;//[Offset: 0xf4, Size: 0x4]
	float MaxQuickChatShowTime;//[Offset: 0xf8, Size: 0x4]
	delegate ChatMsgNewCallback;//[Offset: 0x100, Size: 0x10]
	InGameChatInfo[] AllChatInfoList;//[Offset: 0x110, Size: 0x10]
	InGameChatInfo[] SelectLegendChatList;//[Offset: 0x120, Size: 0x10]
	void SetContentFilterComplete(const int Index, FString Content, const int FromType);// 0x3c3b714
	void SetChatMsgIsExpired(int Index);// 0x3c3b824
	void RPCServerSendChatMsg(InGameChatInfo Info);// 0x3c3b1b8
	void RPCServerReportUnfoldAppointData(const int Cnt);// 0x3c3adf8
	void RPCClientReceiveChatMsg_Self(FString ContentKey, FString SelfName);// 0x3c3ae7c
	void RPCClientReceiveChatMsg(InGameChatInfo Info);// 0x3c3b0a4
	void RPCClientNotifyBanTips(int ResonID);// 0x3c3b020
	void RPCClientClearMsgNotify(uint64 UID, uint64 ClearTime);// 0x3c3af5c
	InGameChatInfo[] GetQuickMsgList();// 0x3c3b5fc
	void ClientReportUnfoldAppointData();// 0x3c3b5e8
	void Client_SendMsgToChatForPing(int PingIndex, int PingType, int DingType, int ItemID, int64 ItemUUID, int ItemDeriveID, int ReservePlayerKey);// 0x3c3b2cc
	void Client_SendMsgToChat(FString Content, enum SendType, enum FromType);// 0x3c3b4d8
	void AddToChatList(out const InGameChatInfo Info);// 0x3c3b8a0

--------------------------------
Class: InGameChatInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	uint64 UID;//[Offset: 0x8, Size: 0x8]
	uint32 PostPlayerKey;//[Offset: 0x10, Size: 0x4]
	FString PostPlayerName;//[Offset: 0x18, Size: 0x10]
	FString ContentStr;//[Offset: 0x28, Size: 0x10]
	FString ContentStr2;//[Offset: 0x38, Size: 0x10]
	int TeamIdx;//[Offset: 0x48, Size: 0x4]
	int TeamID;//[Offset: 0x4c, Size: 0x4]
	float CreateTime;//[Offset: 0x50, Size: 0x4]
	FString SelfName;//[Offset: 0x58, Size: 0x10]
	int SendType;//[Offset: 0x68, Size: 0x4]
	int FromType;//[Offset: 0x6c, Size: 0x4]
	FString GenerateStr;//[Offset: 0x70, Size: 0x10]
	InGameChatPingInfo PingInfo;//[Offset: 0x80, Size: 0x38]

--------------------------------
Class: InGameChatPingInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]
	uint64 ItemUUID;//[Offset: 0x8, Size: 0x8]
	Vector SourcePosition;//[Offset: 0x10, Size: 0xc]
	int PingType;//[Offset: 0x1c, Size: 0x4]
	int DingType;//[Offset: 0x20, Size: 0x4]
	int PingIndex;//[Offset: 0x24, Size: 0x4]
	int ReservePlayerKey;//[Offset: 0x28, Size: 0x4]
	bool IsExpired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	int ItemDeriveID;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: DSPingComponent.ActorComponent.Object
	NetDriver* Driver;//[Offset: 0x110, Size: 0x8]
	ApexPlayerController* MyPC;//[Offset: 0x118, Size: 0x8]
	ApexPlayerState* ControllerPlayerState;//[Offset: 0x120, Size: 0x8]
	void RPCServerSendNetInfoMsg(float PingAverage, float MaxPing, float MinPing, int InLossRate, int OutLossRate, int AvgJitter);// 0x3b6dd4c
	void RPCServerSendHeartMsg(int64 miliseconds);// 0x3b6e24c
	void RPCServerSendClientInfo(int64 UID, FString ClientIP, int ping, int inTotal, int inTotalLost, int inOutOrder, int outTotal, int outTotalLost, int outOutOrder);// 0x3b6dfa0
	void RPCClientReceiveHeartMsg(int64 miliseconds);// 0x3b6df1c

--------------------------------
Class: TrackerManager.ActorComponent.Object
	SimpleTrackerData[] WearTrackerDataList;//[Offset: 0xf0, Size: 0x10]
	void UpdateClientTrackerData(int Data, int TrackerID);// 0x3de55fc
	bool SetTrackerValue(TrackerData Data, int PlayerKey);// 0x3de5940
	void OnRep_TrackerWearInit();// 0x3de5508
	void OnPlayerJoin(PlayerController* Controller);// 0x3de548c
	SimpleTrackerData GetTrackerValue(int LegendId, int ID);// 0x3de56b8
	void DoPlayerJoin(ApexPlayerState* PlayerState);// 0x3de5410
	bool DeleteTrackerValue(TrackerData Data, int PlayerKey);// 0x3de5780
	void BroadcastInitPlayer(int PlayerKey, out const SimpleTrackerData[] TrackerData);// 0x3de551c
	bool AddTrackerValue(TrackerData Data, int PlayerKey);// 0x3de5860

--------------------------------
Class: ApexDebugAIComponent.ActorComponent.Object

--------------------------------
Class: InGameGuideComponent.ActorComponent.Object
	<int,InGameGuideItemBase*> GuideItemList;//[Offset: 0xf0, Size: 0x50]
	bool IsInGameGuideOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	<int,CurrentGuideInfo> CurrentGuideInfoMap;//[Offset: 0x148, Size: 0x50]
	InGameGuideReporter* DataReporter;//[Offset: 0x210, Size: 0x8]
	SoftObjectPath[] ItemsToStream;//[Offset: 0x268, Size: 0x10]
	static bool StartInGameGuide(const Object* WorldContext, int GuideID);// 0x3c408f8
	bool StartGuideWithActor(int GuideID, Actor* TargetActor);// 0x3c40528
	bool StartGuide(int GuideID);// 0x3c4071c
	void SetInGameGuideOpenSwither();// 0x3c4011c
	void SetGuideProgress(int GuideID, int Progress, const bool IsLua);// 0x3c40234
	void SetGuideComplete(const int GuideID);// 0x3c4013c
	void SetCurrentLegendLevel(const int Level);// 0x3c401b8
	void RPCServerSyncGuideProgress(int GuideID, int Progress);// 0x3c3fec8
	void RPCServerGuideReport(const int GuideID, const int TriggerNum, const int TriggerState, const int FinishDuration);// 0x3c3fd80
	void RPCServerExecPointGuide(Vector TargetPos);// 0x3c3fce0
	void RPCClientResetDataWhenPawnChange();// 0x3c3fd64
	void OnPawnChanged();// 0x3c409bc
	void OnGameDataLoaded();// 0x3c3fccc
	bool IsGuideComplete(int GuideID);// 0x3c40010
	void GuideCoollingTimerComplete();// 0x3c3fcb8
	void GuideContinue(int GuideID);// 0x3c404ac
	void GetGuideBaseInfoByGuideID(int GuideID, out InGameGuideBaseInfo BaseInfo);// 0x3c4033c
	int GetCurStep(int GuideID);// 0x3c40098
	int GetCurrentMaxLayer(Widget* Widget);// 0x3c3ff8c
	static void EndInGameGuide(const Object* WorldContext, int GuideID, bool IsForceComplete, bool bCheckNext);// 0x3c407a4
	void EndGuide(int GuideID, bool IsForceComplete, bool bCheckNext);// 0x3c405fc
	bool CheckCanExec(int GuideID);// 0x3c40424

--------------------------------
Class: InGameGuideItemBase.Object
	InGameGuideBaseInfo BaseInfo;//[Offset: 0x28, Size: 0x34]
	InGameGuideStepInfo[] StepList;//[Offset: 0x60, Size: 0x10]
	int CurrentStep;//[Offset: 0x70, Size: 0x4]
	InGameGuideStepInfo CurStepInfo;//[Offset: 0x78, Size: 0xd0]
	void StartGuide();// 0x3c423c0
	void GuideNextStep(bool IsTimeout);// 0x3c4233c
	void EndGuide(bool bForceComplete);// 0x3c422b8

--------------------------------
Class: InGameGuideBaseInfo
	int GuideID;//[Offset: 0x0, Size: 0x4]
	int GuidePriority;//[Offset: 0x4, Size: 0x4]
	int SameGuideArgs;//[Offset: 0x8, Size: 0x4]
	int GuideWeight;//[Offset: 0xc, Size: 0x4]
	bool NeedReback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool IsForSpecial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	int MaxNum;//[Offset: 0x14, Size: 0x4]
	int MaxGameNum;//[Offset: 0x18, Size: 0x4]
	int EachGameCountLimit;//[Offset: 0x1c, Size: 0x4]
	int PlayerLevelLimit;//[Offset: 0x20, Size: 0x4]
	int GuideStartGameNum;//[Offset: 0x24, Size: 0x4]
	int GuideEndGameNum;//[Offset: 0x28, Size: 0x4]
	bool bIsClearWhenCharacterEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	float GuideCD;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: InGameGuideStepInfo
	int GuideID;//[Offset: 0x0, Size: 0x4]
	bool IsComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	FName BlueprintName;//[Offset: 0x8, Size: 0x8]
	FName NodeName;//[Offset: 0x10, Size: 0x8]
	FName HighLightNodeName;//[Offset: 0x18, Size: 0x8]
	bool IsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool IsAllScreenButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool IsHighLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	bool IsForceGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 0x1]
	float Duration;//[Offset: 0x24, Size: 0x4]
	enum GuideType;//[Offset: 0x28, Size: 0x1]
	FText GraphicGuideTitle;//[Offset: 0x30, Size: 0x18]
	GraphicGuideInfo[] GraphicGuideInfos;//[Offset: 0x48, Size: 0x10]
	InGameGuideConditionBase*[] ConditionList;//[Offset: 0x58, Size: 0x10]
	InGameGuideConditionBase*[] EndConditionList;//[Offset: 0x68, Size: 0x10]
	bool IsAutoEnterNextStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	float ResetDurationTime;//[Offset: 0x7c, Size: 0x4]
	FString LuaPath;//[Offset: 0x80, Size: 0x10]
	FString[] LuaArgs;//[Offset: 0x90, Size: 0x10]
	bool IsKeyStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool IsContinueCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	FText ShowTips;//[Offset: 0xa8, Size: 0x18]
	enum ShowTipsDir;//[Offset: 0xc0, Size: 0x1]
	Vector2D ShowTipsOffset;//[Offset: 0xc4, Size: 0x8]

--------------------------------
Class: GraphicGuideInfo
	SlateBrush ImageIcon;//[Offset: 0x0, Size: 0x88]
	FText GuideTitle;//[Offset: 0x88, Size: 0x18]
	FText GuideDesc;//[Offset: 0xa0, Size: 0x18]

--------------------------------
Class: InGameGuideConditionBase.Object
	void OnStepStartBP();// 0x43841ec
	void OnStepEndBP();// 0x43841ec
	void EnableBP();// 0x43841ec
	void DisabledBP();// 0x43841ec
	bool CheckConditionBP();// 0x3c416ac

--------------------------------
Class: CurrentGuideInfo

--------------------------------
Class: InGameGuideReporter.Object

--------------------------------
Class: AIHostComponent.ActorComponent.Object
	delegate OnAIHostStatusDelegate;//[Offset: 0xf8, Size: 0x10]
	void OnAIHostDamage(Controller* Causer, Controller* Victim, out const DamageEvent DamageEvent, float BodyDamage, float ShieldDamage, byte ResultStatus);// 0x3944450

--------------------------------
Class: ApgamePlayerStateRollbackComponent.ActorComponent.Object
	void TrySnapshot();// 0x3a5e19c
	void TryRollback(int InIndex);// 0x3a5e00c
	void TryPartiallySnapshot(out const ApgameClientPlayerState InClientState, bool bInNeedShiftOrigin);// 0x3a5e088
	void ServerSnapshot(const ApgameClientPlayerState InClientState);// 0x3a5de64
	void ServerRollback(int InIndex);// 0x3a5dcbc
	void ServerPartiallySnapshot(const ApgameClientPlayerState InClientState);// 0x3a5dd74
	int GetCondensedSnapshotNum();// 0x3a5e1b0
	bool GetCondensedSnapshot(out ApgamePlayerStateCondensedSnapshot OutSnapshot, int InIndex);// 0x3a5e1cc
	void ClientSetViewType(enum InViewType);// 0x3a5df54
	void ClientSendCondensedHistory(const ApgamePlayerStateCondensedSnapshot[] InHistory);// 0x3a5dbfc

--------------------------------
Class: ApgameClientPlayerState
	enum ViewType;//[Offset: 0x0, Size: 0x1]
	Vector PlayerLocation;//[Offset: 0x4, Size: 0xc]
	Vector CameraLocation;//[Offset: 0x10, Size: 0xc]
	Rotator CameraRotation;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: ApgamePlayerStateCondensedSnapshot
	DateTime Time;//[Offset: 0x0, Size: 0x8]
	Vector PlayerLocation;//[Offset: 0x8, Size: 0xc]
	Vector CameraLocation;//[Offset: 0x14, Size: 0xc]
	Rotator CameraRotation;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: DateTime

--------------------------------
Class: ApgameDeathRecallComponent.ActorComponent.Object
	float MaxTimeBeforeDeath;//[Offset: 0xf8, Size: 0x4]
	float MaxMergeTime;//[Offset: 0xfc, Size: 0x4]
	int MaxNum;//[Offset: 0x100, Size: 0x4]
	delegate EventOnReceiveClientRecordHistory;//[Offset: 0x108, Size: 0x10]
	void ServerFetchRecordHistory();// 0x3a50cf4
	void OnReceiveClientRecordHistoryEvent__DelegateSignature(ApgameDeathRecallComponent* InComp);// 0x43841ec
	void GetDeathRecordHistory(out ApgameDeathRecallHistory OutRecordHistory);// 0x3a510c8
	static ApgameDeathRecallComponent* FindDeathRecallComponent(PlayerController* InController);// 0x3a5104c
	bool FetchRecordHistory(bool bInForce);// 0x3a51164
	static void CopyRecordHistory(out ApgameDeathRecallHistory OutHistory, out const ApgameDeathRecallHistory InHistory);// 0x3a50f58
	static void CopyBannerData(out BannerData OutData, out const BannerData InData);// 0x3a50d10
	void ClientSendRecordHistory(const ApgameDeathRecallHistory InRecordHistory, bool bInNonFightingStage);// 0x3a50c14
	void BeforeGameEnd();// 0x3a50c00

--------------------------------
Class: ApgameDeathRecallHistory
	BannerData[] BannerList;//[Offset: 0x0, Size: 0x10]
	ApgameDeathRecallRecord[] RecordList;//[Offset: 0x10, Size: 0x10]
	int OwnerPlayerKey;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: ApgameDeathRecallRecord
	bool bAttacked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOtherIsAI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bKilledOrKnockedDown;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bFatalDamage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	enum DamageSourceType;//[Offset: 0x1, Size: 0x1]
	int OtherPlayerKey;//[Offset: 0x4, Size: 0x4]
	uint64 OtherPlayerUID;//[Offset: 0x8, Size: 0x8]
	FString OtherPlayerName;//[Offset: 0x10, Size: 0x10]
	int ItemID;//[Offset: 0x20, Size: 0x4]
	int SkillID;//[Offset: 0x24, Size: 0x4]
	float DamageValue;//[Offset: 0x28, Size: 0x4]
	bool[] DamageFlows;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ApgameBattleUIUpdater.Object
	void OnEventUIStateChange(enum UIState, enum PreUIState);// 0x3a3e2f4
	void OnEventHUDTypeChange(int NewHUDType);// 0x3a3e278

--------------------------------
Class: ApgamePickupFloatingManager.ActorComponent.Object
	byte MinPickupCacheNum;//[Offset: 0xf1, Size: 0x1]
	float FadeInTime;//[Offset: 0xf8, Size: 0x4]
	float FadeOutTime;//[Offset: 0xfc, Size: 0x4]
	float RenderedTimeForCulling;//[Offset: 0x100, Size: 0x4]
	ApgamePickupFloatingLogic* FloatingLogic;//[Offset: 0x108, Size: 0x8]

--------------------------------
Class: ApgamePickupFloatingLogic.Object
	void UpdateFloating(bool bInFloating);// 0x3a5c800
	bool UpdateAnim(out ApgamePickupFloatingResult outResult, float InDeltaTime, bool bInOutputResult);// 0x3a5c6cc
	void Clean();// 0x3a5c6b0

--------------------------------
Class: ApgamePickupFloatingResult
	float Height;//[Offset: 0x0, Size: 0x4]
	float Angle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MirageTutorialComponent.ActorComponent.Object
	ApexCharacter* GhoseCharacter;//[Offset: 0xf0, Size: 0x8]
	<enum,TutorialConfig> TutorialConfigMap;//[Offset: 0xf8, Size: 0x50]
	ApexPlayerController* PlayerController;//[Offset: 0x148, Size: 0x8]
	Pawn* CharacterToNotify;//[Offset: 0x150, Size: 0x8]
	TutorialNotifyWidget* CurrentWidget;//[Offset: 0x158, Size: 0x8]
	TutorialConfig TutorialConfig;//[Offset: 0x160, Size: 0x18]
	bool bLoadedWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	TimerHandle UIAnimationHandle;//[Offset: 0x180, Size: 0x8]
	void TutorialStartOnServer(enum Type, Pawn* CharacterToNotifyIn);// 0x3cb3ad8
	void TutorialStartOnClient(enum Type, Pawn* CharacterToNotifyIn);// 0x3cb3910
	void TutorialStartByGhose(enum Type, ApexCharacter* Character);// 0x3cb3c60
	void TutorialStart(enum Type, Pawn* CharacterToNotifyIn);// 0x3cb3ba0
	void TutorialEndOnServer(enum Type);// 0x3cb39d8
	void TutorialEndOnClient();// 0x3cb3878
	void TutorialEnd(enum Type);// 0x3cb3a5c
	void PlayTutorialVoice(enum Type);// 0x3cb3894

--------------------------------
Class: TutorialConfig
	enum TutorialType;//[Offset: 0x0, Size: 0x1]
	int VoiceEventID;//[Offset: 0x4, Size: 0x4]
	float TutorialRange;//[Offset: 0x8, Size: 0x4]
	class TutorialNotifyWidget* UIWidgetClass;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TutorialNotifyWidget.UserWidget.Widget.Visual.Object
	Image* Image_Notice;//[Offset: 0x240, Size: 0x8]
	Image* Image_Outline;//[Offset: 0x248, Size: 0x8]
	WidgetAnimation* Anim_in;//[Offset: 0x250, Size: 0x8]
	WidgetAnimation* Anim_loop;//[Offset: 0x258, Size: 0x8]
	WidgetAnimation* Anim_out;//[Offset: 0x260, Size: 0x8]
	CanvasPanel* ItemRoot;//[Offset: 0x268, Size: 0x8]
	CurveFloat* SizeCurve;//[Offset: 0x270, Size: 0x8]
	void UpdateUISize(Pawn* Player, Pawn* Target);// 0x3dfc600

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x53de404

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x28]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int ZOrder;//[Offset: 0x64, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x53deac4
	void SetSize(Vector2D InSize);// 0x53dee4c
	void SetPosition(Vector2D InPosition);// 0x53deef8
	void SetOffsets(Margin InOffset);// 0x53ded98
	void SetMinimum(Vector2D InMinimumAnchors);// 0x53dea18
	void SetMaximum(Vector2D InMaximumAnchors);// 0x53de9a0
	void SetLayout(out const AnchorData InLayoutData);// 0x53defc0
	void SetAutoSize(bool InbAutoSize);// 0x53deb78
	void SetAnchors(Anchors InAnchors);// 0x53dece0
	void SetAlignment(Vector2D InAlignment);// 0x53dec30
	int GetZOrder();// 0x53dea90
	Vector2D GetSize();// 0x53dee18
	Vector2D GetPosition();// 0x53deec4
	Margin GetOffsets();// 0x53ded60
	AnchorData GetLayout();// 0x53def70
	bool GetAutoSize();// 0x53deb40
	Anchors GetAnchors();// 0x53deca8
	Vector2D GetAlignment();// 0x53debfc

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: MonitorActor.Actor.Object
	bool bControll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	ApexCharacter* OverlapCharacter;//[Offset: 0x260, Size: 0x8]
	bool bDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	FString BtnText_LocalKey;//[Offset: 0x270, Size: 0x10]
	Object* BtnIcon;//[Offset: 0x280, Size: 0x8]
	ParticleSystemComponent* StartEffectRootComp;//[Offset: 0x288, Size: 0x8]
	ParticleSystemComponent* StopEffectRootComp;//[Offset: 0x290, Size: 0x8]
	BoxComponent* MonitorScreenComp;//[Offset: 0x298, Size: 0x8]
	WidgetComponent* TipUIComp;//[Offset: 0x2a0, Size: 0x8]
	void OnRep_ControlState();// 0x3cb7f28
	void OnClickControlBtn();// 0x3cb7f0c

--------------------------------
Class: MiragePhoneActor.MonitorActor.Actor.Object
	bool bPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	float AudioEffectRange;//[Offset: 0x2bc, Size: 0x4]
	<FString,AkAudioEvent*> Subtitle_AudioMap;//[Offset: 0x2c0, Size: 0x50]
	int EventID;//[Offset: 0x310, Size: 0x4]
	FString SubtitleName;//[Offset: 0x318, Size: 0x10]
	void ServerCall(int Index, ApexPlayerController* Controller);// 0x3cb32a0

--------------------------------
Class: InGameHandleActionActor.Actor.Object
	CommonPingComp* PingComp;//[Offset: 0x258, Size: 0x8]
	InGameHandleAsyncConfig[] AsyncConfigArray;//[Offset: 0x260, Size: 0x10]
	FName HandleButtonName;//[Offset: 0x270, Size: 0x8]
	<FName,Object*> LoadFinishAssetMap;//[Offset: 0x278, Size: 0x50]
	<FName,class Object> LoadFinishClassMap;//[Offset: 0x2c8, Size: 0x50]
	<FName,InGameHandleActionConfig> ActionNameToHandleActionMap;//[Offset: 0x330, Size: 0x50]
	FName[] ServerActivateActionArray;//[Offset: 0x380, Size: 0x10]
	bool bIsEnableActionButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	float ActionRadius;//[Offset: 0x3e4, Size: 0x4]
	bool bEnableForbiddenVoid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	bool bEnableForbiddenPawnState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 0x1]
	enum[] ForbiddenPawnState;//[Offset: 0x3f0, Size: 0x10]
	bool bIsOperated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	void UpdateActionButtonState(bool bInIsShow);// 0x3c467f0
	bool ServerOperateActionActor(ApexPlayerController* Controller);// 0x3c469fc
	bool ServerCanOperateActionActor(ApexPlayerController* Controller);// 0x3c46938
	void PostServerOperateActionActor(ApexPlayerController* Controller);// 0x3c468b4
	void PostClientOperateActionActor(int OperatePlayerKey, bool bIsFPP);// 0x3c466a0
	void OnRep_ServerActivateActionArray();// 0x3c46c8c
	void OnPostAsyncLoadFinishEditor();// 0x3c46ca0
	void OnAsyncLoadFinish();// 0x3c46cbc
	void NetMulticast_PostClientOperateActionActor(int OperatePlayerKey);// 0x3c4676c
	ApexPlayerController* GetCacheOperateActorController();// 0x3c469c8
	void DeactivateActionImmediate(FName InName);// 0x3c46a8c
	void DeactivateAction(FName InName);// 0x3c46b94
	bool ClientNeedShowActionButton();// 0x3c46874
	void ActivateActionImmediate(FName InName);// 0x3c46b10
	void ActivateAction(FName InName);// 0x3c46c10

--------------------------------
Class: CommonPingComp.ActorComponent.Object
	delegate OnPingDelegate;//[Offset: 0x158, Size: 0x10]
	int PingType;//[Offset: 0x168, Size: 0x4]
	bool bIsUsePingOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 0x1]
	Vector PingOffset;//[Offset: 0x170, Size: 0xc]
	bool bPingTypeByBp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 0x1]
	bool bNeedShowOutline_BP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17d, Size: 0x1]
	void ReceiveOnPing();// 0x43841ec
	bool IsUseActorLocation();// 0x3b2e5a4
	bool IsNeedShowOutline();// 0x3b2e6c8
	int GetPingType();// 0x3b2e708
	bool GetCustomActorLocation(out Vector NewPosition, int PingIndex);// 0x3b2e5e4
	int BP_GetPingType();// 0x43841ec

--------------------------------
Class: InGameHandleAsyncConfig
	FName AssetName;//[Offset: 0x0, Size: 0x8]
	Object* LoadAsset;//[Offset: 0x8, Size: 0x28]
	class Object* LoadClass;//[Offset: 0x30, Size: 0x28]

--------------------------------
Class: InGameHandleActionConfig
	InGameHandleActionBase*[] ActionArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InGameHandleActionBase.Object
	bool bActivateOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bActivateOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: CharacterNaviGuideComponent.ActorComponent.Object
	float SwitchPointAngle;//[Offset: 0xfc, Size: 0x4]
	float NaviLimitDist;//[Offset: 0x104, Size: 0x4]
	float NaviInterval;//[Offset: 0x108, Size: 0x4]
	float EndDistance;//[Offset: 0x10c, Size: 0x4]
	Vector NaviLocation;//[Offset: 0x114, Size: 0xc]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x120, Size: 0x8]
	Vector Extent;//[Offset: 0x134, Size: 0xc]
	int NumSegment;//[Offset: 0x178, Size: 0x4]
	float PerDistance;//[Offset: 0x180, Size: 0x4]
	int NRetryFindNum;//[Offset: 0x184, Size: 0x4]
	float DealyHideTime;//[Offset: 0x188, Size: 0x4]
	float RefreshSplineDistance;//[Offset: 0x1a0, Size: 0x4]
	bool OpenMorePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 0x1]
	bool OpenReusePath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a5, Size: 0x1]
	StaticMesh* SoftStaticMesh;//[Offset: 0x1a8, Size: 0x28]
	MaterialInterface* SoftSplineStaticMeshMat;//[Offset: 0x1d0, Size: 0x28]
	StaticMesh* SplineStaticMesh;//[Offset: 0x1f8, Size: 0x8]
	MaterialInterface* SplineMaterialInterface;//[Offset: 0x200, Size: 0x8]
	byte ForwardAxis;//[Offset: 0x208, Size: 0x1]
	float MeshPerLen;//[Offset: 0x20c, Size: 0x4]
	float PerSplineSegment;//[Offset: 0x210, Size: 0x4]
	int MaxDotNum;//[Offset: 0x214, Size: 0x4]
	float MeshUp;//[Offset: 0x21c, Size: 0x4]
	Vector2D LineScale;//[Offset: 0x220, Size: 0x8]
	bool bDebugDrawPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	float DebugDrawTime;//[Offset: 0x22c, Size: 0x4]
	bool bDebugShowSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	float ScaleX;//[Offset: 0x240, Size: 0x4]
	void SetInGameGuideLocation(Vector TargetLocation);// 0x3b16f04
	void ReqNaviGuidePathPoints(int MoveIdx);// 0x3b16f80
	void OnGetNaviGuidePath(const ServerPoint[] OutPoints);// 0x3b16e74
	void HideNaviGuide();// 0x3b16e58

--------------------------------
Class: ServerPoint
	bool bIsRayCastFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector Location;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: ChapterType_TrackLink
	FString TrackName;//[Offset: 0x0, Size: 0x10]
	ChapterParams Params;//[Offset: 0x10, Size: 0x10]
	bool bOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bLuaTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: ApexPlayerCameraManager_BP_C.ApexPlayerCameraManager.PlayerCameraManager.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2cb0, Size: 0x8]
	float CameraOffset_FullScreen;//[Offset: 0x2cb8, Size: 0x4]
	float CurOffset;//[Offset: 0x2cbc, Size: 0x4]
	bool bOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc0, Size: 0x1]
	CameraActor* OffsetCamera_FullScreen;//[Offset: 0x2cc8, Size: 0x8]
	CameraActor* OffsetCamera_Bar;//[Offset: 0x2cd0, Size: 0x8]
	Vector OffsetCamera_Location;//[Offset: 0x2cd8, Size: 0xc]
	Rotator OffsetCamera_Rotation;//[Offset: 0x2ce4, Size: 0xc]
	int OffsetType;//[Offset: 0x2cf0, Size: 0x4]
	float CameraOffset_Bar;//[Offset: 0x2cf4, Size: 0x4]
	bool IsNearCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cf8, Size: 0x1]
	Transform SeqCameraEndTransform;//[Offset: 0x2d00, Size: 0x30]
	bool IsSeqCameraBlend2Normal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d30, Size: 0x1]
	Transform SeqCameraCurTransform;//[Offset: 0x2d40, Size: 0x30]
	void BP_StartSeqCameraToNormalBlend(Transform CallFunc_GetTransform_ReturnValue, Transform CallFunc_GetTransform_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x43841ec
	void BP_SetSeqCameraEndTransform(Transform InTransform);// 0x43841ec
	void GetDefaultCameraOffset(float InDefaultValue, out float CameraOffset, float TempOffset, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x43841ec
	void ResetCurOffset(bool K2Node_SwitchInteger_CmpSuccess);// 0x43841ec
	void BP_ClearCacheOffsetCamera();// 0x43841ec
	void BP_SetCameraNear(bool inIsNearCamera);// 0x43841ec
	void OffsetToDefaultValue(out CameraActor* CameraActor, out float InCurOffset, float DefaultCameraOffset, out Vector Location, out Rotator Rotation, out float FieldOfView, float CallFunc_GetDefaultCameraOffset_CameraOffset, float CallFunc_Lerp_ReturnValue, Vector CallFunc_GetActorRightVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Transform CallFunc_GetTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x43841ec
	Vector OffsetToNormal(out CameraActor* ViewTarget, out Vector Location, out Rotator Rotation, out Rotator ReturnValue2, out float FieldOfView, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_RLerp_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_VLerp_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Rotator CallFunc_ComposeRotators_ReturnValue);// 0x43841ec
	Vector OffsetToCamera(out Actor* ViewTarget, out CameraActor* OffsetCamera, out Vector Location, out Rotator Rotation, float DefaultCameraOffset, out Rotator ReturnValue2, out float FieldOfView, Vector NewLocation, Rotator NewRotation, Rotator TargetRotation, float NewFOV, float CallFunc_GetDefaultCameraOffset_CameraOffset, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, CineCameraComponent* K2Node_DynamicCast_AsCine_Camera_Component, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_ComposeRotators_ReturnValue, float CallFunc_GetHorizontalFieldOfView_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_VLerp_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Rotator CallFunc_RLerp_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Rotator CallFunc_ComposeRotators_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Rotator CallFunc_RLerp_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_VLerp_ReturnValue);// 0x43841ec
	void BP_CacheOffsetCamera_FullScreen(out CameraActor* OffsetCamera);// 0x43841ec
	void BP_CacheOffsetCamera_Bar(out CameraActor* OffsetCamera);// 0x43841ec
	void BP_StartOffset(int OffsetType, bool IsBlend);// 0x43841ec
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV, Rotator NewLocalVar, CameraActor* K2Node_DynamicCast_AsCamera_Actor, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, CameraActor* K2Node_DynamicCast_AsCamera_Actor, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_OffsetToDefaultValue_Location, Rotator CallFunc_OffsetToDefaultValue_Rotation, float CallFunc_OffsetToDefaultValue_FieldOfView, Vector CallFunc_OffsetToDefaultValue_Location, Rotator CallFunc_OffsetToDefaultValue_Rotation, float CallFunc_OffsetToDefaultValue_FieldOfView, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, Vector CallFunc_OffsetToNormal_ReturnValue, Rotator CallFunc_OffsetToNormal_ReturnValue2, float CallFunc_OffsetToNormal_FieldOfView, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_OffsetToDefaultValue_Location, Rotator CallFunc_OffsetToDefaultValue_Rotation, float CallFunc_OffsetToDefaultValue_FieldOfView);// 0x43841ec
	void BP_ClearCacheSequenceCamera();// 0x43841ec
	void ExecuteUbergraph_ApexPlayerCameraManager_BP(int EntryPoint);// 0x43841ec

--------------------------------
Class: ApexPlayerCameraManager.PlayerCameraManager.Actor.Object
	float LimitPitchSpeed;//[Offset: 0x2ca4, Size: 0x4]
	void BP_ClearCacheSequenceCamera();// 0x43841ec

--------------------------------
Class: ApexPlayerState_BP_C.ApexPlayerState.PlayerState.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xbb8, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0xbc0, Size: 0x8]
	FString GetModuleName();// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void ExecuteUbergraph_ApexPlayerState_BP(int EntryPoint);// 0x43841ec

--------------------------------
Class: BRModeGameHUD_BP_C.ApexGameHUD.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5c8, Size: 0x8]
	BRGameFlowHUDMgr_BP_C* BRGameFlowHUDMgr_BP;//[Offset: 0x5d0, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5d8, Size: 0x8]
	FString GetModuleName();// 0x43841ec
	void ReceiveBeginPlay();// 0x2543478
	void ExecuteUbergraph_BRModeGameHUD_BP(int EntryPoint);// 0x43841ec

--------------------------------
Class: BRGameFlowHUDMgr_BP_C.GameFlowHUDMgr.ActorComponent.Object

--------------------------------
Class: BattleRoyaleGameState_BP_C.BattleRoyaleGameState.ApexGameState.GameState.GameStateBase.Info.Actor.Object
	GameStateHarvesterSpawnComp* GameStateHarvesterSpawnComp;//[Offset: 0x878, Size: 0x8]
	GameStateReplicatorComp_BP_C* GameStateReplicatorComp_BP;//[Offset: 0x880, Size: 0x8]
	BRS_BR_C* BRS_BR;//[Offset: 0x888, Size: 0x8]
	GameStateSelectLegendComp_BR_C* GameStateSelectLegendComp_BR;//[Offset: 0x890, Size: 0x8]
	BattleBannerMgrComp* BattleBannerMgrComp_Right;//[Offset: 0x898, Size: 0x8]
	BattleBannerMgrComp* BattleBannerMgrComp_Mid;//[Offset: 0x8a0, Size: 0x8]
	BattleBannerMgrComp* BattleBannerMgrComp_Left;//[Offset: 0x8a8, Size: 0x8]
	GameStateAirDropMgr* GameStateAirDropMgr;//[Offset: 0x8b0, Size: 0x8]
	GameStateInGameChatComp_BP_C* GameStateInGameChatComp_BP;//[Offset: 0x8b8, Size: 0x8]
	GameStateHotZoneMgr* GameStateHotZoneMgr;//[Offset: 0x8c0, Size: 0x8]
	GameStateLootZoneNameMgr* GameStateLootZoneNameMgr;//[Offset: 0x8c8, Size: 0x8]
	GameStateTeamInfoComp* GameStateTeamInfoComp;//[Offset: 0x8d0, Size: 0x8]
	GameStatePlane_BP_C* GameStatePlane_BP;//[Offset: 0x8d8, Size: 0x8]
	GameStateRadiationCircle_BP_C* GameStateRadiationCircle_BP;//[Offset: 0x8e0, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x8e8, Size: 0x8]
	FString GetModuleName();// 0x43841ec

--------------------------------
Class: BattleRoyaleGameState.ApexGameState.GameState.GameStateBase.Info.Actor.Object
	GameStatePlaneComponent* PlaneState;//[Offset: 0x868, Size: 0x8]
	TitleDataMgrComponent* TitleDataMgr;//[Offset: 0x870, Size: 0x8]

--------------------------------
Class: TitleDataMgrComponent.ActorComponent.Object
	int[] GetTitleList(int PlayerKey);// 0x3dde904

--------------------------------
Class: GameStateHarvesterSpawnComp.ActorComponent.Object
	bool bWorkbenchActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	class Actor* MarkActor;//[Offset: 0x108, Size: 0x8]
	Actor*[] MarkArray;//[Offset: 0x110, Size: 0x10]
	int NormalAreaMinNum;//[Offset: 0x124, Size: 0x4]
	int NormalAreaMaxNum;//[Offset: 0x128, Size: 0x4]
	int SpecialAreaNum;//[Offset: 0x12c, Size: 0x4]
	<int,int> SpawnHarvesterRates;//[Offset: 0x130, Size: 0x50]
	Transform[] WorkbenchTransArray;//[Offset: 0x188, Size: 0x10]
	void ShowMarkActor();// 0x3bdc238
	void OnRep_WorkbenchTrans();// 0x3bdc1ec
	bool IsMarkBtnActive();// 0x3bdc200

--------------------------------
Class: GameStateReplicatorComp_BP_C.GameStateReplicatorComponent.ActorComponent.Object

--------------------------------
Class: GameStateReplicatorComponent.ActorComponent.Object
	RepDaliyWeeklyData RepDaliyWeeklyData;//[Offset: 0xf0, Size: 0x10]
	float DaliyRoundHours;//[Offset: 0x100, Size: 0x4]
	float WeeklyRoundHours;//[Offset: 0x104, Size: 0x4]
	FString[] BanItemsTableName;//[Offset: 0x108, Size: 0x10]
	int CurrentDaliyIndex;//[Offset: 0x128, Size: 0x4]
	int CurrentWeeklyIndex;//[Offset: 0x12c, Size: 0x4]
	void OnRep_RepDailyWeeklyData();// 0x3be48f0

--------------------------------
Class: RepDaliyWeeklyData
	FName DaliyRowName;//[Offset: 0x0, Size: 0x8]
	FName WeeklyRowName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BRS_BR_C.BattleResultStateMgrComp.ActorComponent.Object
	WinModeInfo[] SortWinOccupation(out const WinModeInfo[] WinTeam, WinModeInfo[] CallFunc_SortWinOccupation_ReturnValue);// 0x43841ec
	FString GetModuleName();// 0x43841ec

--------------------------------
Class: BattleResultStateMgrComp.ActorComponent.Object
	MPBattleResult MPResult;//[Offset: 0xf8, Size: 0x40]
	bool bFromOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	SimpleBattleResultData BattleResultData;//[Offset: 0x150, Size: 0x80]
	bool bAlreadyExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	float ExitWaitTime;//[Offset: 0x1ec, Size: 0x4]
	BattleAccountingInfo[] AccountingInfos;//[Offset: 0x1f0, Size: 0x10]
	BattleAccountingInfo[] OBAccountingInfos;//[Offset: 0x200, Size: 0x10]
	BattleAccountingInfo DeathConfig;//[Offset: 0x210, Size: 0x28]
	FString WinModeShowLevel;//[Offset: 0x238, Size: 0x10]
	AkAudioEvent*[] WinBGMs;//[Offset: 0x248, Size: 0x10]
	AkAudioEvent*[] DrawBGMs;//[Offset: 0x258, Size: 0x10]
	AkAudioEvent*[] SingleDeadBGMs;//[Offset: 0x268, Size: 0x10]
	AkAudioEvent*[] FailedBGMs;//[Offset: 0x278, Size: 0x10]
	bool bCanEnterOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	int FilterID;//[Offset: 0x28c, Size: 0x4]
	WinModeInfo[] ValidWinTeam;//[Offset: 0x290, Size: 0x10]
	void UnLoadBattleUI();// 0x43841ec
	WinModeInfo[] SortWinOccupation(out const WinModeInfo[] WinTeam);// 0x3ad3e1c
	void ReturnToLobby();// 0x43841ec
	void ResetClientAccounting(Actor* OBTarget);// 0x3ad4188
	void PreEnter(FString EndReason, bool bSkipToEnd);// 0x3ad3fd4
	void OnResetClientAccounting();// 0x43841ec
	void OnReceiveWinTeamInfo(WinModeInfo[] WinTeams);// 0x3ad3a90
	void OnEnterReplayBattleResult();// 0x3ad4204
	void OnEnterPlayerDeath();// 0x3ad4218
	void OnEnsureEnterState(FString UIDefine);// 0x43841ec
	void OnClientReceivedGameEnd(FString EndReason, out const SimpleBattleResultData ResultData);// 0x3ad3c70
	void OnClientExitGameBegin();// 0x43841ec
	void OnClientExitGame();// 0x3ad4174
	void OnClassLoaded();// 0x3ad4348
	void LuaInstanceInit();// 0x43841ec
	void HoldClientAccounting(bool bHold);// 0x3ad435c
	MPBattleResult GetMPResult();// 0x3ad43e0
	void EnsureEnterNext(BattleReusltStateWidget* StateWidget);// 0x3ad40f8
	BattleReusltStateWidget* CreateUMG(FString UIDefine, FString EndReason);// 0x43841ec
	void CloseUMG(FString UIDefine);// 0x43841ec
	void CheckReturnToLobby(FString EndReason);// 0x43841ec
	void BeginClientAccounting(FString EndReason, byte ExitReason);// 0x3ad422c

--------------------------------
Class: BattleAccountingInfo
	SoftClassPath ClassPath;//[Offset: 0x0, Size: 0x18]
	BattleStateInfo BattleStateInfo;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: BattleStateInfo
	AkAudioEvent*[] StateBGMs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BattleReusltStateWidget.GameUserWidget.APUserWidget.UserWidget.Widget.Visual.Object
	BattleStateInfo Args;//[Offset: 0x3b8, Size: 0x10]
	FString EndResultType;//[Offset: 0x3c8, Size: 0x10]
	BattleResultStateMgrComp* DataCenter;//[Offset: 0x3d8, Size: 0x8]
	float Duration;//[Offset: 0x3e0, Size: 0x4]
	float Internal;//[Offset: 0x3e4, Size: 0x4]
	float PrewaitingTime;//[Offset: 0x3e8, Size: 0x4]
	float RemainingTime;//[Offset: 0x3ec, Size: 0x4]
	float RespawnRemainingTime;//[Offset: 0x3f0, Size: 0x4]
	bool bNeedRemoveBattleEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 0x1]
	void PreEnterState(FString EndReason, BattleResultStateMgrComp* Mgr, out const BattleStateInfo Info);// 0x3ad5918
	void PlayBGM(AkAudioEvent*[] BGMs);// 0x3ad56f4
	void OnTimerInternalUpdate();// 0x43841ec
	void OnTimerFinished();// 0x43841ec
	void OnPrepareFinish();// 0x3ad5904
	void OnPrepare();// 0x43841ec
	void OnParentInternalUpdate();// 0x3ad5a48
	void ExitStateFinish();// 0x3ad58dc
	void ExitState();// 0x43841ec
	void EnterStateFinish();// 0x3ad58f0
	void EnterState();// 0x43841ec
	void ChangeToNextState(FString EndReason);// 0x3ad5854
	void ChangeToFinalState(FString EndReason);// 0x3ad57cc

--------------------------------
Class: GameUserWidget.APUserWidget.UserWidget.Widget.Visual.Object
	FString ModuleName;//[Offset: 0x350, Size: 0x10]
	bool bClipMarker_Max;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	bool bClipMarker_Min;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 0x1]
	FString LaunchLuaModule;//[Offset: 0x368, Size: 0x10]
	FString GameLuaModule;//[Offset: 0x378, Size: 0x10]
	FString GetModuleName();// 0x3c01420

--------------------------------
Class: GameStateSelectLegendComp_BR_C.GameStateSelectLegendComp.SelectLegendComponentBase.ActorComponent.Object
	FString GetModuleName();// 0x43841ec

--------------------------------
Class: GameStateSelectLegendComp.SelectLegendComponentBase.ActorComponent.Object
	TimerHandle TimerHandle;//[Offset: 0x100, Size: 0x8]
	GameModeStageSelectLegend* OwnGameStage;//[Offset: 0x108, Size: 0x8]
	class SelectStateManger* StateMgrClass;//[Offset: 0x110, Size: 0x8]
	class SelectStateManger* OBMgrClass;//[Offset: 0x118, Size: 0x8]
	SelectStageConfig[] StageConfigs;//[Offset: 0x120, Size: 0x10]
	enum SelectLegendMode;//[Offset: 0x130, Size: 0x1]
	int LegendLimit;//[Offset: 0x134, Size: 0x4]
	<int,int> SubLegendLimits;//[Offset: 0x138, Size: 0x50]
	bool bIsCampLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	enum SelectLegendRandomMode;//[Offset: 0x189, Size: 0x1]
	class SelectScreenBase* SelectScreenClass;//[Offset: 0x190, Size: 0x28]
	SelectScreenBase* SelectScreenInstance;//[Offset: 0x1b8, Size: 0x8]
	class UIS_CurtainBase* FadeOutCurtainClass;//[Offset: 0x1c0, Size: 0x28]
	SelectStateManger* ClientStateMgr;//[Offset: 0x1e8, Size: 0x8]
	int CurStageIndex;//[Offset: 0x1f0, Size: 0x4]
	int MaxPlayerEachTeam;//[Offset: 0x1f4, Size: 0x4]
	float CurStageStartTime;//[Offset: 0x1f8, Size: 0x4]
	int CurStageLeftTime;//[Offset: 0x1fc, Size: 0x4]
	float CurStageEndTime;//[Offset: 0x200, Size: 0x4]
	class Actor* SelectBoardClass;//[Offset: 0x208, Size: 0x28]
	Actor* SelectBoardActor;//[Offset: 0x230, Size: 0x8]
	float CurSelectStartTime;//[Offset: 0x238, Size: 0x4]
	float CurSelectLeftTime;//[Offset: 0x23c, Size: 0x4]
	float CurSelectEndTime;//[Offset: 0x240, Size: 0x4]
	int CurSelectTeamIdx;//[Offset: 0x244, Size: 0x4]
	void StageUpdatePerSecond();// 0x3be50c8
	void OnSelectLegendTimeOut();// 0x3be4f70
	void OnSelectingReconnected();// 0x3be50f0
	void OnRep_CurStageStartTime();// 0x43841ec
	void OnRep_CurStageLeftTime();// 0x43841ec
	void OnRep_CurStageIndex();// 0x3be4fac
	void OnRep_CurStageEndTime();// 0x43841ec
	void OnRep_CurSelectTeamIdx();// 0x3be4f98
	void OnRep_CurSelectStartTime();// 0x43841ec
	void OnRep_CurSelectLeftTime();// 0x3be4f84
	void OnRep_CurSelectEndTime();// 0x43841ec
	void OnReceivedCurSelectStartTime();// 0x43841ec
	bool IsSelecting();// 0x3be4fc0
	bool IsLegendAvailableFor(ApexPlayerState* PlayerState, int LegendId);// 0x3be4ff8
	void BeginSelect();// 0x3be50dc

--------------------------------
Class: GameModeStageSelectLegend.GameModeStage.Object
	enum LegendRandomMode;//[Offset: 0x49, Size: 0x1]
	GameStateSelectLegendComp* GameStateSelectLegendComp;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: GameModeStage.Object
	enum StageType;//[Offset: 0x28, Size: 0x1]
	float CurrentDuration;//[Offset: 0x2c, Size: 0x4]
	float StageDuration;//[Offset: 0x30, Size: 0x4]
	int EnterStageTimes;//[Offset: 0x34, Size: 0x4]
	float EnterStageTime;//[Offset: 0x38, Size: 0x4]
	ApexGameMode* OwningGameMode;//[Offset: 0x40, Size: 0x8]
	void SetLeftTime(int InLeftTime);// 0x3bc53cc
	void OnTimeout();// 0x3bc5348
	void K2_OnPostLogin();// 0x43841ec
	void K2_OnExit();// 0x43841ec
	void K2_OnEnter();// 0x43841ec
	bool IsTimeout();// 0x3bc5448
	void GotoNextStage();// 0x3bc532c
	float GetRunningTime();// 0x3bc5364
	ApexGameMode* GetOwnerGameMode();// 0x3bc5310
	float GetLeftTime();// 0x3bc5398

--------------------------------
Class: ApexGameMode.GameMode.GameModeBase.Info.Actor.Object
	KillDropBase* KillDrop;//[Offset: 0x450, Size: 0x8]
	bool bTeamDeathContinueOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	bool bIsAllLevelLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	GameModeCommonInfo GameModeCommonInfo;//[Offset: 0x46c, Size: 0x18]
	GameModeStageMgr* GameModeStageMgr;//[Offset: 0x488, Size: 0x8]
	ChapterMgrComponent* ChapterMgr;//[Offset: 0x490, Size: 0x8]
	DynamicItemGenerator* DynamicItemGenerator;//[Offset: 0x498, Size: 0x8]
	PickupItemGeneratorComponent* PickupItemGeneratorComponent;//[Offset: 0x4a0, Size: 0x8]
	GameModeInGameActivityMgr* InGameActivityMgr;//[Offset: 0x4a8, Size: 0x8]
	PickupItemGeneratorComponent* PickupGenerator;//[Offset: 0x4b0, Size: 0x8]
	GameModeBattleResultComp* BattleResultComp;//[Offset: 0x4b8, Size: 0x8]
	BinManager* BinMgr;//[Offset: 0x4c0, Size: 0x8]
	LevelDirector* LevelDirector;//[Offset: 0x4d8, Size: 0x8]
	SoftClassPath[] AIControllerClass;//[Offset: 0x508, Size: 0x10]
	SoftClassPath[] DeliverAIControllerClass;//[Offset: 0x518, Size: 0x10]
	SoftClassPath AITeamManagerClass;//[Offset: 0x528, Size: 0x18]
	SoftClassPath MetaAIManagerClass;//[Offset: 0x540, Size: 0x18]
	SoftClassPath AIHostControllerClass;//[Offset: 0x558, Size: 0x18]
	MetaAIController* MetaAIManager;//[Offset: 0x570, Size: 0x8]
	AIComponent* RegisterAIComponent;//[Offset: 0x578, Size: 0x8]
	DSControllerComponent* RegisterDSControllerComponent;//[Offset: 0x580, Size: 0x8]
	SelectLegendTLogComponent* SelectLegendTLogComponent;//[Offset: 0x588, Size: 0x8]
	GameModeTeamMgrComp* GameModeTeamMgrComponent;//[Offset: 0x590, Size: 0x8]
	<AIWorldVolume*> AIWorldVolumeSet;//[Offset: 0x598, Size: 0x50]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x600, Size: 0x8]
	Vector AISpawnLocation;//[Offset: 0x608, Size: 0xc]
	Vector AILandLocation;//[Offset: 0x614, Size: 0xc]
	float FreefallVelocityFactor;//[Offset: 0x620, Size: 0x4]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 0x1]
	<enum> NeedDestroySpawnReasonSet;//[Offset: 0x628, Size: 0x50]
	bool bEnableTrainingModeImpactGroundLifeTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 0x1]
	float TrainingModeImpactGroundLifeTime;//[Offset: 0x67c, Size: 0x4]
	float TrainingModeDropLifeTime;//[Offset: 0x680, Size: 0x4]
	<int,float> QualityToDropLifeTime;//[Offset: 0x688, Size: 0x50]
	bool bEnableTrainingModeDestroyEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 0x1]
	ParticleSystem* TrainingModeDestroyEffect;//[Offset: 0x6e0, Size: 0x28]
	DynamicSpawnComponent* DynamicSpawnComponent;//[Offset: 0x708, Size: 0x8]
	float CharacterNetCullDistanceSquared_Normal;//[Offset: 0x710, Size: 0x4]
	float CharacterNetCullDistanceSquared_InSky;//[Offset: 0x714, Size: 0x4]
	class RespawnAircraftCharacter* RespawnAircraftCharacterBP;//[Offset: 0x730, Size: 0x8]
	MapEdgeVolume*[] MapEdgeVolumeArray;//[Offset: 0x738, Size: 0x10]
	FName HeroConfigTable;//[Offset: 0x748, Size: 0x8]
	int TestBucketID;//[Offset: 0x750, Size: 0x4]
	ApexGameSettings GameSettings;//[Offset: 0x758, Size: 0x48]
	bool bRepAllPlayerStates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 0x1]
	int VisualSoundMaxBucketIdx;//[Offset: 0x7a4, Size: 0x4]
	bool CanOBWorldObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 0x1]
	bool CanObFinalKiller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a9, Size: 0x1]
	bool bUseGameModeDyingTimeCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7aa, Size: 0x1]
	uint16[] CfgDyingTimeoutSec;//[Offset: 0x7b0, Size: 0x10]
	bool bUseGameModeRespawningTimeCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 0x1]
	uint16 CfgRespawningTimeoutSec;//[Offset: 0x7c2, Size: 0x2]
	uint16 CfgShownRespawningTimeoutSec;//[Offset: 0x7c4, Size: 0x2]
	Vector RespawnAircraftDefaultBornOffset;//[Offset: 0x7c8, Size: 0xc]
	byte CfgForbiddenZoneTime;//[Offset: 0x7d4, Size: 0x1]
	bool bTestMidJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d5, Size: 0x1]
	EditorPlayerLoginInfo[] EditorPlayerLoginInfos;//[Offset: 0x7e0, Size: 0x10]
	bool bKeepBackpackWhenNoTome;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f4, Size: 0x1]
	int LegendIdOverride;//[Offset: 0x7f8, Size: 0x4]
	RespawnAircraftCharacter* SpawnRespawnAircraft(Transform SpawnTransform);// 0x39ccde8
	Actor* SpawnDynamicRespawnBeacon(Transform InTransform, Pawn* InInstigator);// 0x39ccb04
	Pawn* SpawnCustomPawnFor(Controller* NewPlayer, Actor* StartSpot, bool bAutonomous);// 0x39ce900
	Pawn* SpawnCustomPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform, bool bAutonomous);// 0x39ce788
	bool ShouldPlayerLogin();// 0x39cd7ac
	void Rescue(Pawn* RescueWho, Pawn* Hero);// 0x39cdd50
	bool QueryCanSelectLegend();// 0x39ce6bc
	void OnMsg(FString Msg);// 0x39cdafc
	void OnLevelAddedToWorld(Level* Level, World* World);// 0x39cda40
	void OnGameEnterFinish();// 0x39cd308
	void OnGameEnterFight();// 0x39cd324
	void NotifyRespawnBeaconActivate();// 0x39ccc58
	void NotifyPlayerExit(uint32 PlayerKey, FName PlayerType, bool bDelayToDestroyPC, byte Reason);// 0x39cd340
	void NotifyPlayerEnter(uint32 PlayerKey);// 0x39cd4a4
	void NotifyAIPlayerEnter(uint32 PlayerKey);// 0x39ccf28
	float ModifyDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x39cdba0
	void LeaveOBModeAbnormal(Controller* EscapePlayer);// 0x39cde14
	void Killed(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, out const DamageEvent DamageEvent, int ComboKill, bool bIsShutDown, const uint32[] AssisterKeys, Controller* RealKiller);// 0x39ce170
	void KickOutPlayerById(uint64 UID, enum Reason, FString BanReasonText);// 0x39cd028
	void KickOutPlayer(PlayerController* TargetController, enum Reason, FString BanReasonText);// 0x39cd198
	bool IsTeamAlive(ApexPlayerState* PlayerState);// 0x39cd69c
	bool IsPlayerAlive(ApexPlayerState* PlayerState);// 0x39cd724
	bool IsCampAliveByGameStatistics(ApexPlayerState* PlayerState);// 0x39cd58c
	bool IsCampAlive(ApexPlayerState* PlayerState);// 0x39cd614
	bool IsAllLevelsLoaded();// 0x39cda08
	void HeartBeat();// 0x39cdb8c
	void GotoDying(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, out const DamageEvent DamageEvent);// 0x39ce010
	FName GetOBCameraTag();// 0x39ce470
	MetaAIController* GetMetaAIManager();// 0x39ccef4
	GameModeStageMgr* GetGameModeStageMgr();// 0x39cd544
	GameModeCommonInfo GetGameModeCommonInfo();// 0x39cd560
	class AIController GetDefaultAIControllerClass(int I);// 0x39ccfa4
	class Object GetCustomPawnClassForController(Controller* InController);// 0x39ce6fc
	BinManager* GetBinManager();// 0x39cd528
	ApexPlayerState* FindPlayerStateByPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x39cd938
	ApexPlayerController* FindPlayerControllerWithUID(uint64 UID);// 0x39cd7e4
	ApexPlayerController* FindPlayerControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x39cd868
	void Escape(Controller* EscapePlayer, ApexPlayerState* EscapePawn, FString EndReason);// 0x39cde98
	void ChangeLegendWithSkill(int HeroID, ApexPlayerController* Controller, int SkillBpIndex);// 0x39ce4ac
	void ChangeLegend(int HeroID, ApexPlayerController* Controller, bool bNeedQuery);// 0x39ce5b0
	bool CanEnterOBMode(ApexPlayerController* Target);// 0x39cca74
	void BestRespawnAircraftTransform(out const Vector StartLocation, out const Vector EndLocation, out Transform ResultTransform);// 0x39ccc6c

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x3b8, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 0x1]
	int NumSpectators;//[Offset: 0x3c4, Size: 0x4]
	int NumPlayers;//[Offset: 0x3c8, Size: 0x4]
	int NumBots;//[Offset: 0x3cc, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x3d0, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x3d4, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x3d8, Size: 0x8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x3e0, Size: 0x10]
	float InactivePlayerStateLifeSpan;//[Offset: 0x3f0, Size: 0x4]
	int MaxInactivePlayers;//[Offset: 0x3f4, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	void StartMatch();// 0x5f35e2c
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x5f35c44
	void Say(FString Msg);// 0x5f35cc8
	void RestartGame();// 0x5f35df4
	bool ReadyToStartMatch();// 0x5f35d98
	bool ReadyToEndMatch();// 0x5f35d58
	void K2_OnSetMatchState(FName NewState);// 0x43841ec
	bool IsMatchInProgress();// 0x5f35e88
	bool HasMatchEnded();// 0x5f35e48
	FName GetMatchState();// 0x5f35ec8
	void EndMatch();// 0x5f35e10
	void AbortMatch();// 0x5f35dd8

--------------------------------
Class: RespawnAircraftCharacter.Pawn.Actor.Object
	enum CurrentState;//[Offset: 0x318, Size: 0x1]
	float ATiming;//[Offset: 0x31c, Size: 0x4]
	bool bLoadCharacters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	ApexCharacter* SyncRespawnCharacter1;//[Offset: 0x328, Size: 0x8]
	ApexCharacter* SyncRespawnCharacter2;//[Offset: 0x330, Size: 0x8]
	ApexCharacter* RespawnCharacterWeak1;//[Offset: 0x338, Size: 0x8]
	ApexCharacter* RespawnCharacterWeak2;//[Offset: 0x340, Size: 0x8]
	enum RespawnCharacterState1;//[Offset: 0x348, Size: 0x1]
	enum RespawnCharacterState2;//[Offset: 0x349, Size: 0x1]
	Controller* RespawnInstigater;//[Offset: 0x34c, Size: 0x8]
	Controller*[] ObserveControllers;//[Offset: 0x358, Size: 0x10]
	FName[] SocketArray;//[Offset: 0x368, Size: 0x10]
	AnimationAsset*[] ExitHatchAnimList;//[Offset: 0x378, Size: 0x10]
	float[] ExitHatchTime;//[Offset: 0x388, Size: 0x10]
	CameraAnim*[] ExitHatchCameraAnims;//[Offset: 0x398, Size: 0x10]
	float HoverTime;//[Offset: 0x3a8, Size: 0x4]
	float ExitTime;//[Offset: 0x3ac, Size: 0x4]
	float DestroyTime;//[Offset: 0x3b0, Size: 0x4]
	bool bFastRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	void OnRep_RespawnCharacter2(ApexCharacter* PrevInfo);// 0x3d642d0
	void OnRep_RespawnCharacter1(ApexCharacter* PrevInfo);// 0x3d6434c
	void LoadCharacters();// 0x3d641f0
	bool GetCustomActorLocation(out Vector NewPosition, int PingIndex);// 0x3d640b8
	void ExitHatch();// 0x3d641b8
	void EnterHover();// 0x3d641d4
	void AircraftDestroy();// 0x3d6419c
	void AddObserveController(Controller* InInstigater, Controller* ObserveController);// 0x3d6420c

--------------------------------
Class: KillDropBase.Object

--------------------------------
Class: GameModeCommonInfo
	Vector MapCenter;//[Offset: 0x0, Size: 0xc]
	float ParachuteFreeFall2SlowDownDetectLength;//[Offset: 0xc, Size: 0x4]
	float ParachuteBack2FreeFallDetectOffset;//[Offset: 0x10, Size: 0x4]
	float ParachuteForceLandingHeight;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: GameModeStageMgr.ActorComponent.Object
	GameModeStage* CurrentStage;//[Offset: 0xf8, Size: 0x8]
	<enum,GameModeStage*> MapStageType2GameModeStage;//[Offset: 0x100, Size: 0x50]
	GameModeStageActive* GameModeStageActive;//[Offset: 0x150, Size: 0x8]
	GameModeStageSelectLegend* GameModeStageSelectLegend;//[Offset: 0x158, Size: 0x8]
	GameModeStageReady* GameModeStageReady;//[Offset: 0x160, Size: 0x8]
	GameModeStageFighting* GameModeStageFighting;//[Offset: 0x168, Size: 0x8]
	GameModeStageFinished* GameModeStageFinished;//[Offset: 0x170, Size: 0x8]
	void Step();// 0x3bc629c
	void Jump(enum NextStageType);// 0x3bc6220
	enum GetCurrentStateType();// 0x3bc61b8
	GameModeStage* GetCurrentState();// 0x3bc61ec
	void Finish();// 0x3bc62b0

--------------------------------
Class: GameModeStageActive.GameModeStage.Object
	float SyncDuration;//[Offset: 0x4c, Size: 0x4]
	bool bPreCreateController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: GameModeStageReady.GameModeStage.Object

--------------------------------
Class: GameModeStageFighting.GameModeStage.Object

--------------------------------
Class: GameModeStageFinished.GameModeStage.Object
	float StateTime;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: ChapterMgrComponent.ActorComponent.Object
	ChapterBase*[] ActiveChapters;//[Offset: 0xf0, Size: 0x10]
	ChapterParams MgrParams;//[Offset: 0x100, Size: 0x10]
	Stage_ChapterLink[] Setting;//[Offset: 0x110, Size: 0x10]
	ChapterBase* CurrentChapter;//[Offset: 0x120, Size: 0x8]
	bool bApplyChapterMgr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	ApexGameMode* GM;//[Offset: 0x130, Size: 0x8]
	void OnStageChanged(out const GameModeStateChangedParams Params);// 0x3b04790
	void MoveChapter();// 0x3b04b20
	void InsertChapterToHead(ChapterBase* NewChapter);// 0x3b04aa4
	ApexGameState* GetApexGameState();// 0x3b046fc
	void CreateChapterDynamicAndInsertToQueHead(ChapterBase* Outer, class ChapterBase Class);// 0x3b0491c
	ChapterBase* CreateChapterDynamic(ChapterBase* Outer, class ChapterBase Class);// 0x3b049d8
	void CreateChapterArrAndInsertToQueTail(ChapterBase* Outer, out const ChapterBindItem[] Chapters);// 0x3b04818

--------------------------------
Class: GameModeStateChangedParams
	enum GameModeStageType;//[Offset: 0x0, Size: 0x1]
	float GameModeStageDuration;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ChapterBase.Object
	ChapterParams ChapterParams;//[Offset: 0x30, Size: 0x10]
	ChapterType_Tracks EnterTriggerBinds;//[Offset: 0x40, Size: 0x10]
	ChapterType_Tracks ExecuteTriggerBinds;//[Offset: 0x50, Size: 0x10]
	ChapterType_Tracks ExitTriggerBinds;//[Offset: 0x60, Size: 0x10]
	<FString,ChapterType_Tracks> OtherTriggerBindsMap;//[Offset: 0x70, Size: 0x50]
	enum GameStage;//[Offset: 0xc0, Size: 0x1]
	FString ChapterName;//[Offset: 0xc8, Size: 0x10]
	ChapterEndCheck* EndCondition;//[Offset: 0xd8, Size: 0x8]
	FString Describe;//[Offset: 0xe0, Size: 0x10]
	ChapterMgrComponent* Owner;//[Offset: 0xf0, Size: 0x8]
	void TriggerTrack(FString theTriggerType);// 0x3b036f0
	void Resume();// 0x3b0384c
	void Pause();// 0x3b03868
	void InitParam();// 0x43841ec
	void Exit();// 0x3b038c4
	void Execute(float DeltaSeconds);// 0x3b038e0
	void Enter();// 0x3b03964
	void ChangeRemainingTime(float DeltTime);// 0x3b037c8
	void ChangeParam(FString TriggerType, FString TrackName, FString ParamName, out const enum ParamType, FString Value);// 0x3b03980
	bool CanEnter();// 0x3b03884

--------------------------------
Class: ChapterType_Tracks
	ChapterType_TrackLink[] TrackLinks;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ChapterEndCheck.Object
	bool Check();// 0x3b04378

--------------------------------
Class: Stage_ChapterLink
	enum GameStage;//[Offset: 0x0, Size: 0x1]
	ChapterBindItem[] ChapterArr;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ChapterBindItem
	class ChapterBase* ChapterClass;//[Offset: 0x0, Size: 0x8]
	<FString,ChapterType_Tracks> TrackBinds;//[Offset: 0x8, Size: 0x50]
	class ChapterEndCheck* EndCondition;//[Offset: 0x58, Size: 0x8]
	<FName,float> FloatArgs;//[Offset: 0x60, Size: 0x50]

--------------------------------
Class: DynamicItemGenerator.BaseGeneratorComponent.ActorComponent.Object
	DynamicItemSpawnDataAsset* DynamicItemSpawnDataAsset;//[Offset: 0xf8, Size: 0x28]
	DynamicItemSpawnDataAsset* DynamicSpawnData;//[Offset: 0x128, Size: 0x8]
	DynamicItemSpawnerAbstract*[] SpawnInfos;//[Offset: 0x130, Size: 0x10]
	void ResetDynamicSpawnInfos();// 0x3b6f408

--------------------------------
Class: BaseGeneratorComponent.ActorComponent.Object
	int GenerateCountPerTick;//[Offset: 0xf0, Size: 0x4]

--------------------------------
Class: DynamicItemSpawnDataAsset.DataAsset.Object
	<enum,DynamicItemSpawnConfig> DynamicItemSpawnConfigMap;//[Offset: 0x30, Size: 0x50]
	void WinterWarfareDiamondCollect();// 0x3b6fb9c
	void WinterWarfareBinCollect();// 0x3b6fbb0
	void SurveyBeaconCollect();// 0x3b6fc14
	void SporeCollect();// 0x3b6fbd8
	void RowdyCollect();// 0x3b6fb88
	void RespawnBeaconCollect();// 0x3b6fc28
	void ReplicateHarvesterCollect();// 0x3b6fbc4
	void GunRackCollect();// 0x3b6fc00
	void CureBeaconCollect();// 0x3b6fbec

--------------------------------
Class: DynamicItemSpawnConfig
	enum ItemType;//[Offset: 0x0, Size: 0x1]
	class Actor* DynamicItemClass;//[Offset: 0x8, Size: 0x8]
	enum DynamicItemSpawnType;//[Offset: 0x10, Size: 0x1]
	DynamicItemSpawnFilterBase*[] SpawnFilterArray;//[Offset: 0x18, Size: 0x10]
	DynamicItemSpawnerAbstract*[] DynamicItemObjDataArray;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: DynamicItemSpawnFilterBase.Object

--------------------------------
Class: DynamicItemSpawnerAbstract.Object
	enum ItemType;//[Offset: 0x28, Size: 0x1]
	class Actor* ItemClass;//[Offset: 0x30, Size: 0x8]
	Transform Trans;//[Offset: 0x40, Size: 0x30]
	void ExecCollectConfig();// 0x3b70504

--------------------------------
Class: PickupItemGeneratorComponent.BaseGeneratorComponent.ActorComponent.Object
	ApexGameMode* SavedGamemode;//[Offset: 0x110, Size: 0x8]
	PickupSpawner* Spawner;//[Offset: 0x118, Size: 0x8]
	UAEDataTable* MapItemControlTable;//[Offset: 0x120, Size: 0x8]
	FString GameModeID;//[Offset: 0x128, Size: 0x10]
	bool IsHaveAdditionalItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	float ChangePercent;//[Offset: 0x13c, Size: 0x4]
	FString[] ChangeZoneIDs;//[Offset: 0x140, Size: 0x10]
	float[] ZoneChangePercents;//[Offset: 0x150, Size: 0x10]
	int[] AdditionalItemsIDs;//[Offset: 0x160, Size: 0x10]
	int[] AdditionalItemsNums;//[Offset: 0x170, Size: 0x10]
	int[] KeepItemsIDs;//[Offset: 0x180, Size: 0x10]
	int[] RemoveItemsIDs;//[Offset: 0x190, Size: 0x10]
	bool bIsLevelLoadFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	bool bIsGameModeItemInitFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 0x1]
	PickupItemDataReporter* PickupItemDataReporter;//[Offset: 0x248, Size: 0x8]
	FString ModeItemJsonPath;//[Offset: 0x250, Size: 0x10]
	FString ItemConfigFilePath;//[Offset: 0x260, Size: 0x10]
	FString[] LootTables;//[Offset: 0x270, Size: 0x10]
	<FString,FString> LootTableConvertMap;//[Offset: 0x280, Size: 0x50]
	FString BinBpPath;//[Offset: 0x2d0, Size: 0x10]
	class BinActor* BinActorClass;//[Offset: 0x2e0, Size: 0x8]
	int BlandId;//[Offset: 0x2e8, Size: 0x4]
	int MinDis2Obstacle;//[Offset: 0x2ec, Size: 0x4]
	int Dis2Ground;//[Offset: 0x2f0, Size: 0x4]
	<FName> FeatureFlagSet;//[Offset: 0x2f8, Size: 0x50]
	int BinSpawnItemRetryCount;//[Offset: 0x348, Size: 0x4]
	int BinMinItemCount;//[Offset: 0x34c, Size: 0x4]
	FString DynamicProbFormat;//[Offset: 0x350, Size: 0x10]
	<int,int> LimitCountItemIDToCount;//[Offset: 0x360, Size: 0x50]
	int DynamicProbIndex;//[Offset: 0x3b0, Size: 0x4]
	delegate OnPickupItemGeneratorInitConfigFinish;//[Offset: 0x3b8, Size: 0x10]
	<FName> ForceLogPosNames;//[Offset: 0x3e8, Size: 0x50]
	void ResetLootObjectInfo();// 0x3cfd090
	void PickupItemGeneratorInitConfigFinish__DelegateSignature();// 0x43841ec

--------------------------------
Class: PickupSpawner.ActorComponent.Object
	<FString,class Object> PathToClassCache;//[Offset: 0x148, Size: 0x50]
	<enum,SpawnItemHistory> SpawnItemHistoryMap;//[Offset: 0x198, Size: 0x50]

--------------------------------
Class: SpawnItemHistory

--------------------------------
Class: PickupItemDataReporter.Object

--------------------------------
Class: GameModeInGameActivityMgr.ActorComponent.Object
	<int,UseActivityConfigData> UseActivityConfigMap;//[Offset: 0xf8, Size: 0x50]
	<int,InGameActivityDataBase*> AllServerActivityDataMap;//[Offset: 0x148, Size: 0x50]
	bool IsActivityEnable(int InActivityType);// 0x3bbda44
	InGameActivityDataBase* GetActivityData(int InActivityType);// 0x3bbdacc

--------------------------------
Class: UseActivityConfigData
	class InGameActivityDataBase* ActivityDataClass;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: InGameActivityDataBase.Object
	int ActivityType;//[Offset: 0x28, Size: 0x4]
	int64 StartTime;//[Offset: 0x30, Size: 0x8]
	int64 TimeOffset;//[Offset: 0x38, Size: 0x8]
	int Priority;//[Offset: 0x40, Size: 0x4]
	int64 EndTime;//[Offset: 0x48, Size: 0x8]
	FString[] ActivityParams;//[Offset: 0x50, Size: 0x10]
	int[] ActivityItemIDArray;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: BinManager.ActorComponent.Object
	float BlueBinRate;//[Offset: 0xf0, Size: 0x4]
	float BlueBinBanRadiusSquare;//[Offset: 0xf4, Size: 0x4]
	BlueBinGroupSet[] GroupSet;//[Offset: 0xf8, Size: 0x10]
	SpatialBinConfig[] SpatialGroupSet;//[Offset: 0x108, Size: 0x10]
	void SetBin();// 0x3adbba0

--------------------------------
Class: BlueBinGroupSet
	int GroupID;//[Offset: 0x0, Size: 0x4]
	float GroupRate;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SpatialBinConfig
	FName Name;//[Offset: 0x0, Size: 0x8]
	int Num;//[Offset: 0x8, Size: 0x4]
	float GroupRate;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: GameModeBattleResultComp.ActorComponent.Object
	BattleResultDataGenerator* DataGenerator;//[Offset: 0xf0, Size: 0x8]
	GameStatisticsManager* StatisticsMgr;//[Offset: 0xf8, Size: 0x8]
	ApexGameMode* OwningGameMode;//[Offset: 0x1a8, Size: 0x8]
	bool bCheckPlayerNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]
	<uint32,SimpleBattleResultData> SimpleResultDataMap;//[Offset: 0x1b8, Size: 0x50]
	UAEDataTable* ParameterIntegerDataTable;//[Offset: 0x208, Size: 0x8]
	void OnPlayerLogout(PlayerController* LogoutPC);// 0x3bab180
	bool IsFightingTimeout();// 0x3bab2a4
	void HandleGameOver(ApexPlayerState* PlayerState);// 0x3bab35c
	void HandleGameFinished();// 0x3bab204
	int[] GetAllCampIDs();// 0x3bab220
	bool CheckToHandleGameOver(ApexPlayerState* PlayerState);// 0x3bab470
	bool CheckToHandleGameFinished();// 0x3bab31c
	bool CheckGameOver(ApexPlayerState* PlayerState);// 0x3bab3e0
	bool CheckGameFinished();// 0x3bab2dc

--------------------------------
Class: BattleResultDataGenerator.Object
	GameStatisticsManager* StatisticsMgr;//[Offset: 0x28, Size: 0x8]
	GameModeBattleResultComp* LogicControl;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AIComponent.ActorComponent.Object
	int[] ScheduleTargetVec;//[Offset: 0xf0, Size: 0x10]
	Actor*[] ZoneLocs;//[Offset: 0x100, Size: 0x10]
	bool IsSkipCreateAICharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	ApexGameMode* OwningGameMode;//[Offset: 0x1b8, Size: 0x8]
	int TestIsRanking;//[Offset: 0x4a8, Size: 0x4]
	int TestBucketID;//[Offset: 0x4ac, Size: 0x4]
	int TestBonusMatch;//[Offset: 0x4b0, Size: 0x4]
	FString TestModeID;//[Offset: 0x4b8, Size: 0x10]
	bool IsKDEROverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1]
	float TestKDERAvg;//[Offset: 0x4cc, Size: 0x4]
	float TestKDERNum;//[Offset: 0x4d0, Size: 0x4]
	bool IsReportKDERInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 0x1]
	bool IsOnlyBRMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d5, Size: 0x1]
	int TestPlayerAILevel;//[Offset: 0x4d8, Size: 0x4]
	float CheckTraceDistance;//[Offset: 0x4dc, Size: 0x4]
	int StuckLogLimitNum;//[Offset: 0x4e0, Size: 0x4]
	float CollectRangeCheck;//[Offset: 0x4e8, Size: 0x4]
	float DuplicateLegendsCheckDis;//[Offset: 0x4ec, Size: 0x4]
	int TeamSize;//[Offset: 0x4f0, Size: 0x4]
	uint32 TestAINum;//[Offset: 0x4f4, Size: 0x4]
	Vector StoreLocation;//[Offset: 0x4f8, Size: 0xc]
	float RandomRadius;//[Offset: 0x504, Size: 0x4]
	bool bEnableSpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	GMAIConfig[] SpawnAIConfig;//[Offset: 0x510, Size: 0x10]
	bool IsDelayConfirmLegend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	Vector2D DelayInterval;//[Offset: 0x524, Size: 0x8]
	bool OpenSameWeaponGunCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 0x1]
	<enum,ItemTypeArray> AIItemMap;//[Offset: 0x530, Size: 0x50]
	Vector2D AddAmmoCount;//[Offset: 0x580, Size: 0x8]
	bool OpenDynamicAILevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	bool OpenShadowMirageTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa28, Size: 0x1]
	uint32 ShadowMirageParallelTrigger;//[Offset: 0xa2c, Size: 0x4]
	float ShadowMirageClimbLinkZOffSet;//[Offset: 0xa30, Size: 0x4]
	float ClimbLinkVerticalAngle;//[Offset: 0xa34, Size: 0x4]
	float AbortTutorialDistance;//[Offset: 0xa38, Size: 0x4]
	float StartSecondsAfterLand;//[Offset: 0xa3c, Size: 0x4]
	float ShadowMirageCheckAroundEnemyDis;//[Offset: 0xa40, Size: 0x4]
	ShadowMirageTutorialConfig[] TutorialConfig;//[Offset: 0xa48, Size: 0x10]
	bool OpenPoisonGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa58, Size: 0x1]
	bool FreezeTransfer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa59, Size: 0x1]
	<int,int> FreezeTransferItemMap;//[Offset: 0xa60, Size: 0x50]
	bool KillTransfer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb00, Size: 0x1]
	<int,float> KillTransferItemID;//[Offset: 0xb08, Size: 0x50]
	<int,int> KillITransfertemMap;//[Offset: 0xb58, Size: 0x50]
	bool EnableActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba8, Size: 0x1]
	<int,int> ActivityItem;//[Offset: 0xbb0, Size: 0x50]
	void SleepAI(Vector Origin, float Range, int Switch);// 0x394149c
	void OnStageFinished(out const GameModeStateChangedParams Params);// 0x3941230
	void OnStageChanged(out const GameModeStateChangedParams Params);// 0x39412b8
	void OnPlayerRebirth(ApexPlayerState* PS);// 0x39410a0
	void OnPlayerRealKilled(Controller* RealKiller, Controller* VictimPlayer, out const DamageEvent DamageEvent);// 0x394111c
	void OnPlayerKilled(Controller* Killer, Controller* Victim, out const DamageEvent DmgEvent);// 0x39416f8
	void OnPlayerGoToDying(Controller* Killer, Controller* Victim, out const DamageEvent DmgEvent);// 0x394180c
	void OnPlayerDamage(Controller* Causer, Controller* Victim, out const DamageEvent DamageEvent, float BodyDamage, float ShieldDamage, byte ResultStatus);// 0x3941920
	static void GenerateAIItemBp(ApexAIController* AIC, int[] EquipIDs, int Time);// 0x3941340
	void AITombboxFilter(ApexAIController* AIC, out PickUpItemData[] Items);// 0x39415a0

--------------------------------
Class: GMAIConfig
	int AITeam;//[Offset: 0x0, Size: 0x4]
	int AICamp;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ItemTypeArray
	int[] Items;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ShadowMirageTutorialConfig
	enum Type;//[Offset: 0x0, Size: 0x1]
	float TriggerDistance;//[Offset: 0x4, Size: 0x4]
	float TriggerAngleInRadian;//[Offset: 0x8, Size: 0x4]
	int MaxCount;//[Offset: 0xc, Size: 0x4]
	float CD;//[Offset: 0x10, Size: 0x4]
	int LoopTime;//[Offset: 0x14, Size: 0x4]
	float TriggerInterval;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: DSControllerComponent.ActorComponent.Object

--------------------------------
Class: SelectLegendTLogComponent.ActorComponent.Object
	void ChooseFinish(ApexPlayerState* PlayerState);// 0x3d752e4

--------------------------------
Class: GameModeTeamMgrComp.ActorComponent.Object
	int RealTeamNum;//[Offset: 0xf4, Size: 0x4]
	ApexGameMode* OwnerGameMode;//[Offset: 0xf8, Size: 0x8]
	bool IsNeedShowAIDefenderTeamByLimitRank;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	int ShowAIDefenderTeamLimitRank;//[Offset: 0x154, Size: 0x4]
	<int,ApexTeamState*> TeamStateMap;//[Offset: 0x1f8, Size: 0x50]
	delegate OnTeamStateSpawned;//[Offset: 0x248, Size: 0x10]
	delegate OnTeamStateDestroyed;//[Offset: 0x258, Size: 0x10]
	void RemoveRecoverBanner(int TeamID, uint32 PlayerKey);// 0x3bc7328
	int RecoverBannerNum(int TeamID);// 0x3bc7160
	void OnTeamStateSpawned__DelegateSignature(ApexTeamState* TeamState);// 0x43841ec
	void OnTeamStateDestroyed__DelegateSignature(ApexTeamState* TeamState);// 0x43841ec
	void OnPlayerEnterFightStage();// 0x3bc7640
	bool HasRecoverBanner(int TeamID, uint32 PlayerKey);// 0x3bc71e4
	ApexPlayerState*[] GetDefenderTeam();// 0x3bc75bc
	static ApexPlayerState*[] ConvertWeakPtrTeam(ApexPlayerState*[] WeakPtrTeam);// 0x3bc74a0
	void ClearRecoverBanner(int TeamID);// 0x3bc72ac
	void AddRecoverBanner(int TeamID, uint32 PlayerKey);// 0x3bc73e4

--------------------------------
Class: AIWorldVolume.Volume.Brush.Actor.Object
	float CellSize;//[Offset: 0x288, Size: 0x4]
	bool bDebugOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	class Object[] CachedTagClasses;//[Offset: 0x290, Size: 0x10]
	<int,AIWayPointActor*> AllAIWayPointActors;//[Offset: 0x318, Size: 0x50]
	ParachutePoint*[] ALLParachutePoint;//[Offset: 0x368, Size: 0x10]
	void SaveTagActors();// 0x394b6c0
	void OnActorSpawned(Actor* Actor);// 0x394b644
	static void GetTagActors(const Object* Context, class Object Class, FName Tag, out Actor*[] OutActors);// 0x394b4e8
	static void GetCacheActors(const Object* Context, class Object Class, out Actor*[] OutActors);// 0x394b3cc

--------------------------------
Class: AIWayPointActor.Actor.Object
	int ID;//[Offset: 0x250, Size: 0x4]
	int TeamID;//[Offset: 0x254, Size: 0x4]
	WayPointLink[] Links;//[Offset: 0x258, Size: 0x10]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x268, Size: 0x8]
	BillboardComponent* ShowSprite;//[Offset: 0x270, Size: 0x8]

--------------------------------
Class: WayPointLink
	int NextPointID;//[Offset: 0x0, Size: 0x4]
	int Weight;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DynamicSpawnComponent.ActorComponent.Object
	ApexGameMode* SavedGamemode;//[Offset: 0xf0, Size: 0x8]
	class LevelDirector* LevelDirectorClass;//[Offset: 0xf8, Size: 0x8]

--------------------------------
Class: MapEdgeVolume.Volume.Brush.Actor.Object
	bool bIsMapCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]

--------------------------------
Class: EditorPlayerLoginInfo
	FString PlayerNameOption;//[Offset: 0x0, Size: 0x10]
	uint32 PlayerKeyOption;//[Offset: 0x10, Size: 0x4]
	FString NameOption;//[Offset: 0x18, Size: 0x10]
	int PlayerIndex;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: SelectStateManger.Object
	GameStateSelectLegendComp* DataCenterComp;//[Offset: 0x28, Size: 0x8]
	SelectLegendWidgetBase* CurrentStage;//[Offset: 0x48, Size: 0x8]
	bool bHiddenHisUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	<enum,SoftClassPath> Stage_PathClassMap;//[Offset: 0x58, Size: 0x50]
	AkAudioEvent*[] BGMs;//[Offset: 0xa8, Size: 0x10]
	FString StateValue;//[Offset: 0xb8, Size: 0x10]
	<enum,SelectLegendWidgetBase*> Stage_WidgetInstanceMap;//[Offset: 0xc8, Size: 0x50]
	float LoadingThreshold;//[Offset: 0x144, Size: 0x4]
	void UnLoadDisplayCharacterClass();// 0x43841ec
	void UnLoadBattleUI();// 0x43841ec
	void UIInit(SelectLegendWidgetBase* Widget);// 0x43841ec
	void SwitchLoading(bool bLoading);// 0x43841ec
	void ShowModeAtSlot();// 0x43841ec
	void ShowLegendModel(int legend_id, FName ani_name, int skin_id, bool with_effect, bool no_hide_pre_effect);// 0x43841ec
	void ShowBoard();// 0x43841ec
	void PreLoadLevel(SelectLegendWidgetBase* Widget);// 0x3d76ce8
	Object* OpenSelectUI(FString Path);// 0x43841ec
	void OnInitSelectStage();// 0x43841ec
	void OnFinishSelectStage();// 0x43841ec
	void OnEnsureEnterState(FString UIDefine);// 0x43841ec
	void OnClientExitGame();// 0x3d76b18
	void OnClassLoaded();// 0x3d76d64
	void NetConnectCheck();// 0x3d76d78
	void LuaInstanceInit();// 0x43841ec
	void LoadDisplayCharacterClass();// 0x43841ec
	void EnsureEnterNext(SelectLegendWidgetBase* StateWidget);// 0x3d76c6c
	BattleReusltStateWidget* CreateUMG(FString UIDefine);// 0x43841ec
	void CloseUMG(FString UIDefine);// 0x43841ec
	void CloseSelectUI(FString Path);// 0x43841ec
	void ClearUnluaRegisterClass();// 0x43841ec
	bool ChangeTo(int CurrentIndex, SelectStageConfig StateConfig);// 0x3d76b2c

--------------------------------
Class: SelectLegendWidgetBase.GameUserWidget.APUserWidget.UserWidget.Widget.Visual.Object
	AkAudioEvent*[] StateBGMs;//[Offset: 0x3a8, Size: 0x10]
	SelectLegendWidgetBase* MainStateWidget;//[Offset: 0x3b8, Size: 0x8]
	SelectStageConfig Config;//[Offset: 0x3c0, Size: 0x18]
	GameStateSelectLegendComp* DataCenter;//[Offset: 0x3e8, Size: 0x8]
	SelectStateManger* SelectManager;//[Offset: 0x3f0, Size: 0x8]
	enum StageHandle;//[Offset: 0x3f8, Size: 0x1]
	bool bMainStage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1]
	FString LevelPath;//[Offset: 0x400, Size: 0x10]
	FName CameraTag;//[Offset: 0x410, Size: 0x8]
	void StateInit();// 0x3d75c20
	void PreLoadLevel();// 0x3d757c0
	void PreEnterState(SelectStageConfig StateConfig, SelectLegendWidgetBase* InMainStateWidget);// 0x3d75afc
	void OnSyncTeamInfo(out const TeammateItemData[] TeammateDatas, byte TeamSyncType, int64 PlayerKey);// 0x3d757e8
	void OnStateInit();// 0x43841ec
	void OnReceiveTeamInfo(out const TeammateItemData[] TeammateDatas, byte TeamSyncType, int64 PlayerKey);// 0x3d75950
	void OnPrepareFinish();// 0x3d75acc
	void OnPrepare();// 0x3d75ae0
	void ExitStateFinish();// 0x3d75790
	void ExitState();// 0x3d757a4
	void EnterStateFinish();// 0x3d757d4
	void EnterState();// 0x3d75ab0

--------------------------------
Class: SelectStageConfig
	enum Stage;//[Offset: 0x0, Size: 0x1]
	float Duration;//[Offset: 0x4, Size: 0x4]
	SelecStateInfo Info;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SelecStateInfo
	AkAudioEvent*[] StateBGMs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TeammateItemData
	bool IsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float Health;//[Offset: 0x4, Size: 0x4]
	float MaxHealth;//[Offset: 0x8, Size: 0x4]
	float HealthHealing;//[Offset: 0xc, Size: 0x4]
	float ShieldHealing;//[Offset: 0x10, Size: 0x4]
	int ShieldQuality;//[Offset: 0x14, Size: 0x4]
	int HelmetQuality;//[Offset: 0x18, Size: 0x4]
	int GradableShieldExpRemain;//[Offset: 0x1c, Size: 0x4]
	int GradableShieldLevel;//[Offset: 0x20, Size: 0x4]
	int BackpackLevel;//[Offset: 0x24, Size: 0x4]
	int KnockDownShieldLevel;//[Offset: 0x28, Size: 0x4]
	float ShieldValue;//[Offset: 0x2c, Size: 0x4]
	float MaxShieldValue;//[Offset: 0x30, Size: 0x4]
	FString PlayerName;//[Offset: 0x38, Size: 0x10]
	int LegendId;//[Offset: 0x48, Size: 0x4]
	int SkinId;//[Offset: 0x4c, Size: 0x4]
	int ChooseLegendID;//[Offset: 0x50, Size: 0x4]
	int ConfirmLegendID;//[Offset: 0x54, Size: 0x4]
	uint32 PlayerKey;//[Offset: 0x58, Size: 0x4]
	uint64 UID;//[Offset: 0x60, Size: 0x8]
	uint32 TeamIdx;//[Offset: 0x68, Size: 0x4]
	bool bIsCommander;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	bool bIsNetLost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1]
	bool bIsSingleParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 0x1]
	bool bIsProtectedByTotem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f, Size: 0x1]
	uint32 DyingCount;//[Offset: 0x70, Size: 0x4]
	byte DyingTimeoutSec;//[Offset: 0x74, Size: 0x1]
	byte RespawningTime;//[Offset: 0x75, Size: 0x1]
	int UseItemID;//[Offset: 0x78, Size: 0x4]
	byte BatBeState;//[Offset: 0x7c, Size: 0x1]
	byte BannerState;//[Offset: 0x7d, Size: 0x1]
	uint32 FirstSlotBulletId;//[Offset: 0x80, Size: 0x4]
	uint32 SecondSlotBulletId;//[Offset: 0x84, Size: 0x4]
	uint32 SyncDyingRealTime;//[Offset: 0x88, Size: 0x4]
	uint32 SyncRespawningRealTime;//[Offset: 0x8c, Size: 0x4]
	uint32 SyncShownRespawningRealTime;//[Offset: 0x90, Size: 0x4]
	uint32 AIHostPlayerKey;//[Offset: 0x94, Size: 0x4]
	bool bAIHosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	int AIHostFunc1;//[Offset: 0x9c, Size: 0x4]
	int AIHostFunc2;//[Offset: 0xa0, Size: 0x4]
	int AIHostFunc3;//[Offset: 0xa4, Size: 0x4]
	int AIHostFunc4;//[Offset: 0xa8, Size: 0x4]
	int AIHostFunc5;//[Offset: 0xac, Size: 0x4]
	bool bUseSecIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]

--------------------------------
Class: SelectScreenBase.UserWidget.Widget.Visual.Object
	WidgetAnimation* Anim_in;//[Offset: 0x240, Size: 0x8]
	WidgetAnimation* Anim_out;//[Offset: 0x248, Size: 0x8]
	void PlayAniout();// 0x3d766b4
	void PlayAniin();// 0x3d766a0
	float GetAnioutDuration();// 0x3d7666c

--------------------------------
Class: UIS_CurtainBase.SelectLegendWidgetBase.GameUserWidget.APUserWidget.UserWidget.Widget.Visual.Object
	WidgetAnimation* Anim_in;//[Offset: 0x418, Size: 0x8]
	WidgetAnimation* Ani_SelectFadeOut;//[Offset: 0x420, Size: 0x8]
	void PlaySelectFadeOut();// 0x3e46a44
	float GetSelectFadeOutDuration();// 0x3e46a10

--------------------------------
Class: BattleBannerMgrComp.ActorComponent.Object
	BannerData[] SimulateDefenderDatas;//[Offset: 0x100, Size: 0x10]
	BannerData[] SimulateKillerDatas;//[Offset: 0x110, Size: 0x10]
	ApexPlayerState* KillKingCache;//[Offset: 0x130, Size: 0x8]
	<enum,AniSequences> AniSequencesMap;//[Offset: 0x138, Size: 0x50]
	<enum,AniSequences> AniSequencesMap_Poor;//[Offset: 0x188, Size: 0x50]
	Vector2D HighGradeSize;//[Offset: 0x1d8, Size: 0x8]
	Vector2D LowGradeSize;//[Offset: 0x1e0, Size: 0x8]
	Transform[] LotTrans;//[Offset: 0x1e8, Size: 0x10]
	ApexPlayerState*[] DefenderTeam;//[Offset: 0x1f8, Size: 0x10]
	ApexPlayerState* KillKing;//[Offset: 0x208, Size: 0x8]
	int ControlWidgetCompIndex;//[Offset: 0x210, Size: 0x4]
	BattleBannerInfo SeqInfo;//[Offset: 0x214, Size: 0x8]
	CryptoDrone* CurrentDrone;//[Offset: 0x220, Size: 0x8]
	bool bSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1]
	GameStatisticsManager* GameStatisticsManager;//[Offset: 0x250, Size: 0x8]
	void PlaySeqIterate(int CurrentIndex);// 0x3ac52d0
	void OnRep_SeqInfo();// 0x3ac5670
	void OnRep_KillKing();// 0x3ac5684
	void OnRep_DefenderTeam();// 0x3ac5698
	void OnKillKingOccur(enum MessageType, Controller* Killer, Controller* Victim, int KillCount);// 0x3ac552c
	void OnDroneChange(CryptoDrone* Drone);// 0x3ac5360
	void InitDefender(ApexPlayerState*[] InDefenderTeam, ApexPlayerState* MVP);// 0x3ac5410
	enum GetCurrentState();// 0x3ac53dc
	void ExecutePerSecond();// 0x3ac534c

--------------------------------
Class: AniSequences
	<FString,AniSequence> SeqMap;//[Offset: 0x0, Size: 0x50]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: AniSequence
	AniItem[] Anis;//[Offset: 0x0, Size: 0x10]
	float Duration;//[Offset: 0x10, Size: 0x4]
	int DataIndex;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: AniItem
	class ThunderScreenItem* WidgetClass;//[Offset: 0x0, Size: 0x28]
	enum AniType;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ThunderScreenItem.UserWidget.Widget.Visual.Object
	ScreenWidgetComponent* ParentWidget;//[Offset: 0x240, Size: 0x8]
	void SubInit();// 0x43841ec
	void ScreentContruct();// 0x43841ec
	void ResetHook();// 0x43841ec
	void Reset();// 0x43841ec
	void PlayUpOutAniHook();// 0x43841ec
	void PlayUpOutAni();// 0x43841ec
	void PlayUpInAniHook();// 0x43841ec
	void PlayUpInAni();// 0x43841ec
	void PlayFlickerAniHook();// 0x43841ec
	void PlayFlickerAni();// 0x43841ec
	void PlayFadeOutAniHook();// 0x43841ec
	void PlayFadeOutAni();// 0x43841ec
	void PlayFadeInAniHook();// 0x43841ec
	void PlayFadeInAni();// 0x43841ec
	void PlayDownOutAniHook();// 0x43841ec
	void PlayDownOutAni();// 0x43841ec
	void PlayDownInAniHook();// 0x43841ec
	void PlayDownInAni();// 0x43841ec
	void Init(BannerData InBannerData);// 0x43841ec

--------------------------------
Class: ScreenWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	<FName,ThunderScreenItem*> WidgetClassInstanceMap;//[Offset: 0x790, Size: 0x50]
	ScreenControlBase* ScreenControlWidget;//[Offset: 0x830, Size: 0x8]
	StaticMeshComponent* Masks;//[Offset: 0x850, Size: 0x8]
	MaterialInstanceDynamic* MaskMaterials;//[Offset: 0x858, Size: 0x8]
	TimelineComponent* CurveTimeLine;//[Offset: 0x860, Size: 0x8]
	BattleBannerMgrComp* ControllComp;//[Offset: 0x868, Size: 0x8]
	int WidgetCompIndex;//[Offset: 0x870, Size: 0x4]
	float AniDuration;//[Offset: 0x874, Size: 0x4]
	CurveFloat* MaskCurve;//[Offset: 0x878, Size: 0x8]
	BattleBannerActor* BattleBannerActor;//[Offset: 0x880, Size: 0x8]
	void UpdateData();// 0x3d6b580
	void ScreenSizeFallbackChanged(bool bShow);// 0x3d6b658
	void PlayMaskAni();// 0x3d6b56c
	void OnMaskCurveUpdate(float Output);// 0x3d6b5dc
	void OnClassLoaded();// 0x3d6b5c8
	enum GetCurrentState();// 0x3d6b594

--------------------------------
Class: ScreenControlBase.UserWidget.Widget.Visual.Object
	ScreenWidgetComponent* ParentWidget;//[Offset: 0x250, Size: 0x8]
	AniSequence CacheSeq;//[Offset: 0x260, Size: 0x18]
	BattleBannerMgrComp* ControlComp;//[Offset: 0x278, Size: 0x8]
	void ShowChild(int Index);// 0x43841ec
	void ScreenSizeFallbackChanged(bool bScreenSizeFallback);// 0x43841ec
	void PlayAniSequence(int AniSeqIndex, int ControlWidgetCompIndex, AniSequence[] AniSeqs);// 0x3d6aa1c
	void OnSwitchBannerToCollapsed(bool bCollapsed);// 0x43841ec
	void OnDroneStaticsChange(int TeamNum);// 0x43841ec
	void OnChangeDronePanelVisibility(bool bVisibility);// 0x43841ec
	void HideChild();// 0x43841ec
	void ClearChild();// 0x43841ec
	void ChangeCoverVisibility(bool bShow);// 0x43841ec
	int AddChild(UserWidget* NewWidget);// 0x43841ec

--------------------------------
Class: BattleBannerActor.Actor.Object
	ScreenBannerRoot* MyRoot;//[Offset: 0x258, Size: 0x8]
	ScreenWidgetComponent* Left;//[Offset: 0x260, Size: 0x8]
	StaticMeshComponent* LeftFontMask;//[Offset: 0x268, Size: 0x8]
	ScreenWidgetComponent* Middle;//[Offset: 0x270, Size: 0x8]
	StaticMeshComponent* MiddleFontMask;//[Offset: 0x278, Size: 0x8]
	ScreenWidgetComponent* Right;//[Offset: 0x280, Size: 0x8]
	StaticMeshComponent* RightFontMask;//[Offset: 0x288, Size: 0x8]

--------------------------------
Class: ScreenBannerRoot.Actor.Object
	float CustomCullDistance;//[Offset: 0x254, Size: 0x4]
	Actor* CurrentActor;//[Offset: 0x258, Size: 0x8]
	class Actor* StaticModuleClass;//[Offset: 0x268, Size: 0x28]
	class Actor* DynamicModuleClass;//[Offset: 0x290, Size: 0x28]
	void OnTargetClassLoad();// 0x3d6a624
	void DelayToClearWidget();// 0x3d6a638

--------------------------------
Class: BattleBannerInfo
	int SeqIndex;//[Offset: 0x0, Size: 0x4]
	enum StateType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: CryptoDrone.SkillActorBase.DynamicMovementActor.Actor.Object
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	bool bIsInDroneMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	float MaxHP;//[Offset: 0x50c, Size: 0x4]
	float HP;//[Offset: 0x510, Size: 0x4]
	float ScanSphereRadius;//[Offset: 0x514, Size: 0x4]
	bool bIsInRecall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]
	bool bIsWaitingEMP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 0x1]
	int InRangeEnemyTeamNum;//[Offset: 0x51c, Size: 0x4]
	byte[] FindObjectTypes;//[Offset: 0x520, Size: 0x10]
	enum EffectID_Bin;//[Offset: 0x530, Size: 0x1]
	enum EffectID_Door;//[Offset: 0x531, Size: 0x1]
	enum EffectID_Player;//[Offset: 0x532, Size: 0x1]
	enum EffectID_LootRoller;//[Offset: 0x533, Size: 0x1]
	enum EffectID_LootDrones;//[Offset: 0x534, Size: 0x1]
	enum EffectID_SkillActor;//[Offset: 0x535, Size: 0x1]
	enum EffectID_SelfDrone;//[Offset: 0x536, Size: 0x1]
	enum EffectID_SelfCrypto;//[Offset: 0x537, Size: 0x1]
	float FindViewAngle;//[Offset: 0x538, Size: 0x4]
	byte FindBlockChannel;//[Offset: 0x53c, Size: 0x1]
	float ScanEnemyTeamRange;//[Offset: 0x540, Size: 0x4]
	int ServerCheckSpace;//[Offset: 0x544, Size: 0x4]
	class Actor[] TraceIgnoreActor;//[Offset: 0x548, Size: 0x10]
	int SpaceTimeRPC;//[Offset: 0x558, Size: 0x4]
	bool bIsFlyHorizon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x565, Size: 0x1]
	int FlyVerticalMode;//[Offset: 0x568, Size: 0x4]
	BinActor*[] TargetList_Bin;//[Offset: 0x580, Size: 0x10]
	ApexDoor*[] TargetList_Door;//[Offset: 0x590, Size: 0x10]
	ApexCharacterBase*[] TargetList_Player;//[Offset: 0x5a0, Size: 0x10]
	LootRoller*[] TargetList_LootRoller;//[Offset: 0x5b0, Size: 0x10]
	LootDrones*[] TargetList_LootDrones;//[Offset: 0x5c0, Size: 0x10]
	CausticDirtyBomb*[] TargetList_CausticBomb;//[Offset: 0x5d0, Size: 0x10]
	LaunchPadActor*[] TargetList_ALaunchPadActor;//[Offset: 0x5e0, Size: 0x10]
	SkillActorBase*[] TargetList_OtherSkillActor;//[Offset: 0x5f0, Size: 0x10]
	CarePackage*[] TargetList_CarePackage;//[Offset: 0x600, Size: 0x10]
	BinActor*[] TmpList_Bin;//[Offset: 0x610, Size: 0x10]
	ApexDoor*[] TmpList_Door;//[Offset: 0x620, Size: 0x10]
	ApexCharacterBase*[] TmpList_Player;//[Offset: 0x630, Size: 0x10]
	LootRoller*[] TmpList_LootRoller;//[Offset: 0x640, Size: 0x10]
	LootDrones*[] TmpList_LootDrones;//[Offset: 0x650, Size: 0x10]
	CausticDirtyBomb*[] TmpList_CausticBomb;//[Offset: 0x660, Size: 0x10]
	LaunchPadActor*[] TmpList_ALaunchPadActor;//[Offset: 0x670, Size: 0x10]
	SkillActorBase*[] TmpList_OtherSkillActor;//[Offset: 0x680, Size: 0x10]
	CarePackage*[] TmpList_CarePackage;//[Offset: 0x690, Size: 0x10]
	<int,ApexCharacterBase*> TriangleUIMap_Player;//[Offset: 0x6a0, Size: 0x50]
	ApexCharacter*[] EMP_RangePlayer;//[Offset: 0x6f0, Size: 0x10]
	bool bOptBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 0x1]
	bool bOptDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x701, Size: 0x1]
	bool bIsOptDoorOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x702, Size: 0x1]
	bool bOptTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x703, Size: 0x1]
	bool bOptSurveyBeacon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x704, Size: 0x1]
	bool bOptRespawnBeacon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x705, Size: 0x1]
	bool bOptCarePackage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x706, Size: 0x1]
	float OptDist_Bin;//[Offset: 0x708, Size: 0x4]
	float OptDist_Door;//[Offset: 0x70c, Size: 0x4]
	float OptDist_CarePackage;//[Offset: 0x710, Size: 0x4]
	float OptDist_TombBox;//[Offset: 0x714, Size: 0x4]
	float OptDist_SurveyBeacon;//[Offset: 0x718, Size: 0x4]
	float OptDist_RespawnBeacon;//[Offset: 0x71c, Size: 0x4]
	float OptViewAngle;//[Offset: 0x720, Size: 0x4]
	BinActor* OptPtr_Bin;//[Offset: 0x728, Size: 0x8]
	ApexDoor* OptPtr_Door;//[Offset: 0x730, Size: 0x8]
	CarePackage* OptPtr_CarePackage;//[Offset: 0x738, Size: 0x8]
	ApexRespawnBeacon* OptPtr_RespawnBeacon;//[Offset: 0x740, Size: 0x8]
	SurveyBeacon* OptPtr_SurveyBeacon;//[Offset: 0x748, Size: 0x8]
	float HUD_DistYellowPercent;//[Offset: 0x754, Size: 0x4]
	float HUD_TargetMaxDist;//[Offset: 0x758, Size: 0x4]
	byte TargetBlockChannel;//[Offset: 0x75c, Size: 0x1]
	float HUD_AltitudeSpeed;//[Offset: 0x760, Size: 0x4]
	float HUD_DroneHealthPercent;//[Offset: 0x764, Size: 0x4]
	float HUD_HealthPercent;//[Offset: 0x768, Size: 0x4]
	float HUD_ShieldTotalValue;//[Offset: 0x76c, Size: 0x4]
	float HUD_ShieldPercent;//[Offset: 0x770, Size: 0x4]
	float HUD_TargetDist;//[Offset: 0x774, Size: 0x4]
	float HUD_LeftPercent;//[Offset: 0x778, Size: 0x4]
	float HUD_Altitude;//[Offset: 0x77c, Size: 0x4]
	float HUD_Direction;//[Offset: 0x780, Size: 0x4]
	float HUD_DistToCrypto;//[Offset: 0x784, Size: 0x4]
	float HUD_SpeedPercent;//[Offset: 0x788, Size: 0x4]
	bool bShowBlink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78c, Size: 0x1]
	bool bShowBlinkBig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78d, Size: 0x1]
	float BeginFunctionalTime;//[Offset: 0x794, Size: 0x4]
	float DroneRecallTime;//[Offset: 0x798, Size: 0x4]
	float DroneWaitEMPTime;//[Offset: 0x79c, Size: 0x4]
	float DroneEMPRadius;//[Offset: 0x7a0, Size: 0x4]
	float DroneEMPDamage;//[Offset: 0x7a4, Size: 0x4]
	float DroneEMPDamageForMirageDecoy;//[Offset: 0x7a8, Size: 0x4]
	float DroneEMPDamageShield;//[Offset: 0x7ac, Size: 0x4]
	float DroneEMPDamageDropShieldTime;//[Offset: 0x7b0, Size: 0x4]
	byte[] EmpOverlapObjectTypes;//[Offset: 0x7b8, Size: 0x10]
	FName EMPPlayerBuffName;//[Offset: 0x7c8, Size: 0x8]
	FName EMPAlertBuffName;//[Offset: 0x7d0, Size: 0x8]
	class Actor[] EMPCountSkillActor;//[Offset: 0x7d8, Size: 0x10]
	int Sound_EnemyDestroyed;//[Offset: 0x7e8, Size: 0x4]
	int Sound_EMPHitBy;//[Offset: 0x7ec, Size: 0x4]
	int Sound_EMPWarning;//[Offset: 0x7f0, Size: 0x4]
	int Sound_ElimMine;//[Offset: 0x7f4, Size: 0x4]
	int Sound_droneRecall;//[Offset: 0x7f8, Size: 0x4]
	int Sound_droneViewEnd;//[Offset: 0x7fc, Size: 0x4]
	int Sound_droneViewStart;//[Offset: 0x800, Size: 0x4]
	<uint64,bool> FindEnemyList;//[Offset: 0x850, Size: 0x50]
	bool bIsOwnerClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a1, Size: 0x1]
	int BannerPing0;//[Offset: 0x8b4, Size: 0x4]
	int BannerPing1;//[Offset: 0x8b8, Size: 0x4]
	int BannerPing2;//[Offset: 0x8bc, Size: 0x4]
	int BannerPing3;//[Offset: 0x8c0, Size: 0x4]
	int BannerPingMore;//[Offset: 0x8c4, Size: 0x4]
	float AutoOpenDoor_MinSpeed;//[Offset: 0x8cc, Size: 0x4]
	float AutoOpenDoor_MaxAngle;//[Offset: 0x8d0, Size: 0x4]
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x3b4bc94
	bool StuckInto(Actor* InActor);// 0x3b4b6e0
	void ServerStartEMP();// 0x3b4bb94
	void ServerOpt_TombBox();// 0x3b4b8a8
	void ServerOpt_SurveyBeacon();// 0x3b4b854
	void ServerOpt_RespawnBeacon();// 0x3b4b870
	void ServerOpt_Door(bool bOpen);// 0x3b4b8c4
	void ServerOpt_CarePackage();// 0x3b4b88c
	void ServerOpt_Bin();// 0x3b4b950
	void Server_Recall();// 0x3b4b838
	void RecallFunction();// 0x3b4bbbc
	void OnRep_Player();// 0x3b4ba6c
	void OnRep_OtherSkillActor();// 0x3b4ba08
	void OnRep_LootRoller();// 0x3b4ba58
	void OnRep_LootDrones();// 0x3b4ba44
	void OnRep_IsInDroneMode();// 0x3b4bb80
	void OnRep_InRangeEnemyTeamNum();// 0x3b4bb6c
	void OnRep_Door();// 0x3b4ba94
	void OnRep_CausticBomb();// 0x3b4ba30
	void OnRep_CarePackage();// 0x3b4b9f4
	void OnRep_Bin();// 0x3b4ba80
	void OnRep_ALaunchPadActor();// 0x3b4ba1c
	void OnReloadWeaponDone(int WeaponID);// 0x3b4bbe4
	void OnGameModeFinish();// 0x3b4be00
	Vector GetTrianglePos(int Index);// 0x3b4b96c
	int GetPingBannerID();// 0x3b4bc60
	Vector GetDronePlayerPos();// 0x3b4b800
	void EMPFunction();// 0x3b4bba8
	void ClientStartingRecall();// 0x3b4bac4
	void ClientBeginDestroy(bool bIsDamagedDestroy);// 0x3b4bae0
	bool CanStuckInto(Actor* InActor);// 0x3b4b770
	void Broadcast_OnEmpActivate();// 0x3b4baa8
	void BP_PostEnemyTriangleSound();// 0x43841ec
	void BP_OnStartingRecall();// 0x43841ec
	void BP_OnEmpActivate();// 0x43841ec
	void BP_OnDestroy(bool bIsDamagedDestroy);// 0x43841ec
	void BP_OnChangeIntoDrone(bool bIsInto);// 0x43841ec
	void BeginFunctional();// 0x3b4bbd0

--------------------------------
Class: LootRoller.DynamicMovementActor.Actor.Object
	AkComponent* AkComponent;//[Offset: 0x318, Size: 0x8]
	PrimitiveComponent* MeleeAttackCollision;//[Offset: 0x320, Size: 0x8]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	bool bIsAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	float OverlapImpulseValue;//[Offset: 0x32c, Size: 0x4]
	bool bIsImpactGroundAkEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	float Health;//[Offset: 0x334, Size: 0x4]
	float AttachHealth;//[Offset: 0x338, Size: 0x4]
	float DetachHealth;//[Offset: 0x33c, Size: 0x4]
	ParticleSystem* RollerDestroyParticle;//[Offset: 0x340, Size: 0x8]
	FName DestroyColorParamName;//[Offset: 0x348, Size: 0x8]
	float DetachDeBounceTime;//[Offset: 0x350, Size: 0x4]
	Vector AttachLocationOffset;//[Offset: 0x354, Size: 0xc]
	float FallMaxSpeed;//[Offset: 0x360, Size: 0x4]
	float RandomMaxYaw;//[Offset: 0x364, Size: 0x4]
	float RandomMaxPitch;//[Offset: 0x368, Size: 0x4]
	bool bShouldDisappearWhenHitGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 0x1]
	float AliveTimeAfterHitGround;//[Offset: 0x370, Size: 0x4]
	bool bIsCyclesTier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 0x1]
	bool bIsRandomTier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375, Size: 0x1]
	float CurrentTierEndTime;//[Offset: 0x378, Size: 0x4]
	LootRollerTierData[] LootRollerTierDataArray;//[Offset: 0x380, Size: 0x10]
	int SpecialRollerItemID;//[Offset: 0x390, Size: 0x4]
	bool bSelfRandomSpecialRoller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 0x1]
	int SelfRandomSpecialRollerRate;//[Offset: 0x398, Size: 0x4]
	float MinAdditionalSpeed;//[Offset: 0x39c, Size: 0x4]
	float MaxAdditionalSpeed;//[Offset: 0x3a0, Size: 0x4]
	Vector AdditionalLocation;//[Offset: 0x3a4, Size: 0xc]
	bool bCanSpawnItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 0x1]
	AkAudioEvent* ImpactAkEvent;//[Offset: 0x3b8, Size: 0x8]
	AkAudioEvent* BombAkEvent;//[Offset: 0x3c0, Size: 0x8]
	AkAudioEvent* StartRollAkEvent;//[Offset: 0x3c8, Size: 0x8]
	AkAudioEvent* StopRollAkEvent;//[Offset: 0x3d0, Size: 0x8]
	float CheckRollSpeedInterval;//[Offset: 0x3dc, Size: 0x4]
	MaterialInterface* NormalEffectMaterial;//[Offset: 0x3e8, Size: 0x8]
	MaterialInterface* SpecialEffectMaterial;//[Offset: 0x3f0, Size: 0x8]
	MaterialInstanceDynamic* DynamicEffectMaterial;//[Offset: 0x3f8, Size: 0x8]
	FName ColorParamName;//[Offset: 0x400, Size: 0x8]
	FName RandomSlotParamName;//[Offset: 0x408, Size: 0x8]
	DynamicMovementComponent_Projetile* Projectile;//[Offset: 0x410, Size: 0x8]
	int CurrentTierIndex;//[Offset: 0x418, Size: 0x4]
	float DetachTime;//[Offset: 0x41c, Size: 0x4]
	bool bIsSpecialRoller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x428, Size: 0x8]
	bool bIsSkipReceivePhysicState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c, Size: 0x1]
	bool bIsCustomTickRigidBodyState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46d, Size: 0x1]
	float LinearVelocityCoefficient;//[Offset: 0x470, Size: 0x4]
	float AngularVelocityCoefficient;//[Offset: 0x474, Size: 0x4]
	float PositionLerp;//[Offset: 0x478, Size: 0x4]
	float AngleLerp;//[Offset: 0x47c, Size: 0x4]
	float MaxLinDiffSize;//[Offset: 0x480, Size: 0x4]
	float MinLinDiffSize;//[Offset: 0x484, Size: 0x4]
	RigidBodyState TargetRigidBodyState;//[Offset: 0x490, Size: 0x40]
	void TickOverlapAddForce();// 0x3c88310
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x3c888c8
	void SetupLootDronesFallState(Vector ForwardVector, float Speed);// 0x3c88670
	void RPCMulticastPostTakeDamage(Actor* Victim, float Damage, int DamageType, Pawn* Attacker);// 0x3c88738
	void RPCMulticastLootRollerKilled();// 0x3c88bb8
	void RandomTierIndex();// 0x3c88ba4
	void OnRepTierIndex();// 0x3c88b90
	void OnRepIsSpecialRoller();// 0x3c88b7c
	void OnRep_IsAttached();// 0x3c882fc
	void OnProjectileStop(out const HitResult Hit, bool bServer, Actor* HitOwner);// 0x3c88a34
	void OnLootRollerEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3c8832c
	void OnLootRollerBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3c88470
	void LootRollerKilled(Controller* Killer);// 0x3c88bd4

--------------------------------
Class: LootRollerTierData
	int RandomWeight;//[Offset: 0x0, Size: 0x4]
	float MinTime;//[Offset: 0xc, Size: 0x4]
	float MaxTime;//[Offset: 0x10, Size: 0x4]
	Color EffectColor;//[Offset: 0x14, Size: 0x4]
	int LootSpawnCount;//[Offset: 0x18, Size: 0x4]
	FName[] LootTableNames;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: RigidBodyState
	Vector_NetQuantize100 Position;//[Offset: 0x0, Size: 0xc]
	Quat Quaternion;//[Offset: 0x10, Size: 0x10]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20, Size: 0xc]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c, Size: 0xc]
	byte Flags;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: LootDrones.Actor.Object
	delegate OnBrokenLootDrones;//[Offset: 0x2c0, Size: 0x10]
	LootDronesMovementComponent* LootDronesMovementComponent;//[Offset: 0x2d0, Size: 0x8]
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x2d8, Size: 0x8]
	StaticMeshComponent* LootDronesMesh;//[Offset: 0x2e0, Size: 0x8]
	float Health;//[Offset: 0x2e8, Size: 0x4]
	float DetachFadeoutTime;//[Offset: 0x2ec, Size: 0x4]
	TimerHandle DetachFadeoutTimerHandle;//[Offset: 0x2f0, Size: 0x8]
	Vector AddForceVolume;//[Offset: 0x2f8, Size: 0xc]
	float AngularVelocityScale;//[Offset: 0x304, Size: 0x4]
	Vector AddAngularVelocityVolume;//[Offset: 0x308, Size: 0xc]
	float BombDamage;//[Offset: 0x314, Size: 0x4]
	float Radius;//[Offset: 0x318, Size: 0x4]
	class Actor* AttachableClass;//[Offset: 0x320, Size: 0x8]
	ParticleSystem* DronesDestroyParticle;//[Offset: 0x328, Size: 0x8]
	Transform DronesDestroyParticleTrans;//[Offset: 0x330, Size: 0x30]
	ParticleSystem* DronesHitParticle;//[Offset: 0x360, Size: 0x8]
	Transform DronesHitParticleTrans;//[Offset: 0x370, Size: 0x30]
	ParticleSystem* NormalTailingParticle;//[Offset: 0x3a0, Size: 0x8]
	Transform NormalTailingParticleTrans;//[Offset: 0x3b0, Size: 0x30]
	ParticleSystem* FallTailingParticle;//[Offset: 0x3e0, Size: 0x8]
	Transform FallTailingParticleTrans;//[Offset: 0x3f0, Size: 0x30]
	StaticMesh* PanicFireMesh;//[Offset: 0x420, Size: 0x8]
	Transform PanicFireMeshTrans;//[Offset: 0x430, Size: 0x30]
	ParticleSystem* DisappearParticle;//[Offset: 0x460, Size: 0x8]
	Transform DisappearParticleTrans;//[Offset: 0x470, Size: 0x30]
	ParticleSystemComponent* TailingParticleComponent;//[Offset: 0x4a0, Size: 0x8]
	StaticMeshComponent* PanicFireMeshComponent;//[Offset: 0x4a8, Size: 0x8]
	float DisappearTime;//[Offset: 0x4b0, Size: 0x4]
	FName FadeParamName;//[Offset: 0x4b4, Size: 0x8]
	MaterialInstanceDynamic* FadeoutMaterialInstanceDynamic;//[Offset: 0x4c0, Size: 0x8]
	class Actor[] ImpactIgnoreActorClass;//[Offset: 0x4c8, Size: 0x10]
	int AttackLootDronesAudioID;//[Offset: 0x4d8, Size: 0x4]
	AkAudioEvent* HitAkEvent;//[Offset: 0x4e0, Size: 0x8]
	AkAudioEvent* ImpactAkEvent;//[Offset: 0x4e8, Size: 0x8]
	AkAudioEvent* DropAkEvent;//[Offset: 0x4f0, Size: 0x8]
	AkAudioEvent* FlyingAkEvent;//[Offset: 0x4f8, Size: 0x8]
	FName FlyingAkEventParam;//[Offset: 0x500, Size: 0x8]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x528, Size: 0x8]
	bool bIsSkipReceivePhysicState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x3c84790
	void SetPathIndex(int PathIndex);// 0x3c844c8
	void SetPathActor(SplinePathActor* PathActor);// 0x3c8444c
	void SetLootDroneIndex(int InIndex);// 0x3c843d0
	void RPCMulticastPostTakeDamage(Actor* Victim, float Damage, int DamageType, Pawn* Attacker);// 0x3c84600
	void RPCMulticastOnDronesImpact(Vector HitLocation);// 0x3c84544
	void RPCMulticastLootDronesFall();// 0x3c84a00
	void RPCMulticastFadeoutDisappear();// 0x3c848fc
	void OnNotifyDetachAttachment(Controller* Killer);// 0x3c84984
	void OnBrokenLootDrones__DelegateSignature(LootDrones* Target, Controller* Killer);// 0x43841ec
	void LootDronesKilled(float DamageAmount, Actor* Attacker, Controller* EventInstigator);// 0x3c84a1c
	bool IsFinalHitLootDrones();// 0x3c8494c
	int GetAttachmentColorIndex();// 0x3c84918

--------------------------------
Class: LootDronesMovementComponent.SplinePathMovementComponent.MovementComponent.ActorComponent.Object
	float FlightSpeedMax;//[Offset: 0x164, Size: 0x4]
	float RollAngleMax;//[Offset: 0x168, Size: 0x4]
	float FlightAcceleration;//[Offset: 0x16c, Size: 0x4]
	float LookAheadDistance;//[Offset: 0x170, Size: 0x4]
	float PanicRollAngleMax;//[Offset: 0x174, Size: 0x4]
	float PanicFlightSpeedMax;//[Offset: 0x178, Size: 0x4]
	float PanicDuration;//[Offset: 0x17c, Size: 0x4]
	int SplinePathIndex;//[Offset: 0x180, Size: 0x4]
	class SplinePathActor* SplinePathActorClassPtr;//[Offset: 0x188, Size: 0x28]
	SplinePathActor* LootDronesPathActor;//[Offset: 0x1b0, Size: 0x8]
	SplinePathActor* LootDronesPathActorWithRep;//[Offset: 0x1b8, Size: 0x8]
	bool bEnableMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]
	bool bIsPanic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 0x1]
	float PanicEndTime;//[Offset: 0x1c4, Size: 0x4]
	float NormalInterval;//[Offset: 0x1c8, Size: 0x4]
	float PanicInterval;//[Offset: 0x1cc, Size: 0x4]
	void UpdateMoveSpeed(float DeltaTime);// 0x3c85d88
	void SetPathActor(SplinePathActor* PathActor);// 0x3c85c24
	void SetEnableMove(bool bEnable);// 0x3c85cb4
	void SetDronesPanic();// 0x3c85d38
	void OnRepSplinePathIndex();// 0x3c85d74
	void OnRepIsPanic();// 0x3c85d4c
	void OnRep_LootDronesPathActorWithRep();// 0x3c85d60
	void OnAsyncLoadingSplinePathClassFinished();// 0x3c85ca0

--------------------------------
Class: SplinePathMovementComponent.MovementComponent.ActorComponent.Object
	float MaxLerpDistance;//[Offset: 0x12c, Size: 0x4]
	float TotalLerpTime;//[Offset: 0x130, Size: 0x4]
	float UpdateNetMoveDistanceInterval;//[Offset: 0x134, Size: 0x4]
	float CurrentMoveSpeed;//[Offset: 0x138, Size: 0x4]
	bool bRotateAlongSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]
	float LeftLerpDistance;//[Offset: 0x140, Size: 0x4]
	float LerpDistancePreSecond;//[Offset: 0x144, Size: 0x4]
	float PreUpdateNetMoveDistanceTime;//[Offset: 0x148, Size: 0x4]
	float CurrentMoveDistance;//[Offset: 0x14c, Size: 0x4]
	float NetMoveDistance;//[Offset: 0x150, Size: 0x4]
	SplineComponent* SplineComponent;//[Offset: 0x158, Size: 0x8]
	void OnRepNetMoveDistance();// 0x3dbe2ec
	float GetCurrentMoveSpeed();// 0x3dbe334
	float GetCurrentMoveDistance();// 0x3dbe300

--------------------------------
Class: CausticDirtyBomb.CausticProjectile.SkillProjectileBase.UAEProjectile.SkillActorBase.DynamicMovementActor.Actor.Object
	float DirtyBombHeight;//[Offset: 0x890, Size: 0x4]
	float DirtyBombBottomHeight;//[Offset: 0x894, Size: 0x4]
	bool bCanTriggerByTeammateShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x898, Size: 0x1]
	bool bCanDestroyByTeammateShootBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x899, Size: 0x1]
	TrackerData ActiveTrackerData;//[Offset: 0x89c, Size: 0x18]
	class Object[] StopMoveCompMovementBaseArray;//[Offset: 0x8b8, Size: 0x10]
	byte ChangeToObjTypeWhenDeployed;//[Offset: 0x8c8, Size: 0x1]
	bool bAutoPingOnDeploy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c9, Size: 0x1]
	float AntiCheatRecycleDistance;//[Offset: 0x8cc, Size: 0x4]
	CausticDirtyBombStatus StatusData;//[Offset: 0x8d0, Size: 0xb8]
	float ThrowPowerScale;//[Offset: 0x988, Size: 0x4]
	float DeployTime;//[Offset: 0x98c, Size: 0x4]
	void TriggerExternalEvent(enum ExternalEvent);// 0x3afdeb0
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x3afdf98
	bool ShouldTurnOnDynMoveComp();// 0x3afd99c
	void SetThrowPowerScale(float InThrowPowerScale);// 0x3afd90c
	void SetDeployTime(float InDeployTime);// 0x3afd890
	void ServerNotifyDestroyFromDeploy();// 0x3afdf54
	void RemoveAutoPing();// 0x3afdf70
	void OnRep_ThrowPowerScale();// 0x3afd988
	void OnDynamicStopSimulating(out const HitResult HitResult, bool bServer, Actor* OwnerActor);// 0x3afdb68
	void OnDynamicBounceLimitReached();// 0x3afdb54
	void OnCharacterRespawn(int RescuerKey, int VictimKey);// 0x3afd9d4
	void OnBinActorOpen(Character* OpenChar, Actor* BinActor);// 0x3afda98
	void NotifyTrackerManagerDirtyBombActived();// 0x3afddd4
	void NotifyRecycle();// 0x3afdf40
	static void NotifyLuaDirtyBombUpdate(Object* Context, int Current, int Max);// 0x3afdca8
	Vector GetToxicSmokeSize(int PhaseIndex, int ActionIndex);// 0x3afdde8
	float GetRecyclePriority();// 0x3afdda0
	void DoRecycle();// 0x3afdf2c
	void AddPingOnDeploy();// 0x3afdf84

--------------------------------
Class: CausticProjectile.SkillProjectileBase.UAEProjectile.SkillActorBase.DynamicMovementActor.Actor.Object
	enum LastApexSkillEvent;//[Offset: 0x7f1, Size: 0x1]
	enum[] ApexSkillEventArray;//[Offset: 0x7f8, Size: 0x10]
	Vector SavedAimingLocation;//[Offset: 0x808, Size: 0xc]
	DebugDrawData DebugDrawData;//[Offset: 0x828, Size: 0x48]
	void OnUpdateLastApexSkillEvent(enum inApexSkillevent);// 0x3b0265c
	void OnRep_LastApexSkillEvent(enum PrevApexSkillEvent);// 0x3b025d8

--------------------------------
Class: SkillProjectileBase.UAEProjectile.SkillActorBase.DynamicMovementActor.Actor.Object
	bool bNeedSkillCooldownWhenFellOutOfWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	bool DrawPredictionLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x599, Size: 0x1]
	bool AutonomousNeedDrawPredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59a, Size: 0x1]
	bool EnablePredictionLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59b, Size: 0x1]
	bool EnablePredictionLineForFpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 0x1]
	bool EnablePredictionLineForTpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59d, Size: 0x1]
	bool PredictionLineSplineAlwaysFaceCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59e, Size: 0x1]
	GrenadePredictLine* PredictionLine;//[Offset: 0x5a0, Size: 0x8]
	StaticMesh* PredictionLineMesh;//[Offset: 0x5a8, Size: 0x8]
	ParticleSystem* PredictionLineTargetParticle;//[Offset: 0x5b0, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialStartInst;//[Offset: 0x5b8, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialEndInst;//[Offset: 0x5c0, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialStartInstTPP;//[Offset: 0x5c8, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialEndInstTPP;//[Offset: 0x5d0, Size: 0x8]
	MaterialInstanceDynamic* PredictionTargetMaterialInst;//[Offset: 0x5d8, Size: 0x8]
	MaterialInstanceDynamic* PredictionTargetMaterialInstTPP;//[Offset: 0x5e0, Size: 0x8]
	SkillPredictionLineConfigData SkillPredictionLineConfigData;//[Offset: 0x5e8, Size: 0x208]
	bool bShouldIgnoreCollsionWithOwner_C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f0, Size: 0x1]
	void TickPredictLine(float DeltaSeconds);// 0x3db2e7c
	void SetDrawPredictionLine(bool InDrawPredictionLine);// 0x3db2d78
	bool RequirePredictionLine();// 0x3db2ef8
	void InitPredictLineRes();// 0x3db2e68
	GrenadePredictLine* GetPreditionLine();// 0x3db2e34
	bool GetDrawPredictionLine();// 0x3db2d40
	void ClearPreditionLine();// 0x3db2e18
	bool CheckEnablePredicationLineByCameraMode(ApexCharacter* OwnerCharacter);// 0x3db2f38
	void BP_UpdateProjectileMesh();// 0x3db2dfc
	void BP_TickPredictLine(float DeltaSeconds);// 0x43841ec

--------------------------------
Class: UAEProjectile.SkillActorBase.DynamicMovementActor.Actor.Object
	delegate OnStartFly;//[Offset: 0x4e0, Size: 0x10]
	bool HasLocalStartFly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	ServerStartFlyInfo ServerStartFlyInfo;//[Offset: 0x4f4, Size: 0x40]
	byte ProjectileThrowMode;//[Offset: 0x534, Size: 0x1]
	bool IsSpawnFromCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x535, Size: 0x1]
	float ThrowPitchLimit;//[Offset: 0x538, Size: 0x4]
	bool bNetRelevantUseDist2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 0x1]
	int ItemID;//[Offset: 0x540, Size: 0x4]
	int ItemType;//[Offset: 0x544, Size: 0x4]
	Controller* InstigatorController;//[Offset: 0x548, Size: 0x8]
	ProjAnimationComponent* ProjAnimationComponent;//[Offset: 0x550, Size: 0x8]
	NativeMigrationData NativeMigrationData;//[Offset: 0x558, Size: 0x2]
	float AdjustLocationMinDiff;//[Offset: 0x55c, Size: 0x4]
	bool HasBeenThrowOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]
	bool HasStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x561, Size: 0x1]
	bool HasBounced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x562, Size: 0x1]
	float StartFlyTime;//[Offset: 0x564, Size: 0x4]
	Vector InitLocationBP;//[Offset: 0x568, Size: 0xc]
	Rotator InitRotationBP;//[Offset: 0x574, Size: 0xc]
	Vector InitVelocityBP;//[Offset: 0x580, Size: 0xc]
	void WorkAsBuffApplierEvent(out const FString BuffName, Pawn* BuffTarget);// 0x3e04858
	void UnbindEvents();// 0x3e04420
	void SyncLocationAndRotationWithServer();// 0x3e04298
	void SwitchThrowMode(byte ThrowMode);// 0x3e047dc
	void StartFly(const Vector InitLocation, const Rotator InitRotation, const Vector InitVelocity, bool ServerCanStartFly);// 0x3e04c5c
	void SetProjectileThrowMode(byte NewProjectileThrowMode);// 0x3e049e8
	void SetAnimationState(byte EventType);// 0x3e04448
	void ServerStartFly(const Vector InitLocation, const Rotator InitRotation, const Vector InitVelocity);// 0x3e04b50
	void ReportThrowingFlow(out const Vector AuthLocation);// 0x3e044c4
	void OnServerStartFlyInfoRecivedBP();// 0x43841ec
	void OnServerStartFlyInfoRecived();// 0x3e0433c
	void OnRep_ServerStartFlyInfo(ServerStartFlyInfo LastServerStartFlyInfo);// 0x3e04a64
	void OnReceiveSkillCustomEvent(byte SkillEvent, Actor* SkillOwner);// 0x3e04358
	bool IsOwnerInFPPMode();// 0x3e047a4
	bool IsOwnerAutomous();// 0x3e0497c
	bool HasStartFly(bool IsLocal);// 0x3e042ac
	float GetRemainingEffectTime();// 0x3e04940
	byte GetProjectileThrowMode();// 0x3e049b4
	Vector GetProjectileMeshLaunchVelocity(out float Time);// 0x3e0470c
	Vector GetProjectileLaunchVelocity();// 0x3e0461c
	Vector GetProjectileLaunchPosition();// 0x3e04654
	HitResult GetProjectileHitLocation();// 0x3e0468c
	bool GetPredictProjectilePath(out PredictProjectilePathResult PredictResult);// 0x3e0454c
	float GetCurrentThrowSpeed();// 0x43841ec
	float GetCurrentThrowPitchOffset();// 0x43841ec
	void BindEvents();// 0x3e04434
	void AlignToSurface();// 0x3e04b3c

--------------------------------
Class: DebugDrawData
	DebugLine[] ServerLineArray;//[Offset: 0x0, Size: 0x10]
	DebugLine[] LocalLineArray;//[Offset: 0x10, Size: 0x10]
	DebugSphere[] ServerSphereArray;//[Offset: 0x20, Size: 0x10]
	DebugSphere[] LocalSphereArray;//[Offset: 0x30, Size: 0x10]
	float DistanceLimit;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: DebugLine
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector EndPos;//[Offset: 0xc, Size: 0xc]
	Color Color;//[Offset: 0x18, Size: 0x4]
	bool IsServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: DebugSphere
	Vector CenterPos;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]
	int Segments;//[Offset: 0x10, Size: 0x4]
	Color Color;//[Offset: 0x14, Size: 0x4]
	bool IsServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: ServerStartFlyInfo
	Vector InitLocation;//[Offset: 0x0, Size: 0xc]
	Rotator InitRotation;//[Offset: 0xc, Size: 0xc]
	Vector InitVelocity;//[Offset: 0x18, Size: 0xc]
	Vector FinishLocation;//[Offset: 0x24, Size: 0xc]
	Rotator FinishRotation;//[Offset: 0x30, Size: 0xc]
	bool NeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool HasLaunched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]

--------------------------------
Class: GrenadePredictLine.Actor.Object
	HitResult HitInfo;//[Offset: 0x250, Size: 0x88]
	Actor* OwnerProjectile;//[Offset: 0x2d8, Size: 0x8]
	bool UseLocalRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	bool bClearSplineMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 0x1]
	bool bDestroyAfterClearSplineMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e2, Size: 0x1]
	SplineMeshComponent*[] SplineMeshArray;//[Offset: 0x2e8, Size: 0x10]
	SkillActorCompInstPool SplineMeshInstPool;//[Offset: 0x2f8, Size: 0x38]
	PredictLineRuntimeEffectConfig RuntimeEffectConfig;//[Offset: 0x330, Size: 0x50]
	int MaxSplineMeshNumForOneMesh;//[Offset: 0x380, Size: 0x4]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 0x1]
	ParticleSystemComponent* PredictTargetParticle;//[Offset: 0x388, Size: 0x8]
	SplineComponent* SplineComp;//[Offset: 0x390, Size: 0x8]
	Vector HighThrowOffset;//[Offset: 0x398, Size: 0xc]
	Vector LowThrowOffset;//[Offset: 0x3a4, Size: 0xc]
	byte ThrowMode;//[Offset: 0x3b0, Size: 0x1]
	float PredictLineVelocityScale;//[Offset: 0x3b4, Size: 0x4]
	float MaxSimTime;//[Offset: 0x3b8, Size: 0x4]
	int SplineMeshDefaultPoolSize;//[Offset: 0x3bc, Size: 0x4]
	GrenadePredictResult GrenadePredictResult;//[Offset: 0x3c0, Size: 0x30]
	float StraightPartLength;//[Offset: 0x3f0, Size: 0x4]
	float GrenadeRadius;//[Offset: 0x3f4, Size: 0x4]
	Vector PredictLineStartLocation;//[Offset: 0x3f8, Size: 0xc]
	Vector PredictLineStartVelocity;//[Offset: 0x404, Size: 0xc]
	void UpdateSplines(out const Vector Velocity);// 0x3c1220c
	void UpdatePredictLine();// 0x3c12294
	void UnInitTriggers();// 0x3c12488
	void TickDestroy(float DeltaSeconds);// 0x3c1240c
	void OnSplineMeshInstUpdateState();// 0x3c11b74
	void OnOwnerDestroyed(Actor* DestroyedActor);// 0x3c11f68
	void NotifyPredictLineUpdate(out const PredictProjectilePathResult outPredictProjectilePathResult);// 0x3c11ea4
	bool IsOwnerInFPPMode();// 0x3c11ae8
	void InitTriggers();// 0x3c1249c
	void InitPredictLineStatus(Actor* InOwnerProjectile);// 0x3c1237c
	Rotator GetSplineMeshRotFacingCamera(out const Vector SplineMeshDirection, out const Vector MeshToCameraDirection);// 0x3c11fec
	ActorComponent*[] GetSplineMeshInstArray(SkillActorCompInstPool SkillActorCompInstPool);// 0x3c118ac
	Vector GetProjectileLaunchPosition();// 0x3c11b88
	bool GetPredictProjectilePath(out PredictProjectilePathResult PredictResult);// 0x3c11bc0
	PredictLineRuntimeEffectConfig GetPredictLineEffectConfig();// 0x3c11b20
	static GrenadePredictLine* GetPredictionLine(Actor* ProjectileActor, class Object PredictionLineCls);// 0x3c12150
	Vector[] GetPathForSequencer(const int MaxSimStep, const Vector StartLocation, const Vector EndLocation, const float GravityScale, const float GravityBase, const float LaunchVelocityZ);// 0x3c11c90
	Vector GetLaunchVelocity(Vector StartPosition, Vector EndPosition, float DeltaTime, Vector Acceleration, int StepCount);// 0x43841ec
	static GrenadePredictLine* FindPredictionLine(Actor* OwnerActor);// 0x3c120d4
	void DestroyPredictLine();// 0x3c123f8
	void ClearPredictLineStatus(bool ShouldClearSplineMesh, bool ShouldDelayDestroy);// 0x3c122a8
	void BP_UpdateSplines(out const Vector Velocity);// 0x43841ec
	void BP_UpdatePredictLine();// 0x43841ec
	void BP_UnInitTriggers();// 0x43841ec
	void BP_TickDestroy(float DeltaSeconds);// 0x43841ec
	void BP_OnSplineMeshInstUpdateState(out const PredictLineRuntimeEffectConfig EffectConfig);// 0x43841ec
	void BP_InitTriggers();// 0x43841ec
	void BP_InitPredictLineStatus(Actor* InOwnerProjectile);// 0x43841ec
	void BP_DestroyPredictLine();// 0x43841ec
	void BP_ClearPredictLineStatus(bool ShouldClearSplineMesh, bool ShouldDelayDestroy);// 0x43841ec

--------------------------------
Class: SkillActorCompInstPool
	int ActorCompInstPoolSize;//[Offset: 0x0, Size: 0x4]
	int MaxActorCompInstPoolSize;//[Offset: 0x4, Size: 0x4]
	double MaxMillisecondForTick;//[Offset: 0x8, Size: 0x8]
	class Object* ClassToInstance;//[Offset: 0x10, Size: 0x8]
	ActorComponent*[] ActorCompInstArray;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: PredictLineRuntimeEffectConfig
	byte PredictLineForwardAxis;//[Offset: 0x0, Size: 0x1]
	StaticMesh* PredictionLineMesh;//[Offset: 0x8, Size: 0x8]
	ParticleSystem* PredictionLineTargetParticle;//[Offset: 0x10, Size: 0x8]
	FName PredictionLineMaterialSlotName;//[Offset: 0x18, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialStartInst;//[Offset: 0x20, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialEndInst;//[Offset: 0x28, Size: 0x8]
	int PredictionTargetMaterialSlotIndex;//[Offset: 0x30, Size: 0x4]
	MaterialInstanceDynamic* PredictionTargetMaterialInst;//[Offset: 0x38, Size: 0x8]
	Vector2D PredictionLineScale;//[Offset: 0x40, Size: 0x8]
	float PredictionLineRoll;//[Offset: 0x48, Size: 0x4]
	bool IsFaceCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	enum RenderPass;//[Offset: 0x4d, Size: 0x1]

--------------------------------
Class: GrenadePredictResult
	Vector[] SplinePoints;//[Offset: 0x0, Size: 0x10]
	bool IsHitActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector HitActorLocation;//[Offset: 0x14, Size: 0xc]
	Rotator HitActorRotation;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 0x10]
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0x10, Size: 0x1c]
	HitResult HitResult;//[Offset: 0x2c, Size: 0x88]

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SkillPredictionLineConfigData
	class Object* PredictionLineCls;//[Offset: 0x0, Size: 0x8]
	byte PredictLineForwardAxis;//[Offset: 0x8, Size: 0x1]
	float PredictionLineRoll;//[Offset: 0xc, Size: 0x4]
	float PredictionLineRollTPP;//[Offset: 0x10, Size: 0x4]
	bool IsFaceCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	enum RenderPass;//[Offset: 0x15, Size: 0x1]
	Vector2D PredictionLineScale;//[Offset: 0x18, Size: 0x8]
	Vector2D PredictionLineScaleTPP;//[Offset: 0x20, Size: 0x8]
	LinearColor PredictionLineColor;//[Offset: 0x28, Size: 0x10]
	LinearColor PredictionLineColor_PDCC;//[Offset: 0x38, Size: 0x10]
	LinearColor PredictionLineTargetColor;//[Offset: 0x48, Size: 0x10]
	LinearColor PredictionLineTargetColor_PDCC;//[Offset: 0x58, Size: 0x10]
	LinearColor PredictionLineTargetColorSecond;//[Offset: 0x68, Size: 0x10]
	LinearColor PredictionLineTargetColorSecond_PDCC;//[Offset: 0x78, Size: 0x10]
	StaticMesh* PredictionLineMeshClass;//[Offset: 0x88, Size: 0x28]
	ParticleSystem* PredictionLineTargetParticleClass;//[Offset: 0xb0, Size: 0x28]
	MaterialInstance* PredictionLineMaterialStart;//[Offset: 0xd8, Size: 0x28]
	MaterialInstance* PredictionLineMaterialEnd;//[Offset: 0x100, Size: 0x28]
	MaterialInstance* PredictionLineMaterialStartTPP;//[Offset: 0x128, Size: 0x28]
	MaterialInstance* PredictionLineMaterialEndTPP;//[Offset: 0x150, Size: 0x28]
	MaterialInstance* PredictionLineTargetMaterial;//[Offset: 0x178, Size: 0x28]
	MaterialInstance* PredictionLineTargetMaterialTPP;//[Offset: 0x1a0, Size: 0x28]
	StaticMesh* PredictionLineMesh;//[Offset: 0x1c8, Size: 0x8]
	ParticleSystem* PredictionLineTargetParticle;//[Offset: 0x1d0, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialStartInst;//[Offset: 0x1d8, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialEndInst;//[Offset: 0x1e0, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialStartInstTPP;//[Offset: 0x1e8, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialEndInstTPP;//[Offset: 0x1f0, Size: 0x8]
	MaterialInstanceDynamic* PredictionTargetMaterialInst;//[Offset: 0x1f8, Size: 0x8]
	MaterialInstanceDynamic* PredictionTargetMaterialInstTPP;//[Offset: 0x200, Size: 0x8]

--------------------------------
Class: ProjAnimationComponent.ActorComponent.Object
	CharacterAnimAssetLoader* AnimAssetLoader;//[Offset: 0xf0, Size: 0x8]
	bool bEnableOnFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	byte AnimationState;//[Offset: 0xf9, Size: 0x1]
	AnimSequence* OnPinPullAnimation;//[Offset: 0x100, Size: 0x8]
	AnimSequence* OnHoldAnimation;//[Offset: 0x108, Size: 0x8]
	AnimSequence* OnThrowAnimation;//[Offset: 0x110, Size: 0x8]
	AnimSequence* OnLandAnimation;//[Offset: 0x118, Size: 0x8]
	AnimSequence* OnDeployAnimation;//[Offset: 0x120, Size: 0x8]
	AnimSequence* OnReadyAnimation;//[Offset: 0x128, Size: 0x8]
	AnimSequence* OnActivateAnimation;//[Offset: 0x130, Size: 0x8]
	AnimSequence* OnDestroyAnimation;//[Offset: 0x138, Size: 0x8]
	void SetAnimationState(byte EventType);// 0x3d4ca54
	void SetAnimation(const byte AnimationType, AnimationAsset* AnimationAsset);// 0x3d4c1a0
	void OnSkillTriggerCustomEvent(byte EventType, Actor* OwnerChar);// 0x3d4c260
	void OnPerLoadCompleted(out AnimSoftObject[] AnimArray);// 0x3d4c0cc
	void LoadAnimations(AnimationAsset* PinPullAinm, AnimationAsset* HoldAnim, AnimationAsset* ThrowAinm, AnimationAsset* LandAinm, AnimationAsset* DeployAinm, AnimationAsset* ReadyAinm, AnimationAsset* ActivateAinm, AnimationAsset* DestroyAinm);// 0x3d4c320
	void BindSkillEvent(bool bBind);// 0x3d4c048

--------------------------------
Class: CharacterAnimAssetLoader.BaseAssetLoader.Object

--------------------------------
Class: BaseAssetLoader.Object
	uint32 CurrentLoadId;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: NativeMigrationData
	bool bStartFlyOnThrowGrenadeEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUnbindEventOnStartFly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: CausticDirtyBombStatus

--------------------------------
Class: LaunchPadActor.SkillActorBase.DynamicMovementActor.Actor.Object
	bool bDamagable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	float HP;//[Offset: 0x504, Size: 0x4]
	float CurHP;//[Offset: 0x508, Size: 0x4]
	float MinLaunchCharacterDelay;//[Offset: 0x50c, Size: 0x4]
	float MinLaunchItemDelay;//[Offset: 0x510, Size: 0x4]
	TrackerData LaunchTeammateTrackerData;//[Offset: 0x514, Size: 0x18]
	int Data_UserCount;//[Offset: 0x52c, Size: 0x4]
	<class Object,LaunchItemConfigData> LaunchItemConfigData;//[Offset: 0x538, Size: 0x50]
	<class Object,LaunchItemConfigData> FollowingLaunchItemConfigData;//[Offset: 0x588, Size: 0x50]
	<class Object,float> LaunchItemAreaConfigData;//[Offset: 0x5d8, Size: 0x50]
	<ApexCharacterBase*,float> LaunchedCharacterList_C;//[Offset: 0x628, Size: 0x50]
	ApexCharacterBase*[] OverTimeCharacterList_C;//[Offset: 0x678, Size: 0x10]
	<Actor*,float> LaunchedItemMap_C;//[Offset: 0x688, Size: 0x50]
	float CheckValidTriggerTime_C;//[Offset: 0x6d8, Size: 0x4]
	bool bNeedCheckLoadedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6dc, Size: 0x1]
	void ParentDoDetachAllParent_BP(Actor* TmpAct);// 0x43841ec
	void OnLaunchCharacter(ApexCharacter* OwnerCharacter, ApexCharacter* TargetCharacter);// 0x3c5f4b8
	void LaunchItem(Actor* ItemActor, out const HitResult Hit);// 0x3c5f3d4
	void LaunchCharacterStep_BP(ApexCharacterBase* Character);// 0x43841ec
	bool IsLaunchItemValid(Actor* ItemActor);// 0x3c5f1e4
	bool IsLaunchItemAreaValid(Actor* ItemActor);// 0x3c5f26c
	bool IsCanLaunchCharacter(ApexCharacterBase* Character);// 0x3c5eee4
	void InnerLaunchItem_BP(Actor* ItemActor, out const HitResult Hit);// 0x43841ec
	bool InnerGetLaunchItemConfig(Actor* ItemActor, out const <class Object,LaunchItemConfigData> InLaunchItemConfigData, out LaunchItemConfigData OutLaunchItemConfigData);// 0x3c5f034
	Vector GetLaunchPadAddForce(float Slop, float AddForce);// 0x3c5ef6c
	bool GetLaunchItemConfig(Actor* ItemActor, out LaunchItemConfigData OutLaunchItemConfigData);// 0x3c5f2f4
	void DelayBroadcastSwitchState_BP();// 0x43841ec
	void CheckLoadedState_BP();// 0x43841ec
	void BP_OnDamage();// 0x43841ec

--------------------------------
Class: LaunchItemConfigData
	float Slop;//[Offset: 0x0, Size: 0x4]
	float BaseVelocity;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameStateInGameChatComp_BP_C.InGameChatManagerComponent.ActorComponent.Object
	FString GetModuleName();// 0x43841ec

--------------------------------
Class: InGameChatManagerComponent.ActorComponent.Object
	InGameChatDataReporter* DataReporter;//[Offset: 0x140, Size: 0x8]
	void UnRegisterTextFilterRsp();// 0x43841ec
	void RegisterTextFilterRsp();// 0x43841ec
	void OnFilterTextRsp(FString ContentRsp);// 0x3c3ebb4
	void OnFilterText(int64 PlayerKey, FString Content);// 0x43841ec
	FString GetParachutingMsg(out const InGameChatInfo Info);// 0x3c3e96c
	FString GetChatContent(out const InGameChatInfo Info);// 0x3c3ea94

--------------------------------
Class: InGameChatDataReporter.Object
	void SendDataStatisticsFlow(out const InGameChatReportData ReportData);// 0x3c3c708

--------------------------------
Class: InGameChatReportData

--------------------------------
Class: GameStateHotZoneMgr.ActorComponent.Object
	HotZoneVolume*[] HotZoneVolumeArray;//[Offset: 0xf0, Size: 0x10]
	HotZoneVolume* ActiveHotZoneVolume;//[Offset: 0x100, Size: 0x8]
	bool bIsEnableHotZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	void OnCircleSafeZoneTips(float BlueCircleStartLessenTime);// 0x3bdc680
	HotZoneVolume* GetActiveHotZoneVolume();// 0x3bdc6fc

--------------------------------
Class: HotZoneVolume.Volume.Brush.Actor.Object
	bool bIsActiveHotZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	ParticleSystemComponent* ParticleEffectComponent;//[Offset: 0x290, Size: 0x8]
	FString LootZoneID;//[Offset: 0x2a0, Size: 0x10]
	float Radius;//[Offset: 0x2b0, Size: 0x4]
	int RandomWeight;//[Offset: 0x2b4, Size: 0x4]
	LootZoneTypeInfo LootZoneTypeInfo;//[Offset: 0x2b8, Size: 0x18]
	LootZoneTypeInfo[] ReplaceLootZoneTypeInfos;//[Offset: 0x2d0, Size: 0x10]
	ParticleSystem* HotZoneEffectParticle;//[Offset: 0x2e0, Size: 0x8]
	Vector HotZoneEffectLocation;//[Offset: 0x2e8, Size: 0xc]
	void OnRepActiveHotZone();// 0x3c315b8
	bool IsPointInLootZone(Vector PointVector);// 0x3c315cc

--------------------------------
Class: GameStateLootZoneNameMgr.ActorComponent.Object
	int MaxHistoryCount;//[Offset: 0x110, Size: 0x4]
	float ShowTipsTime;//[Offset: 0x114, Size: 0x4]
	void OnRespawnExitHatchDone(Actor* Actor);// 0x3be1688

--------------------------------
Class: GameStateTeamInfoComp.ActorComponent.Object
	LinearColor[] TeamColorCollection;//[Offset: 0xf0, Size: 0x10]
	ParachuteEffectSuitCfg[] TeamNormalParachuteEffectCollection;//[Offset: 0x100, Size: 0x10]
	<int,ParachuteEffectSuitCfg> SuitID2SpecialParachuteEffectCollection;//[Offset: 0x110, Size: 0x50]
	int MaxTeamNumForRandomColor;//[Offset: 0x160, Size: 0x4]

--------------------------------
Class: ParachuteEffectSuitCfg
	ParticleEffectSetCfg ParachuteEffects;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: GameStatePlane_BP_C.GameStatePlaneComponent.ActorComponent.Object
	FString GetModuleName();// 0x43841ec

--------------------------------
Class: GameStateRadiationCircle_BP_C.RadiationCircleStateComponent.ActorComponent.Object
	FString GetModuleName();// 0x43841ec

--------------------------------
Class: BP_HitTip3D_C.HitTip3D.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b0, Size: 0x8]
	ArrowComponent* Arrow;//[Offset: 0x2b8, Size: 0x8]
	void ReceiveTick(float DeltaSeconds);// 0x43841ec
	void ExecuteUbergraph_BP_HitTip3D(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0x43841ec

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x55c, Size: 0x4]
	float ArrowSize;//[Offset: 0x560, Size: 0x4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 0x1]
	float ScreenSize;//[Offset: 0x568, Size: 0x4]
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56c, Size: 0x1]
	void SetArrowColor(LinearColor NewColor);// 0x5ec1d8c

--------------------------------
Class: BP_AutoEffectBullet_C.AutoEffectBullet.SignificanceManagedActor.Actor.Object
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x2f0, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2f8, Size: 0x8]

--------------------------------
Class: BP_OBEffectBullet_C.OBEffectBullet.SignificanceManagedActor.Actor.Object
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x2c0, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2c8, Size: 0x8]

--------------------------------
Class: RifleBullet_C.ShootWeaponBullet.SignificanceManagedActor.Actor.Object
	SphereComponent* Sphere;//[Offset: 0x380, Size: 0x8]

--------------------------------
Class: LevelDirector_BP_C.LevelDirector.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x340, Size: 0x8]

--------------------------------
Class: BP_RespawnBeacon_C.ApexRespawnBeacon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x370, Size: 0x8]
	ApexNavMeshModifierComponent* ApexNavMeshModifier;//[Offset: 0x378, Size: 0x8]
	NavObstacleComponent* NavObstacle;//[Offset: 0x380, Size: 0x8]
	WidgetComponent* Widget;//[Offset: 0x388, Size: 0x8]
	SphereComponent* HUDSphere;//[Offset: 0x390, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x398, Size: 0x8]
	SphereComponent* Sphere;//[Offset: 0x3a0, Size: 0x8]
	Actor* InActor;//[Offset: 0x3a8, Size: 0x8]
	void ReceiveBeginPlay();// 0x43841ec
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x43841ec
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x43841ec
	void BndEvt__HUDSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x43841ec
	void BndEvt__HUDSphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x43841ec
	void NotifyUseComplete();// 0x43841ec
	void ExecuteUbergraph_BP_RespawnBeacon(int EntryPoint, bool CallFunc_Useable_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, const delegate Temp_delegate_Variable, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetController_ReturnValue, Controller* CallFunc_GetController_ReturnValue, ApexPlayerController* K2Node_DynamicCast_AsApex_Player_Controller, bool K2Node_DynamicCast_bSuccess, ApexPlayerController* K2Node_DynamicCast_AsApex_Player_Controller, bool K2Node_DynamicCast_bSuccess, RespawnOperateComponent* CallFunc_GetRespawnOperateComponent_ReturnValue, RespawnOperateComponent* CallFunc_GetRespawnOperateComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetLocalRole_ReturnValue, byte CallFunc_GetLocalRole_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetLocalRole_ReturnValue, bool CallFunc_IsObedInCurrentClient_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Useable_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue);// 0x43841ec

--------------------------------
Class: ApexNavMeshModifierComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0x560, Size: 0x8]
	enum Shape;//[Offset: 0x568, Size: 0x1]
	Vector BoxExtent;//[Offset: 0x56c, Size: 0xc]
	float CylinderRadius;//[Offset: 0x578, Size: 0x4]
	float CylinderHeight;//[Offset: 0x57c, Size: 0x4]

--------------------------------
Class: NavObstacleComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BP_CommDiscardMag_C.CommDiscardMagDisplay.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x250, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x258, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x260, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x268, Size: 0x8]
	void LoadSkeletalMesh(enum InMeshType);// 0x43841ec
	void ExecuteUbergraph_BP_CommDiscardMag(int EntryPoint, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, SkeletalMeshAsync* CallFunc_SetSkeletalMeshAsync_ReturnValue, SkeletalMeshAsync* CallFunc_SetSkeletalMeshAsync_ReturnValue, enum K2Node_Event_InMeshType, bool K2Node_SwitchEnum_CmpSuccess);// 0x43841ec

--------------------------------
Class: CommDiscardMagDisplay.Actor.Object
	void LoadSkeletalMesh(enum InMeshType);// 0x43841ec

--------------------------------
Class: SkeletalMeshAsync.AsyncLoaderBase.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x38, Size: 0x8]
	SkeletalMesh* SOPSkeletalMesh;//[Offset: 0x40, Size: 0x28]
	class AnimInstance* AnimClass;//[Offset: 0x68, Size: 0x8]
	class AnimInstance* SOPAnimClass;//[Offset: 0x70, Size: 0x28]
	SkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0xa0, Size: 0x8]
	void StopAnimation();// 0x3d9831c
	void OnLoadSkeletalMeshFinished(out const SoftObjectPath[] Paths, out const Object*[] Assets, SkeletalMesh* NewMesh);// 0x3d97f24
	void OnLoadAnimClassFinished(out const SoftObjectPath[] Paths, out const Object*[] Assets, class AnimInstance NewClass);// 0x3d97d04
	void OnLoadAnimAssetFinished(out const SoftObjectPath[] Paths, out const Object*[] Assets, AnimationAsset* NewAnimToPlay);// 0x3d97ae4
	void K2_SetSkeletalMesh(SkeletalMeshComponent* NewMeshComp, SkeletalMesh* NewMesh, out const delegate FinishedCallback);// 0x3d98330
	SkeletalMesh* GetSOPSkeletalMesh();// 0x3d98230
	class AnimInstance GetSOPAnimClass();// 0x3d98144
	SkeletalMesh* GetSkeletalMesh();// 0x3d982e8
	class AnimInstance GetAinmClass();// 0x3d981fc

--------------------------------
Class: CircleAudio_BP_C.RadiationCircleAudio.Actor.Object
	AudioEffectManager* CircleAudioEffect;//[Offset: 0x2d8, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: RadiationCircleAudio.Actor.Object
	AudioEffectManager* OwnedAudioEffectManager;//[Offset: 0x250, Size: 0x8]
	RadiationCircleStateComponent* CurCircleState;//[Offset: 0x258, Size: 0x8]
	<int,CircleAudioConfig> CircleIndex2CircleAudioConfig;//[Offset: 0x260, Size: 0x50]
	CircleAudioConfig DefaultCircleAudioConf;//[Offset: 0x2b0, Size: 0x18]
	float ListenHeightOffset;//[Offset: 0x2c8, Size: 0x4]
	float PosUpdateInterval;//[Offset: 0x2cc, Size: 0x4]

--------------------------------
Class: CircleAudioConfig
	FName AudioID_CircleMoving;//[Offset: 0x0, Size: 0x8]
	FName AudioID_CircleStop;//[Offset: 0x8, Size: 0x8]
	FName AudioID_CircleStay;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ApexDisplayCharacter_BP_Wraith_C.ApexDisplayCharacter_BP_C.ApexDisplayCharacter.Character.Pawn.Actor.Object

--------------------------------
Class: ApexDisplayCharacter_BP_C.ApexDisplayCharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x990, Size: 0x8]
	WeaponManagerComponent* WeaponManager;//[Offset: 0x998, Size: 0x8]
	CapsuleComponent* HitCollision;//[Offset: 0x9a0, Size: 0x8]
	float Timeline_1_NewTrack_0_4E1D948F45D3383B61C18E8735A15A12;//[Offset: 0x9a8, Size: 0x4]
	byte Timeline_1__Direction_4E1D948F45D3383B61C18E8735A15A12;//[Offset: 0x9ac, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x9b0, Size: 0x8]
	float Timeline_0_NewTrack_0_E9635BFA483CF950580240A7562776EC;//[Offset: 0x9b8, Size: 0x4]
	byte Timeline_0__Direction_E9635BFA483CF950580240A7562776EC;//[Offset: 0x9bc, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x9c0, Size: 0x8]
	Vector NewVar;//[Offset: 0x9c8, Size: 0xc]
	AIController* MyAiController;//[Offset: 0x9d8, Size: 0x8]
	BlackboardComponent* MyBlackBoard;//[Offset: 0x9e0, Size: 0x8]
	MaterialInstanceDynamic* matIns;//[Offset: 0x9e8, Size: 0x8]
	int SoundHandle;//[Offset: 0x9f0, Size: 0x4]
	void WeaponLib(out bool BisWeaponLib, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x43841ec
	void GetUIFollowingPosition(UserWidget* UI, out Vector Location, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x43841ec
	void UserConstructionScript(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x43841ec
	void Timeline_0__FinishedFunc();// 0x43841ec
	void Timeline_0__UpdateFunc();// 0x43841ec
	void Timeline_1__FinishedFunc();// 0x43841ec
	void Timeline_1__UpdateFunc();// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x43841ec
	void OnMontageStarted(AnimMontage* Montage);// 0x43841ec
	void SetVIS();// 0x43841ec
	void ChangeOffset();// 0x43841ec
	void SetMode();// 0x43841ec
	void ShowOutlineEffect();// 0x43841ec
	void ShowEffectOneTime(int EffectID);// 0x43841ec
	void CloseEffect();// 0x43841ec
	void ControllWeaponScale();// 0x43841ec
	void ExecuteUbergraph_ApexDisplayCharacter_BP(int EntryPoint, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, const enum Temp_byte_Variable, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, AnimMontage* K2Node_Event_Montage, bool K2Node_Event_bInterrupted, AnimMontage* K2Node_Event_Montage, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, int K2Node_Event_EffectID, bool CallFunc_IsValid_ReturnValue, int CallFunc_SpecificTypeToWeaponId_ReturnValue, WeaponTransformConfig CallFunc_GetWeaponTransformConfig_ReturnValue, Transform CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale);// 0x43841ec

--------------------------------
Class: ApexDisplayCharacter.Character.Pawn.Actor.Object
	SkeletalMeshComponent* TPPEffectMesh;//[Offset: 0x670, Size: 0x8]
	ApexDisplayWeapon* WeaponActor;//[Offset: 0x678, Size: 0x8]
	bool RotateEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x681, Size: 0x1]
	DataTable* OffsetTable;//[Offset: 0x688, Size: 0x8]
	<FName,Vector> LegendOffsets;//[Offset: 0x690, Size: 0x50]
	<FName,CurveVector*> AspCurves;//[Offset: 0x6e0, Size: 0x50]
	<FName,AnimMontage*> DisplayAnimMap;//[Offset: 0x740, Size: 0x50]
	<FName,AnimMontage*> IdlePoseAnimMap;//[Offset: 0x790, Size: 0x50]
	float MaxIdlePoseInterval;//[Offset: 0x7e0, Size: 0x4]
	float MinIdlePoseInterval;//[Offset: 0x7e4, Size: 0x4]
	AnimMontage*[] IdleAnimArray;//[Offset: 0x7e8, Size: 0x10]
	AnimationAsset* DefaultPose;//[Offset: 0x7f8, Size: 0x8]
	bool bInSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800, Size: 0x1]
	MaterialInterface* OriginMaterial;//[Offset: 0x808, Size: 0x8]
	enum CurrentLegendType;//[Offset: 0x810, Size: 0x1]
	enum CurrentWeaponType;//[Offset: 0x811, Size: 0x1]
	enum CurrentSceneMode;//[Offset: 0x812, Size: 0x1]
	enum CurrentStateMode;//[Offset: 0x813, Size: 0x1]
	FString SlotName;//[Offset: 0x818, Size: 0x10]
	FString PlayerName;//[Offset: 0x828, Size: 0x10]
	FString PlayerUid;//[Offset: 0x838, Size: 0x10]
	FString LegendId;//[Offset: 0x848, Size: 0x10]
	TimerHandle DisplayCharMontageTimer;//[Offset: 0x858, Size: 0x8]
	FName CurrentSkinId;//[Offset: 0x860, Size: 0x8]
	CameraComponent* FPPCamera;//[Offset: 0x868, Size: 0x8]
	Vector CameraLocation;//[Offset: 0x870, Size: 0xc]
	Rotator CameraRotator;//[Offset: 0x87c, Size: 0xc]
	enum FPPStateMode;//[Offset: 0x888, Size: 0x1]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x889, Size: 0x1]
	CharacterMontageDataMapAsset* MontageTable;//[Offset: 0x890, Size: 0x8]
	ApexAnimNotifySoundMap* SoundMapDataAsset;//[Offset: 0x898, Size: 0x28]
	delegate EnterFPPDelegate;//[Offset: 0x8d0, Size: 0x10]
	delegate EnterTPPDelegate;//[Offset: 0x8e0, Size: 0x10]
	Vector WeaponScale;//[Offset: 0x8f0, Size: 0xc]
	FName WeaponSocket;//[Offset: 0x8fc, Size: 0x8]
	void YawRotate(float Delta);// 0x39b3190
	void StopSound(int SoundHandle);// 0x39b1c78
	void ShowOutlineEffect();// 0x43841ec
	void ShowEffectOneTime(int EffectID);// 0x39b30f8
	void SetWeaponVisiable(bool IsShow);// 0x39b1a68
	void SetWeaponMesh(FString Path, FString[] Material, FString AnimClassPath);// 0x39b2188
	void SetVisible(bool Visible, bool PlayAppearAnim);// 0x39b320c
	void SetStateMode(enum mode, FName TargetAnimId, bool NeedHideBeforeMontage);// 0x39b28e4
	void SetRotateEnable(bool Enable);// 0x39b2fdc
	void SetOriginMaterial();// 0x39b2c40
	void SetMeshLightChannel(int Channel);// 0x39b26f8
	void SetLegendWeapon(enum LegendType, enum WeaponType);// 0x39b2a6c
	void SetLegendOffsetByAlpha(FName StartName, FName EndName, float Alpha);// 0x39b2ddc
	void SetDisplaySceneMode(enum mode);// 0x39b29f0
	void SetComponentVisiableWithTag(FName Tag, bool IsVisiable);// 0x39b19a0
	void ResetRotate();// 0x39b317c
	void ReadSkinInfos(FString InLegendId, enum MeshMode);// 0x39b25dc
	void ReadOriginMaterial();// 0x39b2c2c
	void PlayRandomIdlePose();// 0x39b2774
	void PlayMontageById(FName MontageId);// 0x39b2bb0
	void PlayCharacterMontage(enum MovementType);// 0x39b1d78
	void OnStateChange(enum Last, enum Next, AnimMontage* LastMontage, AnimMontage* NextMontage, FName NextMontageId);// 0x43841ec
	void OnSkinChanged(Character* TargetCharacter, bool Success, FName SkinId);// 0x39b188c
	void OnSetDark();// 0x43841ec
	void OnMontageStarted(AnimMontage* Montage);// 0x39b2790
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x39b2814
	void OnFPPMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x39b1ba8
	void OnCancelDark();// 0x43841ec
	void OnArmoryStageChange(bool bEnter);// 0x43841ec
	void MoveWeapon(SkeletalMeshComponent* NewParent, FName SocketName);// 0x39b1aec
	SkeletalMeshComponent* GetOwnMesh();// 0x39b1858
	FName GetMontageIDByName(FName MontageName);// 0x39b2b2c
	Vector GetLegendOffset(FName CurveName, FName OffsetName);// 0x39b2c54
	AnimMontage* GetCharacterMontage();// 0x39b1df4
	AkAudioEvent* GetAkAudioEvent(FName SoundName);// 0x39b1cf4
	void ForceSetLegendOffset(float MoveTime, Vector TargetRelaLoc);// 0x39b2d24
	void FixWeaponScale(Vector TargetScale);// 0x39b2454
	void EnterTPPDelegate__DelegateSignature();// 0x43841ec
	void EnterTPP();// 0x39b2440
	void EnterFPPDelegate__DelegateSignature();// 0x43841ec
	void DetachWeapon();// 0x39b24d0
	void ControllWeaponScale();// 0x43841ec
	void CloseEffect();// 0x39b3060
	void CleanWeaponComponent(FName SocketName, FName Tag);// 0x39b1e28
	void ChangeSkin(FName SkinId);// 0x39b2560
	void ChangeLegendOffset(float MoveTime, FName CurveName, FName OffsetName);// 0x39b2edc
	void ChangeEffectIntensity(float Intensity);// 0x39b307c
	void AttachWeapon(Actor* Weapon);// 0x39b24e4
	void AddComponentToWeapon(FString Path, FString[] SkinMaterial, FName SocketName, FName Tag);// 0x39b1ee4

--------------------------------
Class: ApexDisplayWeapon.Actor.Object
	DisplayWeaponMeshComponent* WeaponMeshComponent;//[Offset: 0x250, Size: 0x8]
	DisplayWeaponParticleComponent* WeaponParticleComponent;//[Offset: 0x258, Size: 0x8]
	CapsuleComponent* Capsule;//[Offset: 0x260, Size: 0x8]
	DisplayWeapon3DUIComponent* Weapon3DUIComponent;//[Offset: 0x268, Size: 0x8]
	DisplayWeapon3DUIComponent* Optical3DUIComponent;//[Offset: 0x270, Size: 0x8]
	DisplayWeaponEffectComponent* EffectComponent;//[Offset: 0x278, Size: 0x8]
	DisplayWeaponCharmComponent* CharmComponent;//[Offset: 0x280, Size: 0x8]
	FName CharmSocketName;//[Offset: 0x288, Size: 0x8]
	WeaponAnimDataAsset* WeaponAssetTable;//[Offset: 0x290, Size: 0x8]
	enum StateMode;//[Offset: 0x298, Size: 0x1]
	AnimMontage* TestMontage;//[Offset: 0x2b0, Size: 0x8]
	ArmoryWeaponAudioDataAsset* WeaponAudioTable;//[Offset: 0x2b8, Size: 0x8]
	<byte,WeaponBulletChangeNum> WeaponBulletColorNumMap;//[Offset: 0x2d0, Size: 0x50]
	DisplayWeaponSkinCfg WeaponSkinCfg;//[Offset: 0x320, Size: 0x18]
	void UpdateBulletNum(int MagLevel, int BulletNum, int ReserveBulletBudget);// 0x39b7ca0
	void StopWeaponMontage();// 0x39b6eb8
	void SetWeaponID(int ID);// 0x39b8b18
	void SetVisible(bool IsVisiable);// 0x39b8550
	void SetSkinID(int ID);// 0x39b8a9c
	void SetOptical3DUIActorVisiable(bool IsVisiable);// 0x39b7dc8
	void SetMeshScale(Vector Scale);// 0x39b8450
	void SetMeshOffset(Vector Offset);// 0x39b83d4
	void SetCollisionEnabled(bool bEnabled);// 0x39b84cc
	void SetCharmVisiable(bool bState, bool bDestroy);// 0x39b67cc
	void SetAnimClass(FString AnimClassPath, bool IsAsynLoad);// 0x39b85d4
	void RemoveSkeletalMeshComp(FString Key, bool bChangeMesh, FString NewMeshPath, int Index, FString Material);// 0x39b7844
	void RemoveOutLineEffect(FString Key);// 0x39b70b8
	void RemoveOptical3DUIActor();// 0x39b7db4
	void Remove3DUIActor();// 0x39b7da0
	float PlayWeaponAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x39b6ecc
	int PlayWeaponActionSound(enum MovementType);// 0x39b6e34
	void PlayKillSound();// 0x39b7304
	void OnUpdateAimShow(bool IsAiming, bool bHasEquipOptical);// 0x39b7bcc
	void LoadKillEffectParticle();// 0x39b7318
	void LoadKillEffect();// 0x39b74ac
	AnimationAsset* GetWeaponAnimAsset(enum WeaponState, enum WeaponType);// 0x39b6fdc
	Vector GetSocketLocation(FName SocketName);// 0x39b6dac
	SkeletalMeshComponent* GetSkeletalComponentByKey(FString Key);// 0x39b7aec
	SkeletalMeshComponent* GetMainMesh();// 0x39b83a0
	enum GetCurrentWeaponType();// 0x39b6d78
	SkeletalMeshComponent* GetCharmMesh();// 0x39b6798
	CameraComponent* GetCharmCamera();// 0x39b6764
	void CleanParticle(FName Tag);// 0x39b74d4
	void CleanAllOutlineEffect();// 0x39b70a4
	void CleanAllMeshComp();// 0x39b74c0
	void CleanAllKillEffect();// 0x39b72f0
	void ChangeStaticMeshMaterial(float Value, int InStackCount);// 0x39b732c
	void ChangeParticleColorByQuality(int Quality);// 0x39b7550
	void ChangeOptical3DUIActor(FString ActorPath, FString ComponentKey);// 0x39b7e4c
	void ChangeMainMeshMaterialFromKill(float Value, int InStackCount);// 0x39b73ec
	void ChangeMainMesh(FString MeshPath, FString[] Material, FString ExtraMaterial, bool IsAsynLoad);// 0x39b8094
	void ChangeCharm(FString MeshPath, FString[] Material, FString AnimClassPath);// 0x39b68a0
	void Change3DUIActor(FString ActorPath);// 0x39b7fbc
	void AttachMeshComp(FName SubObjectName, FString MeshPath, FName SocketName, FString[] Material, FString ExtraMaterial, bool IsAsnyLoad);// 0x39b86f8
	void AddParticle(FString Key, FString AssetPath, FName SocketName, FName Tag, Rotator Ro, Vector Ve);// 0x39b75cc
	void AddOutLineEffect(FString Key, int EffectType, float Time);// 0x39b7190
	void AddCharm(FString MeshPath, FString[] Material);// 0x39b6b58

--------------------------------
Class: DisplayWeaponMeshComponent.SceneComponent.ActorComponent.Object
	SkeletalMeshComponent* MainSkeletalMesh;//[Offset: 0x258, Size: 0x8]
	TimelineComponent* OutlineTimeline;//[Offset: 0x260, Size: 0x8]
	TimelineComponent* AttachMeshTimeline;//[Offset: 0x268, Size: 0x8]
	<FString,SkeletalMeshComponent*> SkeletalMeshCompList;//[Offset: 0x270, Size: 0x50]
	<FString,SkeletalMeshComponent*> OutLineEffectComp;//[Offset: 0x2c0, Size: 0x50]
	CurveFloat* OutLineOpacity;//[Offset: 0x360, Size: 0x8]
	CurveFloat* AttachMeshOpacity;//[Offset: 0x368, Size: 0x8]
	void OnOutlineLerp(float DeltaTime);// 0x3b68ad8
	void OnOutlineFinish();// 0x3b68ac4
	void OnMeshOpacityLerp(float DeltaTime);// 0x3b68a48
	void OnMeshOpacityFinish();// 0x3b68a34

--------------------------------
Class: DisplayWeaponParticleComponent.SceneComponent.ActorComponent.Object
	FName ColorParamName;//[Offset: 0x258, Size: 0x8]
	<int,Color> QualityColorArray;//[Offset: 0x260, Size: 0x50]
	<FName,ParticleSystemComponent*> ParticleCompList;//[Offset: 0x2b0, Size: 0x50]

--------------------------------
Class: DisplayWeapon3DUIComponent.SceneComponent.ActorComponent.Object
	Weapon3DUIActor* DynamicMatActor;//[Offset: 0x258, Size: 0x8]
	MatConfig[] DynamicMatConfigList;//[Offset: 0x260, Size: 0x10]
	LinearColor[] Weapon3DUIColorList;//[Offset: 0x270, Size: 0x10]

--------------------------------
Class: MatConfig
	MaterialInstanceDynamic*[] DynamicMatList;//[Offset: 0x0, Size: 0x10]
	FString[] DynamicMatParams;//[Offset: 0x10, Size: 0x10]
	bool bOnlyAimShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bOnlyNotEquipShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	MeshComponent* MeshComponent;//[Offset: 0x28, Size: 0x8]
	TextRenderComponent* TextRenderComponent;//[Offset: 0x30, Size: 0x8]
	WidgetComponent* WidgetComponent;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x560, Size: 0x18]
	MaterialInterface* TextMaterial;//[Offset: 0x578, Size: 0x8]
	Font* Font;//[Offset: 0x580, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x588, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x589, Size: 0x1]
	Color TextRenderColor;//[Offset: 0x58c, Size: 0x4]
	float XScale;//[Offset: 0x590, Size: 0x4]
	float YScale;//[Offset: 0x594, Size: 0x4]
	float WorldSize;//[Offset: 0x598, Size: 0x4]
	float InvDefaultSize;//[Offset: 0x59c, Size: 0x4]
	float HorizSpacingAdjust;//[Offset: 0x5a0, Size: 0x4]
	float VertSpacingAdjust;//[Offset: 0x5a4, Size: 0x4]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a8, Size: 0x1]
	void SetYScale(float Value);// 0x60a2a80
	void SetXScale(float Value);// 0x60a2afc
	void SetWorldSize(float Value);// 0x60a290c
	void SetVertSpacingAdjust(float Value);// 0x60a2988
	void SetVerticalAlignment(byte Value);// 0x60a2bf0
	void SetTextRenderColor(Color Value);// 0x60a2b78
	void SetTextMaterial(MaterialInterface* Material);// 0x60a2d64
	void SetText(FString Value);// 0x60a2ec8
	void SetHorizSpacingAdjust(float Value);// 0x60a2a04
	void SetHorizontalAlignment(byte Value);// 0x60a2c6c
	void SetFont(Font* Value);// 0x60a2ce8
	void K2_SetText(out const FText Value);// 0x60a2de0
	Vector GetTextWorldSize();// 0x60a289c
	Vector GetTextLocalSize();// 0x60a28d4

--------------------------------
Class: DisplayWeaponEffectComponent.SceneComponent.ActorComponent.Object
	WeaponFrameEffectData* CurrentEffectData;//[Offset: 0x268, Size: 0x8]
	SoftObjectPath[] EffectPaths;//[Offset: 0x270, Size: 0x10]
	<FString,ParticleSystemComponent*> EffectParticleCompMap;//[Offset: 0x280, Size: 0x50]

--------------------------------
Class: WeaponFrameEffectData.DataAsset.Object
	int SkinId;//[Offset: 0x30, Size: 0x4]
	MainBoneMaterialEffect[] MainMaterialEffects;//[Offset: 0x38, Size: 0x10]
	<enum,FrameMeshEffectEventContent> MainMeshEventContents;//[Offset: 0x48, Size: 0x50]
	FrameStaticEffect[] StaticEffects;//[Offset: 0x98, Size: 0x10]
	FrameParticleEffect[] ParticleEffects;//[Offset: 0xa8, Size: 0x10]
	void PackStaticEffect(out SoftObjectPath[] Paths, bool isTwo);// 0x3e81634
	void PackParticleEffect(out SoftObjectPath[] Paths, bool isTwo);// 0x3e81510

--------------------------------
Class: MainBoneMaterialEffect
	FString EffectName;//[Offset: 0x0, Size: 0x10]
	FName MaterialParam;//[Offset: 0x10, Size: 0x8]
	enum MainEvent;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: FrameMeshEffectEventContent
	FName[] DynamicMaterialParameterNames;//[Offset: 0x0, Size: 0x10]
	FrameMeshEffect[] StaticMaterialParameters;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: FrameMeshEffect
	<FName,float> StaticScalarMaterialParameters;//[Offset: 0x0, Size: 0x50]
	<FName,Vector> StaticVectorMaterialParameters;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: FrameStaticEffect
	FString EffectName;//[Offset: 0x0, Size: 0x10]
	StaticMesh* StaticMeshPathFPP;//[Offset: 0x10, Size: 0x28]
	StaticMesh* StaticMeshPathTPP;//[Offset: 0x38, Size: 0x28]
	FName AttachSocket;//[Offset: 0x60, Size: 0x8]
	FName[] MaterialValues;//[Offset: 0x68, Size: 0x10]
	enum EffectEvent;//[Offset: 0x78, Size: 0x1]
	<enum,FrameMeshEffectEventContent> EventContents;//[Offset: 0x80, Size: 0x50]
	MaterialInterface*[] OverrideMaterialsFPP;//[Offset: 0xd0, Size: 0x10]
	MaterialInterface*[] OverrideMaterialsTPP;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: DisplayWeaponCharmComponent.SceneComponent.ActorComponent.Object
	Object* CharmTemplate;//[Offset: 0x258, Size: 0x28]
	DisplayCharmActor* CharmActor;//[Offset: 0x280, Size: 0x8]

--------------------------------
Class: DisplayCharmActor.Actor.Object
	SkeletalMeshComponent* MainSkeletalMesh;//[Offset: 0x250, Size: 0x8]
	CameraComponent* MainCamera;//[Offset: 0x258, Size: 0x8]

--------------------------------
Class: WeaponAnimDataAsset.DataAsset.Object
	<enum,WeaponAnimAssetMap> WeaponAnimDataMap;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: WeaponAnimAssetMap
	<enum,AnimationAsset*> WeaponAnimAssetMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ArmoryWeaponAudioDataAsset.DataAsset.Object
	<enum,WeaponAudioMapData> WeaponAudioData;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: WeaponAudioMapData
	<enum,AkAudioEvent*> ActionAudioMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: WeaponBulletChangeNum
	byte ColorNum1;//[Offset: 0x0, Size: 0x1]
	byte ColorNum2;//[Offset: 0x1, Size: 0x1]
	byte ColorNum3;//[Offset: 0x2, Size: 0x1]
	byte FlashNum;//[Offset: 0x3, Size: 0x1]
	int MaxNum;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DisplayWeaponSkinCfg
	SoftObjectPath WeaponFrameEffect;//[Offset: 0x0, Size: 0x18]

--------------------------------
Class: CharacterMontageDataMapAsset.DataAsset.Object
	<enum,CharacterMontageMap> MontageDataMap;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: CharacterMontageMap
	<enum,WeaponMontageMap> CharacterMontageMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: WeaponMontageMap
	<enum,AnimMontage*> WeaponMontageMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ApexDisplayCharacter_BP_Pathfinder_C.ApexDisplayCharacter_BP_C.ApexDisplayCharacter.Character.Pawn.Actor.Object
	<AnimMontage*,AnimMontage*> AnimMap;//[Offset: 0x9f8, Size: 0x50]

--------------------------------
Class: ApexDisplayCharacter_BP_Octane_C.ApexDisplayCharacter_BP_C.ApexDisplayCharacter.Character.Pawn.Actor.Object

--------------------------------
Class: BP_PlaneCharacter_C.PlaneCharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x690, Size: 0x8]
	AkComponent* Ak;//[Offset: 0x698, Size: 0x8]
	CameraFOVHandler* TPP_CameraFOVHandler;//[Offset: 0x6a0, Size: 0x8]
	TargetViewCameraModeHandler* TargetViewCameraModeHandler1;//[Offset: 0x6a8, Size: 0x8]
	CameraComponent* TPP_Camera;//[Offset: 0x6b0, Size: 0x8]
	CustomSpringArmComponent* TPP_SpringArm;//[Offset: 0x6b8, Size: 0x8]
	CameraFOVHandler* FPP_CameraFOVHandler;//[Offset: 0x6c0, Size: 0x8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x6c8, Size: 0x8]
	ParticleSystemComponent* P_JumpAirship_Airflow_08;//[Offset: 0x6d0, Size: 0x8]
	ParticleSystemComponent* P_JumpAirship_Airflow_07;//[Offset: 0x6d8, Size: 0x8]
	ParticleSystemComponent* P_JumpAirship_Airflow_06;//[Offset: 0x6e0, Size: 0x8]
	ParticleSystemComponent* P_JumpAirship_Airflow_05;//[Offset: 0x6e8, Size: 0x8]
	ParticleSystemComponent* P_JumpAirship_Airflow_03;//[Offset: 0x6f0, Size: 0x8]
	ParticleSystemComponent* P_JumpAirship_Airflow_02;//[Offset: 0x6f8, Size: 0x8]
	ParticleSystemComponent* P_JumpAirship_Airflow_01;//[Offset: 0x700, Size: 0x8]
	ParticleSystemComponent* P_JumpAirship_Airflow_04;//[Offset: 0x708, Size: 0x8]
	CustomSpringArmComponent* FPP_SpringArm;//[Offset: 0x710, Size: 0x8]
	StaticMeshComponent* ST_Machinery_JumpAirship;//[Offset: 0x718, Size: 0x8]
	CameraComponent* FPP_Camera;//[Offset: 0x720, Size: 0x8]
	UserWidget* ParachuteWidget;//[Offset: 0x728, Size: 0x8]
	AkAudioEvent* PlaneEngineEvent;//[Offset: 0x730, Size: 0x28]
	void ReceiveBeginPlay();// 0x43841ec
	void ExecuteUbergraph_BP_PlaneCharacter(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, StaticMeshAsync* CallFunc_SetStaticMeshAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue);// 0x43841ec

--------------------------------
Class: PlaneCharacter.Character.Pawn.Actor.Object
	bool bUsedSpringArmRotWhenBecomeViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 0x1]
	bool bFlyToJumpPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x669, Size: 0x1]
	FString PlaneEngineSound;//[Offset: 0x670, Size: 0x10]
	ApexPlayerController* ClientPC;//[Offset: 0x680, Size: 0x8]
	TargetViewCameraModeHandler* TargetViewCameraModeHandler;//[Offset: 0x688, Size: 0x8]
	void OnRep_bFlyToJumpPoint();// 0x3d36a28
	Vector GetPlayerLeavePlanePos();// 0x3d369f0
	CameraComponent* GetPlaneFPPCamera();// 0x3d36ae0
	SpringArmComponent* GetCurSpringArm();// 0x3d36aac
	CameraFOVHandler* GetCurFOVHandler();// 0x3d36a78
	TargetViewCameraModeHandler* GetCameraModeHandler();// 0x3d36a44

--------------------------------
Class: StaticMeshAsync.AsyncLoaderBase.Object
	StaticMesh* StaticMesh;//[Offset: 0x38, Size: 0x8]
	StaticMesh* SOPStaticMesh;//[Offset: 0x40, Size: 0x28]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x68, Size: 0x8]
	void SetStaticMesh(StaticMeshComponent* NewMeshComp, StaticMesh* NewMesh, out const delegate FinishedCallback);// 0x3dc0f40
	void OnLoadStaticMeshFinished(out const SoftObjectPath[] Paths, out const Object*[] Assets, StaticMesh* NewMesh);// 0x3dc0c34
	StaticMesh* GetStaticMesh();// 0x3dc0f0c
	StaticMesh* GetSOPStaticMesh();// 0x3dc0e54

--------------------------------
Class: CameraFOVHandler.ActorComponent.Object
	float DefaultTargetFOV;//[Offset: 0xf0, Size: 0x4]
	float LerpSpeed;//[Offset: 0xf4, Size: 0x4]
	float Tolerance;//[Offset: 0xf8, Size: 0x4]
	CameraComponent* CacheCam;//[Offset: 0x100, Size: 0x8]
	Vector2D OwnerHiddenFOVRange;//[Offset: 0x108, Size: 0x8]
	float NearClippingPlaneValue;//[Offset: 0x110, Size: 0x4]
	void SetCamera(CameraComponent* Cam);// 0x3af819c
	void LerpToTargetFOV(float NewLerpSpeed, float NewTargetFOV);// 0x3af824c
	void LerpToDefaultFOV(float NewLerpSpeed);// 0x3af8308
	CameraComponent* GetCamera();// 0x3af8218

--------------------------------
Class: TargetViewCameraModeHandler.ActorComponent.Object
	TargetViewCameraModeItem* DefaultCameraModeItem;//[Offset: 0xf8, Size: 0x8]
	<enum,FName> MapCamModeID2MatchCompTag;//[Offset: 0x100, Size: 0x50]
	<enum,TargetViewCameraModeItem*> MapCamModeID2CameraModeItem;//[Offset: 0x150, Size: 0x50]
	void SwitchCameraMode(enum NewCameraModeID);// 0x3dce10c
	void SetCameraModeItemEnable(enum CameraModeID, bool Enable);// 0x3dce044
	void RefreshCameraModeItems();// 0x3dce344
	void OnJumpCameraChange();// 0x3dce030
	void OnCharacterCameraModeChanged();// 0x3dce01c
	void InitCameraModeItems();// 0x3dce358
	enum GetPlayerCurCharacterCameraMode();// 0x3dce258
	SpringArmComponent* GetCurSpringArm();// 0x3dce1f0
	CameraFOVHandler* GetCurFOVHandler();// 0x3dce188
	TargetViewCameraModeItem* GetCurCameraModeItem();// 0x3dce310
	enum GetCurCameraModeID();// 0x3dce224
	CameraComponent* GetCurCamera();// 0x3dce1bc
	TargetViewCameraModeItem* GetCameraModeItem(enum CameraModeID);// 0x3dce28c

--------------------------------
Class: TargetViewCameraModeItem.Object
	CameraComponent* CamComp;//[Offset: 0x28, Size: 0x8]
	SpringArmComponent* SpringArmComp;//[Offset: 0x30, Size: 0x8]
	CameraFOVHandler* CameraFOVHandler;//[Offset: 0x38, Size: 0x8]
	FName MatchCompTag;//[Offset: 0x40, Size: 0x8]
	Actor* TargetViewActor;//[Offset: 0x48, Size: 0x8]
	void SetCameraModeEnable(bool Enable);// 0x3dcda20
	void InitDefaultCameraModeItem(Actor* TargetView);// 0x3dcdaa4
	void InitCameraModeItem(Actor* TargetView, FName MatchTag);// 0x3dcdb20

--------------------------------
Class: CustomSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	bool UseShoulderForOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	Vector GetPreviousLookOrigin(out const Rotator ControlRot, out const Vector ActorSocketOffset, out const Vector PreviousOrigin, bool IsRelative);// 0x3b543a4
	void ForceSetSpringArmLength(float Length);// 0x3b54528

--------------------------------
Class: Character_Caustic_BP_C.APGameCharacter_BP_C.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2070, Size: 0x8]
	int CurrentDirtyBomb;//[Offset: 0x2078, Size: 0x4]
	int MaxDirtyBomb;//[Offset: 0x207c, Size: 0x4]
	void OnRep_CurrentDirtyBomb();// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void ReceivePossessed(Controller* NewController);// 0x43841ec
	void ExecuteUbergraph_Character_Caustic_BP(int EntryPoint, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, Controller* K2Node_Event_NewController, FString CallFunc_Conv_ObjectToString_ReturnValue, ApexPlayerController* K2Node_DynamicCast_AsApex_Player_Controller, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue, interface classNone CallFunc_GetSkillTypeActorNum_self_CastInput, int CallFunc_GetSkillTypeActorNum_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, ApexGameState* K2Node_DynamicCast_AsApex_Game_State, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_GetFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue);// 0x43841ec

--------------------------------
Class: APGameCharacter_BP_C.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1f70, Size: 0x8]
	GameplayTasksComponent* GameplayTasks;//[Offset: 0x1f78, Size: 0x8]
	CharacterAddBuffSelfComponent_BP_C* CharacterAddBuffSelfComponent_BP;//[Offset: 0x1f80, Size: 0x8]
	CharacterMagmaRiseComponent_BP_C* CharacterMagmaRiseComponent_BP;//[Offset: 0x1f88, Size: 0x8]
	AutoShootTargetComponent* AutoShootTarget;//[Offset: 0x1f90, Size: 0x8]
	EffectViewManager_BP_C* EffectViewManager_BP;//[Offset: 0x1f98, Size: 0x8]
	CharacterAudioEffectManager_BP_C* CharacterAudioEffectManager_BP;//[Offset: 0x1fa0, Size: 0x8]
	CapsuleComponent* NameCheck;//[Offset: 0x1fa8, Size: 0x8]
	byte CurrentGunSlot;//[Offset: 0x1fb0, Size: 0x1]
	bool is in air;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fb1, Size: 0x1]
	Rotator NewVar;//[Offset: 0x1fb4, Size: 0xc]
	bool JumpCam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc0, Size: 0x1]
	bool LandCam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc1, Size: 0x1]
	bool isSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc2, Size: 0x1]
	bool IsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc3, Size: 0x1]
	float ClimbPrecess;//[Offset: 0x1fc4, Size: 0x4]
	float Local Max Head Yaw;//[Offset: 0x1fc8, Size: 0x4]
	Actor* Local Self;//[Offset: 0x1fd0, Size: 0x8]
	Rotator HeadRotation;//[Offset: 0x1fd8, Size: 0xc]
	bool PistolFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe4, Size: 0x1]
	bool isPadJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe5, Size: 0x1]
	bool IsJumpState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe6, Size: 0x1]
	Transform ZipHandGrabTransform;//[Offset: 0x1ff0, Size: 0x30]
	bool ClimbSwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2020, Size: 0x1]
	bool RingDisPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2021, Size: 0x1]
	Vector RecallEndPosition;//[Offset: 0x2024, Size: 0xc]
	RandomPlayerSequenceEntryContainer HeroUnarmedSidle;//[Offset: 0x2030, Size: 0x10]
	RandomPlayerSequenceEntryContainer HeroPistolSidle;//[Offset: 0x2040, Size: 0x10]
	RandomPlayerSequenceEntryContainer HeroRifleSidle;//[Offset: 0x2050, Size: 0x10]
	RandowSpawnItemEntry[] PerkItemList;//[Offset: 0x2060, Size: 0x10]
	void SpawnPerkItem(Actor* InActor, Vector LaunchPosition, Vector LaunchDirection, out RandowSpawnItemEntry[] ItemList, bool CallFunc_IsValid_ReturnValue, PickUpWrapperActor* CallFunc_RandomSpawnItemByWeight_ReturnValue, bool CallFunc_IsValid_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, PickUpWrapperActor* CallFunc_RandomSpawnItemByWeight_ReturnValue, bool CallFunc_HasBuff_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue);// 0x43841ec
	void IsInFinisher(out bool In, ApexPlayerState* K2Node_DynamicCast_AsApex_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInFinisher_ReturnValue);// 0x43841ec
	void GetRoleType(out FName ReturnRoleType, bool CallFunc_IsObedInCurrentClient_ReturnValue, byte CallFunc_GetLocalRole_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsStandalone_ReturnValue);// 0x43841ec
	void TPPorFPP(enum CallFunc_GetCurrentCameraMode_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x43841ec
	void SetPlayerNameColor();// 0x43841ec
	void OnClickChangeSkin();// 0x43841ec
	void OnClickCrouch(bool CallFunc_HasState_ReturnValue);// 0x43841ec
	void InpActEvt_Sprint_K2Node_InputActionEvent(Key Key);// 0x43841ec
	void InpActEvt_Sprint_K2Node_InputActionEvent(Key Key);// 0x43841ec
	void InpActEvt_Attack_K2Node_InputActionEvent(Key Key);// 0x43841ec
	void InpActEvt_Attack_K2Node_InputActionEvent(Key Key);// 0x43841ec
	void InpActEvt_UpToZipline_K2Node_InputActionEvent(Key Key);// 0x43841ec
	void OnLoaded_B9353F62426B7F6A6FD931B1BB446E13(class Object Loaded);// 0x43841ec
	void SetAllCollisionEnabled(bool bEnabled);// 0x43841ec
	void Draw Debug(Vector Location, float Radius, LinearColor Color, float Duration, float Thickness);// 0x43841ec
	void OnBPIsInvincibleChange();// 0x43841ec
	void ReceiveOnEnterPawnState(enum NewState);// 0x43841ec
	void OnPlayerStartFireDelegate_Event(Weapon* Weapon);// 0x43841ec
	void ReceiveTick(float DeltaSeconds);// 0x43841ec
	void OnPlayTotemRecallTrailSFX(out const Vector StartPosition, out const Vector EndPosition);// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void ExecuteUbergraph_APGameCharacter_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, Key Temp_struct_Variable, Key K2Node_InputActionEvent_Key, class Object K2Node_CustomEvent_Loaded, class Object Temp_class_Variable, class Actor K2Node_ClassDynamicCast_AsActor, bool K2Node_ClassDynamicCast_bSuccess, bool CallFunc_TriggerEvent_ReturnValue, Key K2Node_InputActionEvent_Key, bool K2Node_Event_bEnabled, Vector K2Node_CustomEvent_Location, float K2Node_CustomEvent_Radius, LinearColor K2Node_CustomEvent_Color, float K2Node_CustomEvent_Duration, float K2Node_CustomEvent_Thickness, bool CallFunc_TriggerEvent_ReturnValue, Key Temp_struct_Variable, enum K2Node_Event_NewState, Weapon* K2Node_CustomEvent_Weapon, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Key K2Node_InputActionEvent_Key, float K2Node_Event_DeltaSeconds, bool CallFunc_HasAuthority_ReturnValue, Key K2Node_InputActionEvent_Key, const Vector K2Node_Event_StartPosition, const Vector K2Node_Event_EndPosition, Transform CallFunc_Conv_VectorToTransform_ReturnValue, FName CallFunc_GetRoleType_ReturnRoleType, bool K2Node_SwitchName_CmpSuccess, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, bool CallFunc_IsInFinisher_In, Actor* CallFunc_FinishSpawningActor_ReturnValue, Key K2Node_InputActionEvent_Key, SkeletalMeshComponent* CallFunc_GetCameraModeMesh_ReturnValue, SkeletalMeshComponent* CallFunc_GetCameraModeMesh_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, ApexGameState* K2Node_DynamicCast_AsApex_Game_State, bool K2Node_DynamicCast_bSuccess);// 0x43841ec

--------------------------------
Class: CharacterAddBuffSelfComponent_BP_C.CharacterAddBuffSelfComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x198, Size: 0x8]
	ParticleSystemAsync* RepairEffectFor3P;//[Offset: 0x1a0, Size: 0x8]
	ParticleSystemAsync* RepairEffectFor1P;//[Offset: 0x1a8, Size: 0x8]
	void OnLoadRepairShieldPS(AsyncLoaderBase* Loader);// 0x43841ec
	void BP_StartRepairShield(ApexCharacter* PlayerEnt);// 0x43841ec
	void BP_StopRepairShield(ApexCharacter* PlayerEnt);// 0x43841ec
	void BP_RepairShieldCompleted(ApexCharacter* PlayerEnt);// 0x43841ec
	void ExecuteUbergraph_CharacterAddBuffSelfComponent_BP(int EntryPoint, AsyncLoaderBase* K2Node_CustomEvent_Loader, bool CallFunc_IsValid_ReturnValue, ParticleSystemAsync* K2Node_DynamicCast_AsParticle_System_Async, bool K2Node_DynamicCast_bSuccess, ParticleSystemComponent* CallFunc_GetParticleComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ApexCharacter* K2Node_Event_PlayerEnt, enum CallFunc_GetShieldLevel_ReturnValue, LinearColor CallFunc_GetShieldLinearColor_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, ApexCharacter* K2Node_Event_PlayerEnt, ApexCharacter* K2Node_Event_PlayerEnt);// 0x43841ec

--------------------------------
Class: CharacterMagmaRiseComponent_BP_C.CharacterMagmaRiseComponent.ActorComponent.Object

--------------------------------
Class: AutoShootTargetComponent.ActorComponent.Object
	ApexCharacter* ApexCharacter;//[Offset: 0xf0, Size: 0x8]
	bool IsTeammate(Pawn* Other);// 0x3a97c30

--------------------------------
Class: EffectViewManager_BP_C.EffectViewManager.ActorComponent.Object

--------------------------------
Class: CharacterAudioEffectManager_BP_C.AudioEffectManager.ActorComponent.Object

--------------------------------
Class: RandowSpawnItemEntry
	int ItemID;//[Offset: 0x0, Size: 0x4]
	float Weight;//[Offset: 0x4, Size: 0x4]
	int ItemCount;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: Character_Phantom_BP_C.APGameCharacter_BP_C.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2070, Size: 0x8]
	void ReceiveBeginPlay();// 0x43841ec
	void ExecuteUbergraph_Character_Phantom_BP(int EntryPoint);// 0x43841ec

--------------------------------
Class: ClimbGuideActor_C.Actor.Object
	StaticMeshComponent* StaticMesh;//[Offset: 0x250, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x258, Size: 0x8]

--------------------------------
Class: Character_Octane_BP_C.APGameCharacter_BP_C.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2070, Size: 0x8]
	Octane_ProjectilePad_BP_C*[] LaunchPadList;//[Offset: 0x2078, Size: 0x10]
	float Perk100902003Damage;//[Offset: 0x2088, Size: 0x4]
	float Perk100902003TickInterval;//[Offset: 0x208c, Size: 0x4]
	bool IsTecCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2090, Size: 0x1]
	bool IsTecPasuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2091, Size: 0x1]
	bool IsPauseTecForPerk100902003;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2092, Size: 0x1]
	void CheckPerk100902003Pause(out bool Disable, bool CallFunc_HasPerk100902003_Has, bool CallFunc_Not_PreBool_ReturnValue);// 0x43841ec
	void HasPerk100902003(out bool Has, bool CallFunc_HasTag_ReturnValue);// 0x43841ec
	void GetTecPhaseDuration(out float PhaseDuration, float CallFunc_GetCharacterHealth_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x43841ec
	void CheckAndPlayAnimationSound(AnimMontage* CurrMontageAnim, AnimMontage* TriggerMontage, FName SectionName, AkAudioEvent* AkEvent, const AkExternalSourceInfo[] Temp_struct_Variable, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, const delegate Temp_delegate_Variable, SkeletalMeshComponent* CallFunc_GetCameraModeMesh_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, int CallFunc_PostEvent_ReturnValue, FName CallFunc_Montage_GetCurrentSection_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue);// 0x43841ec
	void OnMontagePlayEnd(AnimMontage* Montage, bool bInterrupted);// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void OnServerCreateLanchPad(Octane_ProjectilePad_BP_C* LaunchPadActor);// 0x43841ec
	void OnMontagePlayStart(AnimMontage* Montage);// 0x43841ec
	void OnApexSkillEvent(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x43841ec
	void BP_LateUpdateAnimationInstanceData(AnimInstance* AnimInstance);// 0x43841ec
	void ExecuteUbergraph_Character_Octane_BP(int EntryPoint, FString CallFunc_Conv_BoolToString_ReturnValue, AnimMontage* K2Node_CustomEvent_Montage, bool K2Node_CustomEvent_bInterrupted, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Octane_ProjectilePad_BP_C* K2Node_CustomEvent_LaunchPadActor, Octane_ProjectilePad_BP_C* CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, AnimMontage* K2Node_CustomEvent_Montage, int K2Node_CustomEvent_SkillID, enum K2Node_CustomEvent_SkillEvent, SkillEventParam* K2Node_CustomEvent_SkillEventParam, bool K2Node_SwitchEnum_CmpSuccess, AnimInstance* K2Node_Event_AnimInstance, APEXAnimInstance* K2Node_DynamicCast_AsAPEXAnim_Instance, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x43841ec

--------------------------------
Class: Octane_ProjectilePad_BP_C.OctanePadProjectile.SkillProjectileBase.UAEProjectile.SkillActorBase.DynamicMovementActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x830, Size: 0x8]
	DelayFlyProjMovementComponent* DelayFlyProjMovement;//[Offset: 0x838, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x840, Size: 0x8]
	StaticMeshComponent* projMesh;//[Offset: 0x848, Size: 0x8]
	ParticleSystemComponent* ParticleSystemTrail;//[Offset: 0x850, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x858, Size: 0x8]
	SphereComponent* Sphere_C;//[Offset: 0x860, Size: 0x8]
	SphereComponent* Sphere0;//[Offset: 0x868, Size: 0x8]
	SphereComponent* Sphere1;//[Offset: 0x870, Size: 0x8]
	SphereComponent* Sphere2;//[Offset: 0x878, Size: 0x8]
	bool IsJumpPadActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]
	bool IsStartDestroyCountdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x881, Size: 0x1]
	float RemainingDestroyCountdownTime;//[Offset: 0x884, Size: 0x4]
	Octane_JumpPad_BP_C* JumpPadBP;//[Offset: 0x888, Size: 0x8]
	bool IsJumpPadGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 0x1]
	bool DoubleJumpEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x891, Size: 0x1]
	bool IsClosePawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x892, Size: 0x1]
	bool IsDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x893, Size: 0x1]
	bool JumpPadGenerateProtectActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x894, Size: 0x1]
	float JumpPadGenerateProtectWaitTime;//[Offset: 0x898, Size: 0x4]
	bool IsDebugNoJumpPad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89c, Size: 0x1]
	bool IsMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89d, Size: 0x1]
	bool IsJumpPadLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89e, Size: 0x1]
	SkeletalMeshAsync* IdleAnimationAsync;//[Offset: 0x8a0, Size: 0x8]
	bool IsDebugStopWhenStartFly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a8, Size: 0x1]
	bool IsDebugNoProtect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a9, Size: 0x1]
	bool IsDebugNoStickGroundAndDynamicObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8aa, Size: 0x1]
	bool IsAlreadyFly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ab, Size: 0x1]
	bool LocationProtectEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ac, Size: 0x1]
	bool LocationProtectActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ad, Size: 0x1]
	Vector CurrentLocation;//[Offset: 0x8b0, Size: 0xc]
	float JumpPadInValidEmptyTime;//[Offset: 0x8bc, Size: 0x4]
	int AutopingJumppadPingType;//[Offset: 0x8c0, Size: 0x4]
	int AutopingJumppadPingID;//[Offset: 0x8c4, Size: 0x4]
	bool AutopingJumppadPingSetted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 0x1]
	bool IsAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c9, Size: 0x1]
	Actor* AttachedActor;//[Offset: 0x8d0, Size: 0x8]
	PrimitiveComponent* AttachedComponent;//[Offset: 0x8d8, Size: 0x8]
	float NextPauseTime;//[Offset: 0x8e0, Size: 0x4]
	Vector NewVar;//[Offset: 0x8e4, Size: 0xc]
	void OnRep_IsJumpPadLoaded();// 0x43841ec
	void PauseMeshAnimation(float CallFunc_GetTimeSeconds_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x43841ec
	void CheckAndFloatItemAround(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_VSize_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, const byte[] K2Node_MakeArray_Array, const Actor*[] K2Node_MakeArray_Array, Vector CallFunc_K2_GetActorLocation_ReturnValue, Actor*[] CallFunc_SphereOverlapActors_OutActors, bool CallFunc_SphereOverlapActors_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Actor* CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, PickUpWrapperActor* K2Node_DynamicCast_AsPick_Up_Wrapper_Actor, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue);// 0x43841ec
	void InitAutoPingParams();// 0x43841ec
	void StopAutoPing(PingManagerComponent* CallFunc_GetPingManagerComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void CheckAndStartAutoPing(Vector WorldPosition, out int PingID, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, PingManagerComponent* CallFunc_GetPingManagerComponent_ReturnValue, int CallFunc_StartPingItemFromActorByDS_ReturnValue);// 0x43841ec
	int GetPingType();// 0x43841ec
	void HasJumppad(out bool haspad, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Actor*[] CallFunc_GetAttachedActors_OutActors, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Octane_JumpPad_BP_C* K2Node_DynamicCast_AsOctane_Jump_Pad_BP, bool K2Node_DynamicCast_bSuccess);// 0x43841ec
	void UpdateJumpPadGenerateProtection(float ticktime, float LocalTick, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetAttachParentActor_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsActive_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, Actor* CallFunc_GetAttachParentActor_ReturnValue, APGameCharacter_BP_C* K2Node_DynamicCast_AsAPGame_Character_BP, bool K2Node_DynamicCast_bSuccess, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, HitResult CallFunc_MakeHitResult_ReturnValue, HitResult CallFunc_MakeHitResult_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x43841ec
	void IsAttachedToAnotherActor(out bool Attached, out FString ActorName, Actor* CallFunc_GetAttachParentActor_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess);// 0x43841ec
	void DetachAllParents();// 0x43841ec
	void DestroyAllAttachments(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Actor*[] CallFunc_GetAttachedActors_OutActors, Actor* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PickUpWrapperActor* K2Node_DynamicCast_AsPick_Up_Wrapper_Actor, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x43841ec
	void CheckAndResetSkillRelease();// 0x43841ec
	void IgnoreOwnerCollisionAndVisible(APGameCharacter_BP_C* LocalParentCharacter, bool CallFunc_IsValid_ReturnValue, CapsuleComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, APGameCharacter_BP_C* K2Node_DynamicCast_AsAPGame_Character_BP, bool K2Node_DynamicCast_bSuccess);// 0x43841ec
	void PrintDebug(FString Info1, FString Info2, bool Force, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x43841ec
	void AddStickDynamicObject(Actor* Actor, PrimitiveComponent* Component, PrimitiveComponent* LocaHittedlComponent, Actor* LocalHittedActor, BinActor* K2Node_DynamicCast_AsBin_Actor, bool K2Node_DynamicCast_bSuccess, TrainCoach* K2Node_DynamicCast_AsTrain_Coach, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetDisplayName_ReturnValue, bool CallFunc_IsValid_ReturnValue, Octane_ProjectilePad_BP_C* K2Node_DynamicCast_AsOctane_Projectile_Pad_BP, bool K2Node_DynamicCast_bSuccess, Octane_JumpPad_BP_C* K2Node_DynamicCast_AsOctane_Jump_Pad_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, ApexDoor* K2Node_DynamicCast_AsApex_Door, bool K2Node_DynamicCast_bSuccess);// 0x43841ec
	void StickGroundOrDynamicObject(int SameHitNormalCount, float HitLowestHeight, Vector HitNormal, Vector[] Hit3Normal, bool IsChangeRotationWith3Point, int Hit3PositionNumber, int LowestPositionIndex, bool[] Hit3Position_Status, Vector[] Hit3Position, Vector LocalHitPosition, Vector LocalRelativeLocation, PrimitiveComponent* LocalHittedComponent, Actor* LocalHittedActor, Vector CallFunc_K2_GetComponentLocation_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, SphereComponent*[] K2Node_MakeArray_Array, int CallFunc_Array_Length_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const bool Temp_bool_Variable, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, const bool Temp_bool_Variable, int Temp_int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Cross_VectorVector_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Vector CallFunc_Multiply_VectorInt_ReturnValue, const Actor*[] K2Node_MakeArray_Array, Rotator CallFunc_MakeRotFromZ_ReturnValue, const byte[] K2Node_MakeArray_Array, bool CallFunc_K2_SetActorRotation_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SphereComponent*[] K2Node_MakeArray_Array, const Vector Temp_struct_Variable, SphereComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, int CallFunc_Array_Add_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Actor* CallFunc_GetAttachParentActor_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_SphereTraceSingleForObjects_OutHit, bool CallFunc_SphereTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_EqualEqual_VectorVector_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_K2_TeleportTo_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, SphereComponent* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, Rotator CallFunc_MakeRotFromZ_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_RotatorToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x43841ec
	void OnDestroyCountdownStart(bool isDestroybyDamage);// 0x43841ec
	void ReceiveTick(float DeltaSeconds);// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void OnLaunchGrenade();// 0x43841ec
	void ReceiveEndPlay(byte EndPlayReason);// 0x43841ec
	void OnLaunchHero();// 0x43841ec
	void GenerateJumpad();// 0x43841ec
	void OnMeshLoadFinished(AsyncLoaderBase* Loader);// 0x43841ec
	void PlayIdleAnimaion(bool PauseFirstFrame);// 0x43841ec
	void OnAnimLoadFinished(AsyncLoaderBase* Loader);// 0x43841ec
	void SwitchState(byte State, Octane_JumpPad_BP_C* JumpPad);// 0x43841ec
	void OnJumpPadLoaded(Octane_JumpPad_BP_C* JumpPad);// 0x43841ec
	void On JumpPad Generated();// 0x43841ec
	void SwitchProjectileCollisionToStatic();// 0x43841ec
	void BroadcastSwitchState(byte State);// 0x43841ec
	void StopProjectilePadAndStartJumpPad();// 0x43841ec
	void BndEvt__DelayFlyProjMovement_K2Node_ComponentBoundEvent_0_OnDynamicStopDelegate__DelegateSignature(out const HitResult ImpactResult, bool bServer, Actor* Owner);// 0x43841ec
	void BndEvt__DelayFlyProjMovement_K2Node_ComponentBoundEvent_1_OnDynamicBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity, bool bServer, int BounceNum, Actor* Owner);// 0x43841ec
	void BndEvt__CustomCollisionBox_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x43841ec
	void OnCharacterCameraModeSwitched_BP(enum NewMode);// 0x43841ec
	void SetNextPauseTime();// 0x43841ec
	void SetEnableSkeleton();// 0x43841ec
	void BP_StartFly(Vector InitLocation, Rotator InitRotation, Vector InitVelocity);// 0x43841ec
	void OnServerStartFlyInfoRecivedBP();// 0x43841ec
	void ExecuteUbergraph_Octane_ProjectilePad_BP(int EntryPoint, bool CallFunc_HasStartFly_ReturnValue, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Transform CallFunc_MakeTransform_ReturnValue, bool K2Node_CustomEvent_isDestroybyDamage, float K2Node_Event_DeltaSeconds, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, bool CallFunc_HasAuthority_ReturnValue, byte K2Node_Event_EndPlayReason, const delegate Temp_delegate_Variable, bool CallFunc_HasAuthority_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, const delegate Temp_delegate_Variable, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, const delegate Temp_delegate_Variable, bool CallFunc_HasAuthority_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, bool K2Node_CustomEvent_PauseFirstFrame, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, SkeletalMeshAsync* CallFunc_PlayAnimationAsync_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, byte K2Node_CustomEvent_State, Octane_JumpPad_BP_C* K2Node_CustomEvent_JumpPad, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, const delegate Temp_delegate_Variable, SkeletalMeshAsync* CallFunc_PlayAnimationAsync_ReturnValue, Octane_JumpPad_BP_C* K2Node_CustomEvent_JumpPad, bool CallFunc_HasAuthority_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, const delegate Temp_delegate_Variable, bool CallFunc_IsTeammate_ReturnValue, const delegate Temp_delegate_Variable, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, byte K2Node_CustomEvent_State, const delegate Temp_delegate_Variable, SkeletalMeshAsync* CallFunc_PlayAnimationAsync_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Character_Octane_BP_C* K2Node_DynamicCast_AsCharacter_Octane_BP, bool K2Node_DynamicCast_bSuccess, const delegate Temp_delegate_Variable, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SkeletalMeshAsync* CallFunc_SetSkeletalMeshAsync_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Octane_JumpPad_BP_C* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_HasJumppad_haspad, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_CheckAndStartAutoPing_PingID, bool CallFunc_HasAuthority_ReturnValue, const delegate Temp_delegate_Variable, SkeletalMeshAsync* CallFunc_PlayAnimationAsync_ReturnValue, const HitResult K2Node_ComponentBoundEvent_ImpactResult, bool K2Node_ComponentBoundEvent_bServer, Actor* K2Node_ComponentBoundEvent_Owner, const HitResult K2Node_ComponentBoundEvent_ImpactResult, const Vector K2Node_ComponentBoundEvent_ImpactVelocity, bool K2Node_ComponentBoundEvent_bServer, int K2Node_ComponentBoundEvent_BounceNum, Actor* K2Node_ComponentBoundEvent_Owner, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, PrimitiveComponent* K2Node_ComponentBoundEvent_HitComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, Vector K2Node_ComponentBoundEvent_NormalImpulse, const HitResult K2Node_ComponentBoundEvent_Hit, PickUpWrapperActor* K2Node_DynamicCast_AsPick_Up_Wrapper_Actor, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAuthority_ReturnValue, enum K2Node_Event_NewMode, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_LimitVelocity_ReturnValue, Vector K2Node_CustomEvent_InitLocation, Rotator K2Node_CustomEvent_InitRotation, Vector K2Node_CustomEvent_InitVelocity, bool CallFunc_IsPlaying_ReturnValue, bool CallFunc_IsCharacterAutonomousProxyOrObViewTarget_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, AudioEventAsync* CallFunc_PostEventAtLocationAsync_ReturnValue, bool CallFunc_HasStartFly_ReturnValue);// 0x43841ec

--------------------------------
Class: OctanePadProjectile.SkillProjectileBase.UAEProjectile.SkillActorBase.DynamicMovementActor.Actor.Object
	CustomCollisionBox* CustomCollisionBox;//[Offset: 0x7f8, Size: 0x8]
	DelayFlyProjMovementComponent* DelayFlyProjMovementComponent;//[Offset: 0x800, Size: 0x8]
	Vector2D LowThrowMovementParam;//[Offset: 0x808, Size: 0x8]
	Vector2D HighThrowMovementParam;//[Offset: 0x810, Size: 0x8]
	float SpeedForLow;//[Offset: 0x818, Size: 0x4]
	float SpeedForHigh;//[Offset: 0x81c, Size: 0x4]
	float LowThrowPitchOffset;//[Offset: 0x820, Size: 0x4]
	float HighThrowPitchOffset;//[Offset: 0x824, Size: 0x4]
	float SpeedForLowInTpp;//[Offset: 0x828, Size: 0x4]
	float SpeedForHightInTpp;//[Offset: 0x82c, Size: 0x4]

--------------------------------
Class: DelayFlyProjMovementComponent.ApexProjectileMovementComponent.DynamicMovementComponent_Projetile.DynamicMovementComponent.MovementComponent.ActorComponent.Object
	float ThrowLowGravityScale;//[Offset: 0x550, Size: 0x4]
	float ThrowHighGravityScale;//[Offset: 0x554, Size: 0x4]
	float StraightLineDistance;//[Offset: 0x558, Size: 0x4]
	bool bResumeMoveAfterImpactWithNoLostFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 0x1]
	Vector LastVelocityBeforeStop;//[Offset: 0x560, Size: 0xc]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x570, Size: 0x8]
	void ResumeMoveAfterImpactWithNoLost();// 0x3b602f0
	void HandleOnProjectileBounce(out const HitResult ImpactResult, out const Vector ImpactVelocity, bool bServer, int BounceNum, Actor* Owner);// 0x3b60118

--------------------------------
Class: ApexProjectileMovementComponent.DynamicMovementComponent_Projetile.DynamicMovementComponent.MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedMeshComponent;//[Offset: 0x3e8, Size: 0x8]
	SceneComponent* UpdatedMeshTracingComponent;//[Offset: 0x3f0, Size: 0x8]
	ApexSkillThrowerProjectileData* ApexSkillThrowerProjectileData;//[Offset: 0x3f8, Size: 0x8]
	ApexSkillRotator* ApexSkillRotator;//[Offset: 0x400, Size: 0x8]
	bool bResetRotationOnStopSimulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	bool NoTickOnCharacterSimulateProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 0x1]
	float InterpolateSpeed;//[Offset: 0x40c, Size: 0x4]
	float InterpolateSpeedRate;//[Offset: 0x410, Size: 0x4]
	float InterpolateFrameNumOffset;//[Offset: 0x414, Size: 0x4]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	float DebugDrawLifeTime;//[Offset: 0x41c, Size: 0x4]
	delegate OnDynamicFlyDistanceLimitReachedDelegate;//[Offset: 0x458, Size: 0x10]
	ApexProjectilePosture ApexProjectilePosture;//[Offset: 0x468, Size: 0xd4]
	bool bTickUpdateMeshInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 0x1]
	bool bTickUpdateMeshTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53d, Size: 0x1]
	float UpdatedMeshInterpolationTime;//[Offset: 0x540, Size: 0x4]
	void UpdateApexProjectilePosture(Actor* OwnerApexCharacter, bool bRefreshUpdatedComponent);// 0x3a15d8c
	void TickUpdateMeshTracing(bool bTick);// 0x3a15c3c
	void TickUpdateMeshInterpolation(bool bTick);// 0x3a15cc8
	void PostDynamicStopEvent(out const HitResult HitResult, bool bServer, Actor* Owner);// 0x3a162a8
	void OnEventDynamicBounce(out const HitResult HitResult, out const Vector ImpactVelocity, bool bServer, int BounceNum, Actor* OwnerActor);// 0x3a160d0
	void OnDynamicStopSimulating(out const HitResult HitResult, bool bServer, Actor* Owner);// 0x3a163e8
	void OnDynamicFlyDistanceLimitReachedDelegate__DelegateSignature();// 0x43841ec
	bool GetTPPModeEnable();// 0x3a15d54
	ApexProjectilePosture GetPostureDataConst();// 0x3a15e5c
	ApexProjectilePosture GetPostureData();// 0x3a15f38
	byte GetOwnerCharacterRole();// 0x3a15c08
	bool CanStopOnImpactHit(out const HitResult HitResult);// 0x3a16014

--------------------------------
Class: ApexSkillThrowerProjectileData.SkillEventParam.Object
	float ThrowPower;//[Offset: 0x60, Size: 0x4]
	float UnitThrowPowerVecity;//[Offset: 0x64, Size: 0x4]
	float SimulatedGravityScale;//[Offset: 0x68, Size: 0x4]
	float GravityScale;//[Offset: 0x6c, Size: 0x4]
	float GravityBase;//[Offset: 0x70, Size: 0x4]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1]
	float Bounciness;//[Offset: 0x78, Size: 0x4]
	float BounceFraction;//[Offset: 0x7c, Size: 0x4]
	int BounceTimeLimit;//[Offset: 0x80, Size: 0x4]
	float BounceAngleLimit;//[Offset: 0x84, Size: 0x4]
	float BounceMinSpeedLimit;//[Offset: 0x88, Size: 0x4]
	float NormalSpeedDecreaseFraction;//[Offset: 0x8c, Size: 0x4]
	float MaxFlyDistance;//[Offset: 0x90, Size: 0x4]
	bool UseTPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bLaunchFromPawnEyeLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	float TPPPitchOffset;//[Offset: 0x98, Size: 0x4]
	float TPPYawOffset;//[Offset: 0x9c, Size: 0x4]
	byte AdjustGroundCollisionChannel;//[Offset: 0xa0, Size: 0x1]
	float AdjustGroundHeightUp;//[Offset: 0xa4, Size: 0x4]
	float AdjustGroundHeightDown;//[Offset: 0xa8, Size: 0x4]
	class Object[] MustBounceActorClassArray;//[Offset: 0xb0, Size: 0x10]
	class Object[] MustAttachActorClassArray;//[Offset: 0xc0, Size: 0x10]
	bool AdjustLocationAndRotationAfterStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	class Object[] TryPlaceActorClassArray;//[Offset: 0xd8, Size: 0x10]
	class ApexProjectileMovementComponent* ApexProjectileMovementComponentClass;//[Offset: 0xe8, Size: 0x8]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	float DrawDebugTime;//[Offset: 0xf4, Size: 0x4]
	bool bDrawCheckGroundDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	FName UpdatedComponentTag;//[Offset: 0xfc, Size: 0x8]
	class ActorComponent* UpdatedComponentClass;//[Offset: 0x108, Size: 0x8]
	FName UpdatedMeshComponentTag;//[Offset: 0x110, Size: 0x8]
	class ActorComponent* UpdatedMeshComponentClass;//[Offset: 0x118, Size: 0x8]
	bool bEnableAirFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	ParabolaAirFrictionData[] AirFrictionData;//[Offset: 0x128, Size: 0x10]
	float AirFrictionDataTimeScale;//[Offset: 0x138, Size: 0x4]
	bool ShouldStopBounce(const HitResult Hit);// 0x3a2864c
	SceneComponent* InitUpdatedMeshComponent(ActorComponent* ProjComp);// 0x3a28730
	SceneComponent* InitUpdatedComponent(ActorComponent* ProjComp);// 0x3a287b4
	void InitProjectileComponent(ActorComponent* ProjComp);// 0x3a28838
	Vector GetSimulatedLaunchVelocity(Actor* OwnerApexCharacter, Actor* Projectile, out float Time);// 0x3a28524
	Vector GetProjectileLaunchVelocity(Actor* OwnerApexCharacter, Actor* Projectile);// 0x3a28454
	HitResult GetHitLocation(Actor* OwnerApexCharacter, Actor* Projectile);// 0x3a2834c
	bool GetAdjustedLastLocationAndRotation(ActorComponent* ProjComp, out const HitResult StopSimulatingHitResult, out Vector outFinalLoc, out Rotator outFinalRot);// 0x3a281b4
	ApexProjectileMovementComponent* CreateProjectileComponent(Actor* Owner);// 0x3a288b4

--------------------------------
Class: ParabolaAirFrictionData
	float GravityScale;//[Offset: 0x0, Size: 0x4]
	float AirFriction;//[Offset: 0x4, Size: 0x4]
	float TimeDuration;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ApexSkillRotator.SkillEventParam.Object
	Rotator RotationRate;//[Offset: 0x60, Size: 0xc]
	bool bRotationInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	void DoRotator(float DeltaSec);// 0x3a2a58c

--------------------------------
Class: ApexProjectilePosture
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector LaunchVelocity;//[Offset: 0x18, Size: 0xc]
	Vector ProjectileMeshLocation;//[Offset: 0x24, Size: 0xc]
	Vector ProjectileMeshLaunchVelocity;//[Offset: 0x30, Size: 0xc]
	HitResult TargetHitResult;//[Offset: 0x3c, Size: 0x88]
	Vector TraceEnd;//[Offset: 0xc4, Size: 0xc]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]

--------------------------------
Class: CustomCollisionBox.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	CustomCollisionInfo CustomCollisionInfo;//[Offset: 0x590, Size: 0x58]
	void UpdateLocationCheck();// 0x3b50888

--------------------------------
Class: CustomCollisionInfo
	enum CollisionType;//[Offset: 0x0, Size: 0x1]
	bool bGeneratorListenEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bTraceUseObjectType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	byte[] TraceObjectTypes;//[Offset: 0x8, Size: 0x10]
	bool bOneFrameBeginEndOverlapSplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bCheckInServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bCheckInAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool bCheckInSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	float CheckInterval;//[Offset: 0x1c, Size: 0x4]
	PrimitiveComponent*[] OverlappedComps;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Octane_JumpPad_BP_C.LaunchPadActor.SkillActorBase.DynamicMovementActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x6e0, Size: 0x8]
	CapsuleComponent* DoorCheck;//[Offset: 0x6e8, Size: 0x8]
	StaticMeshComponent* ST_JumpPad_Collision;//[Offset: 0x6f0, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x6f8, Size: 0x8]
	bool DoubleJumpEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 0x1]
	APGameCharacter_BP_C*[] OverTimeCharacterList;//[Offset: 0x708, Size: 0x10]
	<APGameCharacter_BP_C*,float> LaunchedCharacterList;//[Offset: 0x718, Size: 0x50]
	<Actor*,Vector> LaunchedItemList;//[Offset: 0x768, Size: 0x50]
	bool IsDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 0x1]
	float CheckValidTriggerTime;//[Offset: 0x7bc, Size: 0x4]
	bool HasSwitchState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 0x1]
	bool HasEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c1, Size: 0x1]
	int GetPingType(int CallFunc_GetPingType_ReturnValue);// 0x43841ec
	void GetOwingCharacter(out APGameCharacter_BP_C* APChar, Octane_ProjectilePad_BP_C* CallFunc_GetProjectilePadParent_parent, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, APGameCharacter_BP_C* K2Node_DynamicCast_AsAPGame_Character_BP, bool K2Node_DynamicCast_bSuccess, APGameCharacter_BP_C* K2Node_DynamicCast_AsAPGame_Character_BP, bool K2Node_DynamicCast_bSuccess);// 0x43841ec
	void IsSameTeamJumpPad(ApexCharacterBase* APCharacter, out bool IsSame, APGameCharacter_BP_C* CallFunc_GetOwingCharacter_APChar, bool CallFunc_IsSameTeam_ReturnValue);// 0x43841ec
	void GetProjectilePadParent(out Octane_ProjectilePad_BP_C* Parent, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetAttachParentActor_ReturnValue, Octane_ProjectilePad_BP_C* K2Node_DynamicCast_AsOctane_Projectile_Pad_BP, bool K2Node_DynamicCast_bSuccess, Octane_ProjectilePad_BP_C* K2Node_DynamicCast_AsOctane_Projectile_Pad_BP, bool K2Node_DynamicCast_bSuccess);// 0x43841ec
	void LaunchCharacterStep(ApexCharacterBase* Character, bool CallFunc_IsSameTeamJumpPad_IsSame, Octane_PadJumpEffectActor_BP_C* CallFunc_GetPadJumpActor_PadJumpActor, Octane_PadJumpEffectActor_BP_C* CallFunc_ServerCreateOrRetrivePadJumpActor_PadJumpActor, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInVoid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, TrackingVisionModule* CallFunc_GetInstance_ReturnValue, Actor* CallFunc_GetAttachParentActor_ReturnValue, Octane_ProjectilePad_BP_C* K2Node_DynamicCast_AsOctane_Projectile_Pad_BP, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetAttachParentActor_ReturnValue, Octane_ProjectilePad_BP_C* K2Node_DynamicCast_AsOctane_Projectile_Pad_BP, bool K2Node_DynamicCast_bSuccess);// 0x43841ec
	void IgnoreCharacterWhenMove(ApexCharacter* Character, ApexCharacter* LocalCharacter, CapsuleComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void CheckValid(float Time, Octane_ProjectilePad_BP_C* projectilepad, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsAttachedToAnotherActor_attached, FString CallFunc_IsAttachedToAnotherActor_actorname, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, Octane_ProjectilePad_BP_C* CallFunc_GetProjectilePadParent_parent, bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void CheckItemValid(Actor* Item, out HitResult Hit, out bool Valid, float LocalDis, Actor* TempItem, LaunchItemConfigData CallFunc_GetLaunchItemConfig_OutLaunchItemConfigData, bool CallFunc_GetLaunchItemConfig_ReturnValue);// 0x43841ec
	void CheckLaunchedItemList();// 0x43841ec
	void LaunchItemStep3(Actor* Item, DynamicMovementComponent_Projetile* TempMoveComp, Actor* TempItem, DynamicMovementComponent_Projetile* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void LaunchItemStep2(Actor* Item, DynamicMovementComponent_Projetile* TempMoveComp, Actor* TempItem, bool CallFunc_HasAuthority_ReturnValue, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, DynamicMovementComponent_Projetile* CallFunc_GetComponentByClass_ReturnValue, Actor* CallFunc_GetAttachParentActor_ReturnValue, Octane_ProjectilePad_BP_C* K2Node_DynamicCast_AsOctane_Projectile_Pad_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void LaunchItemStep(Actor* Item, LaunchItemConfigData LaunchConfig, SceneComponent* TempRootComp, DynamicMovementComponent_Projetile* TempMoveComp, Actor* TempItem, Actor* CallFunc_GetAttachParentActor_ReturnValue, Octane_ProjectilePad_BP_C* K2Node_DynamicCast_AsOctane_Projectile_Pad_BP, bool K2Node_DynamicCast_bSuccess, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, LaunchItemConfigData CallFunc_GetLaunchItemConfig_OutLaunchItemConfigData, bool CallFunc_GetLaunchItemConfig_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetCastVelocity_NewVec, bool CallFunc_IsSimulatingPhysics_ReturnValue, PrimitiveComponent* K2Node_DynamicCast_AsPrimitive_Component, bool K2Node_DynamicCast_bSuccess, DynamicMovementComponent_Projetile* CallFunc_GetComponentByClass_ReturnValue, Vector CallFunc_GetComponentVelocity_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Abs_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasAuthority_ReturnValue);// 0x43841ec
	void ClientPreSimulateRealJump(APGameCharacter_BP_C* Character, APGameCharacter_BP_C* LocalCharacter, ApexCharacterMovementComponent* CallFunc_GetComponentByClass_ReturnValue, Vector CallFunc_GetCastVelocity_NewVec);// 0x43841ec
	void ClientPreSimulatePreJump(APGameCharacter_BP_C* Character, APGameCharacter_BP_C* LocalCharacter, ApexCharacterMovementComponent* CallFunc_GetComponentByClass_ReturnValue, Vector CallFunc_GetCastVelocity_NewVec);// 0x43841ec
	void GetPadJumpActor(ApexCharacterBase* Character, out Octane_PadJumpEffectActor_BP_C* PadJumpActor, Actor*[] CallFunc_GetAttachedActors_OutActors, bool Temp_bool_True_if_break_was_hit_Variable, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, Actor* CallFunc_Array_Get_Item, Octane_PadJumpEffectActor_BP_C* K2Node_DynamicCast_AsOctane_Pad_Jump_Effect_Actor_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x43841ec
	void UpdateAndCheckCharacterList(float Delta, APGameCharacter_BP_C* LocalCharacter, float LocalDuration, float LocalDelta, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, int CallFunc_Array_Add_ReturnValue, Actor*[] CallFunc_GetOverlappingActors_OverlappingActors, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, const float Temp_float_Variable, int Temp_int_Loop_Counter_Variable, APGameCharacter_BP_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, APGameCharacter_BP_C*[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, APGameCharacter_BP_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x43841ec
	void ServerCreateOrRetrivePadJumpActor(ApexCharacterBase* Charactor, out Octane_PadJumpEffectActor_BP_C* PadJumpActor, Octane_PadJumpEffectActor_BP_C* LocalPadJumpActor, ApexCharacterBase* LocalCharacter, bool CallFunc_HasAuthority_ReturnValue, Octane_PadJumpEffectActor_BP_C* CallFunc_GetPadJumpActor_PadJumpActor, bool CallFunc_IsValid_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Octane_PadJumpEffectActor_BP_C* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void GetCastVelocity(Vector InitVec, Vector InitPos, float Slope, float AddForce, Actor* ItemActor, out Vector NewVec, Vector ItemOwnerLocation, Vector2D Local2DPos, Vector2D Local2DVelocity, Vector localPos, Vector LoclVelocity, Actor* CallFunc_GetOwner_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_VSize2DSquared_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_VSize2DSquared_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue);// 0x43841ec
	void SaveVector(Vector Velocity, float GraviryScale, out Vector outputVelocity, out float outputGravityScale);// 0x43841ec
	void BP_OnDamage();// 0x43841ec
	void ReceiveTick(float DeltaSeconds);// 0x43841ec
	void BndEvt__ST_JumpPad_Collision_K2Node_ComponentBoundEvent_10_ComponentHitSignature__DelegateSignature(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x43841ec
	void BndEvt__ST_JumpPad_Collision_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void CheckLoadedState();// 0x43841ec
	void CheckDestroybycaustic poison();// 0x43841ec
	void BP_BlockDoorToDestroy();// 0x43841ec
	void LaunchCharacterStep_BP(ApexCharacterBase* Character);// 0x43841ec
	void ParentDoDetachAllParent_BP(Actor* TmpAct);// 0x43841ec
	void CheckLoadedState_BP();// 0x43841ec
	void DelayBroadcastSwitchState_BP();// 0x43841ec
	void InnerLaunchItem_BP(Actor* ItemActor, out const HitResult Hit);// 0x43841ec
	void CustomEvent(AsyncLoaderBase* Loader);// 0x43841ec
	void ExecuteUbergraph_Octane_JumpPad_BP(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, Actor* CallFunc_GetAttachParentActor_ReturnValue, PrimitiveComponent* K2Node_ComponentBoundEvent_HitComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, Vector K2Node_ComponentBoundEvent_NormalImpulse, const HitResult K2Node_ComponentBoundEvent_Hit, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, ApexCharacterBase* K2Node_DynamicCast_AsApex_Character_Base, bool K2Node_DynamicCast_bSuccess, PickUpWrapperActor* K2Node_DynamicCast_AsPick_Up_Wrapper_Actor, bool K2Node_DynamicCast_bSuccess, Octane_PadJumpEffectActor_BP_C* CallFunc_GetPadJumpActor_PadJumpActor, Octane_PadJumpEffectActor_BP_C* CallFunc_ServerCreateOrRetrivePadJumpActor_PadJumpActor, bool CallFunc_IsCanLaunchCharacter_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, Octane_ProjectilePad_BP_C* K2Node_DynamicCast_AsOctane_Projectile_Pad_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, StaticMeshAsync* CallFunc_SetStaticMeshAsync_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, float K2Node_Event_DeltaSeconds, APGameCharacter_BP_C* CallFunc_GetOwingCharacter_APChar, Octane_PadJumpEffectActor_BP_C* CallFunc_ServerCreateOrRetrivePadJumpActor_PadJumpActor, APGameCharacter_BP_C* CallFunc_GetOwingCharacter_APChar, int Temp_int_Variable, Controller* CallFunc_GetController_ReturnValue, APGameCharacter_BP_C* CallFunc_GetOwingCharacter_APChar, int CallFunc_AddBuff_ReturnValue, byte CallFunc_GetLocalRole_ReturnValue, APGameCharacter_BP_C* CallFunc_GetOwingCharacter_APChar, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacterBase* K2Node_Event_Character, Octane_ProjectilePad_BP_C* K2Node_DynamicCast_AsOctane_Projectile_Pad_BP, bool K2Node_DynamicCast_bSuccess, Actor* K2Node_Event_TmpAct, Octane_ProjectilePad_BP_C* K2Node_DynamicCast_AsOctane_Projectile_Pad_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, Actor* CallFunc_GetAttachParentActor_ReturnValue, Octane_ProjectilePad_BP_C* K2Node_DynamicCast_AsOctane_Projectile_Pad_BP, bool K2Node_DynamicCast_bSuccess, Actor* K2Node_Event_ItemActor, const HitResult K2Node_Event_Hit, ApexCharacterBase* K2Node_DynamicCast_AsApex_Character_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, const float Temp_float_Variable, Actor* CallFunc_GetAttachParentActor_ReturnValue, Octane_ProjectilePad_BP_C* K2Node_DynamicCast_AsOctane_Projectile_Pad_BP, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader);// 0x43841ec

--------------------------------
Class: Octane_PadJumpEffectActor_BP_C.LaunchPadEffectActor.SkillActorBase.DynamicMovementActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x550, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x558, Size: 0x8]
	float Timeline_LandingCameraShake_Pitch_C49DF95348DC01375A4FCB959A08044E;//[Offset: 0x560, Size: 0x4]
	byte Timeline_LandingCameraShake__Direction_C49DF95348DC01375A4FCB959A08044E;//[Offset: 0x564, Size: 0x1]
	TimelineComponent* Timeline_LandingCameraShake;//[Offset: 0x568, Size: 0x8]
	float Timeline_DoubleJumpCameraShake_Pitch_17A61CD2473AA4CCBAD2C59ED68A3698;//[Offset: 0x570, Size: 0x4]
	byte Timeline_DoubleJumpCameraShake__Direction_17A61CD2473AA4CCBAD2C59ED68A3698;//[Offset: 0x574, Size: 0x1]
	TimelineComponent* Timeline_DoubleJumpCameraShake;//[Offset: 0x578, Size: 0x8]
	float Timeline_LaunchCameraShake_Pitch_0829D6C04A8AC7549C980C974EA4B19E;//[Offset: 0x580, Size: 0x4]
	byte Timeline_LaunchCameraShake__Direction_0829D6C04A8AC7549C980C974EA4B19E;//[Offset: 0x584, Size: 0x1]
	TimelineComponent* Timeline_LaunchCameraShake;//[Offset: 0x588, Size: 0x8]
	float TimeLine_LaunchCameraShake_CurrPitch;//[Offset: 0x590, Size: 0x4]
	float TimeLine_DoubleCameraShake_CurrPitch;//[Offset: 0x594, Size: 0x4]
	float TimeLine_LandingCameraShake_CurrPitch;//[Offset: 0x598, Size: 0x4]
	bool DoubleJumpEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 0x1]
	float PreJumpFrozenTime;//[Offset: 0x5a0, Size: 0x4]
	enum CurrStateType;//[Offset: 0x5a4, Size: 0x1]
	int LandDelayStateProcessID;//[Offset: 0x5a8, Size: 0x4]
	Vector SavedInitMoveVelocity;//[Offset: 0x5ac, Size: 0xc]
	bool IsStrongJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]
	bool IsDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 0x1]
	bool DoubleJumpButtonEffectEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ba, Size: 0x1]
	ParticleSystemAsync* FlameTail_L;//[Offset: 0x5c0, Size: 0x8]
	ParticleSystemAsync* FlameTail_R;//[Offset: 0x5c8, Size: 0x8]
	AudioEventAsync* WindrushSound;//[Offset: 0x5d0, Size: 0x8]
	<enum,bool> PawnStateMap;//[Offset: 0x5d8, Size: 0x50]
	bool IsLocalController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 0x1]
	ApexCharacterBase* OwningCharacter;//[Offset: 0x630, Size: 0x8]
	bool IsSameTeamJumpPad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	bool EnableJumpInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x639, Size: 0x1]
	bool IsClientSlidingEnterLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63a, Size: 0x1]
	CurveFloat* DoubleJumpDirectionCurve;//[Offset: 0x640, Size: 0x8]
	void UpdateJumpInAirState(LaunchPadActionStatus ActionStatus, LaunchPadActionStatus CallFunc_GetLaunchPadActionStatus_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x43841ec
	void DebugPrint(FString Info1, FString Info2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x43841ec
	void PlayLandSound(ApexCharacterBase* LocalActor, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, bool CallFunc_IsCharacterAutonomousProxyOrObViewTarget_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase);// 0x43841ec
	void PlayLaunchSound(ApexCharacterBase* LocalActor, const AkExternalSourceInfo[] Temp_struct_Variable, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, const delegate Temp_delegate_Variable, bool CallFunc_IsCharacterAutonomousProxyOrObViewTarget_ReturnValue, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, enum CallFunc_GetLegendType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase);// 0x43841ec
	void IsOwnerLanded(out bool IsLanded, ApexCharacterBase* LocalCharacter, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase);// 0x43841ec
	void CheckAndUpdateState(float Tick, float LocalTick, ApexCharacterBase* LocalCharacter, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_SwitchState_IsSucceed, bool CallFunc_SwitchState_IsSucceed, bool CallFunc_SwitchState_IsSucceed, bool CallFunc_SwitchState_IsSucceed, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_HasState_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_IsOwnerLanded_IsLanded, bool CallFunc_IsLocallyControlled_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void SwitchState(enum State, int StateID, out bool IsSucceed, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsAllowSwitchState_IsAllow, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x43841ec
	void IsAllowSwitchState(enum State, int StateID, out bool IsAllow, enum NewState, int NewStateID, bool CallFunc_IsAllowSwitchStateNative_ReturnValue);// 0x43841ec
	void DestroyAndResetAll();// 0x43841ec
	void DoSprintOnceLand(bool IsBroadcast, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, Vector CallFunc_GetVelocity_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasState_ReturnValue);// 0x43841ec
	void LaunchCharacterVelocity(Vector InitVelocity, byte JumpType, bool IsBroadcast, bool ShouldOverrideXY, enum MovementAction, byte LocalJumpType, Vector LocalLaunchVelocity, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Vector CallFunc_GetCastVelocityByJumpType_Velocity, bool CallFunc_HasAuthority_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Actor* CallFunc_GetLaunchPadActor_ReturnValue, Actor* CallFunc_GetLaunchPadActor_ReturnValue, Actor* CallFunc_GetLaunchPadActor_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacterMovementComponent* CallFunc_GetComponentByClass_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, Vector CallFunc_K2_GetActorLocation_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacterMovementComponent* CallFunc_GetComponentByClass_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacterMovementComponent* CallFunc_GetComponentByClass_ReturnValue);// 0x43841ec
	void GetCastVelocityByJumpType(Vector InitVelocity, byte JumpType, out Vector Velocity, Vector LocalInitVelocity, bool K2Node_SwitchEnum_CmpSuccess, Vector CallFunc_GetCastVelocity_NewVec, bool CallFunc_HasAuthority_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetCastVelocity_NewVec, bool CallFunc_HasState_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_GetCastVelocity_NewVec, Vector CallFunc_Normal_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_GetCastVelocity_NewVec, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacterMovementComponent* CallFunc_GetComponentByClass_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasState_ReturnValue, Vector CallFunc_GetCastVelocity_NewVec, bool CallFunc_HasAuthority_ReturnValue, Vector CallFunc_GetCastVelocity_NewVec, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, Vector CallFunc_GetCastVelocity_NewVec, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasState_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, Vector CallFunc_GetCastVelocity_NewVec, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasState_ReturnValue, bool CallFunc_IsSprinting_ReturnValue, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, bool CallFunc_BooleanOR_ReturnValue, ApexCharacterMovementComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, Vector CallFunc_Normal_ReturnValue, const enum Temp_byte_Variable, Vector CallFunc_Multiply_VectorFloat_ReturnValue, bool CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, Vector CallFunc_Normal_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_Dot_VectorVector_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, Vector CallFunc_VLerp_ReturnValue, Vector CallFunc_GetCastVelocity_NewVec, bool CallFunc_HasAuthority_ReturnValue, Vector CallFunc_GetCastVelocity_NewVec);// 0x43841ec
	void GetCastVelocity(Vector InitVec, float Slope, float AddForce, out Vector NewVec, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue);// 0x43841ec
	void RefreshCrouch(ApexCharacterBase* LocalCharacter, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasState_ReturnValue);// 0x43841ec
	void ReduceSpeed(ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacterMovementComponent* CallFunc_GetComponentByClass_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue);// 0x43841ec
	void SaveVelovityAndState(const enum Temp_byte_Variable, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, ApexCharacterMovementComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_HasState_ReturnValue);// 0x43841ec
	void AddCameraPitch(float Pitch, float FPPScale, float TPPScale, float LocalPitch, float LocalTPPScale, float LocalFPPScale, float CallFunc_Multiply_FloatFloat_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, enum CallFunc_GetCurrentCameraMode_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x43841ec
	void ResetCameraPitch(float Temp_float_Variable, float Temp_float_Variable, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x43841ec
	void GetAttachedCharacter(out ApexCharacterBase* As CharacterBase, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacterBase* K2Node_DynamicCast_AsApex_Character_Base, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetAttachParentActor_ReturnValue, bool CallFunc_IsValid_ReturnValue, ApexCharacterBase* K2Node_DynamicCast_AsApex_Character_Base, bool K2Node_DynamicCast_bSuccess);// 0x43841ec
	void SetPlayerControllerEnable(bool Enable);// 0x43841ec
	void PlayJumpVO(const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, bool CallFunc_IsCharacterAutonomousProxyOrObViewTarget_ReturnValue, enum CallFunc_GetLegendType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue);// 0x43841ec
	void DestroyFollowEffectAndSound(ApexCharacterBase* LocalCharacter, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, int Temp_int_Variable, const delegate Temp_delegate_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, const delegate Temp_delegate_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, const delegate Temp_delegate_Variable, bool CallFunc_IsValid_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, bool CallFunc_IsValid_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, ParticleSystemComponent*[] CallFunc_GetComponentsByClass_ReturnValue, bool CallFunc_IsCharacterAutonomousProxyOrObViewTarget_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, FString CallFunc_GetPathName_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Contains_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void CreateFollowEffectAndSound(ApexCharacterBase* LocalActor, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsCharacterAutonomousProxyOrObViewTarget_ReturnValue, SkeletalMeshComponent* CallFunc_GetCurrentMesh_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, bool CallFunc_IsSameTeam_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, bool CallFunc_ShouldDisplayTailParticle_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase);// 0x43841ec
	void SetDoubleJumpButtonEnable(bool Enable, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess);// 0x43841ec
	void PlayDoubleJumpAnimation(ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, APEXAnimInstance* K2Node_DynamicCast_AsAPEXAnim_Instance, bool K2Node_DynamicCast_bSuccess, float CallFunc_Montage_Play_ReturnValue);// 0x43841ec
	void Timeline_LaunchCameraShake__FinishedFunc();// 0x43841ec
	void Timeline_LaunchCameraShake__UpdateFunc();// 0x43841ec
	void Timeline_DoubleJumpCameraShake__FinishedFunc();// 0x43841ec
	void Timeline_DoubleJumpCameraShake__UpdateFunc();// 0x43841ec
	void Timeline_LandingCameraShake__FinishedFunc();// 0x43841ec
	void Timeline_LandingCameraShake__UpdateFunc();// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void ReceiveEndPlay(byte EndPlayReason);// 0x43841ec
	void ReceiveTick(float DeltaSeconds);// 0x43841ec
	void BindEvent();// 0x43841ec
	void UnBindEvent();// 0x43841ec
	void OnInputJumpAction(Controller* Instigator);// 0x43841ec
	void StartServerPadJumpProgress(bool IsSameTeamJumpPad);// 0x43841ec
	void StartClientSimulatePadJumpProgress(bool IsSameTeamJumpPad);// 0x43841ec
	void BroadcastSwitchState(enum State, int StateID);// 0x43841ec
	void OnPreJump();// 0x43841ec
	void PlayCameraShake_StartJump();// 0x43841ec
	void OnRealJump();// 0x43841ec
	void OnDoubleJumpInAir();// 0x43841ec
	void OnLand();// 0x43841ec
	void PlayCameraShake_Land();// 0x43841ec
	void PlayCameraShake_DoubleJump();// 0x43841ec
	void OnIdle();// 0x43841ec
	void NotifyServerStrongJump();// 0x43841ec
	void NotifyServerDoubleJump();// 0x43841ec
	void BrocastPadJump(Vector Velocity, Vector Position, enum Action);// 0x43841ec
	void OnMovementModeChange(byte PreviousMovementMode, byte PreviousCustomMode, byte MovementMode, byte CustomMovementMode);// 0x43841ec
	void ClientNotifyJumpAction();// 0x43841ec
	void OnClientSlidingEnterLaunch();// 0x43841ec
	void SwitchState_BP(enum State, int StateID);// 0x43841ec
	void ExecuteUbergraph_Octane_PadJumpEffectActor_BP(int EntryPoint, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, byte K2Node_Event_EndPlayReason, float K2Node_Event_DeltaSeconds, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, Controller* K2Node_CustomEvent_Instigator, bool K2Node_CustomEvent_IsSameTeamJumpPad, bool K2Node_CustomEvent_IsSameTeamJumpPad, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, enum K2Node_CustomEvent_State, int K2Node_CustomEvent_StateID, bool CallFunc_SwitchState_IsSucceed, bool CallFunc_EqualEqual_ByteByte_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, bool CallFunc_IsLocallyControlled_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, bool CallFunc_IsLocallyControlled_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, bool CallFunc_IsCharacterAutonomousProxyOrObViewTarget_ReturnValue, Vector CallFunc_GetVelocity_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, float Temp_float_Variable, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, Vector CallFunc_GetVelocity_ReturnValue, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, bool CallFunc_IsOwnerLanded_IsLanded, int CallFunc_PostEvent_ReturnValue, bool CallFunc_IsOwnerLanded_IsLanded, Vector K2Node_CustomEvent_Velocity, Vector K2Node_CustomEvent_Position, enum K2Node_CustomEvent_Action, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacterMovementComponent* CallFunc_GetComponentByClass_ReturnValue, byte K2Node_CustomEvent_PreviousMovementMode, byte K2Node_CustomEvent_PreviousCustomMode, byte K2Node_CustomEvent_MovementMode, byte K2Node_CustomEvent_CustomMovementMode, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HasAuthority_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, enum K2Node_Event_state, int K2Node_Event_StateID, bool CallFunc_SwitchState_IsSucceed, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_SwitchState_IsSucceed, bool CallFunc_SwitchState_IsSucceed, bool CallFunc_SwitchState_IsSucceed, bool CallFunc_SwitchState_IsSucceed, bool CallFunc_SwitchState_IsSucceed, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsAllowSwitchState_IsAllow, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_SwitchState_IsSucceed, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, bool CallFunc_IsValid_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, PawnStateManager* CallFunc_GetPawnStateManager_ReturnValue, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, PawnStateManager* CallFunc_GetPawnStateManager_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacterBase* CallFunc_GetAttachedCharacter_As_CharacterBase, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, GIS_EventFlowDelegates* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, GIS_EventFlowDelegates* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Actor* CallFunc_GetLaunchPadActor_ReturnValue);// 0x43841ec

--------------------------------
Class: LaunchPadEffectActor.SkillActorBase.DynamicMovementActor.Actor.Object
	int CurJumpInAirCnt;//[Offset: 0x4d4, Size: 0x4]
	int MaxJumpInAirCnt;//[Offset: 0x4d8, Size: 0x4]
	<enum,LaunchPadActionStatus> LaunchPadActionStatus;//[Offset: 0x4e0, Size: 0x50]
	enum CurrStateType_C;//[Offset: 0x530, Size: 0x1]
	float StateProcessTime_C;//[Offset: 0x534, Size: 0x4]
	int StateProcessID_C;//[Offset: 0x538, Size: 0x4]
	float IdleTime_C;//[Offset: 0x53c, Size: 0x4]
	bool PawnStateEnterLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	Actor* LaunchPadActor;//[Offset: 0x544, Size: 0x8]
	void SwitchState_BP(enum State, int StateID);// 0x43841ec
	bool ShouldDisplayTailParticle();// 0x3c603ec
	void SetLaunchPadActor(Actor* InLaunchPadActor);// 0x3c6067c
	void ResetLaunchPadActionStatus();// 0x3c605a4
	void OnPawnStateChanged(enum[] StatesMoreThanOld, enum[] StatesLessThanOld);// 0x3c600e8
	void OnCharacterDeathEvent(Actor* DestroyedActor);// 0x3c6006c
	bool IsAllowSwitchStateNative(enum NewState, int NewProcessID);// 0x3c60320
	Actor* GetLaunchPadActor();// 0x3c60648
	LaunchPadActionStatus GetLaunchPadActionStatus(enum ActionStatusKey);// 0x3c605b8
	void DoLaunchPadAction(enum ActionStatusKey);// 0x3c60528
	void ClearLaunchPadAction(enum ActionStatusKey);// 0x3c60424
	bool CanDoLaunchPadAction(enum ActionStatusKey);// 0x3c604a0
	void BroadcastSwitchState_BP(enum State, int StateID);// 0x3c60258

--------------------------------
Class: LaunchPadActionStatus
	float MinInterval;//[Offset: 0x0, Size: 0x4]
	float ForceSpeed;//[Offset: 0x4, Size: 0x4]
	float ShapeCheckTolorenceRate;//[Offset: 0x8, Size: 0x4]
	int MaxActionCnt;//[Offset: 0xc, Size: 0x4]
	float LastActionTimestamp;//[Offset: 0x10, Size: 0x4]
	int ActionCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: APEXAnimInstance.AnimInstance.Object
	APEXAnimInstanceProxy Proxy;//[Offset: 0x270, Size: 0x770]
	enum PawnLegendType;//[Offset: 0x9e0, Size: 0x1]
	bool bPawnIsBangalore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e1, Size: 0x1]
	bool bPawnIsBloodhound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e2, Size: 0x1]
	bool bPawnIsCaustic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e3, Size: 0x1]
	bool bPawnIsCrypto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e4, Size: 0x1]
	bool bPawnIsDecoy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e5, Size: 0x1]
	bool bPawnIsGibraltar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e6, Size: 0x1]
	bool bPawnIsHorizon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e7, Size: 0x1]
	bool bPawnIsLifeline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e8, Size: 0x1]
	bool bPawnIsLoba;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e9, Size: 0x1]
	bool bPawnIsMirage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ea, Size: 0x1]
	bool bPawnIsOctane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9eb, Size: 0x1]
	bool bPawnIsPathfinder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ec, Size: 0x1]
	bool bPawnIsPhantom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ed, Size: 0x1]
	bool bPawnIsReidel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ee, Size: 0x1]
	bool bPawnIsRevenant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ef, Size: 0x1]
	bool bPawnIsSeeker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f0, Size: 0x1]
	bool bPawnIsSpider;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f1, Size: 0x1]
	bool bPawnIsWattson;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f2, Size: 0x1]
	bool bPawnIsWraith;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f3, Size: 0x1]
	bool bPawnIsDJ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f4, Size: 0x1]
	bool bPawnIsMonkeyKing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f5, Size: 0x1]
	Vector ZipVerticalHandLocation;//[Offset: 0x9f8, Size: 0xc]
	RandomPlayerSequenceEntryContainer TppIdleRandomContainer;//[Offset: 0xa08, Size: 0x10]
	bool TppIdleRandomContainerIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa18, Size: 0x1]
	AnimSequence* ZiplineStart_Horizontal_Unarmed;//[Offset: 0xa20, Size: 0x8]
	AnimSequence* ZiplineStart_Horizontal_Pistol;//[Offset: 0xa28, Size: 0x8]
	AnimSequence* ZiplineStart_Horizontal_Rifle;//[Offset: 0xa30, Size: 0x8]
	AnimSequence* ZiplineStart_Vertical_Unarmed;//[Offset: 0xa38, Size: 0x8]
	AnimSequence* ZiplineStart_Vertical_Pistol;//[Offset: 0xa40, Size: 0x8]
	AnimSequence* ZiplineStart_Vertical_Rifle;//[Offset: 0xa48, Size: 0x8]
	AnimSequence* ZiplineLoop_Horizontal_Unarmed;//[Offset: 0xa50, Size: 0x8]
	AnimSequence* ZiplineLoop_Horizontal_Pistol;//[Offset: 0xa58, Size: 0x8]
	AnimSequence* ZiplineLoop_Horizontal_Rifle;//[Offset: 0xa60, Size: 0x8]
	AnimSequence* ZiplineLoop_Vertical_Unarmed;//[Offset: 0xa68, Size: 0x8]
	AnimSequence* ZiplineLoop_Vertical_Pistol;//[Offset: 0xa70, Size: 0x8]
	AnimSequence* ZiplineLoop_Vertical_Rifle;//[Offset: 0xa78, Size: 0x8]
	AnimSequence* ZiplineLoop_Horizontal_Skill;//[Offset: 0xa80, Size: 0x8]
	AnimSequence* ZiplineLoop_Vertical_Skill;//[Offset: 0xa88, Size: 0x8]
	bool ExposeEnableFootIk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa90, Size: 0x1]
	float ExposeLeftFootOffsetZ;//[Offset: 0xa94, Size: 0x4]
	float ExposeRightFootOffsetZ;//[Offset: 0xa98, Size: 0x4]
	float ExposePelvisOffset;//[Offset: 0xa9c, Size: 0x4]
	Vector ExposeLeftFootOffsetVec;//[Offset: 0xaa0, Size: 0xc]
	Vector ExposeRightFootOffsetVec;//[Offset: 0xaac, Size: 0xc]
	Vector ExposePelvisOffsetVec;//[Offset: 0xab8, Size: 0xc]
	Rotator ExposePelvisOffsetRotation;//[Offset: 0xac4, Size: 0xc]
	byte AniMovementMode;//[Offset: 0xad4, Size: 0x1]
	bool B_Death;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad5, Size: 0x1]
	bool B_Sprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad6, Size: 0x1]
	bool bSprintPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad7, Size: 0x1]
	bool bFallingPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 0x1]
	bool bDirectionPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad9, Size: 0x1]
	Vector ViewRotationOffset;//[Offset: 0xadc, Size: 0xc]
	bool B_ScopeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae8, Size: 0x1]
	bool B_ScopeOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae9, Size: 0x1]
	bool B_Landed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaea, Size: 0x1]
	bool B_Frisk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaeb, Size: 0x1]
	bool B_KnockdownShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaec, Size: 0x1]
	float F_ParachuteTurnInput;//[Offset: 0xaf0, Size: 0x4]
	bool B_IsParachuteOverIntermediateVel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf4, Size: 0x1]
	bool ExposeParachuteOverIntermediateVelState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf5, Size: 0x1]
	bool B_SlidingToAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf6, Size: 0x1]
	bool B_AirToSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf7, Size: 0x1]
	byte E_PoseType;//[Offset: 0xaf8, Size: 0x1]
	float F_LogicSpeed;//[Offset: 0xafc, Size: 0x4]
	Vector V_LastLocation;//[Offset: 0xb00, Size: 0xc]
	bool B_HasWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0c, Size: 0x1]
	float MaxShovelYawAngle;//[Offset: 0xb10, Size: 0x4]
	bool MovementChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb14, Size: 0x1]
	bool Shoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb15, Size: 0x1]
	Rotator ShovelingRotation;//[Offset: 0xb18, Size: 0xc]
	Rotator nowShovelingRotation;//[Offset: 0xb24, Size: 0xc]
	float ShovelingRotationoffset;//[Offset: 0xb30, Size: 0x4]
	Rotator UpShovelingRotationAdd;//[Offset: 0xb34, Size: 0xc]
	bool ShouldJumpFromStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb40, Size: 0x1]
	bool ShouldJumpFromFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb41, Size: 0x1]
	bool ShouldLandingLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb42, Size: 0x1]
	bool ShouldLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb43, Size: 0x1]
	bool ShouldAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb44, Size: 0x1]
	bool ShouldGrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb45, Size: 0x1]
	bool Parachute_Landing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb46, Size: 0x1]
	bool Parachute_FreeFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb47, Size: 0x1]
	bool Parachute_Expression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb48, Size: 0x1]
	bool Parachute_Opening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb49, Size: 0x1]
	bool IsNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4a, Size: 0x1]
	bool ImmediatelyKnockdownPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4b, Size: 0x1]
	byte CurrentMovementMode;//[Offset: 0xb4c, Size: 0x1]
	byte CurrentCustomMovementMode;//[Offset: 0xb4d, Size: 0x1]
	byte LastMovementMode;//[Offset: 0xb4e, Size: 0x1]
	byte LastCustomMovementMode;//[Offset: 0xb4f, Size: 0x1]
	Vector MoveVelocity;//[Offset: 0xb50, Size: 0xc]
	Vector MoveDir;//[Offset: 0xb5c, Size: 0xc]
	Rotator ControlRotation;//[Offset: 0xb68, Size: 0xc]
	Vector GrapplingAimDirection;//[Offset: 0xb74, Size: 0xc]
	float Significance;//[Offset: 0xb80, Size: 0x4]
	enum AnimInstanceType;//[Offset: 0xb84, Size: 0x1]
	float UpdateDeltaTimeWhenNotRendered;//[Offset: 0xb88, Size: 0x4]
	byte AnimHandType;//[Offset: 0xb8c, Size: 0x1]
	bool AnimHandPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8d, Size: 0x1]
	bool bInLeftHandAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8e, Size: 0x1]
	bool bInRightHandAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8f, Size: 0x1]
	bool bInBothHandAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb90, Size: 0x1]
	bool bInLeftAndRightHandAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb91, Size: 0x1]
	bool bInLeftAndBothHandAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb92, Size: 0x1]
	bool bInRightAndBothHandAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb93, Size: 0x1]
	bool bInHandAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb94, Size: 0x1]
	bool bIsBeFinisher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb95, Size: 0x1]
	bool bOnSwitchThrowMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb96, Size: 0x1]
	float ExposeBlendThrowMode;//[Offset: 0xb98, Size: 0x4]
	Rotator ExposeWeaponRotation;//[Offset: 0xb9c, Size: 0xc]
	enum AnimRescueType;//[Offset: 0xba8, Size: 0x1]
	float RescueAnimPlayRate;//[Offset: 0xbac, Size: 0x4]
	enum ClimbOverAnimType;//[Offset: 0xbb0, Size: 0x1]
	float ClimbAnimVelocity;//[Offset: 0xbb4, Size: 0x4]
	Vector HangingPosition;//[Offset: 0xbb8, Size: 0xc]
	bool bFoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc4, Size: 0x1]
	float FoldGunFactor;//[Offset: 0xbc8, Size: 0x4]
	bool bInUseSyringe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbcc, Size: 0x1]
	bool bInUseShieldCell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbcd, Size: 0x1]
	bool bInBlendUseSyringe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbce, Size: 0x1]
	bool bInBlendUseShieldCell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbcf, Size: 0x1]
	bool bInBackpackSwitchGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd0, Size: 0x1]
	float BackpackSwitchGunAlpha;//[Offset: 0xbd4, Size: 0x4]
	bool bBackpackSwitchGunPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd8, Size: 0x1]
	bool bInSwitchingStandCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd9, Size: 0x1]
	bool bInSwitchingMoveDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbda, Size: 0x1]
	bool bSlideAlongSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbdb, Size: 0x1]
	bool BeginTransitionStandCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbdc, Size: 0x1]
	bool BeginTransitionMoveDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbdd, Size: 0x1]
	bool bMoveBackDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbde, Size: 0x1]
	bool bMoveLeftDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbdf, Size: 0x1]
	bool bUsingReplicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe0, Size: 0x1]
	AnimMontage* ADS_ON;//[Offset: 0xbe8, Size: 0x8]
	AnimMontage* ADS_OFF;//[Offset: 0xbf0, Size: 0x8]
	BlendSpace1D* Sprint;//[Offset: 0xbf8, Size: 0x8]
	AnimSequence* Breathe;//[Offset: 0xc00, Size: 0x8]
	AnimSequence* Frisk;//[Offset: 0xc08, Size: 0x8]
	AnimSequence* SingleRightHandGun;//[Offset: 0xc10, Size: 0x8]
	AnimSequence* SwitchGun;//[Offset: 0xc18, Size: 0x8]
	AnimSequence* Shovel;//[Offset: 0xc20, Size: 0x8]
	AnimSequence* SlideStart;//[Offset: 0xc28, Size: 0x8]
	AnimSequence* SlideLoop;//[Offset: 0xc30, Size: 0x8]
	AnimSequence* SlideEnd;//[Offset: 0xc38, Size: 0x8]
	AnimSequence* SlideAim;//[Offset: 0xc40, Size: 0x8]
	AnimSequence* RescueOther;//[Offset: 0xc48, Size: 0x8]
	AnimSequence* RescueSelf;//[Offset: 0xc50, Size: 0x8]
	AnimSequence* BeRescue;//[Offset: 0xc58, Size: 0x8]
	AnimSequence* ADSLeftShield;//[Offset: 0xc60, Size: 0x8]
	AnimSequence* ADSBreatheAdd;//[Offset: 0xc68, Size: 0x8]
	BlendSpace1D* TPPFoldGunBS1D;//[Offset: 0xc70, Size: 0x8]
	AnimSequence* ClimbMove;//[Offset: 0xc78, Size: 0x8]
	AnimSequence* ClimbHangingIdle;//[Offset: 0xc80, Size: 0x8]
	AnimSequence* ClimbVault;//[Offset: 0xc88, Size: 0x8]
	BlendSpace* MovementBSCache_Cur;//[Offset: 0xc90, Size: 0x8]
	BlendSpace* MovementBSCache_Dest;//[Offset: 0xc98, Size: 0x8]
	bool OrientationWarpingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca0, Size: 0x1]
	bool IsUsingBowNow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca1, Size: 0x1]
	BlendSpace* CurrentOrientationWarpingBS;//[Offset: 0xca8, Size: 0x8]
	int CurrentOrientationWarpingDirection;//[Offset: 0xcb0, Size: 0x4]
	CustomizedOrientationWarpingAngleSetting OrientationWarpingAngleSetting;//[Offset: 0xcb8, Size: 0x30]
	CustomizedOrientationWarpingAngleSetting OrientationWarpingAngleSetting_Crouch;//[Offset: 0xce8, Size: 0x30]
	CustomizedOrientationWarpingAngleSetting OrientationWarpingAngleSetting_Bow;//[Offset: 0xd18, Size: 0x30]
	CustomizedOrientationWarpingAngleSetting OrientationWarpingAngleSetting_Bow_Crouch;//[Offset: 0xd48, Size: 0x30]
	CharacterSpeedLayerConfig* CharacterSpeedLayerConfigStand;//[Offset: 0xd78, Size: 0x8]
	CharacterSpeedLayerConfig* CharacterSpeedLayerConfigCrouch;//[Offset: 0xd80, Size: 0x8]
	CharacterSpeedLayerConfig* CharacterSpeedLayerConfigStand_WithWeapon;//[Offset: 0xd88, Size: 0x8]
	CharacterSpeedLayerConfig* CharacterSpeedLayerConfigCrouch_WithWeapon;//[Offset: 0xd90, Size: 0x8]
	CharacterSpeedLayerConfig* CharacterSpeedLayerConfigStand_Syringe_ShieldCell;//[Offset: 0xd98, Size: 0x8]
	CharacterSpeedLayerConfig* CharacterSpeedLayerConfigCrouch_Syringe_ShieldCell;//[Offset: 0xda0, Size: 0x8]
	CharacterSpeedLayerConfig* CharacterSpeedLayerConfigStand_Aiming;//[Offset: 0xda8, Size: 0x8]
	CharacterSpeedLayerConfig* CharacterSpeedLayerConfigCrouch_Aiming;//[Offset: 0xdb0, Size: 0x8]
	float OrientationWarpingDirectionSwitchBuffer;//[Offset: 0xdb8, Size: 0x4]
	BlendSpace* JumpStart;//[Offset: 0xdc0, Size: 0x8]
	BlendSpace* FallingBS;//[Offset: 0xdc8, Size: 0x8]
	BlendSpace* LightLanding;//[Offset: 0xdd0, Size: 0x8]
	BlendSpace* HardLanding;//[Offset: 0xdd8, Size: 0x8]
	AimOffsetBlendSpace* AimOffsetBS;//[Offset: 0xde0, Size: 0x8]
	AnimSequence* HandAnimLeft;//[Offset: 0xde8, Size: 0x8]
	AnimSequence* HandAnimRight;//[Offset: 0xdf0, Size: 0x8]
	AnimSequence* HandAnimBoth;//[Offset: 0xdf8, Size: 0x8]
	AnimSequence* GoUpZipline;//[Offset: 0xe00, Size: 0x8]
	AnimSequence* LoopZipline;//[Offset: 0xe08, Size: 0x8]
	AnimSequence* GoDownZipline;//[Offset: 0xe10, Size: 0x8]
	BlendSpace* Parachute_XFreeFallingAnim;//[Offset: 0xe18, Size: 0x8]
	BlendSpace* Parachute_YFreeFallingAnim;//[Offset: 0xe20, Size: 0x8]
	AnimSequence* Parachute_PreOpenAnim;//[Offset: 0xe28, Size: 0x8]
	AnimSequence* Parachute_PostOpenAnim;//[Offset: 0xe30, Size: 0x8]
	AnimSequence* Parachute_LandingAnim;//[Offset: 0xe38, Size: 0x8]
	AnimSequence* EquipAttachment;//[Offset: 0xe40, Size: 0x8]
	float ParachuteTurnInput;//[Offset: 0xe64, Size: 0x4]
	bool bEnableEmotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe68, Size: 0x1]
	float HandAnimLeftPlayRate;//[Offset: 0xe6c, Size: 0x4]
	float HandAnimRightPlayRate;//[Offset: 0xe70, Size: 0x4]
	float HandAnimBothPlayRate;//[Offset: 0xe74, Size: 0x4]
	<FName,bool> ExposeSkillCustomParams;//[Offset: 0xe78, Size: 0x50]
	bool ExposeOpenCastAo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec8, Size: 0x1]
	bool ExposeCloseRightHandSeq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec9, Size: 0x1]
	bool ExposeCloseLeftHandSeq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeca, Size: 0x1]
	bool ExposeCloseTwoHandSeq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecb, Size: 0x1]
	bool ExposeCloseGrenadeLeftHandSeq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecc, Size: 0x1]
	bool ExposeGrenadeTwoHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecd, Size: 0x1]
	bool ExposeOpenCastAoSP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xece, Size: 0x1]
	bool ExposeDisableSmallEye;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecf, Size: 0x1]
	bool ExposeGrapplingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed0, Size: 0x1]
	bool ExposeSetPathfinderAimState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed1, Size: 0x1]
	bool ExposeSetPathfinderStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed2, Size: 0x1]
	BlendSpace* ExposeStandBs;//[Offset: 0xed8, Size: 0x8]
	BlendSpace* ExposeCrouchBs;//[Offset: 0xee0, Size: 0x8]
	BlendSpace* ExposeOneHandStandBs;//[Offset: 0xee8, Size: 0x8]
	BlendSpace* ExposeOneHandCrouchBs;//[Offset: 0xef0, Size: 0x8]
	BlendSpace1D* ExposeSprintBs;//[Offset: 0xef8, Size: 0x8]
	BlendSpace1D* ExposeOneHandSprintBs;//[Offset: 0xf00, Size: 0x8]
	BlendSpace* ExposeForwardFallingBs;//[Offset: 0xf08, Size: 0x8]
	BlendSpace* ExposeBackwardFallingBs;//[Offset: 0xf10, Size: 0x8]
	BlendSpace* ExposeSprintForwardFallingBs;//[Offset: 0xf18, Size: 0x8]
	BlendSpace* ExposeForwardMoveBs;//[Offset: 0xf20, Size: 0x8]
	BlendSpace* ExposeBackwardMoveBs;//[Offset: 0xf28, Size: 0x8]
	AimOffsetBlendSpace* ExposeSkillAo;//[Offset: 0xf30, Size: 0x8]
	BlendSpace* ExposeSkillBs;//[Offset: 0xf38, Size: 0x8]
	AnimSequence* ExposeSkillSeq;//[Offset: 0xf40, Size: 0x8]
	AnimSequence* ExposeGroundSlideStart;//[Offset: 0xf48, Size: 0x8]
	float ExposeDeltaTime;//[Offset: 0xf50, Size: 0x4]
	bool ExposeIsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf54, Size: 0x1]
	bool ExposeIsAimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf55, Size: 0x1]
	bool ExposeIsGibraltarAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf56, Size: 0x1]
	bool ExposeAimAndBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf57, Size: 0x1]
	float ExposeAlphaAimming;//[Offset: 0xf58, Size: 0x4]
	bool ExposeMoveForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5c, Size: 0x1]
	bool ExposeMoveBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5d, Size: 0x1]
	bool ExposeMoveLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5e, Size: 0x1]
	bool ExposeMoveRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5f, Size: 0x1]
	float ExposeAimPitch;//[Offset: 0xf60, Size: 0x4]
	float ExposeAimYaw;//[Offset: 0xf64, Size: 0x4]
	float ExposeClimbProgress;//[Offset: 0xf68, Size: 0x4]
	bool ExposePoseIsStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6c, Size: 0x1]
	bool ExposePoseIsCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6d, Size: 0x1]
	bool ExposePoseIsOneHandStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6e, Size: 0x1]
	bool ExposePoseIsOneHandCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6f, Size: 0x1]
	bool ExposePoseIsWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf70, Size: 0x1]
	bool ExposePoseIsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf71, Size: 0x1]
	bool ExposePoseIsClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf72, Size: 0x1]
	bool ExposePoseIsHang;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf73, Size: 0x1]
	bool ExposePoseIsClimbOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf74, Size: 0x1]
	bool ExposePoseIsSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf75, Size: 0x1]
	bool ExposePoseIsLittleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf76, Size: 0x1]
	bool ExposeLastMoveIsSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf77, Size: 0x1]
	bool ExposeZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf78, Size: 0x1]
	bool ExposeZiplineVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf79, Size: 0x1]
	bool ExposeZiplineOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7a, Size: 0x1]
	bool ExposeHoldGrenadeAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7b, Size: 0x1]
	bool ExposeHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7c, Size: 0x1]
	bool ExposeHoldHeatShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7d, Size: 0x1]
	bool ExposeInAttachmentShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7e, Size: 0x1]
	float ExposeHangLocation;//[Offset: 0xf80, Size: 0x4]
	Vector ExposeWeaponAimLocation;//[Offset: 0xf84, Size: 0xc]
	float ExposeAttachmentShakeAlpha;//[Offset: 0xf90, Size: 0x4]
	float ExposeBreathAlpha;//[Offset: 0xf94, Size: 0x4]
	float ExposeBreathAddRate;//[Offset: 0xf98, Size: 0x4]
	bool ExposeInFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9c, Size: 0x1]
	bool ExposeInStateFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9d, Size: 0x1]
	bool ExposeInSingleFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9e, Size: 0x1]
	bool ExposeMeleeAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9f, Size: 0x1]
	Vector LastLocation;//[Offset: 0xfa0, Size: 0xc]
	bool ExposeIsUnarmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfac, Size: 0x1]
	bool ExposeInArmedAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfad, Size: 0x1]
	bool ExposeIsLongGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfae, Size: 0x1]
	bool ExposeIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfaf, Size: 0x1]
	bool ExposeIsPeaceKeeper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb0, Size: 0x1]
	float ExposeRaiseWeaponTime;//[Offset: 0xfb4, Size: 0x4]
	float ExposeLowerWeaponTime;//[Offset: 0xfb8, Size: 0x4]
	float ExposeRaiseRateAfterClimb;//[Offset: 0xfbc, Size: 0x4]
	float ExposeRaiseAfterClimbTime;//[Offset: 0xfc0, Size: 0x4]
	Vector ExposeScalingCounter3D;//[Offset: 0xfc4, Size: 0xc]
	float ExposeWeaponTPPAO;//[Offset: 0xfd0, Size: 0x4]
	Vector ExposeWeaponTPPOffsetHand;//[Offset: 0xfd4, Size: 0xc]
	bool ExposeRandomBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe0, Size: 0x1]
	Vector ExposeBlendedVelocity;//[Offset: 0xfe4, Size: 0xc]
	float ExposeYawDelta;//[Offset: 0xff0, Size: 0x4]
	bool ExposeIsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff4, Size: 0x1]
	Vector ExposeHurtDir;//[Offset: 0xff8, Size: 0xc]
	bool ExposeIsReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1004, Size: 0x1]
	bool ExposePutOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1005, Size: 0x1]
	bool ExposePutOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1006, Size: 0x1]
	bool ExposeUseSmallEye;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1007, Size: 0x1]
	bool ExposePlantBomb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1008, Size: 0x1]
	bool ExposeDefuseBomb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1009, Size: 0x1]
	bool ExposeDefuseBombSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100a, Size: 0x1]
	bool ExposePawnStateFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100b, Size: 0x1]
	bool ExposePawnStateBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100c, Size: 0x1]
	bool ExposeWeaponCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100d, Size: 0x1]
	Vector ExposeBackSocketLocation;//[Offset: 0x1010, Size: 0xc]
	Rotator ExposeBackSocketRotation;//[Offset: 0x101c, Size: 0xc]
	bool ExposeLeftSideCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1028, Size: 0x1]
	float ExposeIKHandR;//[Offset: 0x102c, Size: 0x4]
	float ExposeIKHandL;//[Offset: 0x1030, Size: 0x4]
	float ExposeHangOffset;//[Offset: 0x1034, Size: 0x4]
	bool ExposeMoveNearlyZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1038, Size: 0x1]
	Rotator ExposeWeaponRotate;//[Offset: 0x103c, Size: 0xc]
	Vector ExposeWeaponLocation;//[Offset: 0x1048, Size: 0xc]
	bool ExposeIsBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1054, Size: 0x1]
	bool ExposeHasLookAtTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1055, Size: 0x1]
	Vector ExposeLookAtLocation;//[Offset: 0x1058, Size: 0xc]
	Rotator ExposeSpineRotation;//[Offset: 0x1064, Size: 0xc]
	float ExposeSkillAimPitchUp;//[Offset: 0x1070, Size: 0x4]
	float ExposeSkillAimPitchDown;//[Offset: 0x1074, Size: 0x4]
	float ExposeYawOffset;//[Offset: 0x1078, Size: 0x4]
	Vector ExposeTppArmLocation;//[Offset: 0x107c, Size: 0xc]
	bool ExposeViewNotOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1088, Size: 0x1]
	bool ExposeMoveVelNotZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1089, Size: 0x1]
	bool ExposeForceInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108a, Size: 0x1]
	bool ExposeForceInFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108b, Size: 0x1]
	bool ExposeForceInFallingDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108c, Size: 0x1]
	float ExposeSprintPlayRate;//[Offset: 0x1090, Size: 0x4]
	bool ExposeRandomIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1094, Size: 0x1]
	bool ExposeFireDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1095, Size: 0x1]
	bool ExposePadJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1096, Size: 0x1]
	bool ExposePadDoubleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1097, Size: 0x1]
	bool ExposePropsWeaponRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1098, Size: 0x1]
	float ExposeCastYaw;//[Offset: 0x109c, Size: 0x4]
	float ExposeGrapplingPitch;//[Offset: 0x10a0, Size: 0x4]
	float ExposeGrapplingYaw;//[Offset: 0x10a4, Size: 0x4]
	bool ExposeIsDroneActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a8, Size: 0x1]
	bool ExposeIsDecoy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a9, Size: 0x1]
	bool ExposeIsHeirloomOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10aa, Size: 0x1]
	float ExposeAimingAngle;//[Offset: 0x10ac, Size: 0x4]
	AnimSequence* ExposeZiplineStart;//[Offset: 0x10b0, Size: 0x8]
	AnimSequence* ExposeZiplineLoop;//[Offset: 0x10b8, Size: 0x8]
	AnimSequence* ExposeZiplineLoopSkill;//[Offset: 0x10c0, Size: 0x8]
	Vector ExposeZiplineHandGrabLoc;//[Offset: 0x10c8, Size: 0xc]
	float ExposeBlendedVelocityMakeRotZ;//[Offset: 0x10d4, Size: 0x4]
	bool ExposeFinalCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d8, Size: 0x1]
	bool ExposeReplaceHeirloomPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d9, Size: 0x1]
	bool ExposeIsFinalFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10da, Size: 0x1]
	bool ExposeIsFinalRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10db, Size: 0x1]
	bool ExposeLeftHandNotZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10dc, Size: 0x1]
	bool ExposeDistinguishUnarmedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10dd, Size: 0x1]
	bool ExposeSyringeLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10de, Size: 0x1]
	bool ExposeIsFinalSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10df, Size: 0x1]
	bool ExposeIsIkHandLOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e0, Size: 0x1]
	bool ExposeHeroIsMirageWattsonRevenant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e1, Size: 0x1]
	bool ExposeCloseBackSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e2, Size: 0x1]
	bool ExposeOpenBackSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e3, Size: 0x1]
	bool ExposeBaseMoveToFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e4, Size: 0x1]
	bool ExposeJumpStartToLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e5, Size: 0x1]
	bool ExposeDelayClimbTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e6, Size: 0x1]
	bool ExposeMoveVelocityTolerance400;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e7, Size: 0x1]
	bool ExposeZiplineNotLeftHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e8, Size: 0x1]
	bool ExposeZiplineSkillNotLeftHandUnarmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e9, Size: 0x1]
	bool ExposeBombState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ea, Size: 0x1]
	bool ExposeAimmingCrouchAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10eb, Size: 0x1]
	bool ExposeFoldGunNotSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ec, Size: 0x1]
	bool ExposeFinalHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ed, Size: 0x1]
	bool ExposeFinalOpenCastAo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ee, Size: 0x1]
	bool ExposeOpenCastAoInPathfinder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ef, Size: 0x1]
	bool ExposeIsRescuingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f0, Size: 0x1]
	bool ExposeFinalNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f1, Size: 0x1]
	bool ExposeFullBodySkillPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f2, Size: 0x1]
	bool ExposeEnableWeaponFireAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f3, Size: 0x1]
	bool ExposeOpenSkillAo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f4, Size: 0x1]
	bool ExposeOpenLeftHandSkillAo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f5, Size: 0x1]
	bool ExposeTwoHandToLeftHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f6, Size: 0x1]
	bool ExposeRightHandToTwoHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f7, Size: 0x1]
	bool ExposeSuppliesStateOrLeftAndBothHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f8, Size: 0x1]
	bool ExposeSyringeOrShieldCell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f9, Size: 0x1]
	bool ExposeParachuteState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10fa, Size: 0x1]
	float ExposeParachuteTurnInputVel;//[Offset: 0x10fc, Size: 0x4]
	bool ExposeMirageBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1100, Size: 0x1]
	bool ExposeEnableBotEmotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1101, Size: 0x1]
	bool ExposeLeftHandAnimBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1102, Size: 0x1]
	float ExposeLeftHandAnimFloat;//[Offset: 0x1104, Size: 0x4]
	float ExposeFinalWeaponTPPAO;//[Offset: 0x1108, Size: 0x4]
	bool ExposeSignificance002;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110c, Size: 0x1]
	bool ExposeSignificance0015;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110d, Size: 0x1]
	bool ExposeStandAndNearlyZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110e, Size: 0x1]
	bool ExposeCrouchAndNearlyZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110f, Size: 0x1]
	bool ExposeStandAndNearlyZeroInGrenadeAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1110, Size: 0x1]
	bool ExposeReventAndMonkeyKing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1111, Size: 0x1]
	bool ExposeOpenLeftHandAo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1112, Size: 0x1]
	bool ExposeRingDisPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1113, Size: 0x1]
	Rotator ExposeAimingAngleVel;//[Offset: 0x1114, Size: 0xc]
	bool ExposeLayeredSlotInWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1120, Size: 0x1]
	bool ExposeFinalFireOrBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1121, Size: 0x1]
	bool ExposeFinalUseSmallEye;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1122, Size: 0x1]
	bool ExposeUnarmedOrPutOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1123, Size: 0x1]
	bool ExposeUnarmedOrWraithPistolSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1124, Size: 0x1]
	bool ExposeClimbOverAndWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1125, Size: 0x1]
	bool ExposeHoldGrenadeState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1126, Size: 0x1]
	bool ExposeFinalStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1127, Size: 0x1]
	Vector ExposeHangLocationVel;//[Offset: 0x1128, Size: 0xc]
	Vector ExposeFinalHangOffset;//[Offset: 0x1134, Size: 0xc]
	bool ExposeEnableAimCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1140, Size: 0x1]
	bool ExposeEnableTwoHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1141, Size: 0x1]
	bool ExposeEnableTwoHandIkPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1142, Size: 0x1]
	bool ExposeIsFinalTwoHandToOneHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1143, Size: 0x1]
	bool ExposeIsZiplineNotLeftHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1144, Size: 0x1]
	Vector ExposeFppArmLocation;//[Offset: 0x1148, Size: 0xc]
	ApexCharacter* OwnerPawn;//[Offset: 0x1158, Size: 0x8]
	void StopAnimMontageByAnimTypeAndLayer(byte AnimType, byte AnimLayer);// 0x3959c58
	void SetExposeCloseLeftHandSeq(bool InExposeCloseLeftHandSeq);// 0x3959bd8
	void OnPoseChange(enum PrevState, enum NewState);// 0x395ab40
	void OnCharacterHitByOther(ApexCharacter* TargetCharacter, out const ApexDamageInfo DamageInfo);// 0x3959fd8
	void InnerHandlePlayAnimType(byte CharacterAnimType, float InPlayRate, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x395a3a8
	void HandlePlayerWeaponStateChanged(enum NewState, Weapon* Weapon);// 0x395aa78
	void HandlePlayerChangeFlyWingState(bool IsEnter);// 0x395a16c
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection);// 0x395a918
	void HandlePlayAnimTypeTwoViews(byte CharacterAnimType, float InPlayRate, float InTimeToStartMontageAt, bool bStopAllMontages, bool bIsFPP);// 0x395a1f8
	void HandlePlayAnimType(byte CharacterAnimType, bool bPlayOrStop);// 0x395a4fc
	void HandlePlayAnimMontageDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, APEXAnimInstance* AnimInstance, bool bStopAllMontage);// 0x3959d18
	void HandleOnMontageStop(AnimMontage* MontageToStop, bool IsInterrupted);// 0x3959f08
	void HandleMontagePlayByCameraModeDelegate(AnimMontage* FPPMontageToPlay, AnimMontage* TPPMontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection);// 0x395a770
	void HandleIsEnterNearDeathDelegate(bool InIsNearDeath);// 0x395a0e0
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float BlendTime);// 0x395a5cc

--------------------------------
Class: APEXAnimInstanceProxy.AnimInstanceProxy
	ApexCharacterBase* OwnerPawn;//[Offset: 0x6e8, Size: 0x8]
	APEXAnimInstance* ParentAnimInst;//[Offset: 0x6f0, Size: 0x8]
	bool LastMoveDirIsBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 0x1]
	bool LastMoveDirIsLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f9, Size: 0x1]
	OrientationWarpingAngleConfig OrientationWarpingAngle;//[Offset: 0x700, Size: 0x10]
	int CurrentOrientationWarpingDirectionIndex;//[Offset: 0x710, Size: 0x4]
	int PreviousOrientationWarpingDirectionIndex;//[Offset: 0x714, Size: 0x4]
	float CurrentPlayRate;//[Offset: 0x718, Size: 0x4]
	float CurrentDirectionValue;//[Offset: 0x71c, Size: 0x4]
	float CurrentGearValue;//[Offset: 0x720, Size: 0x4]
	int CurrentGearIndex;//[Offset: 0x724, Size: 0x4]
	int PreviousGearIndex;//[Offset: 0x728, Size: 0x4]
	bool CacheBlendToggleStandCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 0x1]
	FName IKHandRName;//[Offset: 0x744, Size: 0x8]
	FName IKHandLName;//[Offset: 0x74c, Size: 0x8]
	FName HeadSocketName;//[Offset: 0x754, Size: 0x8]
	float RandomIdleTime;//[Offset: 0x75c, Size: 0x4]
	float FireDelayTime;//[Offset: 0x760, Size: 0x4]
	float ForceInFallingRealtime;//[Offset: 0x768, Size: 0x4]
	bool DelayClimbOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76c, Size: 0x1]
	bool UpdateSkillStateLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76d, Size: 0x1]

--------------------------------
Class: AnimInstanceProxy

--------------------------------
Class: OrientationWarpingAngleConfig
	float[] OrientationWarpingAngles;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CustomizedOrientationWarpingAngleSetting
	CustomizedOrientationWarpingAngleRange[] RangeSetting;//[Offset: 0x0, Size: 0x10]
	float[] DirectionAngleSetting;//[Offset: 0x10, Size: 0x10]
	CustomizedOrientationWarpingIndexGroup[] DirectionGroups;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CustomizedOrientationWarpingAngleRange
	Vector2D AngleRange;//[Offset: 0x0, Size: 0x8]
	int DirectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CustomizedOrientationWarpingIndexGroup
	<int> DirectionGroup;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ApexDamageInfo

--------------------------------
Class: CharacterSpeedLayerConfig.Object
	SingleCharacterSpeedLayer[] Layers;//[Offset: 0x28, Size: 0x10]
	SingleCharacterSpeedLayer LowSpeedLayer;//[Offset: 0x38, Size: 0x10]
	int LowSpeedGearIndex;//[Offset: 0x48, Size: 0x4]
	float SpeedRangeBuffer;//[Offset: 0x4c, Size: 0x4]
	int CalculateCurrentLayerIndex(int inPreviousIndex, float inCurrentVelocity, out float outPlayRate);// 0x27a3634

--------------------------------
Class: SingleCharacterSpeedLayer
	float AnimationStandardVelocity;//[Offset: 0x0, Size: 0x4]
	float AnimationLayerSpeed;//[Offset: 0x4, Size: 0x4]
	Vector2D LayerRange;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: GIS_EventFlowDelegates.GameInstanceSubsystem.Subsystem.Object
	delegate OnSkillCastSuccessEvent;//[Offset: 0x30, Size: 0x10]
	delegate OnSkillInterruptEvent;//[Offset: 0x40, Size: 0x10]
	delegate OnSkillUseItemFinishedEvent;//[Offset: 0x50, Size: 0x10]
	delegate OnCharacterEnterState;//[Offset: 0x60, Size: 0x10]
	delegate OnCharacterLeaveState;//[Offset: 0x70, Size: 0x10]
	delegate OnApexInteractEvent;//[Offset: 0x80, Size: 0x10]
	delegate OnInputCharacterJumpAction;//[Offset: 0x90, Size: 0x10]
	delegate OnInteractTombBox;//[Offset: 0xa0, Size: 0x10]
	delegate OnCharacterBeginOverlap;//[Offset: 0xb0, Size: 0x10]
	delegate OnCharacterEndOverlap;//[Offset: 0xc0, Size: 0x10]
	delegate OnOpenUI;//[Offset: 0xd0, Size: 0x10]
	delegate OnCloseUI;//[Offset: 0xe0, Size: 0x10]
	delegate OnPingActionType;//[Offset: 0xf0, Size: 0x10]
	delegate OnResponsePingActionType;//[Offset: 0x100, Size: 0x10]
	delegate OnPlayerStartParachute;//[Offset: 0x110, Size: 0x10]
	delegate OnPlayerEndParachute;//[Offset: 0x120, Size: 0x10]
	delegate OnPlayerCirclePoisonStatusChanged;//[Offset: 0x130, Size: 0x10]
	delegate OnInteractSwitchGun;//[Offset: 0x140, Size: 0x10]
	delegate OnInteractGunReload;//[Offset: 0x150, Size: 0x10]
	delegate OnInteractStartFire;//[Offset: 0x160, Size: 0x10]
	delegate OnBulletHit;//[Offset: 0x170, Size: 0x10]
	delegate OnUnlimitedBulletChange;//[Offset: 0x180, Size: 0x10]
	delegate OnKillOther;//[Offset: 0x190, Size: 0x10]
	delegate OnTakeDamage;//[Offset: 0x1a0, Size: 0x10]
	delegate OnClientBulletHit;//[Offset: 0x1b0, Size: 0x10]
	delegate OnClientPostTakeDamage;//[Offset: 0x1c0, Size: 0x10]
	delegate OnBackpackDropItem;//[Offset: 0x1d0, Size: 0x10]
	delegate OnBackpackUseItemFinish;//[Offset: 0x1e0, Size: 0x10]
	delegate OnPickupItem;//[Offset: 0x1f0, Size: 0x10]
	delegate OnEquipWeapon;//[Offset: 0x200, Size: 0x10]
	delegate OnEquipWeaponAttachment;//[Offset: 0x210, Size: 0x10]
	delegate OnSwitchBackpack;//[Offset: 0x220, Size: 0x10]
	delegate OnBackpackUseItem;//[Offset: 0x230, Size: 0x10]
	delegate OnPlayerRescueEnd;//[Offset: 0x240, Size: 0x10]
	delegate OnDamagedTutorialTarget;//[Offset: 0x250, Size: 0x10]
	delegate OnBrokenTutorialTarget;//[Offset: 0x260, Size: 0x10]
	delegate OnHoldRecoverBanner;//[Offset: 0x270, Size: 0x10]
	delegate OnRebornTeammateSuccess;//[Offset: 0x280, Size: 0x10]
	delegate OnBrokenDoor;//[Offset: 0x290, Size: 0x10]
	delegate OnTeamAllOff;//[Offset: 0x2a0, Size: 0x10]
	delegate OnDirtyBombDeploy;//[Offset: 0x2b0, Size: 0x10]
	delegate OnDirtyBombActive;//[Offset: 0x2c0, Size: 0x10]
	delegate OnDirtyBombPickUp;//[Offset: 0x2d0, Size: 0x10]
	delegate OnDirtyBombDestroyByDamage;//[Offset: 0x2e0, Size: 0x10]
	delegate OnWeaponHeatChange;//[Offset: 0x2f0, Size: 0x10]
	delegate OnWeaponOverHeat;//[Offset: 0x300, Size: 0x10]
	delegate OnWeaponAutoReload;//[Offset: 0x310, Size: 0x10]
	delegate OnWeaponFinishDisruptor;//[Offset: 0x320, Size: 0x10]
	delegate OnWeaponFullFireRateChange;//[Offset: 0x330, Size: 0x10]
	delegate OnWeaponReachFullPreFireEnergy;//[Offset: 0x340, Size: 0x10]
	delegate OnWeapon3DUILoadComplete;//[Offset: 0x350, Size: 0x10]
	delegate OnWeaponReloadTimeChange;//[Offset: 0x360, Size: 0x10]
	delegate OnAutonomousCharacterBeginPlay;//[Offset: 0x370, Size: 0x10]
	delegate OnConfirmGuideImages;//[Offset: 0x380, Size: 0x10]
	delegate OnMovementJump;//[Offset: 0x3a0, Size: 0x10]
	void SkillUseItemFinishedEvent__DelegateSignature(Controller* Instigator, ItemDefineID ItemID, int count);// 0x43841ec
	void SkillInterruptEvent__DelegateSignature(Controller* Instigator, int SkillID);// 0x43841ec
	void SkillCastSuccessEvent__DelegateSignature(Controller* Instigator, int SkillID);// 0x43841ec
	void ResponsePingActionEvent__DelegateSignature(Controller* Instigator, enum DingType);// 0x43841ec
	void PingActionEvent__DelegateSignature(Controller* Instigator, enum PingType, Vector WorldPosition, ItemDefineID ItemDefineID);// 0x43841ec
	void OnWeaponReloadTimeChange__DelegateSignature(float RemainReloadTime);// 0x43841ec
	void OnWeaponReachFullPreFireEnergyDelegate__DelegateSignature(Controller* InController, ShootWeapon* InWeapon, bool bInFull);// 0x43841ec
	void OnWeaponOverHeatDelegate__DelegateSignature(Controller* InController, ShootWeapon* InWeapon);// 0x43841ec
	void OnWeaponHeatChange__DelegateSignature(float HeatPercent);// 0x43841ec
	void OnWeaponFullFireRateChangeDelegate__DelegateSignature(Controller* InController, ShootWeapon* InWeapon, bool bInFull);// 0x43841ec
	void OnWeaponFinishDisruptorDelegate__DelegateSignature(Controller* InController, ShootWeapon* InWeapon);// 0x43841ec
	void OnWeaponAutoReloadDelegate__DelegateSignature(Controller* InController, ShootWeapon* InWeapon, bool bInEnter, bool bInSuccess);// 0x43841ec
	void OnWeapon3DUILoadComplete__DelegateSignature();// 0x43841ec
	void OnUnlimitedBulletChange__DelegateSignature(Controller* Instigator);// 0x43841ec
	void OnTeamAllOff__DelegateSignature(Controller* LastKiller, int TeamID);// 0x43841ec
	void OnTakeDamage__DelegateSignature(Controller* Damaged, float DamageAmount, Controller* Instigator, Actor* Causer);// 0x43841ec
	void OnSwitchBackpack__DelegateSignature(Controller* Instigator, bool bOpen);// 0x43841ec
	void OnRespawnTeammateSuccess__DelegateSignature(Controller* Instigator, Controller* Reborned, int RebornedPlayerKey);// 0x43841ec
	void OnPlayerStartParachute__DelegateSignature(Controller* Instigator);// 0x43841ec
	void OnPlayerRescueEnd__DelegateSignature(Controller* Instigator, Controller* Rescued);// 0x43841ec
	void OnPlayerEndParachute__DelegateSignature(Controller* Instigator, enum LastTriggerReason);// 0x43841ec
	void OnPlayerEndOverlap__DelegateSignature(Controller* Instigator, Actor* OtherActor);// 0x43841ec
	void OnPlayerCirclePoisonStatusChanged__DelegateSignature(Controller* Instigator, bool bIsInCilrclePoison);// 0x43841ec
	void OnPlayerBeginOverlap__DelegateSignature(Controller* Instigator, Actor* OtherActor);// 0x43841ec
	void OnPickupItem__DelegateSignature(Controller* Instigator, ItemDefineID ItemDefineID, int count);// 0x43841ec
	void OnOpenUI__DelegateSignature(Controller* Instigator, UserWidget* OpenedUI);// 0x43841ec
	void OnMovementJump__DelegateSignature(Controller* Controller);// 0x43841ec
	void OnKillOther__DelegateSignature(Controller* Killer, Controller* Killed, out const ApgameDamageEventInfo InDamageEventInfo);// 0x43841ec
	void OnInteractTombBox__DelegateSignature(Controller* Instigator, Actor* Interacted);// 0x43841ec
	void OnInteractSwitchGun__DelegateSignature(Controller* Instigator, Actor* Interacted);// 0x43841ec
	void OnInteractStartFire__DelegateSignature(Controller* Instigator, Actor* Interacted);// 0x43841ec
	void OnInteractGunReload__DelegateSignature(Controller* Instigator, Actor* Interacted);// 0x43841ec
	void OnInteractBulletHit__DelegateSignature(Controller* Instigator, out const BulletHitInfoUploadData BulletHitInfoUploadData, int BulletType);// 0x43841ec
	void OnHoldRecoverBanner__DelegateSignature(Controller* Instigator, int RecoverBannerPlayerKey);// 0x43841ec
	void OnEquipWeapon__DelegateSignature(Controller* Instigator, ItemDefineID ItemDefineID);// 0x43841ec
	void OnEquipeWeaponAttachment__DelegateSignature(Controller* Instigator, ItemDefineID WeaponDefineID, ItemDefineID AttachmentDefineID);// 0x43841ec
	void OnDirtyBombPickUp__DelegateSignature(Controller* DirtyBombOwner, CausticDirtyBomb* DirtyBomb);// 0x43841ec
	void OnDirtyBombDestroyByDamage__DelegateSignature(Controller* DirtyBombOwner, CausticDirtyBomb* DirtyBomb);// 0x43841ec
	void OnDirtyBombDeploy__DelegateSignature(Controller* DirtyBombOwner, CausticDirtyBomb* DirtyBomb);// 0x43841ec
	void OnDirtyBombActive__DelegateSignature(Controller* DirtyBombOwner, CausticDirtyBomb* DirtyBomb);// 0x43841ec
	void OnDamagedTutorialTarget__DelegateSignature(Controller* Instigator, ApexTargetBase* TutorialTarget, float DamageValue);// 0x43841ec
	void OnConfirmGuideImages__DelegateSignature(Object* Element);// 0x43841ec
	void OnCloseUI__DelegateSignature(Controller* Instigator, UserWidget* ClosedUI);// 0x43841ec
	void OnClientPostTakeDamage__DelegateSignature(Pawn* Attacker, Actor* Victim, float Damage, int DamageType, enum AvatarDamagePosition);// 0x43841ec
	void OnClientBulletHit__DelegateSignature(Controller* Instigator, out const HitResult HitResult);// 0x43841ec
	void OnBrokenTutorialTarget__DelegateSignature(Controller* Instigator, ApexTargetBase* TutorialTarget);// 0x43841ec
	void OnBrokenDoor__DelegateSignature(Controller* Instigator, ApexDoor* BorkenDoor, bool IsExDoor, byte Damage);// 0x43841ec
	void OnBackpackUseItemFinish__DelegateSignature(Controller* Instigator, ItemDefineID ItemDefineID, bool bSucceed);// 0x43841ec
	void OnBackpackUseItem__DelegateSignature(Controller* Instigator, ItemDefineID ItemDefineID, int count);// 0x43841ec
	void OnBackpackDropItem__DelegateSignature(Controller* Instigator, ItemDefineID ItemDefineID, int count);// 0x43841ec
	void OnAutonomousCharacterBeginPlay__DelegateSignature(ApexCharacter* InitCharacter);// 0x43841ec
	static GIS_EventFlowDelegates* GetEventFlowDelegates(const Object* WorldContextObject);// 0x3c04ddc
	static void BroadcastOnOpenUI(Object* OpenedUI);// 0x3c04d70
	static void BroadcastOnConfirmGuideImages(Object* WorldContextObject, Object* Element);// 0x3c04c4c
	static void BroadcastOnCloseUI(Object* ClosedUI);// 0x3c04d04
	void ApexPawnSateLeave__DelegateSignature(Controller* Instigator, enum StateID);// 0x43841ec
	void ApexPawnSateEnter__DelegateSignature(Controller* Instigator, enum StateID);// 0x43841ec
	void ApexInteractEvent__DelegateSignature(Controller* Instigator, Actor* Interacted, enum InteractType);// 0x43841ec
	void ApexCharacterOnInputJumpActionEvent__DelegateSignature(Controller* Instigator);// 0x43841ec

--------------------------------
Class: ApgameDamageEventInfo
	bool bWithDisruptorEnergy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ApexTargetBase.DynamicMovementActor.Actor.Object
	bool bInfiniteHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1]
	float Health;//[Offset: 0x274, Size: 0x4]
	delegate OnBroken;//[Offset: 0x278, Size: 0x10]
	BoxComponent* HeadBox;//[Offset: 0x288, Size: 0x8]
	Vector DamageTextOffset;//[Offset: 0x290, Size: 0xc]
	void WhenBreakCompleted(Controller* EventInstigator);// 0x3a2ea84
	void ReduceHealth(Controller* EventInstigator, float ReduceValue, out const Vector HitImpact, bool bHeadShot);// 0x3a2eb08
	void OnBroken__DelegateSignature(ApexTargetBase* Target, Controller* Killer);// 0x43841ec
	float GetHeadDamageRate(Actor* DamageCauser);// 0x3a2ec68
	bool CheckHitHead(PrimitiveComponent* HitComponent);// 0x3a2e9fc

--------------------------------
Class: TrackingVisionModule.ApexWorldSubsystem.WorldSubsystem.Subsystem.Object
	TrackingVisionConfig* VisionConfigDataAsset;//[Offset: 0x88, Size: 0x28]
	<ApexCharacter*,FootprintInfo> FootprintInfos;//[Offset: 0x170, Size: 0x50]
	<ApexCharacter*,Vector> LastGroundTouchPosInfos;//[Offset: 0x1c0, Size: 0x50]
	<ApexCharacter*,bool> LaunchPadUsedInfos;//[Offset: 0x210, Size: 0x50]
	<ApexCharacter*,bool> ZiplinedInfos;//[Offset: 0x260, Size: 0x50]
	<ApexCharacter*,float> LastWeaponFireTimeInfos;//[Offset: 0x2b0, Size: 0x50]
	<ApexCharacter*,bool> TouchGroundInfos;//[Offset: 0x300, Size: 0x50]
	<ApexCharacter*> TrackingCharacters;//[Offset: 0x458, Size: 0x50]
	TrackingVisionConfig* VisionConfig;//[Offset: 0x4a8, Size: 0x8]
	<enum> IgnoreTrackingVisionPOITypes;//[Offset: 0x4b0, Size: 0x50]
	delegate TrackEvent;//[Offset: 0x510, Size: 0x10]
	void SetIgnoreTrack(bool bIgnore);// 0x3de87b0
	void SetFilterByRestartTime(bool Enable);// 0x3de8730
	void OnTrackEvent(enum POIType, ApexCharacter* Character, Actor* Target, out const Vector Position);// 0x3de858c
	bool IsEnable();// 0x3de86dc
	<enum,TrackingVisionShowInfo> GetShowInfoMap();// 0x3de8ad0
	static TrackingVisionModule* GetInstance(Object* Context);// 0x3de8858
	bool GetFilterByRestartTime();// 0x3de8714
	<int,FText> GetDamageNames();// 0x3de8a1c
	void DeleteTrackingVisionPOI(int InfoId);// 0x3de8510

--------------------------------
Class: TrackingVisionConfig.DataAsset.Object
	int CellSize;//[Offset: 0x30, Size: 0x4]
	float LifeTime;//[Offset: 0x34, Size: 0x4]
	float TraversalPOIFootprintDistance;//[Offset: 0x38, Size: 0x4]
	float TrackingVisionTraversalPOIJumpDownDist;//[Offset: 0x3c, Size: 0x4]
	float TrackingVisionWeaponFirePOIDBounce;//[Offset: 0x40, Size: 0x4]
	float TrackingVisionDamagePOIHealthFrac;//[Offset: 0x44, Size: 0x4]
	bool bEnableSpacingOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	float Spacing;//[Offset: 0x4c, Size: 0x4]
	FName[] IgnoreBeTrackedBuffs;//[Offset: 0x50, Size: 0x10]
	DataTable* TrackingVisionTable;//[Offset: 0x60, Size: 0x28]
	DataTable* DamageTypeDataTable;//[Offset: 0x88, Size: 0x28]
	DataTable* ArmoryItemTable;//[Offset: 0xb0, Size: 0x28]
	<enum> IgnoreTrackingVisionPOITypes;//[Offset: 0xd8, Size: 0x50]
	GameplayTag SignDirectionForTrackInfoTag;//[Offset: 0x128, Size: 0x8]
	float SignDirectionForTrackInfoLifeTime;//[Offset: 0x130, Size: 0x4]

--------------------------------
Class: FootprintInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TrackingVisionShowInfo
	Object* TrackingVisionIcon;//[Offset: 0x0, Size: 0x28]
	int IconIndex;//[Offset: 0x28, Size: 0x4]
	FText TrackingVisionTip;//[Offset: 0x30, Size: 0x18]
	int PingType;//[Offset: 0x48, Size: 0x4]
	int PingType2;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: Character_Bloodhound_BP_C.APGameCharacter_BP_C.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object

--------------------------------
Class: Character_Wraith_BP_C.APGameCharacter_BP_C.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2070, Size: 0x8]
	void ReceiveBeginPlay();// 0x43841ec
	void ExecuteUbergraph_Character_Wraith_BP(int EntryPoint);// 0x43841ec

--------------------------------
Class: Gibraltar_GunShield_BP_C.GibraltarGunShield.EnergyShieldActor.SkillActorBase.DynamicMovementActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x560, Size: 0x8]
	ParticleSystemComponent* Self3P;//[Offset: 0x568, Size: 0x8]
	AutoShootTargetComponent* AutoShootTarget;//[Offset: 0x570, Size: 0x8]
	StaticMeshComponent* Self1P;//[Offset: 0x578, Size: 0x8]
	ParticleSystemComponent* Other3P;//[Offset: 0x580, Size: 0x8]
	ChildActorComponent* ChildActor;//[Offset: 0x588, Size: 0x8]
	StaticMeshComponent* Collision;//[Offset: 0x590, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x598, Size: 0x8]
	bool IsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]
	bool IsEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1, Size: 0x1]
	bool NeedInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a2, Size: 0x1]
	float TargetFOV;//[Offset: 0x5a4, Size: 0x4]
	Vector2D Size;//[Offset: 0x5a8, Size: 0x8]
	Vector HitPosOffset;//[Offset: 0x5b0, Size: 0xc]
	Vector2D CrossHairOffset;//[Offset: 0x5bc, Size: 0x8]
	Texture2D* Texture;//[Offset: 0x5c8, Size: 0x8]
	Vector2D TextureOffset;//[Offset: 0x5d0, Size: 0x8]
	enum ShieldStateWhenBeenSilenced;//[Offset: 0x5d8, Size: 0x1]
	bool ShieldOpenStateValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d9, Size: 0x1]
	bool ShieldOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5da, Size: 0x1]
	bool ShieldRecover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5db, Size: 0x1]
	bool OBFppSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 0x1]
	Transform Gibraltar_shield_FPP_Transform;//[Offset: 0x5e0, Size: 0x30]
	Material* Mat_Soft;//[Offset: 0x610, Size: 0x28]
	Texture2D* Texture_Soft;//[Offset: 0x638, Size: 0x28]
	AkAudioEvent* ImpactSound;//[Offset: 0x660, Size: 0x28]
	void IsOwnerFpp(out bool IsFPP, bool CallFunc_IsValid_ReturnValue, enum CallFunc_GetMeshMode_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x43841ec
	void ClientMoveFPPShield(Transform TmpTrans, bool CallFunc_HasAuthority_ReturnValue, Actor* CallFunc_GetAttachParentActor_ReturnValue, HitResult CallFunc_K2_SetRelativeTransform_SweepHitResult, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, SceneComponent* CallFunc_GetCameraEffectNode_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	bool CanStuckInto(Actor* InActor);// 0x43841ec
	void SetSelfScale(bool CallFunc_IsValid_ReturnValue, float CallFunc_GetADSWeaponTargetFOV_Value_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_DegTan_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_DegTan_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue);// 0x43841ec
	void InitBool(PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetViewTarget_ReturnValue, bool CallFunc_IsTeammate_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsObedInCurrentClient_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x43841ec
	void UpdateColor(Vector SelfColorWhite, Vector SelfColorLight, Vector SelfColor, float LastHP, Vector TmpColor, Vector WhiteColor, Vector FriendColorLight, Vector FriendColor, Vector EnemyColorLight, Vector EnemyColor, float Percent, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x43841ec
	void PlayAudioForOpenShiled(bool bOpen, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, AudioEventAsync* CallFunc_PostEventByActorRoleAsync_ReturnValue, float CallFunc_Conv_BoolToFloat_ReturnValue, AudioEventAsync* CallFunc_PostEventByActorRoleAsync_ReturnValue);// 0x43841ec
	void PlayAudioForPreOpenShield(bool bOpen, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, AudioEventAsync* CallFunc_PostEventByActorRoleAsync_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, AudioEventAsync* CallFunc_PostEventByActorRoleAsync_ReturnValue, float CallFunc_Conv_BoolToFloat_ReturnValue);// 0x43841ec
	void SetMeshShow(bool IsShow, bool CallFunc_IsOwnerFpp_IsFpp, bool CallFunc_BooleanAND_ReturnValue);// 0x43841ec
	void SetMeshState(bool Show, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_HasAuthority_ReturnValue);// 0x43841ec
	void OnStrike(Actor* Caster);// 0x43841ec
	void BP_OnBroken();// 0x43841ec
	void BP_OnCloseShield();// 0x43841ec
	void BP_OnOpenShield();// 0x43841ec
	void BP_OnRecoverShield();// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void BndEvt__collision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x43841ec
	void ClientOnDamaged(float Damage, int DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x43841ec
	void OnGibraltarBeenSilenced(bool IsSilenced);// 0x43841ec
	void LoadMatDone(AsyncLoaderBase* Loader);// 0x43841ec
	void LoadTextureDone(AsyncLoaderBase* Loader);// 0x43841ec
	void PrePlayAudio(bool bIsAim);// 0x43841ec
	void BP_InitUIWidget();// 0x43841ec
	void BP_ChangeColorAndSize();// 0x43841ec
	void LoadSoundDone(AsyncLoaderBase* Loader);// 0x43841ec
	void BP_OnHitEffect(Vector WorldPos, Actor* CauserActor);// 0x43841ec
	void ExecuteUbergraph_Gibraltar_GunShield_BP(int EntryPoint, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, const delegate Temp_delegate_Variable, bool CallFunc_HasAuthority_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, Actor* K2Node_Event_Caster, PrimitiveComponent* K2Node_ComponentBoundEvent_HitComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, Vector K2Node_ComponentBoundEvent_NormalImpulse, const HitResult K2Node_ComponentBoundEvent_Hit, bool CallFunc_Greater_FloatFloat_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, bool CallFunc_HasAuthority_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float K2Node_Event_Damage, int K2Node_Event_DamageType, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, ParticleSystemAsync* CallFunc_SpawnEmitterAtLocationAsync_ReturnValue, ApexPlayerController* K2Node_DynamicCast_AsApex_Player_Controller, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_GetPawnByController_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_AddHUDHitDamage_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, ApexGameState* K2Node_DynamicCast_AsApex_Game_State, bool K2Node_DynamicCast_bSuccess, GameStatisticsManager* CallFunc_GetGameStatisticsManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, UTSkill* CallFunc_GetSkill_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool K2Node_CustomEvent_IsSilenced, Character_Gibraltar_BP_C* K2Node_DynamicCast_AsCharacter_Gibraltar_BP, bool K2Node_DynamicCast_bSuccess, const delegate Temp_delegate_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAtLocationAsync_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasState_ReturnValue, const delegate Temp_delegate_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, const delegate Temp_delegate_Variable, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, StaticMeshAsync* CallFunc_SetStaticMeshAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, StaticMeshAsync* CallFunc_SetStaticMeshAsync_ReturnValue, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, Object* CallFunc_LoadAsset_Blocking_ReturnValue, Material* K2Node_DynamicCast_AsMaterial, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, bool K2Node_Event_bIsAim, Object* CallFunc_LoadAsset_Blocking_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_TriggerEventByType_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, Object* CallFunc_LoadAsset_Blocking_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess, Vector K2Node_Event_WorldPos, Actor* K2Node_Event_CauserActor, int CallFunc_PlaySoundBySurfaceType_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x43841ec

--------------------------------
Class: GibraltarGunShield.EnergyShieldActor.SkillActorBase.DynamicMovementActor.Actor.Object
	bool bIsSilenced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]
	bool bHasSkilled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1]
	bool bIsCurShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 0x1]
	void PrePlayAudio(bool bIsAim);// 0x43841ec
	void BP_InitUIWidget();// 0x43841ec
	void BP_ChangeColorAndSize();// 0x43841ec

--------------------------------
Class: EnergyShieldActor.SkillActorBase.DynamicMovementActor.Actor.Object
	delegate OpenShieldEvent;//[Offset: 0x4e0, Size: 0x10]
	delegate RecoverTimeEvent;//[Offset: 0x4f0, Size: 0x10]
	delegate ShieldValueEvent;//[Offset: 0x500, Size: 0x10]
	bool bDamagable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]
	bool bDamageOverflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511, Size: 0x1]
	float recoverTime;//[Offset: 0x514, Size: 0x4]
	float CurRecoverTime;//[Offset: 0x518, Size: 0x4]
	float HP;//[Offset: 0x51c, Size: 0x4]
	float CurHP;//[Offset: 0x520, Size: 0x4]
	float RecoverProgress;//[Offset: 0x524, Size: 0x4]
	enum ShieldState;//[Offset: 0x528, Size: 0x1]
	bool bIsOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 0x1]
	bool bIsToggleClosed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52a, Size: 0x1]
	bool bIsDefaultOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52b, Size: 0x1]
	float DelayOpenTime;//[Offset: 0x52c, Size: 0x4]
	float DelayOpenTimeModifier;//[Offset: 0x530, Size: 0x4]
	delegate ShieldBrokenEvent;//[Offset: 0x538, Size: 0x10]
	void ToggleShield();// 0x3b85f6c
	bool StuckInto(Actor* InActor);// 0x3b85c44
	void RPC_Server_OpenShield();// 0x3b85ec0
	void RPC_Server_DestroyShield();// 0x3b85e08
	void RPC_Server_CloseShield();// 0x3b85e64
	void RecoverShield();// 0x3b85f1c
	void OpenShield();// 0x3b85f58
	void OnRep_ShieldValue();// 0x3b85d64
	void OnRep_ShieldOpenState(enum PrevState);// 0x3b85d8c
	void OnRep_RecoverProgress();// 0x3b85d78
	void DestroyShield();// 0x3b85f30
	void CloseShield();// 0x3b85f44
	bool CanStuckInto(Actor* InActor);// 0x3b85cd4
	void BP_OnRecoverShield();// 0x43841ec
	void BP_OnOpenShield();// 0x43841ec
	void BP_OnHitEffect(Vector WorldPos, Actor* CauserActor);// 0x43841ec
	void BP_OnDestroyShield();// 0x43841ec
	void BP_OnCryptoDroneEMPDamage();// 0x43841ec
	void BP_OnCloseShield();// 0x43841ec
	void BP_OnBroken();// 0x43841ec

--------------------------------
Class: Character_Gibraltar_BP_C.APGameCharacter_BP_C.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2070, Size: 0x8]
	delegate OnGibraltarBeenSilenced;//[Offset: 0x2078, Size: 0x10]
	void ReceiveBeginPlay();// 0x43841ec
	void OnBeenSilencedByRevenant(bool IsSilenced);// 0x43841ec
	void ExecuteUbergraph_Character_Gibraltar_BP(int EntryPoint, bool K2Node_Event_IsSilenced);// 0x43841ec
	void OnGibraltarBeenSilenced__DelegateSignature(bool IsSilenced);// 0x43841ec

--------------------------------
Class: Pathfinder_SurveyToken_BP_C.SurveyToken.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e0, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2e8, Size: 0x8]
	void ReceiveTick(float DeltaSeconds);// 0x43841ec
	void ExecuteUbergraph_Pathfinder_SurveyToken_BP(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0x43841ec

--------------------------------
Class: SurveyToken.Actor.Object
	ApexCharacter*[] PlayerList;//[Offset: 0x250, Size: 0x10]
	ApexCharacter* OwnerPlayer;//[Offset: 0x260, Size: 0x8]
	bool bCanUseBeacon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	enum CurState;//[Offset: 0x269, Size: 0x1]
	bool bHasOpenUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 0x1]
	float OperationTime;//[Offset: 0x26c, Size: 0x4]
	float UseTimeOut;//[Offset: 0x270, Size: 0x4]
	Vector BeaconPosOffset;//[Offset: 0x274, Size: 0xc]
	float BeaconYawOffset;//[Offset: 0x280, Size: 0x4]
	float BeaconPitch;//[Offset: 0x284, Size: 0x4]
	float PosSetTime;//[Offset: 0x288, Size: 0x4]
	GameplayTag DetectEnemyTag;//[Offset: 0x28c, Size: 0x8]
	float DetectEnemyRadius;//[Offset: 0x294, Size: 0x4]
	float DetectEnemyTime;//[Offset: 0x298, Size: 0x4]
	FName DetectedBuff;//[Offset: 0x29c, Size: 0x8]
	SurveyBeacon* CurSurveyBeacon;//[Offset: 0x2c8, Size: 0x8]
	void SetPos(int SkillIndex, bool SetPos);// 0x3dc8de4
	void SetCurState(enum NewState, bool bHasInjected);// 0x3dc8d1c
	void OnNextWhiteCircleForCurrentWave(int InTeamId);// 0x3dc8c54
	void OnClearNextWhiteCircleForCurrentWave();// 0x3dc8cd0
	bool EndUseBeacon();// 0x3dc8ce4

--------------------------------
Class: Phantom_Trigger_BP_C.SkillActorBase.DynamicMovementActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4d8, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4e0, Size: 0x8]
	ParticleSystem* CurrentBall;//[Offset: 0x4e8, Size: 0x28]
	ParticleSystem* CurrentRing;//[Offset: 0x510, Size: 0x28]
	class Actor* CurrentEjector;//[Offset: 0x538, Size: 0x8]
	class Actor* CurrentEjectorR;//[Offset: 0x540, Size: 0x8]
	ParticleSystemAsync*[] ParticlePool;//[Offset: 0x548, Size: 0x10]
	Actor*[] EffectPool;//[Offset: 0x558, Size: 0x10]
	enum CurrentMode;//[Offset: 0x568, Size: 0x1]
	enum LastMode;//[Offset: 0x569, Size: 0x1]
	byte CurrentState;//[Offset: 0x56a, Size: 0x1]
	byte LastState;//[Offset: 0x56b, Size: 0x1]
	bool JustModeChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 0x1]
	bool ShowLoopEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56d, Size: 0x1]
	void PlayAnimation(FName Ani, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_GetCanPlayAniByGradeLevel_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsCharacterAutonomousProxyOrObViewTarget_ReturnValue);// 0x43841ec
	void SpawnEffect(FName HangPoint_BackJet_R, FName HangPoint_BackJet_L, FName HangPoint_Ring, FName HangPoint_Ball, Transform CallFunc_MakeTransform_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, SkeletalMeshComponent* CallFunc_GetCameraModeMesh_ReturnValue, Actor* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Actor* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Add_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x43841ec
	void ClearEffect(int Temp_int_Loop_Counter_Variable, int Temp_int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, Actor* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ParticleSystemAsync* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x43841ec
	void GetEffectByTriggerState(class Actor ejector_red_r, class Actor ejector_blue_r, class Actor ejector_red, class Actor ejector_blue, ParticleSystem* ring_red, ParticleSystem* ring_blue, ParticleSystem* ball_red, ParticleSystem* ball_blue, bool K2Node_SwitchEnum_CmpSuccess);// 0x43841ec
	void UpdateTriggerState(Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasBuff_ReturnValue, bool CallFunc_IsPerkCoolDown_ReturnValue);// 0x43841ec
	void ReceiveTick(float DeltaSeconds);// 0x43841ec
	void ReceiveEndPlay(byte EndPlayReason);// 0x43841ec
	void ExecuteUbergraph_Phantom_Trigger_BP(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, byte K2Node_Event_EndPlayReason, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsCharacterAutonomousProxyOrObViewTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_GetCurrentCameraMode_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float K2Node_Event_DeltaSeconds, const delegate Temp_delegate_Variable, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_BooleanOR_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsCharacterAutonomousProxyOrObViewTarget_ReturnValue, AudioEventAsync* CallFunc_PostEventAtLocationAsync_ReturnValue);// 0x43841ec

--------------------------------
Class: TimeTraveler_Ejector_Child_Blue_C.Lobby_Ejector_InFight_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b8, Size: 0x8]
	void ReceiveBeginPlay();// 0x43841ec
	void ExecuteUbergraph_TimeTraveler_Ejector_Child_Blue(int EntryPoint);// 0x43841ec

--------------------------------
Class: Lobby_Ejector_InFight_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x250, Size: 0x8]
	ArrowComponent* DebugArrow;//[Offset: 0x258, Size: 0x8]
	ParticleSystemComponent* Effect_LandingFlame2;//[Offset: 0x260, Size: 0x8]
	StaticMeshComponent* Tag;//[Offset: 0x268, Size: 0x8]
	ArrowComponent* EffectRoot;//[Offset: 0x270, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x278, Size: 0x8]
	Vector TagRoation;//[Offset: 0x280, Size: 0xc]
	Vector TagLocation;//[Offset: 0x28c, Size: 0xc]
	float TagHeight;//[Offset: 0x298, Size: 0x4]
	float LerpLocation;//[Offset: 0x29c, Size: 0x4]
	bool IsDebugShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	float LerpRoation;//[Offset: 0x2a4, Size: 0x4]
	Rotator ShowRoation;//[Offset: 0x2a8, Size: 0xc]
	bool IsAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	void Reset(Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue);// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void ReceiveTick(float DeltaSeconds);// 0x43841ec
	void ExecuteUbergraph_Lobby_Ejector_InFight(int EntryPoint, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_VLerp_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, Rotator CallFunc_FindLookAtRotation_ReturnValue, HitResult CallFunc_K2_AddLocalOffset_SweepHitResult, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, Actor* CallFunc_GetAttachParentActor_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, Vector CallFunc_VLerp_ReturnValue, float K2Node_Event_DeltaSeconds, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult);// 0x43841ec

--------------------------------
Class: TimeTraveler_Ejector_Child_Blue_R_C.Lobby_Ejector_InFight_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b8, Size: 0x8]
	void ReceiveBeginPlay();// 0x43841ec
	void ExecuteUbergraph_TimeTraveler_Ejector_Child_Blue_R(int EntryPoint);// 0x43841ec

--------------------------------
Class: Pathfinder_GrapplingHook_BP_C.GrapplingHook.SkillActorBase.DynamicMovementActor.Actor.Object
	StaticMeshComponent* StaticMesh;//[Offset: 0x930, Size: 0x8]
	bool InitLaunching(FName CallFunc_GetAttachParentSocketName_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_InitLaunching_ReturnValue, bool CallFunc_NotEqual_NameName_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, SkeletalMeshComponent* CallFunc_GetCurrentMesh_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x43841ec

--------------------------------
Class: Character_Pathfinder_BP_C.APGameCharacter_BP_C.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2070, Size: 0x8]
	void ReceiveBeginPlay();// 0x43841ec
	void ExecuteUbergraph_Character_Pathfinder_BP(int EntryPoint);// 0x43841ec

--------------------------------
Class: Pathfinder_GrapplingHook_AimSight_BP_C.GrapplingHookAimSight.SkillActorBase.DynamicMovementActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x798, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x7a0, Size: 0x8]
	bool DebugIndicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 0x1]
	void ReceiveBeginPlay();// 0x43841ec
	void ReceiveTick(float DeltaSeconds);// 0x43841ec
	void ExecuteUbergraph_Pathfinder_GrapplingHook_AimSight_BP(int EntryPoint, float K2Node_Event_DeltaSeconds, HitResult CallFunc_GetSavedHitResult_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x43841ec

--------------------------------
Class: Character_Mirage_BP_C.APGameCharacter_BP_C.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2070, Size: 0x8]
	ApexMirageManager_BP_C* ApexMirageManager;//[Offset: 0x2078, Size: 0x8]
	bool ConfigVal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2080, Size: 0x1]
	float MirageDecoyMoveToScreenCenterDis;//[Offset: 0x2084, Size: 0x4]
	ParticleSystemComponent*[] PassiveHandLightEffectArrays;//[Offset: 0x2088, Size: 0x10]
	int[] ControlUIEventIds;//[Offset: 0x2098, Size: 0x10]
	FString RemoveDecoyStringCmd;//[Offset: 0x20a8, Size: 0x10]
	bool IsShowPassiveHandLightEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20b8, Size: 0x1]
	FString MirageTacticString;//[Offset: 0x20c0, Size: 0x10]
	bool IsShowHandLightEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d0, Size: 0x1]
	FName[] HandLightEffectAttachSockets;//[Offset: 0x20d8, Size: 0x10]
	FString MirageUltimate;//[Offset: 0x20e8, Size: 0x10]
	GameplayTask_InvisibleEffectWithDither* SelfInvisibleEffectTask;//[Offset: 0x20f8, Size: 0x8]
	GameplayTask_InvisibleEffectWithDither* OtherInvisibleEffectTask;//[Offset: 0x2100, Size: 0x8]
	ParticleSystem* ParticleMoveToTarget;//[Offset: 0x2108, Size: 0x28]
	ParticleSystemAsync* MoveToTargetParticleObj;//[Offset: 0x2130, Size: 0x8]
	float ShowHandLightEffectDistance;//[Offset: 0x2138, Size: 0x4]
	bool bShowPossedDecoyUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x213c, Size: 0x1]
	bool bPossedDecoy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x213d, Size: 0x1]
	int[] ControlPossedUIEventId;//[Offset: 0x2140, Size: 0x10]
	float LongPressTimeToControl;//[Offset: 0x2150, Size: 0x4]
	void HasPerkPingEnemyTag(out bool Has, bool CallFunc_HasTag_ReturnValue);// 0x43841ec
	void OnRep_bPossedDecoy();// 0x43841ec
	void SwitchControlUIPossesedState(bool bPossesed, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, int K2Node_Select_Default, int CallFunc_Array_Get_Item);// 0x43841ec
	void OnRep_bShowPossedDecoyUI();// 0x43841ec
	void TransNormalToOffset(Vector InNoraml, out Vector OutOffset, Vector InNormal, float OffsetValue, float TolleranceDegree, bool Temp_bool_Variable, float CallFunc_Dot_VectorVector_ReturnValue, Vector Temp_struct_Variable, float CallFunc_Abs_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_DegCos_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector K2Node_Select_Default);// 0x43841ec
	void FindMoveToLocationWithDis(Vector StartLoc, Vector Dir, float Dis, out Vector NewParam, Vector CallFunc_Vector_Normal2D_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_FindGrounPoint_GroundPoint);// 0x43841ec
	void FindGrounPoint(Vector InPoint, bool bUseLineUp, out Vector GroundPoint, Vector StartPoint, float LineTraceDownValue, float LineTraceUpValue, bool Temp_bool_Variable, bool Temp_bool_Variable, const Actor*[] Temp_object_Variable, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, const Vector K2Node_Select_Default, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector K2Node_Select_Default);// 0x43841ec
	void CheckIsEnableInputToMirageDecoy(ApexMirageCharacter* ApexMirageCharacter, out bool bEnable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsFalling_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsFalling_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x43841ec
	void SwitchHandEffectByCameraMode(enum CameraMove, int Temp_int_Array_Index_Variable, SkeletalMeshComponent* CallFunc_GetCameraModeMesh_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_GetAttachSocketName_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue);// 0x43841ec
	void EndOtherInvisibleIfValid(ApexCharacter* InApexCharacter, Character_Mirage_BP_C* K2Node_DynamicCast_AsCharacter_Mirage_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void PlayAudio(AkAudioEvent* Audio, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, int CallFunc_PostEvent_ReturnValue, bool CallFunc_IsCharacterAutonomousProxyOrObViewTarget_ReturnValue);// 0x43841ec
	void DestroyAllDecoyInServer(bool CallFunc_HasAuthority_ReturnValue);// 0x43841ec
	void DealDcoySprint(bool bPressed, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ApexMirageCharacter*[] CallFunc_GetPossesedDecoy_ReturnValue, int CallFunc_Array_Length_ReturnValue, ApexMirageCharacter* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x43841ec
	void UpdateLightEffectHandVisibleByDistance(bool CallFunc_IsCharacterAutonomousProxyOrObViewTarget_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, ApexPlayerController* CallFunc_GetApexPlayerController_ReturnValue, ApexCharacter* CallFunc_GetOwnedApexCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x43841ec
	void OnSwitchViewCameraMode(enum CallFunc_GetCurrentCameraMode_ReturnValue);// 0x43841ec
	void ShowLightEffectInHand(bool Show, bool JustShoworHide, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void SpawnLightEffectInHand(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x43841ec
	void SpawnMoveToTargetEffectForTacticDecoy(Vector MoveToTargetLoc, const delegate Temp_delegate_Variable, ParticleSystemAsync* CallFunc_SpawnEmitterAtLocationAsync_ReturnValue);// 0x43841ec
	void DealApexSkillEvent_Client(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam, const FString Temp_string_Variable, SkillEventCustomParam_C* K2Node_DynamicCast_AsSkill_Event_Custom_Param, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Map_Contains_ReturnValue, const FString Temp_string_Variable, bool CallFunc_Map_Contains_ReturnValue);// 0x43841ec
	void DealApexSkillEvent_Server(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam, SkillEventCustomParam_C* K2Node_DynamicCast_AsSkill_Event_Custom_Param, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString[] CallFunc_Map_Keys_Keys, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x43841ec
	void SwitchControlUI(bool bEnable, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, int K2Node_Select_Default, int CallFunc_Array_Get_Item);// 0x43841ec
	Vector FindMoveToScreenCenterLoc(Vector Dir, Vector StartLoc, Vector CallFunc_FindMoveToLocationWithDis_NewParam, const byte[] K2Node_MakeArray_Array, Vector CallFunc_GetAPCharacterCameraViewPoint_Location, Rotator CallFunc_GetAPCharacterCameraViewPoint_Rotation, const Actor*[] K2Node_MakeArray_Array, Vector CallFunc_Conv_RotatorToVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_TransNormalToOffset_OutOffset, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_FindGrounPoint_GroundPoint, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSizeXY_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x43841ec
	void GetApexMirageManager(out ApexMirageManagerComponent* ApexMirageManager);// 0x43841ec
	void PossesDecoyByType(enum PossesDecoyType);// 0x43841ec
	void UnPossesDecoyByType(enum UnPossesDecoyType);// 0x43841ec
	void BindEvent();// 0x43841ec
	void CustomEvent(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x43841ec
	void DealDecoyBeHurt(Character_Mirage_Decoy_BP_New_C* ApexDecoy, Vector Pos, int CasterPlayerKey);// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void EnableTacticControlEffects();// 0x43841ec
	void OnStartParchute(Controller* Instigator);// 0x43841ec
	void CustomEvent();// 0x43841ec
	void ReceivePossessed(Controller* NewController);// 0x43841ec
	void OnSwitchCrouch();// 0x43841ec
	void OnJumped();// 0x43841ec
	void OnSubModelChange_Event(int TaskId, SceneComponent* ParentComp, SceneComponent* Component, FString SubModelId, bool IsFollowSkin);// 0x43841ec
	void OnDynamicSkinChange_Event(Character* TargetCharacter, bool Success, FName SkinId);// 0x43841ec
	void ExecuteUbergraph_Character_Mirage_BP(int EntryPoint, int Temp_int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_CustomEvent_PossesDecoyType, bool CallFunc_HasAuthority_ReturnValue, enum K2Node_CustomEvent_UnPossesDecoyType, int K2Node_CustomEvent_SkillID, enum K2Node_CustomEvent_SkillEvent, SkillEventParam* K2Node_CustomEvent_SkillEventParam, Character_Mirage_Decoy_BP_New_C* K2Node_CustomEvent_ApexDecoy, Vector K2Node_CustomEvent_Pos, int K2Node_CustomEvent_CasterPlayerKey, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, ApexMirageManagerComponent* CallFunc_GetApexMirageManager_ApexMirageManager, ApexMirageManagerComponent* CallFunc_GetApexMirageManager_ApexMirageManager, ApexMirageCharacter*[] CallFunc_GetPossesedDecoy_ReturnValue, ApexMirageCharacter*[] CallFunc_GetPossesedDecoy_ReturnValue, ApexMirageCharacter* CallFunc_Array_Get_Item, ApexMirageCharacter* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GIS_EventFlowDelegates* CallFunc_GetEventFlowDelegates_ReturnValue, ApexMirageCharacter*[] CallFunc_GetDecoyListByType_ReturnValue, ApexMirageCharacter* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GetIsDied_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Character_Mirage_Decoy_BP_New_C* K2Node_DynamicCast_AsCharacter_Mirage_Decoy_BP_New, bool K2Node_DynamicCast_bSuccess, Controller* K2Node_CustomEvent_Instigator, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Controller* K2Node_Event_NewController, int Temp_int_Loop_Counter_Variable, ApexPlayerController* K2Node_DynamicCast_AsApex_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SubModelSysComponent* CallFunc_GetSubModelComponent_ReturnValue, int K2Node_CustomEvent_TaskId, SceneComponent* K2Node_CustomEvent_ParentComp, SceneComponent* K2Node_CustomEvent_Component, FString K2Node_CustomEvent_SubModelId, bool K2Node_CustomEvent_IsFollowSkin, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, MaterialInterface* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Character* K2Node_CustomEvent_TargetCharacter, bool K2Node_CustomEvent_Success, FName K2Node_CustomEvent_SkinId, ApexCharacterAvatarSystem* CallFunc_GetApexAvatarSystem_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsInFinisher_In, bool CallFunc_CanUseLobbyMesh_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x43841ec

--------------------------------
Class: ApexMirageManager_BP_C.ApexMirageManagerComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1d8, Size: 0x8]
	ParticleSystemComponent*[] PassiveHandLightEffectArrays;//[Offset: 0x1e0, Size: 0x10]
	bool IsShowHandLightEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	FName[] HandLightEffectAttachSockets;//[Offset: 0x1f8, Size: 0x10]
	float ShowHandLightEffectDistance;//[Offset: 0x208, Size: 0x4]
	CurveFloat* FlashInvisibleCurve;//[Offset: 0x210, Size: 0x8]
	TimerHandle PassiveDyingTimer;//[Offset: 0x218, Size: 0x8]
	TimerHandle UltimateInvisibleTimer;//[Offset: 0x220, Size: 0x8]
	TimerHandle ShowHandLightOnCastPsycheOutTimer;//[Offset: 0x228, Size: 0x8]
	GameplayTask_InvisibleEffectWithDither* BeRescuePlayerFlashInvisibleTask;//[Offset: 0x230, Size: 0x8]
	MirageInvisibleParam_C* InvisibleParam;//[Offset: 0x238, Size: 0x8]
	ParticleSystem* HandParticleSystemPath;//[Offset: 0x240, Size: 0x28]
	void CleanTimerOnNewTask(bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0x43841ec
	void GetInvisibleMaxValueAndResourceSetID(bool IsOwner, Vector MaxVluae, out float MaxValue, out int SetID, bool Temp_bool_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_IsInvisibleNeedChangeMaterial_ReturnValue, int K2Node_Select_Default);// 0x43841ec
	void EnableOutlineOnTaskComplete(ApexCharacterBase* ApexCharacter, GameplayTask_InvisibleEffectWithDither* Task, bool CallFunc_IsCharacterAutonomousProxyOrObViewTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void GetFlashInvo(ApexCharacter* ApexCharacter, out int ResourceSetID, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x43841ec
	void SetFlashInvisibleTask(ApexCharacter* FlashCharacter, GameplayTask_InvisibleEffectWithDither* InvisibleTask, out GameplayTask_InvisibleEffectWithDither* Task, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x43841ec
	void ShowHandLightOnCastPsycheOut();// 0x43841ec
	void ReceiveApexSkillEvent(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam, const FString Temp_string_Variable, SkillEventCustomParam_C* K2Node_DynamicCast_AsSkill_Event_Custom_Param, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x43841ec
	void CleanInvisibleOnHurt(bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0x43841ec
	void DebugDrawLight(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue);// 0x43841ec
	void RecoverInvisibleFromDying(Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess);// 0x43841ec
	void OnTaskComplete(ApexCharacterBase* InCharacter, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x43841ec
	void UpdateLightEffectHandVisibleByDistance(Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsCharacterAutonomousProxyOrObViewTarget_ReturnValue, ApexPlayerController* CallFunc_GetApexPlayerController_ReturnValue, ApexCharacter* CallFunc_GetOwnedApexCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x43841ec
	void EndOtherInvisibleIfValid(ApexCharacter* InCharacter, Character_Mirage_BP_C* K2Node_DynamicCast_AsCharacter_Mirage_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void PlayAudio(AkAudioEvent* Audio1P, AkAudioEvent* Audio2P, const delegate Temp_delegate_Variable, bool CallFunc_IsValid_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsCharacterAutonomousProxyOrObViewTarget_ReturnValue, int CallFunc_PostEvent_ReturnValue, int CallFunc_PostEvent_ReturnValue);// 0x43841ec
	void OnSwitchViewCameraMode(Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, enum CallFunc_GetCurrentCameraMode_ReturnValue);// 0x43841ec
	void SwitchHandEffectByCameraMode(enum CmaeraMode, int Temp_int_Array_Index_Variable, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, SkeletalMeshComponent* CallFunc_GetCameraModeMesh_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, ParticleSystemComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_GetAttachSocketName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue);// 0x43841ec
	void ShowLightEffectInHand(bool Show, bool JustShoworHide, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x43841ec
	void SpawnHandLightEffect(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, SkeletalMeshComponent* CallFunc_GetActiveMesh_ReturnValue, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x43841ec
	void GetPassiveInvisibleConfig(enum InSkillEvent, MirageInvisibleParam_C* InSkillParam, ApexCharacter* InCharacter, out float OutInvisibleTime, out float OutMaxValue, out int ResourceSetID, float InvisibleMaxValue, int ResourceID, bool K2Node_SwitchEnum_CmpSuccess, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsInvisibleNeedChangeMaterial_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetRealRescuingTimeSec_ReturnValue, byte CallFunc_GetCfgRespawnTeammateTimeSec_ReturnValue, float CallFunc_Conv_ByteToFloat_ReturnValue);// 0x43841ec
	void OnFinishCallback_5A58EC7D4DE920BD5F47DDADDE69F9D4(ApexCharacterBase* UpdateCharacter);// 0x43841ec
	void OnFinishCallback_5549CAEA433E5F4FE4AA48A538B73960(ApexCharacterBase* UpdateCharacter);// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void ReceiveTick(float DeltaSeconds);// 0x43841ec
	void OnRescueFinished();// 0x43841ec
	void OnSetInvisible(ApexCharacter* InCharacter, const bool Invisible, enum InSkillEvent, SkillEventParam* InParam);// 0x43841ec
	void OnRescueBegin();// 0x43841ec
	void Flash(ApexCharacter* FlashCharacter, bool bLoop);// 0x43841ec
	void StopFlash();// 0x43841ec
	void OnReceivePassiveEventInBlueprint(enum SkillEvent, SkillEventParam* InParam);// 0x43841ec
	void OnEnterUltimateInvisible(SkillEventParam* InParam);// 0x43841ec
	void OnExitUltimateInvisible();// 0x43841ec
	void OnSetInvisibleByParam(ApexCharacter* InCharacter, const bool Invisible, const Vector InMaxTimeAndMaxValue, CurveFloat* InCurve);// 0x43841ec
	void InvisibleCharacter(ApexCharacter* Character, bool Invisible, Vector MaxTimeAndMaxValue, CurveFloat* Curve);// 0x43841ec
	void OnCharacterBeRescue_Event(ApexCharacter* rescuePlayer);// 0x43841ec
	void ExecuteUbergraph_ApexMirageManager_BP(int EntryPoint, ApexCharacterBase* K2Node_CustomEvent_UpdateCharacter, delegate K2Node_CreateDelegate_OutputDelegate, ApexCharacterBase* Temp_object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, float K2Node_Event_DeltaSeconds, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, ApexCharacter* K2Node_Event_InCharacter, const bool K2Node_Event_InVisible, enum K2Node_Event_InSkillEvent, SkillEventParam* K2Node_Event_InParam, MirageInvisibleParam_C* K2Node_DynamicCast_AsMirage_Invisible_Param, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetPassiveInvisibleConfig_OutInvisibleTime, float CallFunc_GetPassiveInvisibleConfig_OutMaxValue, int CallFunc_GetPassiveInvisibleConfig_ResourceSetID, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Character_Mirage_BP_C* K2Node_DynamicCast_AsCharacter_Mirage_BP, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, ApexCharacter* K2Node_Event_FlashCharacter, bool K2Node_Event_bLoop, int CallFunc_GetFlashInvo_ResourceSetID, bool CallFunc_HasAuthority_ReturnValue, interface classNone CallFunc_InvisibleEffectWithDither_TaskOwner_CastInput, GameplayTask_InvisibleEffectWithDither* CallFunc_InvisibleEffectWithDither_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameplayTask_InvisibleEffectWithDither* CallFunc_SetFlashInvisibleTask_Task, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, Character_Mirage_BP_C* K2Node_DynamicCast_AsCharacter_Mirage_BP, bool K2Node_DynamicCast_bSuccess, enum K2Node_Event_SkillEvent, SkillEventParam* K2Node_Event_InParam, bool CallFunc_IsValid_ReturnValue, MirageInvisibleParam_C* K2Node_DynamicCast_AsMirage_Invisible_Param, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, const delegate Temp_delegate_Variable, delegate K2Node_CreateDelegate_OutputDelegate, SkillEventParam* K2Node_Event_InParam, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, MirageInvisibleParam_C* K2Node_DynamicCast_AsMirage_Invisible_Param, bool K2Node_DynamicCast_bSuccess, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_HasState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue, ApexCharacter* K2Node_Event_InCharacter, const bool K2Node_Event_InVisible, const Vector K2Node_Event_InMaxTimeAndMaxValue, CurveFloat* K2Node_Event_InCurve, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, ApexCharacterBase* Temp_object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, ApexCharacterBase* K2Node_CustomEvent_UpdateCharacter, ApexCharacter* K2Node_CustomEvent_Character, bool K2Node_CustomEvent_Invisible, Vector K2Node_CustomEvent_MaxTimeAndMaxValue, CurveFloat* K2Node_CustomEvent_Curve, ApexViewModule* CallFunc_GetApexViewModule_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, APGameCharacter_BP_C* K2Node_DynamicCast_AsAPGame_Character_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_GetInvisibleMaxValueAndResourceSetID_MaxValue, int CallFunc_GetInvisibleMaxValueAndResourceSetID_SetID, interface classNone CallFunc_InvisibleEffectWithDither_TaskOwner_CastInput, GameplayTask_InvisibleEffectWithDither* CallFunc_InvisibleEffectWithDither_ReturnValue, bool CallFunc_IsValid_ReturnValue, ApexCharacter* K2Node_CustomEvent_rescuePlayer, bool CallFunc_HasAuthority_ReturnValue);// 0x43841ec

--------------------------------
Class: MirageInvisibleParam_C.SkillEventParam.Object
	float InvisibleTime;//[Offset: 0x60, Size: 0x4]
	CurveFloat* BleendCurve;//[Offset: 0x68, Size: 0x8]
	Object* Material;//[Offset: 0x70, Size: 0x28]
	float MaxValueForAutonomous;//[Offset: 0x98, Size: 0x4]
	float MaxValueForSimulated;//[Offset: 0x9c, Size: 0x4]

--------------------------------
Class: SkillEventCustomParam_C.SkillEventParam.Object
	<FString,FString> CustomMap;//[Offset: 0x60, Size: 0x50]

--------------------------------
Class: ApexViewModule.ApexTickableWorldSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	delegate OnCameraModeChange;//[Offset: 0x90, Size: 0x10]
	delegate DragBeginCallback;//[Offset: 0xa0, Size: 0x10]
	delegate DragMovingCallback;//[Offset: 0xb0, Size: 0x10]
	delegate DragEndCallback;//[Offset: 0xc0, Size: 0x10]
	delegate OnTouchRotateCamera;//[Offset: 0xd0, Size: 0x10]
	delegate OnCameraModeSwitched;//[Offset: 0xe0, Size: 0x10]
	delegate OnCharacterCameraModeChanged;//[Offset: 0x108, Size: 0x10]
	delegate OnViewTargetInfoChanged;//[Offset: 0x118, Size: 0x10]
	delegate OnAimChangeDelegate;//[Offset: 0x128, Size: 0x10]
	delegate OnCharacterAimEndDelegate;//[Offset: 0x138, Size: 0x10]
	delegate OnFovLerpFinish;//[Offset: 0x148, Size: 0x10]
	ApexNormalViewConfig* ApexNormalViewConfig;//[Offset: 0x170, Size: 0x8]
	<enum,MinimalViewInfo> CameraInfoMap;//[Offset: 0x1b0, Size: 0x50]
	MinimalViewInfo CurrentViewInfo;//[Offset: 0x200, Size: 0x6b0]
	MinimalViewInfo TargetViewInfo;//[Offset: 0x8b0, Size: 0x6b0]
	<byte,CameraLerpBaseInfo> LerpLocations;//[Offset: 0xf80, Size: 0x50]
	<byte,CameraLerpBaseInfo> LerpRotations;//[Offset: 0xfd0, Size: 0x50]
	<byte,CameraLerpBaseInfo> LerpFOVs;//[Offset: 0x1020, Size: 0x50]
	<byte,CameraLerpBaseInfo> SpringArmLerpLocations;//[Offset: 0x1070, Size: 0x50]
	<byte,CameraLerpBaseInfo> SpringArmLerpLengths;//[Offset: 0x10c0, Size: 0x50]
	<byte,CameraLerpBaseInfo> LerpSeparateFovs;//[Offset: 0x1110, Size: 0x50]
	SkeletalMeshComponent* CurrentClientMainCharacterFPPMesh;//[Offset: 0x1260, Size: 0x8]
	SceneComponent* CurrentClientMainCharacterUIEffect;//[Offset: 0x1268, Size: 0x8]
	<enum,SceneComponent*> MainCharacterNodeComponentMap;//[Offset: 0x1270, Size: 0x50]
	<enum,SpringArmComponent*> MainCharacterSpringArmComponentMap;//[Offset: 0x12c0, Size: 0x50]
	ApexCharacter* CurrentNearestEnemy;//[Offset: 0x1440, Size: 0x8]
	int MaxViewDataCacheNumber;//[Offset: 0x1488, Size: 0x4]
	float CustomYawSensibility;//[Offset: 0x14c0, Size: 0x4]
	float CustomPitchSensibility;//[Offset: 0x14c4, Size: 0x4]
	float MeshDitherSpeed;//[Offset: 0x16f8, Size: 0x4]
	bool EnableInGameNearClipCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c0, Size: 0x1]
	float InGameNearClipCheckInterval;//[Offset: 0x18c4, Size: 0x4]
	float DefaultInGameNearClipTargetValue;//[Offset: 0x18c8, Size: 0x4]
	float DefaultHitInGameNearClipTargetValue;//[Offset: 0x18cc, Size: 0x4]
	float InGameNearClipCheckRadius;//[Offset: 0x18d0, Size: 0x4]
	bool EnableCheckCameraOverWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1964, Size: 0x1]
	static void UseLodTransmitFOV(const Object* WorldContext, enum Source, bool NewUse);// 0x3a38374
	static void UpdateGameStateCacheCameraMode(const ApexCharacterBase* TargetCharacterBase, enum NewMainCameraMode);// 0x3a38478
	void TickViewModule(float DeltaTime);// 0x3a3acf4
	static void SwitchBloodHoundHunting(ApexCharacter* TargetCharacter, bool IsHunting);// 0x3a39e74
	static bool ShouldSwitchFPPAtAds(ApexCharacterBase* TargetCharacter);// 0x3a3a9f8
	static void SetUseLeftSideTPPCam(ApexCharacter* TargetCharacter, bool NewUse);// 0x3a399e4
	static void SetUseFreeCamera(ApexCharacter* TargetCharacter, enum Source, bool Use);// 0x3a38e74
	static void SetTouchingAimingBtnFlag(const Object* WorldContext, bool InValue);// 0x3a3abb4
	void SetMeshDitherSpeed(PrimitiveComponent* TargetComp, const float DitherSpeed);// 0x3a38188
	void SetMeshDither(PrimitiveComponent* TargetComp, const float DitherValue);// 0x3a38248
	static void SetFPPMeshKeepLocation(ApexCharacter* TargetCharacter, enum Source, bool Use);// 0x3a38d70
	static void SetEnableViewInput(const Object* WorldContext, bool NewEnable);// 0x3a39414
	static void SetEnableOrientationControl(ApexPlayerController* TargetController, bool NewEnable);// 0x3a394d4
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x3a3ad70
	static void OnPhoneTilt(ApexPlayerController* TargetController, Vector NewTilt);// 0x3a39648
	static void OnPhoneRotateRate(ApexPlayerController* TargetController, Vector NewRotationRate);// 0x3a39594
	static bool IsTouchingAimingBtn(const Object* WorldContext);// 0x3a3ac74
	static bool IsRecentlyHasGamePadInput(const Object* WorldContext, float RecentTime);// 0x3a38f78
	static bool IsBloodHoundHuntingFadingOut(ApexCharacter* TargetCharacter);// 0x3a39df4
	static bool IsAimmingLerping(ApexCharacterBase* TargetCharacter);// 0x3a3a4e4
	static void InputTouchMove(ApexPlayerController* TargetController, byte FingerIndex, Vector Location);// 0x3a396fc
	static void InputTouchEnd(ApexPlayerController* TargetController, byte FingerIndex, Vector Location);// 0x3a397f4
	static void InputTouchBegin(ApexPlayerController* TargetController, byte FingerIndex, Vector Location);// 0x3a398ec
	static void InputSmallEye(ApexCharacter* TargetCharacter, Vector2D DeltaPosition, int State);// 0x3a38c7c
	static void InnerRefreshUseLodTransmitFOV(const Object* WorldContext);// 0x3a38308
	static Vector2D GetWeaponSensibility(const Object* WorldContext, enum InputType);// 0x3a38a7c
	static ApexNormalViewConfig* GetViewNormalConfig(const Object* WorldContext);// 0x3a3afb8
	static ApexViewLegendConfig* GetViewLegendConfig(const Object* WorldContext, enum TargetLegendType);// 0x3a3aef8
	static Vector GetTPPViewLocation(const ApexCharacterBase* TargetCharacterBase, bool ContainActorSocketOffset, bool UseNewActorSpaceLoc, Vector NewActorSpaceLoc);// 0x3a386a4
	Vector GetTPPSpringArmShoulderDelta();// 0x3a3a4ac
	static SpringArmComponent* GetSpringArmComp(const ApexCharacterBase* TargetCharacter, enum CameraMode);// 0x3a39c5c
	static Vector2D GetSkillSensibility(const Object* WorldContext, enum InputType);// 0x3a389bc
	static Rotator GetSensibilityRate(const Object* WorldContext, enum InputType);// 0x3a38bb8
	static Vector GetRecentViewMoveDataAll(const Object* WorldContext, float StartTime, enum InputReason);// 0x3a39140
	static Vector[] GetRecentViewMoveData(const Object* WorldContext, float StartTime, enum InputReason);// 0x3a39248
	static Vector2D GetPhoneOrientationInputSensibility(const Object* WorldContext);// 0x3a38b3c
	static SceneComponent* GetNodeComponent(const ApexCharacter* TargetCharacter, enum Tag);// 0x3a39b9c
	float GetMeshDitherSpeed(PrimitiveComponent* TargetComp);// 0x3a38104
	static SkeletalMeshComponent* GetFPPMesh(const ApexCharacter* TargetCharacter);// 0x3a39b20
	static float GetFovFactor(ApexCharacterBase* TargetCharacter);// 0x3a3aa78
	static bool GetEnableViewInput(const Object* WorldContext);// 0x3a39394
	static float GetDefaultFOV(const Object* WorldContext, enum DesireMode);// 0x3a3a8bc
	static float GetCurrentFOV(ApexCharacterBase* TargetCharacter, bool Aggressive);// 0x3a3a7f4
	static float GetCurrentChangeFOVTime(ApexCharacterBase* TargetCharacter, bool IsAiming, bool IsChangeZoom);// 0x3a3a5e0
	static float GetCurrentChangeFOVDelay(ApexCharacterBase* TargetCharacter);// 0x3a3a564
	static Rotator GetControlRotationFromTarget(const ApexCharacterBase* TargetCharacterBase, out const Vector TargetLocation, const bool NewParentIsFPP, out const Vector NewActorSpaceSocketOffset);// 0x3a38530
	static SceneComponent* GetCameraEffectNode(const Object* WorldContext);// 0x3a39aa4
	static void GetAPCharacterCameraViewPoint(const ApexCharacterBase* TargetCharacterBase, out Vector Location, out Rotator Rotation, bool IsFPP, bool UseCameraLocationAtClient);// 0x3a3880c
	static float GetADSWeaponTargetFOV_Value(ApexCharacterBase* TargetCharacter);// 0x3a3a6fc
	static float GetADSWeaponTargetFOV(ApexCharacterBase* TargetCharacter);// 0x3a3a778
	static float GetADSTargetFOV(ApexCharacterBase* TargetCharacter);// 0x3a3a97c
	static void DoGamepadInput(const Object* WorldContext, float AxisValue, bool IsXInput);// 0x3a3903c
	static void ChangeCameraParent(ApexCharacter* TargetCharacter, float Time, float Delay, SceneComponent* NewParent, FName SocketName);// 0x3a39f34
	static void ChangeAiming(ApexCharacter* TargetCharacter, bool NewIsAiming);// 0x3a3aaf4
	static void BloodHoundLeaveHunting(ApexCharacter* TargetCharacter);// 0x3a39d1c
	static void BloodHoundEnterHunting(ApexCharacter* TargetCharacter);// 0x3a39d88
	static void AddLerpItem(ApexCharacterBase* TargetCharacter, enum LerpType, byte UID, Vector FPPTargetValue, Vector TPPTargetValue, byte Priority, enum ModifyType, float DelayTime, float LerpTime, float StartTime, CurveVector* LerpCurve, Vector CurveScale, bool AutoFixLerpTime, bool ImmediatelyUpdate);// 0x3a3a0b4

--------------------------------
Class: ApexTickableWorldSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool bCreateInDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bCreateInClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	<FName> CreateFrontendStates;//[Offset: 0x40, Size: 0x50]

--------------------------------
Class: TickableWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: ApexNormalViewConfig.DataAsset.Object
	ApexViewLegendConfig* ApexLegendDefaultViewConfig;//[Offset: 0x30, Size: 0x8]
	<enum,ApexViewLegendConfig*> ApexViewLegendConfig;//[Offset: 0x38, Size: 0x50]
	<enum,float> DefaultInputSensibility;//[Offset: 0x88, Size: 0x50]
	int TouchMoveDefaultNumToIgnore;//[Offset: 0xd8, Size: 0x4]
	int[] TouchCacheWeightSetting;//[Offset: 0xe0, Size: 0x10]
	enum ViewControlType;//[Offset: 0xf0, Size: 0x1]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0xf8, Size: 0x8]
	CurveFloat* Distance2CameraMoveSpeed;//[Offset: 0x100, Size: 0x8]
	CurveFloat* JoyStickLikeInputCurve;//[Offset: 0x108, Size: 0x8]
	float MaxDeltaPicthRotate;//[Offset: 0x110, Size: 0x4]
	float MaxDeltaYawRotate;//[Offset: 0x114, Size: 0x4]
	float ComfortableSwipeAddition;//[Offset: 0x118, Size: 0x4]
	float Mobile_CameraMoveRateX;//[Offset: 0x11c, Size: 0x4]
	float Mobile_CameraMoveRateY;//[Offset: 0x120, Size: 0x4]
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x124, Size: 0x4]
	float SpecialDeviceRate;//[Offset: 0x128, Size: 0x4]
	float FreeCameraBaseSensitivity;//[Offset: 0x12c, Size: 0x4]
	Vector2D PhoneOrientationInputSensibility;//[Offset: 0x130, Size: 0x8]
	Rotator SmallEyeReturnSpeed;//[Offset: 0x138, Size: 0xc]
	bool ContainDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	float DyingSizeFactor;//[Offset: 0x148, Size: 0x4]
	float CrouchSizeFactor;//[Offset: 0x14c, Size: 0x4]
	bool OnlyVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	bool OnlyEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1]
	float ViewAssistDisableRadius;//[Offset: 0x154, Size: 0x4]
	float ViewAssistMaxDistanceSqu;//[Offset: 0x158, Size: 0x4]
	float ViewAssistMaxReticleDistanceSqu;//[Offset: 0x15c, Size: 0x4]
	float SnappingMinDeltaTime;//[Offset: 0x160, Size: 0x4]
	float UpdateNearestEnemyTimeInterval;//[Offset: 0x164, Size: 0x4]
	Vector4 DefaultRotationLimit;//[Offset: 0x170, Size: 0x10]
	Vector4 ClimbingRotationLimit;//[Offset: 0x180, Size: 0x10]
	Vector4 FPPFreeCameraRotationLimit;//[Offset: 0x190, Size: 0x10]
	Vector4 HangingRotationLimit;//[Offset: 0x1a0, Size: 0x10]
	Vector4 ClimbOverLimit;//[Offset: 0x1b0, Size: 0x10]
	Vector2D RollLimit;//[Offset: 0x1c0, Size: 0x8]
	float GamePadValidTimeForViewAssist;//[Offset: 0x1c8, Size: 0x4]
	float CameraOffsetTimeFactor;//[Offset: 0x1cc, Size: 0x4]
	Vector TPPSpringArmShoulderOffset;//[Offset: 0x1d0, Size: 0xc]
	FName TppSpringArmAdsConfigTable;//[Offset: 0x1dc, Size: 0x8]
	CurveFloat* ShoulderAimingAngle2MinLength;//[Offset: 0x1e8, Size: 0x8]
	float GlobalWeaponFOV;//[Offset: 0x1f0, Size: 0x4]
	bool AutoFixReticleAfterSwitchCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 0x1]
	CurveFloat* FixReticleAngle2MinLength;//[Offset: 0x1f8, Size: 0x8]
	float AutoFixReticleMaxDeltaYaw;//[Offset: 0x200, Size: 0x4]
	FName CameraSocketName;//[Offset: 0x204, Size: 0x8]
	float DefaultTPPSpringArmLength;//[Offset: 0x20c, Size: 0x4]
	float DefaultFlySpringArmLength;//[Offset: 0x210, Size: 0x4]
	Vector DefaultFlySpringArmSocketOffset;//[Offset: 0x214, Size: 0xc]
	float SafeOriginTestRadius;//[Offset: 0x220, Size: 0x4]
	float ProbeRadius;//[Offset: 0x224, Size: 0x4]
	float ArmLengthRecoverSpeed;//[Offset: 0x228, Size: 0x4]
	<enum,float> State2RecoverSpeeds;//[Offset: 0x230, Size: 0x50]
	float ArmLengthRecoverCD;//[Offset: 0x280, Size: 0x4]
	float RollSpeed;//[Offset: 0x284, Size: 0x4]
	float NoEffectRollSpeed;//[Offset: 0x288, Size: 0x4]
	float SlideRollAngle;//[Offset: 0x28c, Size: 0x4]
	float RecoveryRollAngle;//[Offset: 0x290, Size: 0x4]
	float ClimbYawSpeed;//[Offset: 0x294, Size: 0x4]
	float ClimbCameraLerpInSpringArmLength;//[Offset: 0x298, Size: 0x4]
	float ClimbCameraLerpInTime;//[Offset: 0x29c, Size: 0x4]
	float ClimbCameraLerpOutTime;//[Offset: 0x2a0, Size: 0x4]
	float ClimbBigJumpYawSpeed;//[Offset: 0x2a4, Size: 0x4]
	bool BindingFOV2GameViewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	bool BindingFOV2PlayerViewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 0x1]
	bool FPPHangingUseSceneFov;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2aa, Size: 0x1]
	CurveVector* JumpCurve;//[Offset: 0x2b0, Size: 0x8]
	CurveVector* AimJumpCurve;//[Offset: 0x2b8, Size: 0x8]
	CurveVector* LandCurve;//[Offset: 0x2c0, Size: 0x8]
	CurveVector* AimLandCurve;//[Offset: 0x2c8, Size: 0x8]
	CurveFloat* LandSpeed2StrengthCurve;//[Offset: 0x2d0, Size: 0x8]
	<enum,StateLerpArrayInfos> StateInLerpInfo;//[Offset: 0x2d8, Size: 0x50]
	<enum,StateLerpArrayInfos> StateOutLerpInfo;//[Offset: 0x328, Size: 0x50]
	float EmojiAnimationFadeInTime;//[Offset: 0x378, Size: 0x4]
	float EmojiAnimationFadeOutTime;//[Offset: 0x37c, Size: 0x4]
	int MaxEmojiCheckVisibleNumber;//[Offset: 0x380, Size: 0x4]
	bool UseSphereEmojiAnimationHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 0x1]
	float EmojiAnimationHitTestDistance;//[Offset: 0x388, Size: 0x4]
	float EmojiAnimationSphereHitTestHeight;//[Offset: 0x38c, Size: 0x4]
	byte[] TestObjectType;//[Offset: 0x390, Size: 0x10]
	byte DebugType;//[Offset: 0x3a0, Size: 0x1]
	FName EmojiAnimationSlotName;//[Offset: 0x3a4, Size: 0x8]
	Vector Emoji3DLaunchLocationFPP;//[Offset: 0x3ac, Size: 0xc]
	Rotator Emoji3DLaunchRotationFPP;//[Offset: 0x3b8, Size: 0xc]
	Vector Emoji3DLaunchLocationTPP;//[Offset: 0x3c4, Size: 0xc]
	Rotator Emoji3DLaunchRotationTPP;//[Offset: 0x3d0, Size: 0xc]
	float Emoji3DLaunchSpeed;//[Offset: 0x3dc, Size: 0x4]
	enum[] Emoji3DForbidStates;//[Offset: 0x3e0, Size: 0x10]
	float ViewAntiCheatInterval;//[Offset: 0x3f0, Size: 0x4]
	int ViewAntiCheatReportCount;//[Offset: 0x3f4, Size: 0x4]
	ApexViewLegendConfig* GetViewLegendConfig(enum TargetLegendType);// 0x39eef84

--------------------------------
Class: ApexViewLegendConfig.DataAsset.Object
	CurveVector* SprintCameraShakeCurve;//[Offset: 0x30, Size: 0x8]
	float FPPCrouchCameraOffset;//[Offset: 0x38, Size: 0x4]
	float TPPCrouchCameraOffset;//[Offset: 0x3c, Size: 0x4]
	Vector DefaultFPPArmLocation;//[Offset: 0x40, Size: 0xc]
	Vector DefaultTPPArmLocation;//[Offset: 0x4c, Size: 0xc]
	bool UseDither;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	float DitherAsHideThreshold;//[Offset: 0x5c, Size: 0x4]
	float TPPMeshAutoHideDistance;//[Offset: 0x60, Size: 0x4]
	float TPPMeshAutoTop;//[Offset: 0x64, Size: 0x4]
	float TPPMeshAutoMaxPitch;//[Offset: 0x68, Size: 0x4]
	float TPPMeshAutoMinPitch;//[Offset: 0x6c, Size: 0x4]
	float TPPMeshAutoDitherStartDistance;//[Offset: 0x70, Size: 0x4]
	float TPPMeshAutoDitherStopDistance;//[Offset: 0x74, Size: 0x4]
	float TPPMeshAutoRecoverTime;//[Offset: 0x78, Size: 0x4]
	<enum,float> TPPMeshAutoHideDistanceFactor;//[Offset: 0x80, Size: 0x50]
	float TPPToStandCameraLerpTime;//[Offset: 0xd0, Size: 0x4]
	float TPPToStandCameraDelayTime;//[Offset: 0xd4, Size: 0x4]
	float TPPToCrouchCameraLerpTime;//[Offset: 0xd8, Size: 0x4]
	float TPPToCrouchCameraDelayTime;//[Offset: 0xdc, Size: 0x4]
	float TPPToSlideCameraLerpTime;//[Offset: 0xe0, Size: 0x4]
	float TPPToSlideCameraDelayTime;//[Offset: 0xe4, Size: 0x4]
	float InAirTPPToStandCameraLerpTime;//[Offset: 0xe8, Size: 0x4]
	float InAirTPPToStandCameraDelayTime;//[Offset: 0xec, Size: 0x4]
	float InAirTPPToCrouchCameraLerpTime;//[Offset: 0xf0, Size: 0x4]
	float InAirTPPToCrouchCameraDelayTime;//[Offset: 0xf4, Size: 0x4]
	float InAirTPPToSlideCameraLerpTime;//[Offset: 0xf8, Size: 0x4]
	float InAirTPPToSlideCameraDelayTime;//[Offset: 0xfc, Size: 0x4]

--------------------------------
Class: CameraLerpBaseInfo
	Vector TargetFPPValue;//[Offset: 0x0, Size: 0xc]
	Vector TargetTPPValue;//[Offset: 0xc, Size: 0xc]
	float StartTime;//[Offset: 0x18, Size: 0x4]
	float EndTime;//[Offset: 0x1c, Size: 0x4]
	CurveVector* LerpCurve;//[Offset: 0x20, Size: 0x8]
	Vector CurveScale;//[Offset: 0x28, Size: 0xc]
	enum ValueType;//[Offset: 0x34, Size: 0x1]

--------------------------------
Class: Character_Mirage_Decoy_BP_New_C.ApexMirageCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd40, Size: 0x8]
	GameplayTasksComponent* GameplayTasks;//[Offset: 0xd48, Size: 0x8]
	Vector MovetoScreentLoc;//[Offset: 0xd50, Size: 0xc]
	GameplayTask_InvisibleEffectWithDither* DeadFlashInvisible;//[Offset: 0xd60, Size: 0x8]
	int UltimateAudioID;//[Offset: 0xd68, Size: 0x4]
	<FName> Buffs;//[Offset: 0xd70, Size: 0x50]
	enum InitialEvenet;//[Offset: 0xdc0, Size: 0x1]
	bool bIsMovingToscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc1, Size: 0x1]
	AIController* DecoyAiController_Server;//[Offset: 0xdc8, Size: 0x8]
	ParticleSystemAsync*[] RuntimeParticlSystemAsync;//[Offset: 0xdd0, Size: 0x10]
	Character_Mirage_BP_C* OwnerMirage;//[Offset: 0xde0, Size: 0x8]
	float DeadDitherTime;//[Offset: 0xde8, Size: 0x4]
	float MirageDecoyMoveToScreenCenterDis;//[Offset: 0xdec, Size: 0x4]
	float MoveToScreenTollerance;//[Offset: 0xdf0, Size: 0x4]
	int ContorMirageDecalUIID;//[Offset: 0xdf4, Size: 0x4]
	float DeadDitherTimeByKill;//[Offset: 0xdf8, Size: 0x4]
	int[] ControlSwitchOutlineEffectIds;//[Offset: 0xe00, Size: 0x10]
	int UISignOnHeadID;//[Offset: 0xe10, Size: 0x4]
	bool bIsDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe14, Size: 0x1]
	AnimMontage* DecoyDeath animation;//[Offset: 0xe18, Size: 0x8]
	GameplayTask_InvisibleEffectWithDither* FlashInvisibleEffect;//[Offset: 0xe20, Size: 0x8]
	<int,int> HurtSignIDMap;//[Offset: 0xe28, Size: 0x50]
	enum DecoyBeHurtSignType;//[Offset: 0xe78, Size: 0x1]
	<int> HurPlayerKeyIdSet;//[Offset: 0xe80, Size: 0x50]
	bool IsFlashing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed0, Size: 0x1]
	int PendingCasterPlayerKey;//[Offset: 0xed4, Size: 0x4]
	bool FirstSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed8, Size: 0x1]
	float DecoyLifeTime;//[Offset: 0xedc, Size: 0x4]
	CurveFloat* CurveOnDecoyDead;//[Offset: 0xee0, Size: 0x8]
	TimerHandle FlasingOnDeadTimerHandle;//[Offset: 0xee8, Size: 0x8]
	GameplayTask_MoveToLocation* AutoMoveToLocationTask;//[Offset: 0xef0, Size: 0x8]
	float FlashTime;//[Offset: 0xef8, Size: 0x4]
	CurveFloat* CurveOnFlash;//[Offset: 0xf00, Size: 0x8]
	GameplayTask_InvisibleEffectWithDither* HitFlashInvisible;//[Offset: 0xf08, Size: 0x8]
	CurveFloat* CurveOnSwitchControl;//[Offset: 0xf10, Size: 0x8]
	float CrouchSpeed;//[Offset: 0xf18, Size: 0x4]
	float NewVar;//[Offset: 0xf1c, Size: 0x4]
	int[] PendingCasterPlayerKeys;//[Offset: 0xf20, Size: 0x10]
	bool bExcuteDieEndUIEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf30, Size: 0x1]
	bool IsStartAIMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf31, Size: 0x1]
	void ClientUpdateHeadUI(Actor* CallFunc_GetOwner_ReturnValue, byte CallFunc_GetLocalRole_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x43841ec
	void IsTeammateWithOwner(out bool IsTeammate, Actor* CallFunc_GetOwner_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, ApexPlayerState* K2Node_DynamicCast_AsApex_Player_State, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetLocalRole_ReturnValue, bool CallFunc_IsTeammate_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x43841ec
	void ClearLoopParticle(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ParticleSystemAsync* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x43841ec
	void CanFlash(out bool Can, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x43841ec
	void SetMirageValue(Pawn* CallFunc_GetInstigator_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Character_Mirage_BP_C* K2Node_DynamicCast_AsCharacter_Mirage_BP, bool K2Node_DynamicCast_bSuccess, Character_Mirage_BP_C* K2Node_DynamicCast_AsCharacter_Mirage_BP, bool K2Node_DynamicCast_bSuccess);// 0x43841ec
	void PlayAudio(AkAudioEvent* Audio, out int ID, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsCharacterAutonomousProxyOrObViewTarget_ReturnValue, int CallFunc_PostEvent_ReturnValue);// 0x43841ec
	void SpawnAiControlleAndPosses(bool CallFunc_HasAuthority_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, AIController* CallFunc_FinishSpawningActor_ReturnValue);// 0x43841ec
	void GetCauserIsPartnerOrself(Actor* CauserActor, out bool bValue, bool CallFunc_GetApexcharacterByCauser_bSuceed, APGameCharacter_BP_C* CallFunc_GetApexCharacterByCauser_APCharacter, bool CallFunc_IsTeammate_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void GetApexCharacterByCauser(Actor* Causer, out bool bSuceed, out APGameCharacter_BP_C* APCharacter, APGameCharacter_BP_C* K2Node_DynamicCast_AsAPGame_Character_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, APGameCharacter_BP_C* K2Node_DynamicCast_AsAPGame_Character_BP, bool K2Node_DynamicCast_bSuccess);// 0x43841ec
	void BroadCastHurtToOwner(Actor* Caster, bool CallFunc_GetApexcharacterByCauser_bSuceed, APGameCharacter_BP_C* CallFunc_GetApexCharacterByCauser_APCharacter, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_GetPlayerKey_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_RebaseLocalOriginOntoZero_ReturnValue, bool CallFunc_Set_Contains_ReturnValue);// 0x43841ec
	void SwitchDecoyBeHurtUI(Vector HurtPos, int CasterPlayerKey, bool bOpen, ApexPlayerController* LocalApexPlayerController, ApexCharacter* LocalApexCharacter, bool LocalOpen, int LocalCasterPlayerKey, Vector LocalHurPos, CommonSignMgr* LocalSignMgr, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, ApexPlayerController* CallFunc_GetApexPlayerController_ReturnValue, ApexCharacter* CallFunc_GetApexCharacter_ReturnValue, int CallFunc_CreateSignForSelf_ReturnValue, bool CallFunc_IsParnterOrSelf_Result, GameStateBase* CallFunc_GetGameState_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue, ApexGameState* K2Node_DynamicCast_AsApex_Game_State, bool K2Node_DynamicCast_bSuccess, CommonSignMgr* CallFunc_GetCommonSignMgr_ReturnValue);// 0x43841ec
	void PopSelffromManager(bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x43841ec
	void SwitchUISignOnHead(bool bOpen, int CallFunc_CreatDecoyHeadWidget_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, ApexGameState* K2Node_DynamicCast_AsApex_Game_State, bool K2Node_DynamicCast_bSuccess, CommonSignMgr* CallFunc_GetCommonSignMgr_ReturnValue);// 0x43841ec
	void ClearState(bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void IsParnterOrSelf(out bool Result, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_IsAlive_ReturnValue, bool CallFunc_IsTeammate_ReturnValue, bool CallFunc_IsCharacterAutonomousProxyOrObViewTarget_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x43841ec
	void RemoveOutLineControlEffect(int Temp_int_Array_Index_Variable, OutlineWorldSubSystem* CallFunc_GetOutlineWorldSubSystem_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_GetEnemyRimEffectId_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x43841ec
	void SwitchOutlineControlEffect(bool bControl, int Temp_int_Variable, int Temp_int_Variable, OutlineWorldSubSystem* CallFunc_GetOutlineWorldSubSystem_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, int K2Node_Select_Default, int CallFunc_Array_Get_Item);// 0x43841ec
	void PushSelfToManager(bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x43841ec
	void OpenControlUI(Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, ApexMirageCharacter* K2Node_DynamicCast_AsApex_Mirage_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocalControlled_ReturnValue);// 0x43841ec
	void StopMoveToScreen();// 0x43841ec
	void MoveToScreen(bool bMove, bool CallFunc_NotEqual_BoolBool_ReturnValue);// 0x43841ec
	void DuplicatedDecoyInfo_Server(enum EDecoyType, enum EIntialEvent, float DecoyLifeTime, int DecoyHP, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x43841ec
	void InitSkin(ApexCharacter* CallFunc_GetSkinParent_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess);// 0x43841ec
	void OnFinishCallback_63ECDBE34CEDE95A6464BB950C49850C(ApexCharacterBase* UpdateCharacter);// 0x43841ec
	void OnFinishCallback_A68D6B0A4AD84F1A98B891936E4EFEB9(ApexCharacterBase* UpdateCharacter);// 0x43841ec
	void OnFinishCallback_E21D647F402EE719FED1E9ABAA4C2560(ApexCharacterBase* UpdateCharacter);// 0x43841ec
	void OnFinish_0D9C48E64F789D31BC348A842EE4738F();// 0x43841ec
	void OnFinishCallback_06D7A86C468FBE65DA514DA56520E942(ApexCharacterBase* UpdateCharacter);// 0x43841ec
	void StartAiMoveOnSerer(Vector MoveToScreenLoc);// 0x43841ec
	void OnSwitchPossesState(bool bPossesed);// 0x43841ec
	void SwitchControlEffectOnselfAndPartner(bool NeedFlash);// 0x43841ec
	void ReceiveEndPlay(byte EndPlayReason);// 0x43841ec
	void BindEventsOnServer();// 0x43841ec
	void OnTakeDamaged(Actor* DamagedActor, float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x43841ec
	void Broadcast_OnClientDie(enum DieReason);// 0x43841ec
	void DealBeHurtEffect(Vector Pos, int CasterPlayerKey);// 0x43841ec
	void OnRepDecoySourceTypeFromServer();// 0x43841ec
	void OnHitByShootWeaponSpawnEffect(Vector ImpactPoint, Vector ImportNormal, bool IsTeammate);// 0x43841ec
	void FlashOnSwitchControl(bool NeedFlash);// 0x43841ec
	void FlashOnHit();// 0x43841ec
	void Flash(bool bLoop);// 0x43841ec
	void OnDie(enum DieReason);// 0x43841ec
	void BroadCastDieCrushed();// 0x43841ec
	void DieTimer(float LifeTime);// 0x43841ec
	void TimeOver();// 0x43841ec
	void SwitchControlEffect(bool Possed);// 0x43841ec
	void AIMove(Vector Loc);// 0x43841ec
	void BroadCastSwitchControllEffect();// 0x43841ec
	void FlashOnDead();// 0x43841ec
	void SwitchPossesedUIVisible(bool bEable);// 0x43841ec
	void OnRepPossedByOwnerFromServer();// 0x43841ec
	void DealPossedState(bool bEable);// 0x43841ec
	void MoveToLocation();// 0x43841ec
	void SpawnMoveToTargetEffect(Vector MoveToLoc);// 0x43841ec
	void DieColseUI();// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void OnMirageCharacterOnRep_Owner();// 0x43841ec
	void OnLoadAnimClassAsync(AsyncLoaderBase* Loader);// 0x43841ec
	void BP_OnMainTownControllerUpdateOutlineOverrideId(bool bEnter);// 0x43841ec
	void UpdateHeadUI();// 0x43841ec
	void BP_UpdateDecoyHeadUI();// 0x43841ec
	void ExecuteUbergraph_Character_Mirage_Decoy_BP_New(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, ApexCharacterBase* K2Node_CustomEvent_UpdateCharacter, delegate K2Node_CreateDelegate_OutputDelegate, ApexCharacterBase* Temp_object_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, delegate K2Node_CreateDelegate_OutputDelegate, const delegate Temp_delegate_Variable, bool CallFunc_HasAuthority_ReturnValue, Vector K2Node_CustomEvent_MoveToScreenLoc, bool K2Node_Event_bPossesed, bool K2Node_CustomEvent_NeedFlash, bool CallFunc_IsParnterOrSelf_Result, byte K2Node_Event_EndPlayReason, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, Actor* K2Node_CustomEvent_DamagedActor, float K2Node_CustomEvent_Damage, const DamageType* K2Node_CustomEvent_DamageType, Controller* K2Node_CustomEvent_InstigatedBy, Actor* K2Node_CustomEvent_DamageCauser, bool CallFunc_GetApexcharacterByCauser_bSuceed, APGameCharacter_BP_C* CallFunc_GetApexCharacterByCauser_APCharacter, Controller* CallFunc_GetController_ReturnValue, ApexPlayerController* K2Node_DynamicCast_AsApex_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GetCauserIsPartnerOrself_bValue, enum K2Node_CustomEvent_DieReason, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_PlayAnimMontage_ReturnValue, Vector K2Node_CustomEvent_Pos, int K2Node_CustomEvent_CasterPlayerKey, Vector CallFunc_RebaseZeroOriginOntoLocal_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Actor* CallFunc_GetOwner_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsCharacterAutonomousProxyOrObViewTarget_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_PlayAudio_ID, int CallFunc_PlayAudio_ID, ApexCharacterBase* Temp_object_Variable, Vector K2Node_Event_ImpactPoint, Vector K2Node_Event_ImportNormal, bool K2Node_Event_IsTeammate, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_CustomEvent_NeedFlash, bool CallFunc_BooleanAND_ReturnValue, interface classNone CallFunc_InvisibleEffectWithDither_TaskOwner_CastInput, GameplayTask_InvisibleEffectWithDither* CallFunc_InvisibleEffectWithDither_ReturnValue, bool CallFunc_IsValid_ReturnValue, ApexCharacterBase* Temp_object_Variable, bool CallFunc_IsParnterOrSelf_Result, bool CallFunc_HasAuthority_ReturnValue, interface classNone CallFunc_InvisibleEffectWithDither_TaskOwner_CastInput, GameplayTask_InvisibleEffectWithDither* CallFunc_InvisibleEffectWithDither_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool K2Node_Event_bLoop, interface classNone CallFunc_InvisibleEffectWithDither_TaskOwner_CastInput, GameplayTask_InvisibleEffectWithDither* CallFunc_InvisibleEffectWithDither_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Event_DieReason, ApexCharacterBase* K2Node_CustomEvent_UpdateCharacter, float K2Node_CustomEvent_LifeTime, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, ApexCharacterBase* K2Node_CustomEvent_UpdateCharacter, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_CustomEvent_Possed, bool CallFunc_IsParnterOrSelf_Result, bool CallFunc_CanFlash_Can, bool CallFunc_CanFlash_Can, bool CallFunc_CanFlash_Can, Vector K2Node_CustomEvent_Loc, bool CallFunc_HasState_ReturnValue, float CallFunc_VSizeXY_ReturnValue, float CallFunc_FClamp_ReturnValue, float K2Node_Select_Default, interface classNone CallFunc_AexTaskMoveToLocation_TaskOwner_CastInput, GameplayTask_MoveToLocation* CallFunc_AexTaskMoveToLocation_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Array_Index_Variable, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, interface classNone CallFunc_InvisibleEffectWithDither_TaskOwner_CastInput, GameplayTask_InvisibleEffectWithDither* CallFunc_InvisibleEffectWithDither_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_PostEvent_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_PostEvent_ReturnValue, bool CallFunc_IsClientViewTargetOrAutonomous_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_CustomEvent_bEable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_CustomEvent_bEable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Character_Mirage_BP_C* K2Node_DynamicCast_AsCharacter_Mirage_BP, bool K2Node_DynamicCast_bSuccess, Character_Mirage_BP_C* K2Node_DynamicCast_AsCharacter_Mirage_BP, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_FindMoveToScreenCenterLoc_ReturnValue, Vector K2Node_CustomEvent_MoveToLoc, Vector CallFunc_RebaseLocalOriginOntoZero_ReturnValue, Vector CallFunc_RebaseZeroOriginOntoLocal_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacterBase* Temp_object_Variable, bool CallFunc_IsValid_ReturnValue, Character_Mirage_BP_C* K2Node_DynamicCast_AsCharacter_Mirage_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsObedInCurrentClient_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, ApexCharacterBase* K2Node_CustomEvent_UpdateCharacter, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GetIsDied_ReturnValue, bool CallFunc_IsValid_ReturnValue, const delegate Temp_delegate_Variable, bool CallFunc_HasAuthority_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, int Temp_int_Loop_Counter_Variable, const delegate Temp_delegate_Variable, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, const delegate Temp_delegate_Variable, bool CallFunc_IsAIControllerd_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_HasPerkPingEnemyTag_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, SkeletalMeshAsync* CallFunc_SetAnimClassAsync_ReturnValue, bool CallFunc_IsTeammateWithOwner_IsTeammate, bool K2Node_Event_bEnter, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Array_Add_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x43841ec

--------------------------------
Class: GameplayTask_MoveToLocation.GameplayTask.Object
	delegate OnFinish;//[Offset: 0x60, Size: 0x10]
	void GameplayTask_MoveToLocationDelegate__DelegateSignature();// 0x43841ec
	static GameplayTask_MoveToLocation* AexTaskMoveToLocation(interface classNone TaskOwner, Character* InCharacter, float InMaxMoveTime, Vector InMoveToLoc, float InDisTollerance, float BaseSpeed, CurveFloat* InSpeeCurve, const byte Priority);// 0x3e40ff8

--------------------------------
Class: OutlineWorldSubSystem.ApexWorldSubsystem.WorldSubsystem.Subsystem.Object
	void SubtractActorEffectTallyWithType(Actor* Target, enum SourceType, enum OutlineType, bool bIsOccluder);// 0x3cdbbc0
	void SubtractActorEffectTally(Actor* Target, enum SourceType, int ConfigIdx, bool bIsOccluder);// 0x3cdba74
	void SetActorMarkerCompEnemyMask(Actor* Target, bool bInEnemyMask);// 0x3cdb81c
	void RemoveActorMarkerComps(Actor* Target, out const PrimitiveComponent*[] Comps, bool bIsOccluder);// 0x3cdc4e4
	void RemoveActorMarkerComp(Actor* Target, PrimitiveComponent* Comp, bool bIsOccluder);// 0x3cdc614
	void RemoveActorEffectWithType(Actor* Target, enum SourceType, enum OutlineType, bool bIsOccluder);// 0x3cdc0f8
	void RemoveActorEffect(Actor* Target, enum SourceType, int ConfigIdx, bool bIsOccluder);// 0x3cdbfac
	void RemoveActorAllEffects(Actor* Target, bool bIsOccluder);// 0x3cdb9ac
	void RemoveActor(Actor* Target, bool bIsOccluder);// 0x3cdb8e4
	void PlusActorEffectTallyWithType(Actor* Target, enum SourceType, enum OutlineType, bool bIsOccluder);// 0x3cdbe5c
	void PlusActorEffectTally(Actor* Target, enum SourceType, int ConfigIdx, bool bIsOccluder);// 0x3cdbd10
	bool IsActorOutlineSeenThroughSmoke(Actor* Target);// 0x3cdb570
	bool IsActorHasEffect(Actor* Target, enum SourceType, int ConfigIdx);// 0x3cdb5f8
	static OutlineWorldSubSystem* GetOutlineWorldSubSystem(Object* ContextObject);// 0x3cdcb34
	static int GetEnemyRimEffectId();// 0x3cdcb14
	int GetActorCountTally(Actor* Target, enum SourceType, int ConfigIdx);// 0x3cdb70c
	bool AddActorMarkerCompsNotRefresh(Actor* Target, out const PrimitiveComponent*[] Comps);// 0x3cdc954
	void AddActorMarkerComps(Actor* Target, out const PrimitiveComponent*[] Comps, bool bIsOccluder);// 0x3cdc71c
	bool AddActorMarkerCompNotRefresh(Actor* Target, PrimitiveComponent* Comp);// 0x3cdca44
	void AddActorMarkerComp(Actor* Target, PrimitiveComponent* Comp, bool bIsOccluder);// 0x3cdc84c
	void AddActorEffectWithType(Actor* Target, enum SourceType, enum OutlineType, bool bIsOccluder);// 0x3cdc394
	void AddActorEffect(Actor* Target, enum SourceType, int ConfigIdx, bool bIsOccluder);// 0x3cdc248

--------------------------------
Class: SubModelSysComponent.ActorComponent.Object
	FName ConfigTableName;//[Offset: 0xf0, Size: 0x8]
	FString TableMeshPathName;//[Offset: 0xf8, Size: 0x10]
	FString TableMeshIndexName;//[Offset: 0x108, Size: 0x10]
	FString TableSocketName;//[Offset: 0x118, Size: 0x10]
	FString TableOverrideMatName;//[Offset: 0x128, Size: 0x10]
	FString TableABPName;//[Offset: 0x138, Size: 0x10]
	FString TableAnimName;//[Offset: 0x148, Size: 0x10]
	FString TableFollowSkinChange;//[Offset: 0x158, Size: 0x10]
	<int,SubModelNames> TaskId2SubModels;//[Offset: 0x1c8, Size: 0x50]
	delegate OnSubModelChange;//[Offset: 0x218, Size: 0x10]
	int ShowSubModelById(FString ID, FName[] SubModels, SceneComponent* ParentComponent, bool ShouldLoop, bool AutoMath, byte LightChannelMask, FName ParentComponentByID, FName ParentComponentByIDMeshIndex, Vector SubModelLocation, Vector SubModelRotation, Vector SubModelScale);// 0x3dc6dbc
	void ResetSubModelMat(Actor* TargetActor);// 0x3dc71b0
	static void ResetSubModelAnimByComponent(SceneComponent* TargetComp, float NewPosition);// 0x3dc6a34
	void RemoveSubModelById(FString ID, Actor* TargetActor, bool OutLog);// 0x3dc6aec
	void HideSubModelById(FString ID, Actor* TargetActor, bool bStopAnim);// 0x3dc6c54

--------------------------------
Class: SubModelNames
	FName[] ModelNames;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ApexCharacterAvatarSystem.ApexWorldSubsystem.WorldSubsystem.Subsystem.Object
	PlayerSocketNames PlayerSocketNames;//[Offset: 0x88, Size: 0x38]
	<enum,class AnimInstance> DefaultFPPAnimInstances;//[Offset: 0xc0, Size: 0x50]
	<enum,class AnimInstance> DefaultTPPAnimInstances;//[Offset: 0x110, Size: 0x50]
	delegate OnDynamicSkinChange;//[Offset: 0x160, Size: 0x10]
	<FName,SceneComponent*> MeshComponents;//[Offset: 0x170, Size: 0x50]
	<enum,FName> MeshMode2TableNames;//[Offset: 0x1c0, Size: 0x50]
	<enum,DataTable*> MeshMode2Tables;//[Offset: 0x210, Size: 0x50]
	static ApexCharacterAvatarSystem* GetApexAvatarSystem(const Object* WorldContextObject);// 0x399819c
	void ChangeAvatar(Character* TargetCharacter, FName SkinId);// 0x39980e0

--------------------------------
Class: PlayerSocketNames
	FName HatSocketName;//[Offset: 0x0, Size: 0x8]
	FName FaceSocketName;//[Offset: 0x8, Size: 0x8]
	FName NeckSocketName;//[Offset: 0x10, Size: 0x8]
	FName ArmSocketName;//[Offset: 0x18, Size: 0x8]
	FName BreastSocketName;//[Offset: 0x20, Size: 0x8]
	FName WaistSocketName;//[Offset: 0x28, Size: 0x8]
	FName FeetSocketName;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: Octane_PassiveSkill_BP_C.SkillActorBase.DynamicMovementActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4d8, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4e0, Size: 0x8]
	float curCD;//[Offset: 0x4e8, Size: 0x4]
	float maxCD;//[Offset: 0x4ec, Size: 0x4]
	float PlayerMaxHP;//[Offset: 0x4f0, Size: 0x4]
	float RecoverySpeed;//[Offset: 0x4f4, Size: 0x4]
	float PrevHp;//[Offset: 0x4f8, Size: 0x4]
	float PreShieldValue;//[Offset: 0x4fc, Size: 0x4]
	float TimeRecoveryFromLastTick;//[Offset: 0x500, Size: 0x4]
	bool IsOnRegenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 0x1]
	float RecoverUpdateInterleave;//[Offset: 0x508, Size: 0x4]
	float TimeRecoveryHealingFromLastTick;//[Offset: 0x50c, Size: 0x4]
	float TimeRecoveryHealthFromLastTick;//[Offset: 0x510, Size: 0x4]
	bool HealthRecoverFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 0x1]
	bool RecoverSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x515, Size: 0x1]
	bool IsInInterruptCDOnLastTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x516, Size: 0x1]
	bool IsDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x517, Size: 0x1]
	float AccumlatedRecoveryHP;//[Offset: 0x518, Size: 0x4]
	void IsDisable(out bool Disable, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsDisableTriggerSkill_Result, Character_Octane_BP_C* K2Node_DynamicCast_AsCharacter_Octane_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsSilenced_Silenced, bool CallFunc_CheckPerk100902003Pause_Disable, bool CallFunc_IsBleedingOut_NewParam, bool CallFunc_IfRecvDamage_HasDamage, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x43841ec
	void IsDisableTriggerSkill(out bool Result, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsDisableTriggerSkill_ReturnValue);// 0x43841ec
	void InternalRecovery(float TargetValue, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character);// 0x43841ec
	void IsSilenced(out bool Silenced, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, bool CallFunc_IsSilenced_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void IsBleedingOut(out bool NewParam, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasState_ReturnValue);// 0x43841ec
	void AddAccumlatedRecoveryHPToTrakerManager(bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetLegendID_ReturnValue, TrackerData K2Node_MakeStruct_TrackerData);// 0x43841ec
	void CheckStimSkillExecCorrection(float LocalHealth, ApexCharacter* LocalOwner, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_MakeLiteralFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, float CallFunc_GetCharacterHealth_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue);// 0x43841ec
	void RestartCD(ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, float CallFunc_GetCharacterHealthHealing_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x43841ec
	void FloatWayBiger(float NewParam, float NewParam1, out bool NewParam2, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x43841ec
	void AddPlayerHealth(float Heal, bool ForceSendTracker, float LocalFinalHP, float LocalCurrHP, float LocalAddHP, ApexCharacter* LocalCharacter, float CallFunc_GetCharacterHealth_ReturnValue, float CallFunc_GetCharacterHealthMax_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character);// 0x43841ec
	void SetHealthHealing(float fHealthHealing, float AddedHP, float TargetHealthHealing, ApexCharacter* Character, float CharacterHealthHealing, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue);// 0x43841ec
	void PrintInfo(ApexCharacter* ApexCharacter, bool IsPrint, FString CallFunc_Conv_FloatToString_ReturnValue, float CallFunc_GetCharacterHealth_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x43841ec
	void FinishCurLoop(ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, float CallFunc_GetCharacterHealth_ReturnValue, float CallFunc_GetCharacterShield_ReturnValue);// 0x43841ec
	void InitParamters(float maxCD, float recovSpeed, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, float CallFunc_GetCharacterHealthMax_ReturnValue, float CallFunc_GetCharacterShield_ReturnValue, float CallFunc_GetCharacterHealth_ReturnValue);// 0x43841ec
	void GetOwningCharacter(out ApexCharacter* AsApex Character, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess);// 0x43841ec
	void IfRecvDamage(out bool HasDamage, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, float CallFunc_GetCharacterHealth_ReturnValue, float CallFunc_GetCharacterShield_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x43841ec
	void OnRecvDamageAction();// 0x43841ec
	void RecoverAction(float TickRate, float PrevHealth, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FMod_Remainder, int CallFunc_FMod_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, float CallFunc_FMod_Remainder, int CallFunc_FMod_ReturnValue, float CallFunc_GetCharacterHealth_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, float CallFunc_GetCharacterHealthMax_ReturnValue, float CallFunc_GetCharacterHealth_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x43841ec
	void SkillLoop(float TickRate, bool CallFunc_IsDisable_Disable, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x43841ec
	void OnOctaneTakeDamage(Actor* DamagedActor, float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x43841ec
	void OnSkillReleased(int SkillIndex, bool bReleased);// 0x43841ec
	void OnSkillJumpPhase(int SkillIndex, int PhaseIndex, bool Reuslt);// 0x43841ec
	void ReceiveEndPlay(byte EndPlayReason);// 0x43841ec
	void ReceiveTick(float DeltaSeconds);// 0x43841ec
	void OnPlayerGainHPByPassive(float HpRecovered);// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void OnPlayerTakeDamage(Actor* DamagedActor, float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x43841ec
	void ExecuteUbergraph_Octane_PassiveSkill_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, float CallFunc_GetLifeSpan_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsProtectedByDeathTotem_ReturnValue, bool CallFunc_HasState_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, Actor* K2Node_CustomEvent_DamagedActor, float K2Node_CustomEvent_Damage, const DamageType* K2Node_CustomEvent_DamageType, Controller* K2Node_CustomEvent_InstigatedBy, Actor* K2Node_CustomEvent_DamageCauser, int K2Node_CustomEvent_SkillIndex, bool K2Node_CustomEvent_bReleased, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int K2Node_CustomEvent_SkillIndex, int K2Node_CustomEvent_PhaseIndex, bool K2Node_CustomEvent_Reuslt, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, byte K2Node_Event_EndPlayReason, float K2Node_Event_DeltaSeconds, float K2Node_CustomEvent_HpRecovered, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, bool CallFunc_IsValid_ReturnValue, Actor* K2Node_CustomEvent_DamagedActor, float K2Node_CustomEvent_Damage, const DamageType* K2Node_CustomEvent_DamageType, Controller* K2Node_CustomEvent_InstigatedBy, Actor* K2Node_CustomEvent_DamageCauser);// 0x43841ec

--------------------------------
Class: Character_Bangalore_BP_C.APGameCharacter_BP_C.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2070, Size: 0x8]
	bool HasSomke;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2078, Size: 0x1]
	float ResetSomkeBombTime;//[Offset: 0x207c, Size: 0x4]
	TimerHandle ResetHasSomkeBombTimer;//[Offset: 0x2080, Size: 0x8]
	void ResetHasSomkeBomb();// 0x43841ec
	void OnSpawnSomkeBombs(bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void ExecuteUbergraph_Character_Bangalore_BP(int EntryPoint);// 0x43841ec

--------------------------------
Class: Phantom_Braid_BP_C.PhantomRecordActor.SkillActorBase.DynamicMovementActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x650, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x658, Size: 0x8]
	BP_Time_Trail_C* TrailObj;//[Offset: 0x660, Size: 0x8]
	void BPSpawnTppEffect(ApexCharacter* Character, SceneComponent* RootComp, bool bShow, const delegate Temp_delegate_Variable, Transform CallFunc_MakeTransform_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_Time_GhostTrail_C* CallFunc_FinishSpawningActor_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAtLocationAsync_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_Time_Trail_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x43841ec
	void SpawnTppEffect(bool bEnabled, SceneComponent* RootComp);// 0x43841ec
	void ExecuteUbergraph_Phantom_Braid_BP(int EntryPoint, const delegate Temp_delegate_Variable, bool K2Node_Event_bEnabled, SceneComponent* K2Node_Event_RootComp, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, bool CallFunc_IsValid_ReturnValue, const delegate Temp_delegate_Variable, float CallFunc_Subtract_FloatFloat_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue);// 0x43841ec

--------------------------------
Class: PhantomRecordActor.SkillActorBase.DynamicMovementActor.Actor.Object
	float BraidTime;//[Offset: 0x4d4, Size: 0x4]
	float RecordInterval;//[Offset: 0x4d8, Size: 0x4]
	float MaxRecordSeconds;//[Offset: 0x4dc, Size: 0x4]
	float MaxRecordDistance;//[Offset: 0x4e0, Size: 0x4]
	float MaxBraidDistanceDying;//[Offset: 0x4e4, Size: 0x4]
	bool bUseDistanceToRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 0x1]
	bool bHealthAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 0x1]
	float HealthCheckVal;//[Offset: 0x4ec, Size: 0x4]
	float HealthMaxVal;//[Offset: 0x4f0, Size: 0x4]
	float HealthAddInternal;//[Offset: 0x4f4, Size: 0x4]
	float HealthAddVal;//[Offset: 0x4f8, Size: 0x4]
	int PerkID;//[Offset: 0x4fc, Size: 0x4]
	float ShieldCheckValue;//[Offset: 0x500, Size: 0x4]
	float ShieldMaxValue;//[Offset: 0x504, Size: 0x4]
	float ShieldAddInternal;//[Offset: 0x508, Size: 0x4]
	float ShieldAddVal;//[Offset: 0x50c, Size: 0x4]
	bool UseTracerBraidType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]
	bool UseFreeCameraType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511, Size: 0x1]
	enum RecordStatus;//[Offset: 0x528, Size: 0x1]
	float UltimateDamage;//[Offset: 0x52c, Size: 0x4]
	float UltimateFixTeammate;//[Offset: 0x530, Size: 0x4]
	PhantomRecordNodeData[] PathList;//[Offset: 0x538, Size: 0x10]
	PhantomRecordNodeData[] RepPathList;//[Offset: 0x548, Size: 0x10]
	PhantomBraidSyncInfo BraidSyncInfo;//[Offset: 0x558, Size: 0x20]
	void StartBraid(float MoveSpeed, float MinMoveDuration, float MaxMoveDuration);// 0x3cf308c
	void SpawnTppEffect(bool bEnabled, SceneComponent* RootComp);// 0x43841ec
	void ServerStopBraidSkill();// 0x3cf318c
	void ReportPhantomFlow();// 0x3cf2f9c
	void OnRep_BraidSyncInfo();// 0x3cf3078
	void OnCharacterPawnStateChange(enum curPawnState, bool bIsEnter);// 0x3cf2fb0
	void ClientCallStopBraidSkill();// 0x3cf31a8

--------------------------------
Class: PhantomRecordNodeData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector OwnerVel;//[Offset: 0x18, Size: 0xc]
	float RecordWolrdTime;//[Offset: 0x24, Size: 0x4]
	bool IsOnMovable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	PrimitiveComponent* MovementBase;//[Offset: 0x2c, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x34, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: PhantomBraidSyncInfo
	PhantomRecordNodeData[] RepPathList;//[Offset: 0x0, Size: 0x10]
	float MoveSpeed;//[Offset: 0x10, Size: 0x4]
	float MinMoveDuration;//[Offset: 0x14, Size: 0x4]
	float MaxMoveDuration;//[Offset: 0x18, Size: 0x4]
	enum RecordStatus;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: BP_Time_Trail_C.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x250, Size: 0x8]
	ParticleSystemAsync* P_Trail;//[Offset: 0x258, Size: 0x8]
	ParticleSystemAsync* P_TrailWide;//[Offset: 0x260, Size: 0x8]
	void UnInit(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void Init(SceneComponent* AttachToComponent, bool bNeedTrail, bool CallFunc_IsValid_ReturnValue, const delegate Temp_delegate_Variable, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue);// 0x43841ec

--------------------------------
Class: BP_Time_GhostTrail_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x250, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x258, Size: 0x8]
	SceneComponent* ComponentToFollow;//[Offset: 0x260, Size: 0x8]
	ParticleSystemAsync* TempTrail;//[Offset: 0x268, Size: 0x8]
	float TempElapseTime;//[Offset: 0x270, Size: 0x4]
	float Duration;//[Offset: 0x274, Size: 0x4]
	ParticleSystem* Emitter;//[Offset: 0x278, Size: 0x28]
	void UnInit(bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void Init(SceneComponent* ComponentToFollow, const delegate Temp_delegate_Variable, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void ReceiveTick(float DeltaSeconds);// 0x43841ec
	void ExecuteUbergraph_BP_Time_GhostTrail(int EntryPoint, float K2Node_Event_DeltaSeconds, bool CallFunc_IsValid_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue);// 0x43841ec

--------------------------------
Class: Wraith_TriggerSpawner_BP_C.WraithTriggerSpawner.SkillActorBase.DynamicMovementActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x540, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x548, Size: 0x8]
	void ReceiveOnTriggerSucceed();// 0x43841ec
	void ExecuteUbergraph_Wraith_TriggerSpawner_BP(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, ApexGameState* K2Node_DynamicCast_AsApex_Game_State, bool K2Node_DynamicCast_bSuccess, GameStatisticsManager* CallFunc_GetGameStatisticsManager_ReturnValue, UTSkill* CallFunc_GetSkill_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x43841ec

--------------------------------
Class: WraithTriggerSpawner.SkillActorBase.DynamicMovementActor.Actor.Object
	TWraithTriggerBase*[] Triggers;//[Offset: 0x4d8, Size: 0x10]
	int[] ArrPriorityIndex;//[Offset: 0x4e8, Size: 0x10]
	FText GameChatName;//[Offset: 0x4f8, Size: 0x18]
	int DistTipsPerkID;//[Offset: 0x510, Size: 0x4]
	TWraithTriggerBase* CurTrigger;//[Offset: 0x518, Size: 0x8]
	void ServerOnTrigger(int TriggerIndex, Actor* TriggerActor, float TriggerBeginTime);// 0x3ead7e4
	void ReceiveOnTriggerSucceed();// 0x43841ec
	void ClientOnTriggerSucceed(int TriggerIndex, Actor* TriggerActor, bool bNeedTipDist);// 0x3ead6d0
	void ClientOnTriggerFailure(int TriggerIndex, Actor* TriggerActor);// 0x3ead608

--------------------------------
Class: TWraithTriggerBase.Object
	float Duration;//[Offset: 0x28, Size: 0x4]
	float CD;//[Offset: 0x2c, Size: 0x4]
	bool IgnoreBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float EffectiveMaxDistance;//[Offset: 0x34, Size: 0x4]
	float EffectiveMinDistance;//[Offset: 0x38, Size: 0x4]
	float StayTime;//[Offset: 0x3c, Size: 0x4]
	byte[] QueryObjectTypes;//[Offset: 0x40, Size: 0x10]
	int[] EventIDList;//[Offset: 0x50, Size: 0x10]
	Actor* Owner;//[Offset: 0x60, Size: 0x8]
	ApexCharacter* OwnerCharacter;//[Offset: 0x68, Size: 0x8]
	Actor*[] CacheActors;//[Offset: 0x70, Size: 0x10]
	<Actor*,float> CacheActorsStayTime;//[Offset: 0x80, Size: 0x50]
	<Actor*,float> ActorsStayTime;//[Offset: 0xd0, Size: 0x50]

--------------------------------
Class: Character_LifeLine_BP_C.APGameCharacter_BP_C.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2070, Size: 0x8]
	Lifeline_CarePackage_BP_C*[] SpawnedCarePackage;//[Offset: 0x2078, Size: 0x10]
	int CarePackageLimit;//[Offset: 0x2088, Size: 0x4]
	void AddCarePackage(Lifeline_CarePackage_BP_C* InCarePackage, bool CallFunc_HasAuthority_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, Lifeline_CarePackage_BP_C* CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue);// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void ExecuteUbergraph_Character_LifeLine_BP(int EntryPoint);// 0x43841ec

--------------------------------
Class: Lifeline_CarePackage_BP_C.Base_CarePackage_BP_C.CarePackage.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x860, Size: 0x8]
	ApexNavMeshDynamicObstacleComponent* ApexNavMeshDynamicObstacle1;//[Offset: 0x868, Size: 0x8]
	void ReceiveBeginPlay();// 0x43841ec
	void ExecuteUbergraph_Lifeline_CarePackage_BP(int EntryPoint, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, MainTownGameStateBase* K2Node_DynamicCast_AsMain_Town_Game_State_Base, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, ApexPlayerController* K2Node_DynamicCast_AsApex_Player_Controller, bool K2Node_DynamicCast_bSuccess, ApexCharacter* CallFunc_GetOwnedApexCharacter_ReturnValue, Character_LifeLine_BP_C* K2Node_DynamicCast_AsCharacter_Life_Line_BP, bool K2Node_DynamicCast_bSuccess);// 0x43841ec

--------------------------------
Class: Base_CarePackage_BP_C.CarePackage.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x540, Size: 0x8]
	CapsuleComponent* DoorBlockCapsule;//[Offset: 0x548, Size: 0x8]
	SphereComponent* CarePackageSelfBlock;//[Offset: 0x550, Size: 0x8]
	ApexNavMeshDynamicObstacleComponent* ApexNavMeshDynamicObstacle;//[Offset: 0x558, Size: 0x8]
	CapsuleComponent* PickUpBlockCapsule;//[Offset: 0x560, Size: 0x8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x568, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x570, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x578, Size: 0x8]
	AkComponent* Ak;//[Offset: 0x580, Size: 0x8]
	ParticleSystemComponent* Smoke1;//[Offset: 0x588, Size: 0x8]
	ParticleSystemComponent* Drag;//[Offset: 0x590, Size: 0x8]
	ParticleSystemComponent* engine1;//[Offset: 0x598, Size: 0x8]
	byte ServerTimeline__Direction_D70D8CFB4B28445A459858BCD422DAE8;//[Offset: 0x5a0, Size: 0x1]
	TimelineComponent* ServerTimeline;//[Offset: 0x5a8, Size: 0x8]
	byte ClinetTimeline__Direction_2A1CF2C944BE844B051F2C824AFDEABD;//[Offset: 0x5b0, Size: 0x1]
	TimelineComponent* ClinetTimeline;//[Offset: 0x5b8, Size: 0x8]
	float CreateDelayTime;//[Offset: 0x5c0, Size: 0x4]
	float CanCDTime;//[Offset: 0x5c4, Size: 0x4]
	float MaxWaitTime;//[Offset: 0x5c8, Size: 0x4]
	bool HasCDStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 0x1]
	float CheckRadius;//[Offset: 0x5d0, Size: 0x4]
	class CameraShake* ShakeBP;//[Offset: 0x5d8, Size: 0x8]
	float ShakeOuterRadius;//[Offset: 0x5e0, Size: 0x4]
	delegate OnNotifyCoolDown;//[Offset: 0x5e8, Size: 0x10]
	float AnimationStartTime;//[Offset: 0x5f8, Size: 0x4]
	AnimSequence* LandAnim;//[Offset: 0x600, Size: 0x28]
	AnimSequence* LandIdleAnim;//[Offset: 0x628, Size: 0x28]
	AkAudioEvent* DropPod_Open;//[Offset: 0x650, Size: 0x28]
	AkAudioEvent* DropPod_Burst;//[Offset: 0x678, Size: 0x28]
	AkAudioEvent* DropPod_Impact;//[Offset: 0x6a0, Size: 0x28]
	AkAudioEvent* DropPod_InitialLaunch;//[Offset: 0x6c8, Size: 0x28]
	AkAudioEvent* DropPod_SteamSizzle;//[Offset: 0x6f0, Size: 0x28]
	bool IsBeginLandingSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x718, Size: 0x1]
	class BP_PackageLandingCircle_C* LandingCircleClass;//[Offset: 0x720, Size: 0x8]
	MaterialInstance* Mat_Soft;//[Offset: 0x728, Size: 0x28]
	AkAudioEvent* DropPod_Incoming_Fly;//[Offset: 0x750, Size: 0x28]
	ParticleSystemAsync* BeforeLandingSmoke_Async;//[Offset: 0x778, Size: 0x8]
	float ServerPalyAnimationTime;//[Offset: 0x780, Size: 0x4]
	bool EnableServerStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x784, Size: 0x1]
	float LoadParticleDelay;//[Offset: 0x788, Size: 0x4]
	float LoadAudioDelay;//[Offset: 0x78c, Size: 0x4]
	ParticleSystem* LightParticle;//[Offset: 0x790, Size: 0x28]
	ParticleSystem* EngineParticle;//[Offset: 0x7b8, Size: 0x28]
	ParticleSystem* DragLoopParticle;//[Offset: 0x7e0, Size: 0x28]
	ParticleSystem* SmokeParticle;//[Offset: 0x808, Size: 0x28]
	bool IsDragActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 0x1]
	int InCommingFlyPlayingID;//[Offset: 0x834, Size: 0x4]
	bool BeginSetDeactive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x838, Size: 0x1]
	float DistanceToPlayer;//[Offset: 0x83c, Size: 0x4]
	Vector LaunchPosition;//[Offset: 0x840, Size: 0xc]
	RandowSpawnItemEntry[] ItemList;//[Offset: 0x850, Size: 0x10]
	void LaunchTombBox(Actor* TmpActor, PlayerTombBox* K2Node_DynamicCast_AsPlayer_Tomb_Box, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetLaunchForce_ForceDir, bool CallFunc_GetLaunchForce_NeedLaunch);// 0x43841ec
	void GetLaunchForce(Vector ActorPos, out Vector ForceDir, out bool NeedLaunch, Vector TmpDir, float ForceValue, const Actor*[] Temp_object_Variable, Vector CallFunc_Subtract_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_Cross_VectorVector_ReturnValue, Vector CallFunc_Cross_VectorVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, Vector CallFunc_Vector_Normal2D_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Vector_IsNearlyZero_ReturnValue);// 0x43841ec
	void TryKillFinisher(DamageEvent CarePackageDamage, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const Actor*[] K2Node_MakeArray_Array, Vector CallFunc_K2_GetActorLocation_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Actor*[] CallFunc_GetPlayerInSphereRange_ActorArr, bool CallFunc_GetPlayerInSphereRange_ReturnValue, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, float CallFunc_TakeDamage_ReturnValue, ApexPlayerState* K2Node_DynamicCast_AsApex_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInFinisher_ReturnValue);// 0x43841ec
	void StartPing(Actor* CallFunc_GetOwner_ReturnValue, ApexPlayerController* K2Node_DynamicCast_AsApex_Player_Controller, bool K2Node_DynamicCast_bSuccess, PingManagerComponent* CallFunc_GetPingManagerComponent_ReturnValue, int CallFunc_StartPingItemFromActorByDS_ReturnValue);// 0x43841ec
	void DestroyBeforeLandingSmoke(bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void GetServerAnimationStartTime(out float NewStartTime, float CallFunc_Add_FloatFloat_ReturnValue);// 0x43841ec
	void ClientTimeLineTraceEvent(int Index);// 0x43841ec
	void LaunchCharacter(Actor* Player, Vector TmpDir, float ForceValue, ApexCharacterBase* K2Node_DynamicCast_AsApex_Character_Base, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetLaunchForce_ForceDir, bool CallFunc_GetLaunchForce_NeedLaunch);// 0x43841ec
	void StrikeActorList(out Actor*[] ActorList, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Greater_IntInt_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsStrike_Interface, bool K2Node_DynamicCast_bSuccess, bool CallFunc_DoesImplementInterface_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x43841ec
	void CheckStrikeObject(bool IsSphere, const byte[] K2Node_MakeArray_Array, Vector CallFunc_K2_GetActorLocation_ReturnValue, const Actor*[] K2Node_MakeArray_Array, Actor*[] CallFunc_SphereOverlapActors_OutActors, bool CallFunc_SphereOverlapActors_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, const byte[] K2Node_MakeArray_Array, Actor*[] CallFunc_CapsuleOverlapActors_OutActors, bool CallFunc_CapsuleOverlapActors_ReturnValue);// 0x43841ec
	void PushPlayerAway(Vector TmpDir, float ForceValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const Actor*[] K2Node_MakeArray_Array, Vector CallFunc_K2_GetActorLocation_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Actor*[] CallFunc_GetPlayerInSphereRange_ActorArr, bool CallFunc_GetPlayerInSphereRange_ReturnValue, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x43841ec
	void SetSmokeActive(bool IsActive);// 0x43841ec
	void SetDragActive(bool IsActive);// 0x43841ec
	void SetEngineActive(bool IsActive);// 0x43841ec
	void ClinetTimeline__FinishedFunc();// 0x43841ec
	void ClinetTimeline__UpdateFunc();// 0x43841ec
	void ClinetTimeline__Smoking__EventFunc();// 0x43841ec
	void ClinetTimeline__Landing__EventFunc();// 0x43841ec
	void ClinetTimeline__SpeedUp__EventFunc();// 0x43841ec
	void ClinetTimeline__IncomingFly__EventFunc();// 0x43841ec
	void ServerTimeline__FinishedFunc();// 0x43841ec
	void ServerTimeline__UpdateFunc();// 0x43841ec
	void OnLoaded_43FAF8DC4C3B047E1B1D0D901833714E(Object* Loaded);// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void BP_OnOpenPackage();// 0x43841ec
	void BP_OnSpawnItem(PickUpWrapperActor* dropItem1, PickUpWrapperActor* dropItem2, PickUpWrapperActor* dropItem3, FString socket1, FString socket2, FString socket3);// 0x43841ec
	void NotifyCoolDown();// 0x43841ec
	void LoadMeshDone(AsyncLoaderBase* Loader);// 0x43841ec
	void DeleteUnOpenLight();// 0x43841ec
	void LoadAudioDone(AsyncLoaderBase* Loader);// 0x43841ec
	void CustomEvent(AsyncLoaderBase* Loader);// 0x43841ec
	void LoadMatDone(AsyncLoaderBase* Loader);// 0x43841ec
	void ExecuteUbergraph_Base_CarePackage_BP(int EntryPoint, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, delegate K2Node_CreateDelegate_OutputDelegate, PickUpWrapperActor* K2Node_Event_dropItem1, PickUpWrapperActor* K2Node_Event_dropItem2, PickUpWrapperActor* K2Node_Event_dropItem3, FString K2Node_Event_socket1, FString K2Node_Event_socket2, FString K2Node_Event_socket3, int Temp_int_Loop_Counter_Variable, FName CallFunc_Conv_StringToName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Object* K2Node_CustomEvent_Loaded, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, ParticleSystemAsync* CallFunc_SpawnEmitterAtLocationAsync_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, const delegate Temp_delegate_Variable, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, const delegate Temp_delegate_Variable, BP_PackageLandingCircle_C* CallFunc_FinishSpawningActor_ReturnValue, SkeletalMeshAsync* CallFunc_PlayAnimationAsync_ReturnValue, const delegate Temp_delegate_Variable, AsyncLoaderBase* K2Node_CustomEvent_Loader, SkeletalMeshAsync* CallFunc_PlayAnimationAsync_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_HasAuthority_ReturnValue, SkeletalMeshAsync* CallFunc_PlayAnimationAsync_ReturnValue, float CallFunc_GetServerAnimationStartTime_NewStartTime, float CallFunc_GetServerAnimationStartTime_NewStartTime, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, AudioEventAsync* CallFunc_PostEventForAkComponentAsync_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_AddActorWorldOffset_SweepHitResult, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, HitResult CallFunc_K2_AddActorWorldOffset_SweepHitResult, HitResult CallFunc_K2_AddActorWorldOffset_SweepHitResult, bool CallFunc_IsValid_ReturnValue, APGameController_BP_C* K2Node_DynamicCast_AsAPGame_Controller_BP, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_K2_GetPawn_ReturnValue, APGameCharacter_BP_C* K2Node_DynamicCast_AsAPGame_Character_BP, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_GetHeadLocation_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, AudioEventAsync* CallFunc_PostEventForAkComponentAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventForAkComponentAsync_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Vector CallFunc_K2_GetActorLocation_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAtLocationAsync_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, AudioEventAsync* CallFunc_PostEventForAkComponentAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventForAkComponentAsync_ReturnValue, const Actor*[] K2Node_MakeArray_Array, Vector CallFunc_K2_GetActorLocation_ReturnValue, Actor*[] CallFunc_GetPlayerInSphereRange_ActorArr, bool CallFunc_GetPlayerInSphereRange_ReturnValue, Actor* CallFunc_Array_Get_Item, byte CallFunc_GetLocalRole_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Object* Temp_object_Variable, bool CallFunc_IsValid_ReturnValue, AnimSequence* K2Node_DynamicCast_AsAnim_Sequence, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetLocalRole_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, Object* CallFunc_LoadAsset_Blocking_ReturnValue, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, int CallFunc_PostAkEvent_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, Object* CallFunc_LoadAsset_Blocking_ReturnValue, MaterialInstance* K2Node_DynamicCast_AsMaterial_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x43841ec
	void OnNotifyCoolDown__DelegateSignature();// 0x43841ec

--------------------------------
Class: ApexNavMeshDynamicObstacleComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x55c, Size: 0xc]
	class NavArea* NavArea;//[Offset: 0x568, Size: 0x8]
	bool bDisableOtherComps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 0x1]

--------------------------------
Class: BP_PackageLandingCircle_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x250, Size: 0x8]
	SphereComponent* Sphere;//[Offset: 0x258, Size: 0x8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x260, Size: 0x8]
	bool HasShowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	float Radius;//[Offset: 0x26c, Size: 0x4]
	float AnimationStartTime;//[Offset: 0x270, Size: 0x4]
	float DestroyTime;//[Offset: 0x274, Size: 0x4]
	AkAudioEvent* CircleSoundEvent;//[Offset: 0x278, Size: 0x28]
	ParticleSystem* LadingEffect;//[Offset: 0x2a0, Size: 0x28]
	void SetShowUI(bool IsShow, Character* CallFunc_GetCharacterOrObViewTargetCharacter_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_BoolBool_ReturnValue);// 0x43841ec
	void ReceiveBeginPlay();// 0x43841ec
	void ReceiveTick(float DeltaSeconds);// 0x43841ec
	void ReceiveDestroyed();// 0x43841ec
	void LoadAudioDone(AsyncLoaderBase* Loader);// 0x43841ec
	void ExecuteUbergraph_BP_PackageLandingCircle(int EntryPoint, const AkExternalSourceInfo[] Temp_struct_Variable, delegate K2Node_CreateDelegate_OutputDelegate, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, float K2Node_Event_DeltaSeconds, Character* CallFunc_GetPlayerCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, Object* CallFunc_LoadAsset_Blocking_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess, int CallFunc_PostEvent_ReturnValue);// 0x43841ec

--------------------------------
Class: MainTownGameStateBase.GameStateBase_TeamMultiLevel.ApexGameState.GameState.GameStateBase.Info.Actor.Object
	float RemainGameTime;//[Offset: 0x86c, Size: 0x4]
	float RemainTimeTipsShowTime;//[Offset: 0x870, Size: 0x4]
	void RemainTimeTipsMulticast();// 0x3c93ffc

--------------------------------
Class: GameStateBase_TeamMultiLevel.ApexGameState.GameState.GameStateBase.Info.Actor.Object
	int playerCount;//[Offset: 0x864, Size: 0x4]
	int TeamCount;//[Offset: 0x868, Size: 0x4]

--------------------------------
